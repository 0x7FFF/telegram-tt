{"version":3,"file":"5769.c88c06a2239f9329d9f0.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.module.scss?16ed","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/util/permanentWebVersion.ts","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/util/primitives/LimitedMap.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/common/EmbeddedStory.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/hooks/useAuthorWidth.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\nimport { selectSendAs, selectTabState } from '../selectors';\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat, ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction, ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { omit, pickTruthy, unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  deleteTopic,\n  updateMessageTranslations,\n  clearMessageTranslation,\n  removeChatFromChatLists,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsServiceChatReady,\n  selectThreadIdFromMessage,\n  selectTopicFromMessage,\n  selectTabState,\n  selectSendAs,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions, isActionMessage,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !message.replyToStoryId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo && !isLocal) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: tabState.activeEmojiInteractions?.length || 0,\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageLocalId: omit(global.fileUploads.byMessageLocalId, [localId.toString()]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (threadInfo.topMessageId === threadId && !chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = newThreadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const currentSendAs = selectSendAs(global, message.chatId);\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(peerId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (currentSendAs?.id === peerId || peerId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message) && !isActionMessage(message)) {\n      global = updateThreadInfo(global, chatId, threadInfo.threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiTypeReplyTo,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceSettings,\n  replaceThreadParam,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectTranslationLanguage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStory,\n  selectViewportIds,\n} from '../../selectors';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport {\n  getMessageOriginalId,\n  getUserFullName, isChatChannel,\n  isDeletedUser, isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport { translate } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, userId: storyUserId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyUserId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyUserId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const replyingToId = !isStoryReply ? selectReplyingToId(global, chatId!, threadId!) : undefined;\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId!, replyingToId) : undefined;\n\n  const replyingToTopId = chat.isForum\n    ? selectThreadTopMessageId(global, chatId!, threadId!)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n  const replyingTo: ApiTypeReplyTo | undefined = replyingToId\n    ? { replyingTo: replyingToId, replyingToTopId }\n    : (isStoryReply ? { userId: storyUserId!, storyId: storyId! } : undefined);\n\n  const params = {\n    ...payload,\n    chat,\n    currentThreadId: threadId!,\n    replyingTo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n  };\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        });\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          });\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyingTo: replyingToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyingTo: replyingToForFirstMessage,\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, draft, shouldForce,\n  } = payload;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  draft.isLocal = true;\n  draft.shouldForce = shouldForce;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (result) {\n    draft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, localOnly, shouldForce,\n  } = payload;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  const newDraft: ApiDraft | undefined = shouldForce ? { shouldForce, text: '' } : undefined;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n      });\n    })();\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyingTo: toThreadId ? { replyingTo: toThreadId, replyingToTopId: toThreadId } : undefined,\n        currentThreadId: toThreadId || MAIN_THREAD_ID,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const originChannelId = selectThreadOriginChat(global, chatId, threadId)?.id;\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, chatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId) || {};\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(threadId);\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingList! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: ApiTypeReplyTo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  currentThreadId: number;\n  groupedId?: string;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  if (params.currentThreadId === undefined) {\n    return;\n  }\n\n  if (params.currentThreadId !== MAIN_THREAD_ID) {\n    if (!params.replyingTo || !('replyingTo' in params.replyingTo)) {\n      params.replyingTo = {\n        replyingTo: params.currentThreadId,\n      };\n    }\n\n    if (!params.replyingTo.replyingTo) {\n      params.replyingTo.replyingTo = params.currentThreadId;\n    }\n    if (params.replyingTo.replyingTo && !params.replyingTo.replyingToTopId) {\n      params.replyingTo.replyingToTopId = params.currentThreadId;\n    }\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n  const isStoriesViewerOpen = Boolean(selectTabState(global, tabId).storyViewer.userId);\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    if (isStoriesViewerOpen) {\n      actions.closeStoryViewer({ tabId });\n    }\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      if (isStoriesViewerOpen) {\n        actions.closeStoryViewer({ tabId });\n      }\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    let fullInfo = selectUserFullInfo(global, chatId);\n    if (!fullInfo) {\n      const { accessHash } = user;\n      const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n      user = result?.user;\n      fullInfo = result?.fullInfo;\n    }\n\n    if (fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectUserStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    currentThreadId: MAIN_THREAD_ID,\n    text,\n    entities,\n    story,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      views: update.views,\n      forwards: update.forwards,\n    });\n\n    const message = selectChatMessage(global, chatId, update.id);\n    if (!message) return;\n\n    const repliesChatId = message.repliesThreadInfo?.chatId;\n    const threadId = message.repliesThreadInfo?.threadId;\n    if (!repliesChatId || !threadId) return;\n\n    global = updateThreadInfo(global, repliesChatId, threadId, {\n      messagesCount: update.messagesCount,\n      recentReplierIds: update.recentReplierIds,\n      lastMessageId: update.maxId,\n      lastReadInboxMessageId: update.readMaxId,\n    });\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectTabState, selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { translate } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiChat, ApiTopic, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateTopics,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery, selectTabState } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        localChats, localUsers, globalChats, globalUsers,\n      } = result;\n\n      if (localChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n      }\n\n      if (localUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: localChats.map(({ id }) => id),\n          userIds: localUsers.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport { MAIN_THREAD_ID, type ApiChat } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/langProvider';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread, updateThreadInfo,\n  updateThreadInfos,\n  updateUsers,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId, selectReplyingToId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport { updateTabState } from '../../reducers/tabs';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = {\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n          replyingToId: selectReplyingToId(global, chatId, Number(threadId)),\n        };\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = allMessages.map(({ id }) => id);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        if (threadInfo?.originChannelId) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, threadInfo);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        if (result.repliesThreadInfos.length) {\n          global = updateThreadInfos(global, result.repliesThreadInfos);\n        }\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { translate } from '../../../util/langProvider';\nimport { addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  if ((hasChangedAvatarHash || hasChangedProfilePhoto || hasChangedFallbackPhoto || hasChangedPersonalPhoto)\n    && user.photos?.length) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadUserStories({ userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, profileId);\n  if (user && !fullInfo?.profilePhoto) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n\n    user = result.user;\n    fullInfo = result.fullInfo;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n  const fallbackPhoto = fullInfo?.fallbackPhoto;\n  const personalPhoto = fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload!;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n","import type { GlobalState, TabArgs } from '../types';\nimport type { InlineBotSettings } from '../../types';\nimport { updateTabState } from './tabs';\nimport { selectTabState } from '../selectors';\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState, selectBot,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser, selectThreadTopMessageId, selectUserFullInfo,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { translate } from '../../../util/langProvider';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, threadId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedContact(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, MAIN_THREAD_ID, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    botId = message.viaBotId || message.senderId;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n  const replyingToTopId = (chat.isForum || threadId !== MAIN_THREAD_ID)\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: replyingToId || replyingToTopId,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockContact', bot.id, bot.accessHash);\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: translate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive && !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  await loadAttachBots(global, hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(global, bot, isEnabled, isWriteAllowed);\n});\n\nasync function toggleAttachBot<T extends GlobalState>(\n  global: T, bot: ApiUser, isEnabled: boolean, isWriteAllowed?: boolean,\n) {\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n  global = getGlobal();\n  await loadAttachBots(global);\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, bot, url, startParam, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isFromBotMenu = !bot;\n  if (!isFromBotMenu && !global.attachMenu.bots[bot.id]) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload,\n        },\n      },\n    }, tabId);\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId, threadId, tabId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId: isFromBotMenu ? chatId : bot.id,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n    tabId,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  await toggleAttachBot(global, botUser, true, isWriteAllowed);\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, threadId = MAIN_THREAD_ID, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyingTo: replyingTo ? {\n      replyingTo,\n      replyingToTopId: threadId,\n    } : undefined,\n    text: command,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice, selectTabState,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  isSameReaction, getUserReactions, isMessageLocal, getDocumentMediaHash,\n} from '../../helpers';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation), ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const tabState = selectTabState(global, tabId);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    const newActiveReactions = hasReaction ? omit(tabState.activeReactions, [messageId]) : {\n      ...tabState.activeReactions,\n      [messageId]: [\n        ...(tabState.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = updateTabState(global, {\n      activeReactions: newActiveReactions,\n    }, tabId);\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { messageId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = tabState.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [messageId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: [],\n  };\n  setGlobal(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  updateStatistics, updateMessageStatistics, updateStatisticsGraph, addUsers,\n} from '../../reducers';\nimport { selectChatMessages, selectChat, selectChatFullInfo } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport { DEBUG, PREVIEW_AVATAR_COUNT } from '../../../config';\nimport {\n  addStories,\n  addStoriesForUser,\n  addUsers,\n  removeUserStory,\n  toggleUserStoriesHidden,\n  updateLastReadStoryForUser,\n  updateLastViewedStoryForUser,\n  updateStorySeenBy,\n  updateUser,\n  updateUserPinnedStory,\n  updateUserStory,\n  updateUsersWithStories,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { selectUser, selectUserStories, selectUserStory } from '../../selectors';\nimport { getServerTime } from '../../../util/serverTime';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { translate } from '../../../util/langProvider';\nimport type { ActionReturnType } from '../../types';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('userStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addStories(global, result.userStories);\n      global = updateUsersWithStories(global, result.userStories);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('userStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addStories(global, result.userStories);\n      global = updateUsersWithStories(global, result.userStories);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadUserSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  const userStories = selectUserStories(global, userId);\n  if (!user || !userStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(userStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchUserStoriesByIds', {\n    user,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addStoriesForUser(global, userId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { userId, storyId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, userId);\n  const story = selectUserStory(global, userId, storyId);\n  if (!user || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForUser(global, userId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isPinned) {\n    void callApi('viewStory', { user, storyId });\n  }\n\n  const isUnread = (global.stories.byUserId[userId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    user,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForUser(global, userId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { storyId } = payload;\n\n  const result = await callApi('deleteStory', { storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeUserStory(global, global.currentUserId!, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryPinned', async (global, actions, payload): Promise<void> => {\n  const { storyId, isPinned } = payload;\n\n  const story = selectUserStory(global, global.currentUserId!, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isPinned : undefined;\n  global = updateUserStory(global, global.currentUserId!, { id: storyId, isPinned });\n  global = updateUserPinnedStory(global, global.currentUserId!, storyId, isPinned);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryPinned', { storyId, isPinned });\n  if (!result) {\n    global = getGlobal();\n    global = updateUserStory(global, global.currentUserId!, { id: storyId, isPinned: currentIsPinned });\n    global = updateUserPinnedStory(global, global.currentUserId!, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadUserStories', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUserStories', { user });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addStoriesForUser(global, userId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForUser(global, userId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadUserPinnedStories', async (global, actions, payload): Promise<void> => {\n  const { userId, offsetId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUserPinnedStories', { user, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addStoriesForUser(global, userId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { offsetId } = payload;\n  const currentUserId = global.currentUserId!;\n\n  const result = await callApi('fetchStoriesArchive', { currentUserId, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addStoriesForUser(global, currentUserId, result.stories, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadUserStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { userId, storyIds } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUserStoriesByIds', { user, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addStoriesForUser(global, userId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStorySeenBy', async (global, actions, payload): Promise<void> => {\n  const { storyId, offsetId } = payload;\n\n  const result = await callApi('fetchStorySeenBy', { storyId, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateStorySeenBy(global, global.currentUserId!, storyId, result.seenByDates);\n\n  const viewerIds = Object.keys(result.seenByDates);\n  if (!offsetId && viewerIds.length) {\n    const recentViewerIds = viewerIds.slice(-PREVIEW_AVATAR_COUNT).reverse();\n    global = updateUserStory(global, global.currentUserId!, {\n      id: storyId,\n      recentViewerIds,\n      viewsCount: result.count,\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    userId,\n    storyId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('reportStory', {\n    user,\n    storyId,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    storyId,\n    privacy,\n  } = payload;\n\n  const allowedUserList = privacy.allowUserIds?.map((userId) => selectUser(global, userId)).filter(Boolean);\n  const deniedUserList = privacy.blockUserIds?.map((userId) => selectUser(global, userId)).filter(Boolean);\n  void callApi('editStoryPrivacy', {\n    id: storyId,\n    visibility: privacy.visibility,\n    allowedUserList,\n    deniedUserList,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { userId, isHidden } = payload;\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  const result = await callApi('toggleStoriesHidden', { user, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = toggleUserStoriesHidden(global, userId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n  const users = userIds.map((userId) => selectUser(global, userId)).filter(Boolean);\n  if (!users.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { users });\n  if (!result) return;\n\n  const userIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const user = users[i];\n    global = updateUser(global, user.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n    if (maxId !== 0) {\n      userIdsToLoad.push(user.id);\n    }\n  });\n  setGlobal(global);\n\n  userIdsToLoad?.forEach((userId) => actions.loadUserStories({ userId }));\n});\n","import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { IS_ELECTRON } from '../../../config';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== id\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\nimport type {\n  GlobalState, ActionReturnType,\n} from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  replaceTabThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n  cancelMessageMediaDownload,\n  addActiveMessageMediaDownload,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectChatScheduledMessages,\n  selectTabState,\n  selectRequestedMessageTranslationLanguage,\n  selectPinnedIds,\n  selectRequestedChatTranslationLanguage,\n} from '../../selectors';\nimport { compact, findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle, isChatChannel } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      const chat = selectChat(global, chatId);\n\n      lastMessageId = chat?.lastMessage?.id;\n    }\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, threadId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openChat({\n      id: chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return cancelMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  for (const message of messages) {\n    global = cancelMessageMediaDownload(global, message, tabId);\n  }\n\n  return global;\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return addActiveMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { IS_ELECTRON } from '../config';\nimport { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE, IS_ELECTRON,\n} from '../../../config';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectTabState,\n} from '../../selectors';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport { compact, unique } from '../../../util/iteratees';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\nimport * as langProvider from '../../../util/langProvider';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  if (IS_ELECTRON) {\n    return;\n  }\n\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsAppUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : PAGE_TITLE);\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: playbackRate || tabState.mediaViewer.playbackRate || global.mediaViewer.lastPlaybackRate,\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { SettingsScreens } from '../../../types';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import { addActionHandler } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (id) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId: id,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    storyUserId,\n    storyId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyUserId,\n      storyId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyUserId: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType } from '../../types';\n\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectTabState,\n  selectUser,\n  selectUserFirstStoryId,\n  selectUserFirstUnreadStoryId,\n  selectUserStories,\n} from '../../selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { fetchChatByUsername } from '../api/chats';\nimport { addStoriesForUser, addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, storyId, isSingleUser, isSingleStory, isPrivate, isArchive, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const userStories = selectUserStories(global, userId);\n\n  if (storyId && (!userStories || !userStories.byId[storyId])) {\n    const result = await callApi('fetchUserStoriesByIds', { user, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addStoriesForUser(global, userId, result.stories);\n  }\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      userId,\n      storyId: storyId || selectUserFirstUnreadStoryId(global, userId) || selectUserFirstStoryId(global, userId),\n      isSingleUser,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      storyIdSeenBy: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    userId: chat.id,\n    storyId,\n    isSingleUser: true,\n    isSingleStory: true,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByUserIds: undefined,\n    },\n  }, tabId);\n\n  // @optimization Reset `seenByDates` when all viewers are closed\n  const hasViewerOpen = Object.keys(global.byTabId).find((id) => selectTabState(global, Number(id)).storyViewer.userId);\n  if (!hasViewerOpen) {\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        seenByDates: undefined,\n      },\n    };\n  }\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedUserIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    userId, storyId, isSingleUser, isSingleStory, isPrivate, isArchive,\n  } = tabState.storyViewer;\n\n  if (isSingleStory) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  const { orderedUserIds: { active, archived } } = global.stories;\n  if (!userId || !storyId) {\n    return undefined;\n  }\n\n  const user = selectUser(global, userId);\n  const userStories = selectUserStories(global, userId);\n  if (!userStories || !user) {\n    return undefined;\n  }\n\n  const orderedUserIds = (user.areStoriesHidden ? archived : active) ?? [];\n  const storySourceProp = isArchive ? 'archiveIds' : isPrivate ? 'pinnedIds' : 'orderedIds';\n  const userStoryIds = userStories[storySourceProp] ?? [];\n  const currentStoryIndex = userStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousUserId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousUserId = userId;\n  } else {\n    const previousUserIdIndex = orderedUserIds.indexOf(userId) - 1;\n    if (isSingleUser || previousUserIdIndex < 0) {\n      return undefined;\n    }\n\n    previousUserId = orderedUserIds[previousUserIdIndex];\n    previousStoryIndex = (selectUserStories(global, previousUserId)?.orderedIds.length || 1) - 1;\n  }\n\n  const previousStoryId = selectUserStories(global, previousUserId)?.[storySourceProp]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      userId: previousUserId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    userId, storyId, isSingleUser, isSingleStory, isPrivate, isArchive,\n  } = tabState.storyViewer;\n  if (isSingleStory) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  const { orderedUserIds: { active, archived } } = global.stories;\n  if (!userId || !storyId) {\n    return undefined;\n  }\n\n  const user = selectUser(global, userId);\n  const userStories = selectUserStories(global, userId);\n  if (!userStories || !user) {\n    return undefined;\n  }\n\n  const orderedUserIds = (user.areStoriesHidden ? archived : active) ?? [];\n  const storySourceProp = isArchive ? 'archiveIds' : isPrivate ? 'pinnedIds' : 'orderedIds';\n  const userStoryIds = userStories[storySourceProp] ?? [];\n  const currentStoryIndex = userStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextUserId: string;\n\n  if (currentStoryIndex < userStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextUserId = userId;\n  } else {\n    const nextUserIdIndex = orderedUserIds.indexOf(userId) + 1;\n    if (isSingleUser || nextUserIdIndex > orderedUserIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextUserId = orderedUserIds[nextUserIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = selectUserStories(global, nextUserId)?.[storySourceProp]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      userId: nextUserId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStorySeenBy', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      storyIdSeenBy: storyId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStorySeenBy', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      storyIdSeenBy: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { userId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const link = await callApi('fetchStoryLink', { userId, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.translate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, userId: storyUserId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyUserId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.translate(message),\n    actionText: langProvider.translate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyUserId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  leaveChat,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectThreadParam,\n  selectChatFullInfo,\n  selectTabState,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport {\n  deleteContact, replaceUserStatuses, toggleUserStoriesHidden, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUser, selectUserFullInfo } from '../../selectors';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          // TODO Do not display modal if premium is bought from another device\n          if (update.user.isPremium) actions.openPremiumModal({ isSuccess: true, tabId });\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const currentUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (currentUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = toggleUserStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact,\n  addStoriesForUser,\n  removeBlockedContact,\n  removeUserStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForUser,\n  updateUsersWithStories,\n} from '../../reducers';\nimport { selectUserStories } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(global, update.id);\n      } else {\n        return removeBlockedContact(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.setReplyingToId({ messageId: undefined, tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForUser(global, update.userId, { [update.story.id]: update.story });\n      global = updateUsersWithStories(global, { [update.userId]: selectUserStories(global, update.userId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removeUserStory(global, update.userId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForUser(global, update.userId, update.lastReadId);\n      setGlobal(global);\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport {\n  addNotifyException, updateChat, updateTopic, updateNotifySettings,\n} from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/windowEnvironment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage, selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HAg4STRlxDV3frYuABYr\",\"particle\":\"HO3tML0GAC9vTH28baKB\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './CustomEmojiEffect.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji | ApiEmojiStatus;\n  className?: string;\n  isLottie?: boolean;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomEmojiEffect: FC<OwnProps> = ({\n  reaction,\n  isLottie,\n  className,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(!isLottie ? stickerHash : undefined);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData && !isLottie) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        if (isLottie) {\n          return (\n            <CustomEmoji\n              documentId={reaction.documentId}\n              className={styles.particle}\n              style={style}\n              withSharedAnimation\n            />\n          );\n        }\n\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiEffect);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useTimeout from '../../../hooks/useTimeout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport Button from '../../ui/Button';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../middle/message/CustomEmojiEffect';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  APP_NAME,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_ELECTRON,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport { IS_APP, IS_MAC_OS } from '../../../util/windowEnvironment';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\nimport { useFullscreenStatus } from '../../../hooks/useFullscreen';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport StatusButton from './StatusButton';\nimport Toggle from '../../ui/Toggle';\nimport StoryToggler from '../../story/StoryToggler';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference' | 'archiveSettings'>\n  & Pick<TabState, 'canInstall'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  onSearchQuery,\n  isClosingSearch,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  canInstall,\n  archiveSettings,\n}) => {\n  const {\n    openChat,\n    openChatWithInfo,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n    openUrl,\n    updatePerformanceSettings,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  useHotkeys(canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid')\n    : 'min';\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {lang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={WEBK_VERSION_URL}\n          onClick={handleSwitchToWebK}\n        >\n          Switch to K Version\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  ), [\n    animationLevelValue, archivedUnreadChatsCount, canInstall, handleAnimationLevelChange, handleBugReportClick, lang,\n    handleChangelogClick, handleDarkModeToggle, handleOpenTipsChat, handleSelectSaved, handleSwitchToWebK,\n    onSelectArchived, onSelectContacts, onSelectSettings, theme, withOtherVersions, archiveSettings,\n  ]);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            chatOrUserId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          {menuItems}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler canShow={!isSearchFocused && !selectedSearchDate && !globalSearchChatId} />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      currentUserId, connectionState, isSyncing, archiveSettings, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite } from '../../../api/types';\nimport type { SettingsScreens, LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../../global/types';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID, ANIMATION_END_DELAY } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\nimport StoryRibbon from '../../story/StoryRibbon';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\nconst STORY_RIBBON_APPEARANCE_DURATION_MS = 200 + ANIMATION_END_DELAY;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const [isStoryRibbonAnimated, setIsStoryRibbonAnimated] = useState(false);\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  useLayoutEffect(() => {\n    let timeoutId: number;\n\n    if (isStoryRibbonShown) {\n      timeoutId = window.setTimeout(() => {\n        setIsStoryRibbonAnimated(true);\n      }, STORY_RIBBON_APPEARANCE_DURATION_MS);\n    } else {\n      setIsStoryRibbonAnimated(false);\n    }\n\n    return () => {\n      window.clearTimeout(timeoutId);\n    };\n  }, [isStoryRibbonShown]);\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransition(isStoryRibbonShown, undefined, undefined, '');\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && !isStoryRibbonAnimated && 'withStoryRibbon',\n        storyRibbonClassNames,\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedUserIds: {\n          archived: archivedStories,\n        },\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_ELECTRON } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\nimport ForumPanel from './ForumPanel';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { RefObject } from 'react';\nimport React, {\n  memo, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\n\nimport { IS_MAC_OS, IS_APP, LAYERS_ANIMATION_NAME } from '../../util/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isUpdateAvailable={isUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinnedMessageBorder\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinned-message-border-wrapper-1\":\"QpNjYZM0KJrGrocs69__\",\"pinnedMessageBorderWrapper1\":\"QpNjYZM0KJrGrocs69__\",\"pinned-message-border-wrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinnedMessageBorderWrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinned-message-border-mark\":\"YX_iyQuDtga6uKXRQqR0\",\"pinnedMessageBorderMark\":\"YX_iyQuDtga6uKXRQqR0\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useLayoutEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TMOjo7XfD1ZiiuRtfpkm\",\"pinnedMessage\":\"uhn_g6FmUELuGJrCm45w\",\"messageText\":\"bSvmca5kaTIUh3yJBxnF\",\"loading\":\"d7XDT4Keip1KHh7mcCv9\",\"pinListIcon\":\"DusHAy2Lx0SlaPpVAb_o\",\"pinListIconHidden\":\"jSVbc8Hb7PjitJujB_dQ\",\"no-hover\":\"jeTsUEkDCkzGUVwy6lrL\",\"noHover\":\"jeTsUEkDCkzGUVwy6lrL\",\"messageTextTransition\":\"ugsKEK4Xb166oFMP8hHy\",\"withMedia\":\"FBCNFm307_rxATSHPSiN\",\"title\":\"q9_FnsHlndM1hZqZjxjM\",\"summary\":\"WRuyhyQK6mv28Mz8iK28\",\"inlineButton\":\"kXRuktM2s7UN91zOl0Tx\",\"pictogramTransition\":\"EK6juGhJwhsLLm4Aag2F\",\"pinnedThumb\":\"RFnmHP92f6CwfuR2Upaw\",\"pinnedThumbImage\":\"JfPOYkOcaMjS7Y5rsHZ4\",\"fade-in\":\"IkKnzordTRzWWtIbLHdD\",\"fadeIn\":\"IkKnzordTRzWWtIbLHdD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler\n          && <img className={styles.pinnedThumbImage} src={srcUrl} width={width} height={height} alt=\"\" />}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}>\n          <div className={styles.title} dir=\"auto\">\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                lang={lang}\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectTabState, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\nimport useLastCallback from '../../hooks/useLastCallback';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash: accessHash! });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectTabState,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isComments?: boolean;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isSynced?: boolean;\n  isFetchingDifference?: boolean;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isSynced,\n  isFetchingDifference,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isSynced && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const { handleClick: handleHeaderClick, handleMouseDown: handleHeaderMouseDown } = useFastClick(() => {\n    openChatWithInfo({ id: chatId, threadId });\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage), undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              lang(isComments ? 'CommentsCount' : 'Replies', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div\n          className=\"chat-info-wrapper\"\n          onClick={handleHeaderClick}\n          onMouseDown={handleHeaderMouseDown}\n        >\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isSynced: global.isSynced,\n      isFetchingDifference: global.isFetchingDifference,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n        isComments: Boolean(threadInfo?.originChannelId),\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/useBackgroundMode';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport type { Signal } from '../../../../util/signals';\n\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\nimport { createConnector } from './PostMessageConnector';\nimport Deferred from './Deferred';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","/**\n * A Map that has a limited size. When the limit is reached, the oldest entry is removed.\n * Ignores last access time, only cares about insertion order.\n */\nexport default class LimitedMap<K, V> {\n  private map: Map<K, V>;\n\n  private insertionQueue: Set<K>;\n\n  constructor(private limit: number) {\n    this.map = new Map();\n    this.insertionQueue = new Set<K>();\n  }\n\n  public get(key: K): V | undefined {\n    return this.map.get(key);\n  }\n\n  public set(key: K, value: V): this {\n    if (this.map.size === this.limit) {\n      const keyToRemove = Array.from(this.insertionQueue).shift();\n      if (keyToRemove) {\n        this.map.delete(keyToRemove);\n        this.insertionQueue.delete(keyToRemove);\n      }\n    }\n\n    this.map.set(key, value);\n    this.insertionQueue.add(key);\n\n    return this;\n  }\n\n  public delete(key: K): boolean {\n    const result = this.map.delete(key);\n    if (result) {\n      this.insertionQueue.delete(key);\n    }\n    return result;\n  }\n\n  public clear(): void {\n    this.map.clear();\n    this.insertionQueue.clear();\n  }\n\n  public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n    this.map.forEach(callbackfn, thisArg);\n  }\n\n  public get size(): number {\n    return this.map.size;\n  }\n\n  public get [Symbol.toStringTag](): string {\n    return this.map[Symbol.toStringTag];\n  }\n\n  public [Symbol.iterator](): IterableIterator<[K, V]> {\n    return this.map[Symbol.iterator]();\n  }\n\n  public entries(): IterableIterator<[K, V]> {\n    return this.map.entries();\n  }\n\n  public keys(): IterableIterator<K> {\n    return this.map.keys();\n  }\n\n  public values(): IterableIterator<V> {\n    return this.map.values();\n  }\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\nimport { useEffect } from '../../../../lib/teact/teact';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, undefined, lang.timeFormat);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon icon-reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <i className=\"icon icon-pinned-message message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getActions } from '../../../global';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {hasEffect && withEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport { IS_ELECTRON } from '../../../config';\n\nimport safePlay from '../../../util/safePlay';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar\n        size=\"large\"\n        peer={user}\n        text={firstName || lastName}\n      />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    const user = selectUser(global, contact.userId);\n\n    return {\n      user,\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  useEffect,\n  useLayoutEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { LangFn } from '../../../hooks/useLang';\nimport type {\n  ApiMessage, ApiPoll, ApiPollAnswer, ApiChat, ApiUser,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [closePeriod, summary]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    return recentVoterIds ? recentVoterIds.reduce((result: (ApiChat | ApiUser)[], id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      } else if (chat) {\n        result.push(chat);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"micro\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport buildStyle from '../../../util/buildStyle';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground, photoUrl);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { useMemo, memo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds?: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useLastCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const isScheduled = album.mainMessage.isScheduled;\n\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds: isScheduled ? activeDownloads?.scheduledIds : activeDownloads?.ids,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useSignal from '../../../hooks/useSignal';\nimport { useThrottledSignal } from '../../../hooks/useAsyncResolvers';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  isDownloading?: boolean;\n};\n\nconst PROGRESS_CENTER = ROUND_VIDEO_DIMENSIONS_PX / 2;\nconst PROGRESS_MARGIN = 6;\nconst PROGRESS_CIRCUMFERENCE = (PROGRESS_CENTER - PROGRESS_MARGIN) * 2 * Math.PI;\nconst PROGRESS_THROTTLE = 16; // Min period needed for `playerEl.currentTime` to update\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const circleRef = useRef<SVGCircleElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState(false);\n\n  const [getProgress, setProgress] = useSignal(0);\n  const getThrottledProgress = useThrottledSignal(getProgress, PROGRESS_THROTTLE);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [setProgress, isActivated, getThrottledProgress]);\n\n  useLayoutEffect(() => {\n    if (!isActivated || !circleRef.current) {\n      return;\n    }\n\n    const strokeDashOffset = PROGRESS_CIRCUMFERENCE - getThrottledProgress() * PROGRESS_CIRCUMFERENCE;\n    circleRef.current.setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n  }, [isActivated, getThrottledProgress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useLastCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n  });\n\n  const capturePlaying = useLastCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  });\n\n  const handleTimeUpdate = useLastCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  });\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\">\n        {isActivated && (\n          <svg width={ROUND_VIDEO_DIMENSIONS_PX} height={ROUND_VIDEO_DIMENSIONS_PX}>\n            <circle\n              ref={circleRef}\n              cx={PROGRESS_CENTER}\n              cy={PROGRESS_CENTER}\n              r={PROGRESS_CENTER - PROGRESS_MARGIN}\n              className=\"progress-circle\"\n              transform={`rotate(-90, ${PROGRESS_CENTER}, ${PROGRESS_CENTER})`}\n              stroke-dasharray={PROGRESS_CIRCUMFERENCE}\n              stroke-dashoffset={PROGRESS_CIRCUMFERENCE}\n            />\n          </svg>\n        )}\n      </div>\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiThreadInfo,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openComments } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openComments({ id: chatId, threadId, originChannelId });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmojiEffect from './CustomEmojiEffect';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  withEffects?: boolean;\n};\n\nconst CENTER_ICON_SIZE = 2.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n  withEffects,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const { customEmoji } = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(withEffects && activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useLastCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  });\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomEmojiEffect reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceOnHeavyAnimation\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport AvatarList from '../../common/AvatarList';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  withEffects?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  withEffects,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.peerId] || chatsById[recentReaction.peerId])\n      .filter(Boolean) as (ApiChat | ApiUser)[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useLastCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  });\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n        withEffects={withEffects}\n      />\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} className=\"counter\" />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n  withEffects?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n  noRecentReactors,\n  withEffects,\n}) => {\n  const lang = useLang();\n\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n          withEffects={withEffects}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"canceled\":\"Q7dh9ssyXXCzatPRmIDv\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import React, { useRef } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser, ApiChat, ApiTypeStory } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getSenderTitle,\n  getUserColorKey,\n  getStoryMediaHash,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiUser | ApiChat;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className={buildClassName('message-text', isExpiredStory && 'with-message-color')}>\n        <p dir=\"auto\">\n          {isExpiredStory && (\n            <i className=\"icon icon-story-expired\" aria-hidden />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectUserStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, userId } = message.content.storyData!;\n\n  return {\n    story: selectUserStory(global, userId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectUser, selectUserStories, selectUserStory,\n} from '../../../global/selectors';\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  user?: ApiUser;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, user, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      userId: story!.userId,\n      storyId: story!.id,\n      isSingleUser: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.userId, storyData!.id, story);\n\n  function getTitle() {\n    if (user?.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getUserFirstOrLastName(user));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, userId } = message.content.storyData!;\n  const lastReadId = selectUserStories(global, userId)?.lastReadId;\n\n  return {\n    story: selectUserStory(global, userId, id),\n    user: selectUser(global, userId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\nimport type {\n  ActiveEmojiInteraction,\n  ActiveReaction,\n  ChatTranslatedMessages,\n  MessageListType,\n} from '../../../global/types';\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiReaction,\n  ApiStickerSet,\n  ApiTypeStory,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiUser,\n  ApiUsername,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { FocusDirection, IAlbum, ISettings } from '../../../types';\nimport { AudioOrigin } from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport type { Signal } from '../../../util/signals';\n\nimport { IS_ANDROID, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID, IS_ELECTRON } from '../../../config';\nimport {\n  selectAllowedMessageActions,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentTextSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsDownloading,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPerformanceSettingsValue,\n  selectUserStory,\n  selectReplySender,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport {\n  areReactionsEmpty,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageHtmlId,\n  getMessageLocation,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  hasMessageText,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useAuthorWidth from '../hooks/useAuthorWidth';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport { dispatchHeavyAnimationEvent } from '../../../hooks/useHeavyAnimationCheck';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport TopicChip from '../../common/TopicChip';\nimport EmbeddedStory from '../../common/EmbeddedStory';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n    getIsMessageListReady: Signal<boolean>;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiUser;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withReactionEffects?: boolean;\n  withStickerEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyStory,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withReactionEffects,\n  withStickerEffects,\n  webPageStory,\n  isConnected,\n  onPinnedIntersectionChange,\n  getIsMessageListReady,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuPosition,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(\n    isShown || isJustAdded,\n    undefined,\n    noAppearanceAnimation && !isJustAdded,\n    false,\n  );\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasStoryReply = Boolean(message.replyToStoryId);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  ) || Boolean(message.content.storyData && !message.content.storyData.isMention);\n  const isStoryMention = message.content.storyData?.isMention;\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply || hasStoryReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    Boolean(requestedChatTranslationLanguage),\n    replyStory && 'content' in replyStory ? replyStory : undefined,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    isJustAdded && 'is-just-added',\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n    isStoryMention && 'is-story-mention',\n  );\n\n  const {\n    text, photo, video, audio,\n    voice, document, sticker, contact,\n    poll, webPage, invoice, location,\n    action, game, storyData,\n  } = getMessageContent(message);\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video || storyData || (location && location.type === 'geo')) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n\n  useEnsureStory(\n    message.replyToStoryUserId ? message.replyToStoryUserId : chatId,\n    message.replyToStoryId,\n    replyStory,\n  );\n\n  useFocusMessage(\n    ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, isJustAdded,\n  );\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  useAuthorWidth(ref, signature);\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    dispatchHeavyAnimationEvent(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      } else if (video) {\n        if (video.isRound) {\n          width = ROUND_VIDEO_DIMENSIONS_PX;\n        } else {\n          width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, message, noAvatars, photo, sticker, text?.text, video,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    return (\n      <MessageText\n        messageOrStory={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    activeReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        withEffects={withReactionEffects}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            withEffect={withStickerEffects}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            story={webPageStory}\n            isConnected={isConnected}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded && !isOwn) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getSenderTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.views !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang(storyData ? 'ForwardedStory' : 'ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            maxWidth={reactionsMaxWidth}\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            withEffects={withReactionEffects}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction MessageAppendix({ isOwn } : { isOwn: boolean }) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, forwardInfo,\n      transcriptionId, isPinned, replyToStoryUserId, replyToStoryId, repliesThreadInfo,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectUserStory(global, webPageStoryData.userId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = replyToStoryId && replyToStoryUserId\n      ? selectUserStory(global, replyToStoryUserId, replyToStoryId)\n      : undefined;\n    const storySender = replyToStoryUserId ? selectUser(global, replyToStoryUserId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const isLocation = Boolean(getMessageLocation(message));\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyStory,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && activeReactions[reactionMessage.id],\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      senderAdminMember,\n      messageTopic,\n      genericEffects: global.genericEmojiEffects,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withReactionEffects: selectPerformanceSettingsValue(global, 'reactionEffects'),\n      withStickerEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      ...((canShowSender || isLocation) && { sender }),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n      }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { LangFn } from '../../../../hooks/useLang';\nimport type { IAlbum } from '../../../../types';\nimport type {\n  ApiChat, ApiTopic, ApiMessage, ApiUser, ApiStory,\n} from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n  isTranslatingChat?: boolean,\n  story?: ApiStory,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openStoryViewer, focusMessageInComments,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId!,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n      noForumTopicPanel: true,\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId!,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      userId: story.userId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice, storyData,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { RefObject } from 'react';\nimport { useLayoutEffect } from '../../../lib/teact/teact';\nimport { requestForcedReflow } from '../../../lib/fasterdom/fasterdom';\n\nexport default function useAuthorWidth(\n  containerRef: RefObject<HTMLDivElement>,\n  signature?: string,\n) {\n  useLayoutEffect(() => {\n    if (!signature) return;\n\n    requestForcedReflow(() => {\n      const width = containerRef.current!.querySelector<HTMLDivElement>('.message-signature')?.offsetWidth;\n      if (!width) return undefined;\n\n      return () => {\n        containerRef.current!.style.setProperty('--meta-safe-author-width', `${width}px`);\n      };\n    });\n  }, [containerRef, signature]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  });\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.text.text,\n                entities: message.text.entities,\n              })}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Lsq8MNpDNQOesVld_hE2\",\"bot-info\":\"QDlMH9oNVNDnHBMnbvhw\",\"botInfo\":\"QDlMH9oNVNDnHBMnbvhw\",\"bot-info-description\":\"qhxnNXJM8_CyuUQ0pxo7\",\"botInfoDescription\":\"qhxnNXJM8_CyuUQ0pxo7\",\"bot-info-title\":\"mdOWgfW0GwJTT3vqO5_M\",\"botInfoTitle\":\"mdOWgfW0GwJTT3vqO5_M\"};","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiBotInfo } from '../../api/types';\n\nimport { DPR } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\nimport {\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n} from '../../global/helpers';\nimport buildStyle from '../../util/buildStyle';\nimport buildClassName from '../../util/buildClassName';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useLang();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const { width, height } = botInfoRealDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={botInfoRealDimensions && (\n            `width: ${botInfoRealDimensions.width}px`\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              src={botInfoPhotoUrl}\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n            />\n          )}\n          {botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport type { Signal } from '../../util/signals';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport usePrevious from '../../hooks/usePrevious';\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsReady = useDerivedSignal(isReady);\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePrevious(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        const isTopicTopMessage = message.id === threadTopMessageId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\n\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\nimport { isLocalMessageId } from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = isLocalMessageId(messageIds[0]);\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback((selectedSticker: ApiSticker) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker, messageList: currentMessageList });\n  });\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(ContactGreeting));\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageListType } from '../../global/types';\nimport type { ApiTopic } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { requestForcedReflow, forceMeasure, requestMeasure } from '../../lib/fasterdom/fasterdom';\n\nimport type { FC } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\nimport type {\n  ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\n\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { LoadMoreDirection } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectBot,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium,\n  selectLastScrollOffset,\n  selectThreadInfo,\n  selectTabState,\n  selectChatFullInfo,\n  selectPerformanceSettingsValue,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  isLocalMessageId,\n  getMessageHtmlId,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll from '../../util/resetScroll';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport { isBackgroundModeActive } from '../../hooks/useBackgroundMode';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport MessageListBotInfo from './MessageListBotInfo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isComments?: boolean;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  threadTopMessageId?: number;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  threadTopMessageId,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  onPinnedIntersectionChange,\n  getForceNextPinnedInHeader,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadUserStoriesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages = messageIds.map((id) => messagesById[id]).filter(Boolean);\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, orderRule), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByUserIds = storyDataList.reduce((acc, storyData) => {\n      const { userId, id } = storyData!;\n      if (!acc[userId]) {\n        acc[userId] = [];\n      }\n      acc[userId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByUserIds).forEach(([userId, storyIds]) => {\n      loadUserStoriesByIds({ userId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.repliesThreadInfo?.isComments\n      || messagesById[id]?.views !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      isComments: Boolean(threadInfo?.originChannelId),\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      threadTopMessageId,\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport animateScroll from '../../util/animateScroll';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useLastCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default MobileSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default GiftPremiumModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import React, {\n  useEffect, useState, memo, useMemo,\n} from '../../lib/teact/teact';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { ThemeKey } from '../../types';\n\nimport {\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  ANIMATION_END_DELAY,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  GENERAL_TOPIC_ID,\n  TMP_CHAT_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  EDITABLE_INPUT_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n} from '../../config';\nimport {\n  IS_ANDROID, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectBot,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat,\n  getMessageSendingRestrictionReason,\n  getForumComposerPlaceholder,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n  getHasAdminRight,\n} from '../../global/helpers';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport { useResize } from '../../hooks/useResize';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport Composer from '../common/Composer';\n\nimport './MiddleColumn.scss';\n\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  topMessageId?: number;\n  canUnpin?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  topMessageId,\n  canUnpin,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds, topMessageId);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown!}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      chatLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isComments);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !selectChatFullInfo(global, chat.id),\n    );\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !replyingToId && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !chat?.isForum;\n    const topMessageId = isCommentThread ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      topMessageId,\n      canUnpin,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { getGlobal } from '../../../global';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\nimport cycleRestrict from '../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: number, pinnedIds?: number[], topMessageId?: number,\n) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useLastCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  });\n\n  const onFocusPinnedMessage = useLastCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) {\n      // Focusing on a post in comments\n      return topMessageId === messageId;\n    }\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  });\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useState, useEffect, useLayoutEffect } from '../lib/teact/teact';\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\n\nimport useLastCallback from './useLastCallback';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleMessageSearchQueryChange = useLastCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3>{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" aria-hidden />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.StoryList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader);\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  loadStories: AnyToVoidFunction,\n  loadStoriesArchive: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n  storyIds?: number[],\n  archiveStoryIds?: number[],\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, storyIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(\n          tabType === 'members'\n            ? ProfileState.MemberList\n            : (tabType === 'stories' ? ProfileState.StoryList : ProfileState.SharedMedia),\n        );\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : (tabType === 'stories' ? ProfileState.StoryList : ProfileState.SharedMedia);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ox1yTGx4NBVANs7q4Ste\",\"wrapper\":\"g34egFNlUSZiOR5Y9K9A\",\"media\":\"gyVqf8gGVz_cu2HCjifT\",\"expiredIcon\":\"eg5740UDe7iAc7dGlyex\",\"contextMenu\":\"rhvyma7da0HVZh3rYFnr\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useMenuPosition from '../../hooks/useMenuPosition';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isProtected?: boolean;\n  isArchive?: boolean;\n}\n\nfunction MediaStory({ story, isProtected, isArchive }: OwnProps) {\n  const {\n    openStoryViewer,\n    loadUserSkippedStories,\n    toggleStoryPinned,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const isFullyLoaded = story && 'content' in story;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadUserSkippedStories({ userId: story.userId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef);\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    getLayout,\n  );\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      userId: story.userId,\n      storyId: story.id,\n      isSingleUser: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.userId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handlePinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ storyId: story.id, isPinned: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleUnpinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ storyId: story.id, isPinned: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <i className={buildClassName(styles.expiredIcon, 'icon icon-story-expired')} aria-hidden />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} />\n        )}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && <MenuItem icon=\"pin\" onClick={handlePinClick}>{lang('StoryList.SaveToProfile')}</MenuItem>}\n          {!isArchive && (\n            <MenuItem icon=\"unpin\" onClick={handleUnpinClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(MediaStory);\n","import React, {\n  useEffect, useMemo, useRef, useState, memo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n  ApiTypeStory,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserStories,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useUserStoriesPolling from '../../hooks/polling/useUserStoriesPolling';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport MediaStory from '../story/MediaStory';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloadIds?: number[];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloadIds,\n  isChatProtected,\n  nextProfileTab,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n    loadUserPinnedStories,\n    loadStoriesArchive,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasStoriesTab ? [{ type: 'stories', title: 'ProfileStories' }] : []),\n    ...(hasStoriesTab && currentUserId === chatId ? [{ type: 'storiesArchive', title: 'ProfileStoriesArchive' }] : []),\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [chatId, currentUserId, hasCommonChatsTab, hasMembersTab, hasStoriesTab, isChannel, topicId]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadUserStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadUserPinnedStories({ userId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ offsetId });\n  }, []);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    handleLoadUserStories,\n    handleLoadStoriesArchive,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    topicId,\n    storyIds,\n    archiveStoryIds,\n  );\n  const isFirstTab = (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  useUserStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    loadProfilePhotos({ profileId });\n  }, [profileId]);\n\n  const handleSelectMedia = useLastCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = lang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = lang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id) => storyByIds?.[id] && (\n            <MediaStory\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isProtected={isChatProtected}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds?.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n\n    let hasCommonChatsTab;\n    let hasStoriesTab;\n    let resolvedUserId;\n    let user;\n    let storyIds;\n    let archiveStoryIds;\n    let storyByIds;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n      hasStoriesTab = user?.isSelf || (user?.hasStories && !user.areStoriesHidden);\n      const userStories = hasStoriesTab ? selectUserStories(global, user!.id) : undefined;\n      storyIds = userStories?.pinnedIds;\n      storyByIds = userStories?.byId;\n      archiveStoryIds = userStories?.archiveIds;\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloadIds: activeDownloads?.ids,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\nimport { requestMutation, requestMeasure } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default RightSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './CreateTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './EditTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded, selectChat, selectCurrentMessageList, selectRightColumnContentKey, selectTabState,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}`}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return (\n          <RightSearch\n            key={`right_search_${chatId!}`}\n            chatId={chatId!}\n            threadId={threadId!}\n            onClose={close}\n            isActive={isOpen && isActive}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations, nextProfileTab } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { GlobalState, TabState } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\nimport { compact } from '../../util/iteratees';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  messages?: GlobalState['messages']['byChatId'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useLastCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    // No need for expensive global updates on messages, so we avoid them\n    const messages = getGlobal().messages.byChatId;\n    const scheduledMessages = getGlobal().scheduledMessages.byChatId;\n\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, chatActiveDownloads]) => {\n      const chatMessages = chatActiveDownloads.ids?.map((id) => messages[chatId]?.byId[id]);\n      const chatScheduledMessages = chatActiveDownloads.scheduledIds?.map((id) => scheduledMessages[chatId]?.byId[id]);\n\n      return compact([...chatMessages || [], ...chatScheduledMessages || []]);\n    }).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { createLocationHash } from '../../util/routing';\nimport { selectTabState } from '../../global/selectors';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\nimport { selectTabState } from '../../global/selectors';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../util/moduleLoader';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import React, {\n  useEffect, memo, useState, useRef, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { LangCode } from '../../types';\nimport type {\n  ApiAttachBot,\n  ApiChat,\n  ApiChatFolder,\n  ApiMessage,\n  ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, IS_ELECTRON,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/windowEnvironment';\nimport {\n  selectChatMessage,\n  selectTabState,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n  selectIsReactionPickerOpen,\n  selectPerformanceSettingsValue,\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectIsStoryViewerOpen,\n} from '../../global/selectors';\nimport { getUserFullName } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport updateIcon from '../../util/updateIcon';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport ReactionPicker from '../middle/message/ReactionPicker.async';\nimport ChatlistModal from '../modals/chatlist/ChatlistModal.async';\nimport StoryViewer from '../story/StoryViewer.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUserName?: string;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isCurrentUserPremium?: boolean;\n  chatlistModal?: TabState['chatlistModal'];\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUserName,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  chatlistModal,\n  noRightColumnAnimation,\n  isSynced,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadFeaturedEmojiStickers,\n    setIsAppUpdateAvailable,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, (isMasterTab && !IS_ELECTRON) ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateDownloadedListener = window.electron!.on(ElectronEvent.UPDATE_DOWNLOADED, () => {\n      setIsAppUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsAppUpdateAvailable(false);\n      removeUpdateDownloadedListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateDownloadedListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadFeaturedEmojiStickers();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    openChat({\n      id: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, []);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUserName={currentUserName} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <ChatlistModal info={chatlistModal} />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n      chatlistModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUserName: getUserFullName(currentUser),\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      chatlistModal,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","currentReactions","reactions","results","currentSendAs","selectSendAs","chatId","map","current","isReactionChosen","chosenOrder","undefined","count","filter","_ref","forEach","reaction","i","existingIndex","findIndex","r","isSameReaction","push","recentReactions","length","_ref2","isOwn","peerId","currentUserId","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","updateReactions","chat","isOutgoing","areDeepEqual","alreadyHasUnreadReaction","unreadReactions","includes","checkIfHasUnreadReactions","unreadReactionsCount","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","updateWithLocalMedia","messageUpdate","isScheduled","arguments","currentMessage","selectScheduledMessage","content","photo","video","sticker","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","actions","isDeleting","threadInfo","selectThreadByMessage","replyToMessageId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","selectChat","unreadCount","selectListedIds","MAIN_THREAD_ID","isMessageLocal","updateListedIds","threadId","Object","values","byTabId","_ref6","tabId","selectIsViewportNewest","addViewportId","replaceThreadParam","isActionMessage","updateThreadInfo","messagesCount","_ref7","firstUnreadId","selectFirstUnreadId","candidateGlobal","newViewportIds","selectViewportIds","updateChatLastMessage","force","chats","byId","currentLastMessage","lastMessage","topic","isForum","selectTopicFromMessage","updateTopic","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","newLastMessage","clearMessageTranslation","topics","deleteTopic","requestChatUpdate","threadIdsToUpdate","selectThreadIdFromMessage","setGlobal","setTimeout","getGlobal","deleteChatMessages","unique","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","addActionHandler","shouldForceReply","repliesThreadInfo","isTopicReply","loadTopicById","topicId","isLocal","selectIsMessageInCurrentMessageList","action","replyToStoryId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","selectIsChatListed","loadTopChats","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","keys","selectChatScheduledMessages","Number","sort","a","b","localId","deleteChatScheduledMessages","fileUploads","byMessageLocalId","omit","toString","thread","_ref3","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messageIds","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","_ref4","pinnedIds","selectPinnedIds","newPinnedIds","concat","currentThreadInfo","selectThreadInfo","newThreadInfo","topMessageId","lastReadInboxMessageIdInThread","messagesById","isUserId","getCurrentTabId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","channelId","pollId","pollUpdate","selectChatMessageByPollId","poll","oldResults","newResults","isMin","result","isChosen","find","option","updatedPoll","options","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","createServiceNotification","media","preview","invoice","extendedMedia","transcriptionId","isPending","transcriptions","error","match","_ref5","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","offsetId","direction","isOutlying","isBudgetPreload","_len2","Array","_key2","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","round","callApi","limit","users","repliesThreadInfos","localMessages","allMessages","buildCollectionByKey","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","addUsers","addChats","updateThreadInfos","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","replyingTo","IS_IOS","rafPromise","replyingToTopId","delete","payload","shouldForceRender","isRestricted","viewportIds","Boolean","_len","_key","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyId","userId","storyUserId","selectCurrentViewedStory","isStoryReply","type","scheduledAt","contentToBeScheduled","replyingToId","selectReplyingToId","replyingToMessage","selectThreadTopMessageId","replyToTopMessageId","noWebPage","selectNoWebPage","sendAs","setReplyingToId","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","groupedId","isFirst","replyingToForFirstMessage","messageListType","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","apiUpdate","draft","shouldForce","user","selectUser","isDeletedUser","draftDate","replyToMsgId","localOnly","selectDraft","newDraft","isUnpin","isOneSide","isSilent","selectCurrentChat","topId","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","showNotification","translate","connectionState","isUserBot","isUnread","minId","readCount","l","countSortedIds","newTopicUnreadCount","webPagePreview","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","scheduledInThread","originChannelId","selectThreadOriginChat","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","url","shouldSkipModal","urlWithProtocol","ensureProtocol","isStoriesViewerOpen","storyViewer","RE_TME_LINK","RE_TG_LINK","closeStoryViewer","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","showDialog","data","getUserFullName","selectForwardsCanBeSentToChat","isModalShown","closeMediaViewer","exitMessageSelectMode","story","selectUserStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","shouldIncrement","shouldSendAsFile","mimeType","GIF_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","Set","add","views","forwards","repliesChatId","recentReplierIds","readMaxId","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","title","langProvider","className","newGifs","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","updateGlobalSearch","foundTopicIds","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","globalSearch","localChats","localUsers","globalChats","globalUsers","localResults","chatIds","userIds","globalResults","date","timestampPlusDay","resultsByType","foundIds","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","timestamp","management","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","editingDraft","selectEditingDraft","activeThreadId","currentChat","lastReadInboxId","newCurrentChatId","currentChatMessages","topicLastMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","otherChatId","otherThreadId","updateChats","updateUsers","loadTopics","shouldCloseChatOnError","threads","updateThread","_ref8","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isSynced","initFolderManager","addCallback","authState","isMasterTab","sync","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","newUser","newFullInfo","avatarHash","profilePhoto","fallbackPhoto","personalPhoto","photos","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","updateUser","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadUserStories","closeNewContactDialog","isPrivate","userOrChat","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","expires","isCloseFriend","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","isWriteAllowed","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","botId","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","_len3","_key3","openUrl","openGame","alert","isError","buildQueryString","k","join","getPaymentForm","inputInvoice","form","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","_len4","_key4","shippingOptions","setRequestInfoId","updateShippingOptions","button","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","senderId","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","selectBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","webApp","isFromBotMenu","reply","appName","startApp","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","requestedAttachBotInstall","botUser","actionPayload","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","payment","isPaymentModalOpen","status","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","closeInvoice","step","isClosed","premiumModal","isOpen","isClosing","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","promo","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","emoticon","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","some","userReaction","newUserReactions","selectMaxUserReactions","selectPerformanceSettingsValue","newActiveReactions","activeReactions","active","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","fetchUnreadReactions","fromEntries","unread","topReactions","isGroup","selectChatFullInfo","dcId","statisticsDcId","stats","recentTopMessages","msgId","updateStatistics","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","stories","hasNext","stateHash","isFirstRequest","state","addStories","userStories","updateUsersWithStories","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectUserStories","skippedStoryIds","addStoriesForUser","updateLastViewedStoryForUser","serverTime","byUserId","lastReadId","updateLastReadStoryForUser","removeUserStory","currentIsPinned","updateUserStory","updateUserPinnedStory","lastReadStoryId","storyIds","updateStorySeenBy","viewerIds","recentViewerIds","PREVIEW_AVATAR_COUNT","reverse","viewsCount","privacy","allowedUserList","allowUserIds","deniedUserList","blockUserIds","visibility","toggleUserStoriesHidden","userIdsToLoad","maxStoryId","hasStories","closeLocalTextSearch","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","replaceTabThreadParam","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActions","canCopy","message1","message2","resultHtml","resultText","sender","selectSender","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","groupedMessageIds","selectedMessages","openForwardMenu","cancelMessageMediaDownload","addActiveMessageMediaDownload","canDownload","downloadMessageMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseMessageInput","serviceChat","fractionalPart","serviceNotification","reactorModal","seenByModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","fetchingStatus","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","stickerSearch","newContact","isByPhoneNumber","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","newStickers","s","order","isCustomEmoji","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","top","left","height","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","APP_VERSION_REGEX","then","trim","test","isUpdateAvailable","catch","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","byKey","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","clearPayment","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","noLockOnUnload","onBeforeUnload","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","_global$passcode$inva","timeoutUntil","reactionPicker","isSingleUser","isSingleStory","isArchive","selectUserFirstUnreadStoryId","selectUserFirstStoryId","storyIdSeenBy","fetchChatByUsername","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByUserIds","isShown","orderedUserIds","_userStories$storySou","archived","areStoriesHidden","storySourceProp","currentStoryIndex","previousStoryIndex","previousUserId","previousUserIdIndex","previousStoryId","_userStories$storySou2","userStoryIds","nextStoryIndex","nextUserId","nextUserIdIndex","nextStoryId","copyTextToClipboard","actionText","isPrivacyModalOpen","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","currentUser","updateUserFullInfo","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedContact","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","props","StickerSetModal","useModuleLoader","Bundles","React","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","isLottie","stickerHash","getStickerPreviewHash","previewMediaData","useMedia","paths","useMemo","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","buildClassName","path","style","CustomEmoji","styles","withSharedAnimation","src","alt","StatusPickerMenu","withGlobal","setEmojiStatus","loadCurrentUser","buttonRef","useRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","useCallback","handleEmojiStatusClick","CustomEmojiEffect","ref","ripple","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","onClose","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isFetchingDifference","isConnectionStatusMinimized","animationLevel","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","canSetPasscode","selectCanSetPasscode","shouldHideSearch","contactsFilter","onSearchQuery","isClosingSearch","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","skipLockOnUnload","updatePerformanceSettings","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","archivedUnreadChatsCount","chatsCount","handleLockScreenHotkey","useLastCallback","stopPropagation","handleOpenMyStories","useHotkeys","IS_APP","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ariaLabel","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","ANIMATION_LEVEL_MAX","ANIMATION_LEVEL_MIN","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","localStorage","setItem","clearWebsync","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","animationLevelValue","isFullscreen","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","menuItems","MenuItem","icon","Switcher","label","checked","noAnimation","Toggle","isCharIcon","getPromptInstall","searchContent","PickerSelectedItem","canClose","clickArg","chatOrUserId","DropdownMenu","trigger","footer","APP_NAME","positionX","transformOriginX","IS_MAC_OS","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","STORY_RIBBON_APPEARANCE_DURATION_MS","orderedFolderIds","folderInvitesById","archivedStories","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","isStoryRibbonAnimated","setIsStoryRibbonAnimated","useLayoutEffect","timeoutId","shouldRender","shouldRenderStoryRibbon","transitionClassNames","storyRibbonClassNames","isStoryRibbonClosing","useShowTransition","allChatsFolder","ALL_FOLDER_ID","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","isBadgeActive","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRenderPlaceholder","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","renderCount","LeftSearch","Loading","ContactList","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionY","autoClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","installUpdate","reload","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","fluid","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","useSyncEffect","handleSettingsScreenSelect","renderContent","currentScreen","onScreenSelect","isChannel","LeftMain","LAYERS_ANIMATION_NAME","drawRect","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","EMOJI_SIZE","customTitle","onUnpinMessage","onAllPinnedClick","isFullWidth","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","getMessageMediaHash","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleClick","handleMouseDown","useFastClick","ConfirmDialog","confirmLabel","confirmHandler","onMouseDown","PinnedMessageNavigation","thumbDataUri","spoiler","getPictogramDimensions","srcUrl","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","renderText","MessageSummary","noEmoji","emojiSize","RippleEffect","shouldStopPropagation","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onContextMenu","volumeIcon","renderAudio","subtitle","renderVoice","disabled","RangeSlider","bold","forceOpen","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","confirmIsDestructive","Checkbox","onCheck","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","selectIsChatWithSelf","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","selectForwardedSender","canUnpin","isComments","firstPinnedMessage","isReady","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","useDerivedState","waitingForPinnedId","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handleHeaderMouseDown","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","usePrevious","canRevealTools","componentEl","classList","requestMutation","remove","renderBackButton","asClose","withUnreadCounter","UnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","emojiStatusSize","noRtl","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderPinnedMessage","ChatReportPanel","AudioPlayer","getMessageKey","HeaderActions","canExpandActions","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","senderUserId","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","asForwarded","noAvatars","ratios","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","excludedClosestSelector","onRelease","preventMessageInputBlur","target","contains","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","Symbol","toStringTag","_Symbol$iterator","iterator","LimitedMap","_defineProperty","insertionQueue","keyToRemove","shift","clear","callbackfn","thisArg","_Symbol$toStringTag","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","metadata","isTranslatable","detectedLanguage","occurrences","outgoingStatus","signature","withReactionOffset","renderQuickReactionButton","noReplies","isTranslated","onTranslationClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","formatDateTimeToString","timeFormat","editDateTime","isEdited","editDate","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","observeIntersection","observeIntersectionForPlaying","shouldLoop","shouldPlayEffect","withEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","useIsIntersecting","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","onEnded","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","container","performance","interactionMessageId","withEffects","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","forceLoadPreview","isIntersecting","AnimatedIconFromSticker","quality","forcePreview","LIKE_STICKER_ID","customEmojiId","selectCanPlayAnimatedEmojis","getCustomEmojiSize","isBig","observeIntersectionForLoading","contact","countryList","phoneCodes","phoneCodeList","isRegistered","Avatar","formatPhoneNumberWithCode","getPercentage","total","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","usersById","onSendVote","openPollResults","requestConfetti","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","isCorrect","answers","hidden","quiz","chosen","strokeDashOffset","timer","recentVoters","chatsById","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","formatMediaDuration","cx","cy","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","PollOption","getReadableVotersCount","shouldAffectAppendix","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","Skeleton","forceAspectRatio","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","dataUri","VENUE_COLORS","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","scale","PinSvg","viewBox","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","timeLeft","formatCountdownShort","textContent","long","prepareMapUrl","pinClassName","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","playsInline","muted","disablePictureInPicture","autoPlay","loop","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsById","activeDownloadIds","hasCustomAppendix","albumLayout","onMediaClick","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","getMessageHtmlId","onCancelUpload","isDownloading","PROGRESS_CENTER","ROUND_VIDEO_DIMENSIONS_PX","PROGRESS_CIRCUMFERENCE","stopPrevious","playerRef","circleRef","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","downloadProgress","isPlayerReady","markPlayerReady","noThumb","getMessageMediaThumbDataUri","thumbRef","thumbClassNames","useMediaTransition","isTransferring","wasLoadDisabled","shouldSpinnerRender","spinnerClassNames","setIsActivated","getProgress","setProgress","useSignal","getThrottledProgress","useThrottledSignal","playerEl","currentTime","shouldPlay","stopPlaying","capturePlaying","isAllowed","paused","stopCurrentAudio","handleTimeUpdate","OptimizedVideo","onTimeUpdate","onReady","ProgressSpinner","renderIcon","openComments","recentRepliers","hasUnread","commentsText","CENTER_ICON_SIZE","EFFECT_SIZE","genericEffects","stopActiveReaction","centerIconId","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","onLoad","withRecentReactors","recentReactors","recentReaction","ReactionAnimatedEmoji","AvatarList","peers","isOutside","metaChildren","noRecentReactors","ReactionButton","getReactionUniqueKey","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","noUserColors","isFullStory","isExpiredStory","isVideoStory","getStoryMediaHash","pictogramUrl","handleFastClick","getUserColorKey","draggable","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","role","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","MessageAppendix","filterUnits","dy","in","stdDeviation","fill","focusedMessage","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","replyToChatId","replyToStoryUserId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","chatFullInfo","webPageStoryData","webPage","webPageStory","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","isLocation","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withReactionEffects","withStickerEffects","selectOutgoingStatus","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onPinnedIntersectionChange","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","isTouchScreen","useOnIntersect","contextMenuPosition","contextMenuTarget","noAppearanceAnimation","markShown","viewportPinnedIdsToRemove","isUnmount","isOwnMessage","hasReply","isReplyMessage","hasStoryReply","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isMention","isStoryMention","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","focusMessageInComments","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","hasText","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","metaPosition","reactionsPosition","quickReactionPosition","useFocusMessage","postAuthorTitle","requestForcedReflow","offsetWidth","useAuthorWidth","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","dispatchHeavyAnimationEvent","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","renderReactionsAndMeta","meta","MessageMeta","Reactions","forwardAuthor","chatUsername","c","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","fakeType","FakeIcon","renderSenderName","TopicChip","EmbeddedMessage","EmbeddedStory","Sticker","AnimatedCustomEmoji","AnimatedEmoji","Album","MessagePhoneCall","RoundVideo","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","Story","StoryMention","Contact","Poll","Game","InvoiceMediaPreview","DotAnimation","WebPage","onCancelMediaTransfer","Invoice","Location","CommentButton","InlineButtons","ContextMenuContainer","anchor","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","chatBot","isLoadingBotInfo","chatBotFullInfo","isInMessageList","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","isBotInfoEmpty","messageGroups","getContainerHeight","isViewportNewest","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isSchedule","shouldRenderBotInfo","onFabToggle","onNotchToggle","openHistoryCalendar","useDerivedSignal","observeIntersectionForReading","markMentionsRead","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","isLocalMessageId","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","isTopicTopMessage","Message","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","MessageListBotInfo","SponsoredMessage","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isCreator","noMessageSendingAnimation","isServiceNotificationsChat","hasTools","canPost","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadUserStoriesByIds","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","storyDataList","storiesByUserIds","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","parentElement","prevContainerHeightRef","isComposerVisible","setContainerHeight","currentNormalHeight","normalHeight","String","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","useStateRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","animateScroll","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","ContactGreeting","NoMessages","MessageListContent","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","elementRef","hasUnreadReactions","hasUnreadMentions","messagesContainer","messageElements","lastMessageElement","ScrollDownButton","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","ChatLanguageModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","shouldLoadFullChat","shouldBlockSendInForum","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","isDesktop","dropAreaState","setDropAreaState","DropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","customBackgroundValue","useCustomBackground","settingValue","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","Blob","blob","createObjectURL","preloadImage","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onMouseUp","onDragEnter","MiddleHeader","onStop","MessageList","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","FloatingActionButtons","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","selectCanManage","isEditingInvite","canViewStatistics","_useCurrentOrPrev","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","ManagementScreens","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","StoryList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","CreateTopic","EditTopic","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","loadUserSkippedStories","toggleStoryPinned","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","transformOriginY","menuStyle","useMenuPosition","preventMessageInputBlurWithBubbling","handlePinClick","handleUnpinClick","TABS","mediaSearchType","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","hasCommonChatsTab","hasStoriesTab","resolvedUserId","archiveStoryIds","storyByIds","archiveIds","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","loadUserPinnedStories","loadStoriesArchive","deletingUserId","setDeletingUserId","initialTab","setActiveTab","renderingActiveTab","tabType","handleLoadUserStories","handleLoadStoriesArchive","resultType","noProfileInfo","searchMessages","loadStories","groupChatMembers","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","useUserStoriesPolling","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","StickerSearchAsync","GifSearchAsync","PollResultsAsync","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","prevChatId","RightHeader","MediaViewer","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","activeMessages","chatActiveDownloads","chatScheduledMessages","downloadHash","download","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","filename","encodeURIComponent","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createLocationHash","_extends","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","CONFETTI_COLORS","pick","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","beginPath","ellipse","hideTimeout","prevConfettiTime","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","ReactionPicker","info","ChatlistModal","StoryViewer","DEBUG_isLogged","wasTimeFormatSetManually","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","currentUserName","isPremiumModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadTopReactions","loadFeaturedEmojiStickers","setIsAppUpdateAvailable","loadBundle","removeUpdateDownloadedListener","on","ElectronEvent","removeUpdateErrorListener","BASE_EMOJI_KEYWORD_LANG","langCode","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","parentNode","childElementCount","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","AnimatedIconWithPreview","LOCAL_TGS_URLS","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}