{"version":3,"file":"5769.4a58b0e633132a58d80f.js","mappings":"uSA0DO,SAASA,EACdC,GAEG,QAAAC,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,EAAA,GAAAJ,UAAAI,GAAA,IADCC,GAAQC,EAAAA,EAAAA,OAAkBJ,EAE9B,MAAM,OAAEK,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACzE,OAAKE,GAAWC,GAIhBV,GAASY,EAAAA,EAAAA,IAAsBZ,EAAQS,EAAQC,GAAU,OAAOG,EAAWN,GAC3EP,GAASc,EAAAA,EAAAA,IAA8Bd,EAAQS,EAAQC,OAAUG,OAAWA,OAAWA,EAAWN,IAJzFP,CAMX,EAzDAe,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACzE,GAAKE,GAAWC,EAIhB,OAAOE,EAAAA,EAAAA,IAAsBZ,EAAQS,EAAQC,GAAU,OAAMG,EAAWN,EAAM,KAGhFQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOlB,EAAqBC,EAAQO,EAAM,KAG5CQ,EAAAA,EAAAA,IAAiB,2BAA2B,CAACf,EAAQgB,EAASC,KAC5D,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,GAEvC,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACzE,IAAKE,IAAWC,EACd,OAGF,MAAMS,GAAgBC,EAAAA,EAAAA,IAAmBX,EAAQC,IACzCQ,MAAOG,IAAiBC,EAAAA,EAAAA,IAAetB,EAAQO,GAAOgB,gBAAgBC,gBAAgBL,IAAkB,CAAC,EAQjH,OANID,IAAUG,IACZrB,GAASc,EAAAA,EAAAA,IAA8Bd,EAAQS,EAAQC,EAAUe,EAAAA,OAAkBZ,OAAWA,EAAWN,KAGlGK,EAAAA,EAAAA,IAAsBZ,EAAQS,EAAQC,GAAU,EAAMQ,EAAOX,EAEzD,KAGfQ,EAAAA,EAAAA,IAAiB,2BAA2B,CAACf,EAAQgB,EAASC,KAC5D,MAAM,UAAES,EAAS,MAAEnB,GAAQC,EAAAA,EAAAA,OAAsBS,GAC3C,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACzE,GAAKE,GAAWC,EAIhB,OAAOiB,EAAAA,EAAAA,IAA2B3B,EAAQS,EAAQC,EAAUgB,EAAWnB,EAAM,I,2BCvC/EQ,EAAAA,EAAAA,IAAiB,YAAY,CAACf,EAAQgB,EAASC,KAC7C,MAAM,GACJW,EAAE,SACFlB,EAAWmB,EAAAA,GAAc,KACzBC,EAAO,SAAQ,qBACfC,GAAuB,EAAK,kBAC5BC,GAAoB,EAAK,kBACzBC,EAAiB,MACjB1B,GAAQC,EAAAA,EAAAA,OACNS,EAEEiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAEtD4B,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GAmCxC,GAlCI4B,EAASC,cAAcC,OAASF,EAASC,cAAcE,SACzDtC,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BoC,aAAc,IACTD,EAASC,aACZE,QAAQ,IAET/B,IAGA2B,GACHA,EAAmBzB,SAAWmB,GAC3BM,EAAmBxB,WAAaA,GAChCwB,EAAmBJ,OAASA,IAE3BF,IACF5B,GAASwC,EAAAA,EAAAA,IAAsBxC,EAAQ4B,EAAIlB,EAAU,aAAc,GAAIH,GAEvEP,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9ByC,gBAAiB,CAAC,GACjBlC,IAILP,EAASD,EADTC,GAAS0C,EAAAA,EAAAA,IAAsB1C,EAAQO,GACDA,GAEtCP,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B2C,mBAAmB,EACnBC,0BAAsB/B,KAClBe,KAAON,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsC,gBAAgBC,UAAY,CACnED,gBAAiB,CAAC,IAEnBtC,IAGDqB,EAAI,CACN,MAAMmB,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQ4B,GAE5BmB,GAAME,UAAYhB,EACpBjB,EAAQkC,eAAe,CAAEzC,OAAQmB,EAAKrB,UAC7BqB,KAAON,EAAAA,EAAAA,IAAetB,EAAQO,GAAO4C,kBAC9CnC,EAAQoC,gBAAgB,CAAE7C,SAE9B,CAIA,OAFAS,EAAQqC,gBAAgB,CAAE9C,WAEnB+C,EAAAA,EAAAA,IAAyBtD,EAAQ4B,EAAIlB,EAAUoB,EAAMC,EAAsBC,EAAmBzB,EAAM,KAG7GQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,OAAER,EAAM,SAAEC,EAAWmB,EAAAA,IAAmBZ,EAE9CsC,OAAOC,MAAKC,EAAAA,EAAAA,IAAqBhD,EAAQ,SAAUC,GAAW,SAAS,KAGzEK,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OADAD,EAAQqC,gBAAgB,CAAE9C,WACnB+C,EAAAA,EAAAA,IAAyBtD,OAAQa,OAAWA,OAAWA,OAAWA,OAAWA,EAAWN,EAAM,KAGvGQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,EAEtCjB,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,KAC3BsB,EAAAA,EAAAA,IAAetB,EAAQO,GAC1BmD,iBAAiB,GAChBnD,GACHP,EAAS,IAAKA,EAAQ2D,qBAAqB,IAC3CC,EAAAA,EAAAA,IAAU5D,GAEVgB,EAAQ6C,SAAS,IAAK5C,EAASV,SAAQ,KAGzCQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,OACJR,EAAM,KAAEqD,EAAI,SAAEpD,EAAQ,MAAEqD,EAAK,OAAEC,EAAM,MAAEzD,GAAQC,EAAAA,EAAAA,OAC7CS,EAMJ,OAJIR,GACFO,EAAQ6C,SAAS,CAAEjC,GAAInB,EAAQC,WAAUH,WAGpCgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BiE,eAAgB,CACdxD,SACAqD,OACAC,QACAC,WAEDzD,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BkE,kBAAcrD,GACbN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,gCAAgC,CAACf,EAAQgB,EAASC,KACjE,MAAM,uBAAEkD,EAAsB,MAAE5D,GAAQC,EAAAA,EAAAA,OAAsBS,EAC9D,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BmE,0BACC5D,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,gBAAgB,CAACf,EAAQgB,EAASC,KACjD,MAAM,iBAAEmD,EAAgB,WAAEC,EAAU,MAAE9D,GAAQC,EAAAA,EAAAA,OAAsBS,GAE9D,OAAER,IAAWE,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAE/D,IAAKE,EAEH,YADAO,EAAQ6C,SAAS,CAAEjC,GAAIyC,EAAW,GAAI9D,UAIxC,MAAM+D,EAAWD,EAAWE,QAAQ9D,GAEpC,IAAkB,IAAd6D,EACF,OAEF,MAAME,EAASH,EAAWC,EAAWF,GAErCpD,EAAQ6C,SAAS,CAAEjC,GAAI4C,EAAQzC,sBAAsB,EAAMxB,SAAQ,KAGrEQ,EAAAA,EAAAA,IAAiB,8BAA8B,CAACf,EAAQgB,EAASC,KAC/D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5ByE,6BAAyB5D,GACxBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,sBAAsB,CAACf,EAAQgB,EAASC,KACvD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B0E,mBAAe7D,GACdN,EAAM,I,qGC9GX,MACMoE,EAA8BC,EAAAA,IAA2BC,EAAAA,IAK/D,IAAIC,EAwvBJ,SAASC,EAAoB/E,EAAqBS,EAAgBuE,GAChE,MAAQlD,KAAMmD,EAAe,SAAEvE,IAAaC,EAAAA,EAAAA,IAAyBX,IAAW,CAAC,EAC3EkF,EAAOC,EAAAA,GAEPC,EAAmC,cAApBH,GACjBI,EAAAA,EAAAA,IAA4BrF,EAAQS,IACpC6E,EAAAA,EAAAA,IAAmBtF,EAAQS,GAC/B,IAAK2E,IAAiB1E,EAAU,OAChC,MAAM6E,EAAWP,EACdQ,KAAK5D,GAAOwD,EAAaxD,KACzBoC,QAAQyB,IAAYC,EAAAA,EAAAA,IAA4B1F,EAAQyF,EAAS/E,GAAUiF,UAC3EC,MAAK,CAACC,EAAUC,IAAaD,EAASjE,GAAKkE,EAASlE,KAEjDmE,EAASR,EAASS,QAAO,CAACC,EAAKR,KACnC,MAAMS,GAASC,EAAAA,EAAAA,IAAanG,EAAQyF,GAKpC,OAHAQ,EAAIG,KAAM,KAAIF,GAASG,EAAAA,EAAAA,IAAenB,EAAMgB,GAAU,OACtDD,EAAIG,KAAM,GCp0BP,SACLlB,EACAO,GAEA,MAAMa,GAAQC,EAAAA,EAAAA,IAAuBd,GAC/Be,EAAiBF,EAAS,GAAEA,KAAW,GACvCxC,GAAO2C,EAAAA,EAAAA,GACXhB,OAAS5E,OAAWA,OAAWA,OAAWA,OAAWA,GAAW,IAC/D6F,KAAK,IAGR,MAAQ,GAAEF,KAFUG,EAAAA,EAAAA,IAA6BzB,EAAMO,EAAS3B,GAAM,IAGxE,CDwzBgB8C,CAAyB1B,EAAMO,QAEpCQ,CAAG,GACT,IAEGY,EAAatB,EAASS,QAAO,CAACC,EAAKR,KACvC,MAAMS,GAASC,EAAAA,EAAAA,IAAanG,EAAQyF,GAIpC,OAHAQ,EAAIG,KAAM,KAAIF,GAASG,EAAAA,EAAAA,IAAenB,EAAMgB,GAAU,OACtDD,EAAIG,KAAM,IAAEU,EAAAA,EAAAA,IAAsB5B,EAAMO,GAAS,EAAO,GAAG,QAEpDQ,CAAG,GACT,KAEHc,EAAAA,EAAAA,IAAoBhB,EAAOW,KAAK,MAAOG,EAAWH,KAAK,MACzD,EArxBA3F,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,OACJR,EAAM,SAAEC,EAAQ,aAAEsG,EAAY,MAAEzG,GAAQC,EAAAA,EAAAA,OACtCS,EAIJ,OAFAjB,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQC,EAAU,mBAAoBsG,IAEnExE,EAAAA,EAAAA,IAAsBxC,EAAQS,EAAQC,EAAU,eAAgBsG,EAAczG,EAAM,KAG7FQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,UAAEiG,EAAS,MAAE3G,GAAQC,EAAAA,EAAAA,OAAsBS,EAC3CiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAEF,MAAM,OAAEzB,EAAM,SAAEC,GAAawB,EAE7B,OAAO+E,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQC,EAAU,eAAgBwG,EAAU,KAGhFnG,EAAAA,EAAAA,IAAiB,gBAAgB,CAACf,EAAQgB,EAASC,KACjD,MAAM,UAAEiG,EAAS,MAAE3G,GAAQC,EAAAA,EAAAA,OAAsBS,EAC3CiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAGF,MAAM,OAAEzB,EAAM,SAAEC,EAAQ,KAAEoB,GAASI,EAC7BiF,EAAqB,cAATrF,EAAuB,qBAAuB,YAEhE,OAAOmF,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQC,EAAUyG,EAAWD,EAAU,KAG3EnG,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,KACJ6C,EAAI,OAAErD,EAAM,SAAEC,EAAQ,KAAEoB,GACtBb,EAEEkG,EAAqB,cAATrF,EAAuB,wBAA0B,eAEnE,OAAOmF,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQC,EAAUyG,EAAWrD,EAAK,KAGtE/C,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACzE,IAAKE,IAAWC,EACd,OAGF,MAAM0E,GAAeE,EAAAA,EAAAA,IAAmBtF,EAAQS,GAC1C2G,GAAcC,EAAAA,EAAAA,IAAkBrH,EAAQS,EAAQC,EAAUH,GAChE,IAAK6E,IAAiBgC,EACpB,OAGF,MAAME,GAA2BC,EAAAA,EAAAA,IAASH,GAAcxF,GAC/C4F,QAAQpC,EAAaxD,KAAO8D,EAAAA,EAAAA,IAA4B1F,EAAQoF,EAAaxD,GAAKlB,GAAU+G,WAGrG,OAAKH,GAIEL,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQC,EAAU,YAAa4G,QAJjE,CAI0F,KAG5FvG,EAAAA,EAAAA,IAAiB,sBAAsB,CAACf,EAAQgB,EAASC,KACvD,MAAM,iBAAEmD,EAAgB,MAAE7D,GAAQC,EAAAA,EAAAA,OAAsBS,GAClD,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACzE,IAAKE,IAAWC,EACd,OAGF,MAAM0E,GAAeE,EAAAA,EAAAA,IAAmBtF,EAAQS,GAC1C2G,GAAcC,EAAAA,EAAAA,IAAkBrH,EAAQS,EAAQC,EAAUH,GAChE,IAAK6E,IAAiBgC,EACpB,OAGF,MAAMM,GAAeC,EAAAA,EAAAA,IAAmB3H,EAAQS,EAAQC,GAGxD,IAAIwG,EAEJ,IAJiBU,EAAAA,EAAAA,IAAuB5H,EAAQS,EAAQC,EAAUH,IAIhDmH,EAUX,CACL,MAAMG,EAAkBC,OAAOC,KAAK3C,GAE9B4C,EADiBH,EAAgBtD,QAAQmD,EAAaO,YAC1B7D,EAClC8C,EAAYc,GAAYH,EAAgB1H,OAAS,GAAK6H,GAAY,EAC9DE,OAAOL,EAAgBG,SACvBnH,CACN,MAhBE,GAAIH,IAAamB,EAAAA,GAAgB,CAC/B,MAAMkB,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAEhCyG,EAAYnE,GAAMoF,aAAavG,EACjC,KAAO,CACL,MAAMwG,GAAaC,EAAAA,EAAAA,IAAiBrI,EAAQS,EAAQC,GAEpDwG,EAAYkB,GAAYE,aAC1B,CASFtH,EAAQuH,gBAAgB,CAAErB,YAAW3G,UACrCS,EAAQwH,aAAa,CACnB/H,SACAC,WACAwG,UAAWA,EACX3G,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,OACJR,EAAM,SAAEC,EAAQ,UAAEwG,EAAS,OAAEuB,EAAM,OAAEC,EAAM,aAAEC,EAAY,QAAEC,EAAO,MAClErI,GAAQC,EAAAA,EAAAA,OACNS,EAEEkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6I,YAAa,CACXpI,SACAC,WACAwG,YACAuB,OAAQA,QAAAA,EAAUtG,EAAS0G,YAAYJ,OACvCC,OAAQA,QAAAA,EAAUvG,EAAS0G,YAAYH,OACvCC,aAAcA,GAAgBxG,EAAS0G,YAAYF,cAAgB3I,EAAO6I,YAAYC,iBACtFC,0BAAqElI,IAA9CsB,EAAS0G,YAAYE,qBACxC/I,EAAO6I,YAAYG,yBACnB7G,EAAS0G,YAAYE,qBACzBH,QAASA,GAAWzG,EAAS0G,YAAYD,UAE1CrI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,OACJyH,EAAM,MAAEnI,GAAQC,EAAAA,EAAAA,OACdS,EAEJ,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6I,YAAa,KACRvH,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsI,YACjCH,SACAE,SAAS,IAEVrI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,8BAA8B,CAACf,EAAQgB,EAASC,KAC/D,MAAM,aACJ0H,EAAY,qBAAEI,EAAoB,MAAExI,GAAQC,EAAAA,EAAAA,OAC1CS,EAWJ,OATAjB,EAAS,IACJA,EACH6I,YAAa,IACR7I,EAAO6I,YACVC,iBAAkBH,EAClBK,yBAA0BD,KAIvBxG,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6I,YAAa,KACRvH,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsI,YACjCF,eACAI,yBAEDxI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,QACJ2H,EAAO,MAAErI,GAAQC,EAAAA,EAAAA,OACfS,EAEJ,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6I,YAAa,KACRvH,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsI,YACjCD,YAEDrI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,OACJwH,EAAM,MAAElI,GAAQC,EAAAA,EAAAA,OACdS,EAEJ,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6I,YAAa,KACRvH,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsI,YACjCJ,WAEDlI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6I,YAAa,CACXH,OAAQvG,EAAS0G,YAAYH,OAC7BC,aAAcxG,EAAS0G,YAAYF,aACnCI,qBAAsB5G,EAAS0G,YAAYE,qBAC3CH,QAASzG,EAAS0G,YAAYD,UAE/BrI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,OAAER,EAAM,UAAEyG,EAAS,MAAE3G,GAAQC,EAAAA,EAAAA,OAAsBS,EAEnDgI,GAAsBC,EAAAA,EAAAA,IAAyBlJ,GAAQmJ,EAAAA,EAAAA,MAAe5I,GACtE4B,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GAExC,GAAK0I,GAaE,GAAIxI,IAAW0B,EAASiH,YAAY3I,QAAUyG,IAAc/E,EAASiH,YAAYlC,UACtF,OAAO3E,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BoJ,YAAa,CACX3I,SACAyG,YACAmC,OAAQ,CAAC,IAEV9I,QAnBHgD,OAAO+F,YAAW,KAChBtJ,GAASuJ,EAAAA,EAAAA,MAETvJ,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BoJ,YAAa,CACX3I,SACAyG,YACAmC,OAAQ,CAAC,IAEV9I,IACHqD,EAAAA,EAAAA,IAAU5D,EAAO,GA3OW,IAuPhB,KAGlBe,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BoJ,YAAa,CAAC,GACb7I,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAGF,MAAM,OAAEzB,EAAM,SAAEC,GAAawB,EAE7B,IAAIoG,EACJ,GAAI5H,IAAamB,EAAAA,GAAgB,CAC/B,MAAMkB,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAEhC6H,EAAgBvF,GAAMoF,aAAavG,EACrC,KAAO,CACL,MAAMwG,GAAaC,EAAAA,EAAAA,IAAiBrI,EAAQS,EAAQC,GAEpD4H,EAAgBF,GAAYE,aAC9B,CAEKA,GAILtH,EAAQwH,aAAa,CACnB/H,SACAC,WACAwG,UAAWoB,EACXkB,aAAa,EACbvH,mBAAmB,EACnB1B,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAGF,MAAM,OAAEzB,EAAM,SAAEC,GAAawB,EAEvBuH,GAAaC,EAAAA,EAAAA,IAAiB1J,EAAQS,EAAQC,EAAUH,GAE9D,GAAKkJ,GAAoC,IAAtBA,EAAWtJ,OAEvB,CACL,MAAM+G,EAAYuC,EAAWE,MAE7B3J,GAASwC,EAAAA,EAAAA,IAAsBxC,EAAQS,EAAQC,EAAU,aAAc,IAAI+I,GAAalJ,IAExFqD,EAAAA,EAAAA,IAAU5D,GAEVgB,EAAQwH,aAAa,CACnB/H,SACAC,WACAwG,UAAWA,EACX3G,QACA0B,mBAAmB,GAEvB,MAfEjB,EAAQ4I,iBAAiB,CAAErJ,SAiBb,KAGlBQ,EAAAA,EAAAA,IAAiB,gBAAgB,CAACf,EAAQgB,EAASC,KACjD,MAAM,OACJR,EAAM,SAAEC,EAAWmB,EAAAA,GAAc,gBAAEoD,EAAkB,SAAQ,YAAEuE,EAAW,UAAEK,EAAS,cAAEC,EAAa,eACpGC,EAAc,oBAAEC,EAAmB,qBAAEjI,EAAoB,kBAAEE,EAAiB,MAC5E1B,GAAQC,EAAAA,EAAAA,OACNS,EAEJ,IAAI,UAAEiG,GAAcjG,EAEpB,QAAkBJ,IAAdgJ,EAAyB,CAC3B,MAAMI,GAAMC,EAAAA,EAAAA,IAAmClK,EAAQ8J,EAAgBD,GACnEI,GAAK9J,UACL+G,IAAaiD,EAAAA,EAAAA,IAAQF,GAE3B,CAEA,MAAM/H,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GACtD6J,GAAoBlI,GACxBzB,IAAWyB,EAAmBzB,QAC3BC,IAAawB,EAAmBxB,UAChCuE,IAAoB/C,EAAmBJ,KAiB5C,GAdIgD,IACFuF,aAAavF,GACbA,OAAcjE,GAEhBiE,EAAcvB,OAAO+F,YAAW,KAC9BtJ,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASsK,EAAAA,EAAAA,IAAqBtK,OAAQa,OAAWA,OAAWA,OAAWA,OAAWA,EAAWN,GAC7FP,GAASuK,EAAAA,EAAAA,IAAqBvK,OAAQa,EAAWN,IACjDqD,EAAAA,EAAAA,IAAU5D,EAAO,GAChBwJ,EAAc7E,EArWI,MAuWrB3E,GAASsK,EAAAA,EAAAA,IAAqBtK,EAAQS,EAAQyG,EAAWxG,EAAU8I,EAAaQ,EAAqBzJ,GACrGP,GAASuK,EAAAA,EAAAA,IAAqBvK,OAAQa,EAAWN,GAE7CwJ,EAAgB,CAClB,MAAMN,GAAaC,EAAAA,EAAAA,IAAiB1J,EAAQS,EAAQC,EAAUH,IAAU,GACxEP,GAASwC,EAAAA,EAAAA,IAAsBxC,EAAQS,EAAQC,EAAU,aAAc,IAAI+I,EAAYM,GAAiBxJ,EAC1G,CAEI6J,IACFpK,GAASuK,EAAAA,EAAAA,IAAqBvK,EAAQwK,EAAAA,GAAAA,OAAuBjK,IAG/D,MAAM6G,GAAcC,EAAAA,EAAAA,IAAkBrH,EAAQS,EAAQC,EAAUH,GAChE,GAAI6G,GAAeA,EAAYqD,SAASvD,GAStC,OARAtD,EAAAA,EAAAA,IAAU5D,EAAQ,CAAE0K,uBAAuB,SAC3C1J,EAAQ6C,SAAS,CACfjC,GAAInB,EACJC,WACAqB,uBACAE,oBACA1B,UASJ,GAJI6J,IACFpK,GAASwC,EAAAA,EAAAA,IAAsBxC,EAAQS,EAAQC,EAAU,mBAAeG,EAAWN,IAGjF6G,IAAgBgD,EAAkB,CACpC,MAAMO,EAAYzD,EAAYE,EAAY,GAAKoD,EAAAA,GAAAA,KAAsBA,EAAAA,GAAAA,GACrExK,GAASuK,EAAAA,EAAAA,IAAqBvK,EAAQ2K,EAAWpK,EACnD,EAEAqD,EAAAA,EAAAA,IAAU5D,EAAQ,CAAE0K,uBAAuB,IAE3C1J,EAAQ6C,SAAS,CACfjC,GAAInB,EACJC,WACAqB,uBACAE,oBACA1B,UAEFS,EAAQ4J,qBAAqB,CAC3BrK,QACAsK,mBAAmB,GAEL,KAGlB9J,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,WACJ6J,EAAU,WAAE9F,EAAU,UAAE6E,EAAS,YAAEkB,EAAW,MAAExK,GAAQC,EAAAA,EAAAA,OACtDS,EACJ,IAAI+J,EAIJ,OAHInB,IACFmB,GAAoBC,EAAAA,EAAAA,IAA0BjL,EAAQ8K,EAAYjB,KAE7DtH,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6C,gBAAiB,CACfiI,aACA9F,WAAYgG,GAAqBhG,EACjCkG,cAAc,EACdH,gBAEDxK,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACf,EAAQgB,EAASC,KAC3D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6C,gBAAiB,KACZvB,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsC,gBACjCC,cAAUjC,EACVqK,cAAc,EACdC,WAAW,EACXC,YAAY,IAEb7K,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,UAAEkK,EAAS,MAAE5K,GAAQC,EAAAA,EAAAA,OAAsBS,EAC3CkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6C,gBAAiB,IACZV,EAASU,gBACZsI,YAEAC,WAAYD,GAAahJ,EAASU,gBAAgBuI,aAEnD7K,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,WAAEmK,EAAU,MAAE7K,GAAQC,EAAAA,EAAAA,OAAsBS,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6C,gBAAiB,KACZvB,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsC,gBACjCuI,aACAD,UAAWC,IAEZ7K,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElDjB,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B6C,gBAAiB,CAAC,GACjBtC,IACHqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,sCAAsC,CAACf,EAAQgB,EAASC,KACvE,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,IAAK4B,EAASkJ,iBACZ,OAGF,MAAQ5K,OAAQqK,EAAU,WAAE9F,GAAe7C,EAASkJ,iBAEpDrK,EAAQsK,gBAAgB,CAAER,aAAY9F,aAAYzE,SAAQ,KAG5DQ,EAAAA,EAAAA,IAAiB,8BAA8B,CAACf,EAAQgB,EAASC,KAC/D,MAAM,QAAEwE,EAAO,MAAElF,GAAQC,EAAAA,EAAAA,OAAsBS,EAEzCkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GAClCgL,EAAWpJ,EAASqJ,gBAAgBD,SAAS9F,EAAQhF,QACtD8K,GAAaA,EAASpL,SAE3BH,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BwL,gBAAiB,CACfD,SAAU,IACLpJ,EAASqJ,gBAAgBD,SAC5B,CAAC9F,EAAQhF,QAAS8K,EAASvH,QAAQpC,GAAOA,IAAO6D,EAAQ7D,QAG5DrB,IACHqD,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,+BAA+B,CAACf,EAAQgB,EAASC,KAChE,MAAM,SAAEsE,EAAQ,MAAEhF,GAAQC,EAAAA,EAAAA,OAAsBS,EAE1CsK,GAAWjK,EAAAA,EAAAA,IAAetB,EAAQO,GAAOiL,gBAAgBD,SACzDE,EAAuD,CAAC,EAI9D,OAHA3D,OAAOC,KAAKwD,GAAUG,SAASjL,IAC7BgL,EAAYhL,GAAU8K,EAAS9K,GAAQuD,QAAQpC,IAAQ2D,EAASoG,MAAMlG,GAAYA,EAAQ7D,KAAOA,KAAI,KAEhGW,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BwL,gBAAiB,CACfD,SAAUE,IAEXlL,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,QAAEwE,EAAO,MAAElF,GAAQC,EAAAA,EAAAA,OAAsBS,EAEzCkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxCP,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BwL,gBAAiB,CACfD,SAAU,IACLpJ,EAASqJ,gBAAgBD,SAC5B,CAAC9F,EAAQhF,QAAS,IAAK0B,EAASqJ,gBAAgBD,SAAS9F,EAAQhF,SAAW,GAAKgF,EAAQ7D,OAG5FrB,IACHqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,4BAA4B,CAACf,EAAQgB,EAASC,KAC7D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,IAAK4B,EAASkJ,iBACZ,OAGF,MAAM,OAAE5K,EAAM,WAAEuE,GAAe7C,EAASkJ,kBAClC,SAAE3K,IAAaC,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAE3D6E,GAAeE,EAAAA,EAAAA,IAAmBtF,EAAQS,GAC3C2E,GAAiB1E,GACLsE,EAAWQ,KAAK5D,GAAOwD,EAAaxD,KAClDoC,QAAQyB,IAAYC,EAAAA,EAAAA,IAA4B1F,EAAQyF,EAAS/E,GAAUkL,cACrEF,SAASjG,GAAYzE,EAAQ6K,qBAAqB,CAAEpG,UAASlF,WAAS,KAGjFQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACf,EAAQgB,EAASC,KAC3D,MAAM,UAAEiG,EAAS,MAAE3G,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EACvD4C,GAAWiI,EAAAA,EAAAA,IAAkB9L,EAAQO,GAC3C,OAAKsD,GAIEkI,EAAAA,EAAAA,IAAuB/L,EAAQ6D,EAASjC,GAAIsF,EAAW3G,GAHrDP,CAG2D,KAGtEe,EAAAA,EAAAA,IAAiB,0BAA0B,CAACf,EAAQgB,EAASC,KAC3D,MAAM,UACJiG,EAAS,UACT2C,EAAS,gBACTmC,EAAe,UACfC,EAAS,MACT1L,GAAQC,EAAAA,EAAAA,OACNS,EACEiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAGF,MAAM,OAAEzB,EAAM,SAAEC,EAAUoB,KAAMmD,GAAoB/C,EAEpDlC,GAASkM,EAAAA,EAAAA,IACPlM,EAAQS,EAAQC,EAAUuE,EAAiBiC,EAAW2C,EAAWmC,EAAiBC,EAAW1L,IAG/FqD,EAAAA,EAAAA,IAAU5D,GAENA,EAAOmM,4BACTnL,EAAQoL,yBACRpL,EAAQqL,iBAAiB,CAEvB5G,QAAU,mDAAkD6G,EAAAA,GAAe,WAAa,8BACxF/L,UAEJ,KAGFQ,EAAAA,EAAAA,IAAiB,0BAA2Bf,IAC1C,GAAKA,EAAOmM,0BAIZ,MAAO,IACFnM,EACHmM,2BAA2B,EAC5B,KAGHpL,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOyB,EAAAA,EAAAA,IAAsB1C,EAAQO,EAAM,KAG7CQ,EAAAA,EAAAA,IAAiB,iBAAiB,CAACf,EAAQgB,EAASC,KAClD,MAAM,OAAEsL,EAAM,MAAEhM,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAE1D,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BwM,UAAW,CACTlK,QAAQ,EACRiK,WAEDhM,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BwM,UAAW,CACTlK,QAAQ,IAET/B,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,4BAA4B,CAACf,EAAQgB,KACpD,GAAIyL,EAAAA,KAAoBC,KAAKC,MAAQzE,OAAOuE,EAAAA,KAlnBR,OAmnBlC,OAGF,MAAMG,EAAiBC,EAAAA,IAAAA,MAAkB,KAAKC,MAAM,EAAG,GAAGpG,KAAK,MACzD,qBAAEqG,GAAyB/M,EAEjC,GAAI+M,EAAqBpB,MAAKvL,IAAA,IAAC,QAAE4M,GAAS5M,EAAA,OAAK4M,IAAYJ,CAAc,IACvE,OAGF,MAAMnH,EAAkC,CACtChF,OAAQwM,EAAAA,IACRC,MAAMC,EAAAA,EAAAA,MACNC,QAAS,CACPtJ,MAAMuJ,EAAAA,EAAAA,I,stEAAuC,IAE/CC,YAAY,GAGdtM,EAAQuM,0BAA0B,CAChC9H,QAASA,EACTuH,QAASJ,GACT,KAGJ7L,EAAAA,EAAAA,IAAiB,6BAA6B,CAACf,EAAQgB,EAASC,KAC9D,MAAM,QAAEwE,EAAO,QAAEuH,GAAY/L,GACvB,qBAAE8L,GAAyB/M,EAC3BwN,GAAcxK,EAAAA,EAAAA,IAAWhD,EAAQiN,EAAAA,KAEjCQ,EAAQC,KAAKC,IACjBH,EAAYrF,aAAavG,IAAM,KAC5BmL,EAAqBvH,KAAIoI,IAAA,IAAC,GAAEhM,GAAIgM,EAAA,OAAKhM,CAAE,KAEtCiM,GAAkBd,EAAqB5M,OAAS,GAppBf,IAspBjCyB,EAAK8L,KAAKI,MAAML,GAASI,EAE/BpI,EAAQsI,gBAAkBtI,EAAQ7D,GAClC6D,EAAQ7D,GAAKA,EAEb,MAAMoM,EAAsB,CAC1BpM,KACA6D,UACAuH,UACAiB,UAAU,GAGZjO,EAAS,IACJA,EACH+M,qBAAsB,IACjBA,EAAqBD,OArqBW,KAsqBnCkB,KAGJpK,EAAAA,EAAAA,IAAU5D,GAEVgB,EAAQkN,UAAU,CAChB,QAAS,aACTtM,GAAI6D,EAAQ7D,GACZnB,OAAQgF,EAAQhF,OAChBgF,WACA,KAGJ1E,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,OAAER,EAAM,UAAEyG,EAAS,MAAE3G,GAAQC,EAAAA,EAAAA,OAAsBS,EAEzD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BmO,aAAc,CAAE1N,SAAQyG,cACvB3G,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BmO,kBAActN,GACbN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,OAAER,EAAM,UAAEyG,EAAS,MAAE3G,GAAQC,EAAAA,EAAAA,OAAsBS,EAEzD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BoO,YAAa,CAAE3N,SAAQyG,cACtB3G,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BoO,iBAAavN,GACZN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,4BAA4B,CAACf,EAAQgB,EAASC,KAC7D,MAAM,OAAER,EAAM,GAAEmB,EAAE,MAAErB,GAAQC,EAAAA,EAAAA,OAAsBS,EAE5CoN,GAAiBC,EAAAA,EAAAA,IAAmCtO,EAAQS,EAAQmB,EAAIrB,GAE9E,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BuO,qBAAsB,CAAE9N,SAAQyG,UAAWtF,EAAIyM,mBAC9C9N,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,6BAA6B,CAACf,EAAQgB,EAASC,KAC9D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BuO,0BAAsB1N,GACrBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,IAAK4B,EAASkJ,iBACZ,OAGF,MAAM,OAAE5K,EAAM,WAAEuE,GAAe7C,EAASkJ,iBACxCtG,EAAoB/E,EAAQS,EAAQuE,EAAW,KAGjDjE,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,WAAE+D,EAAU,MAAEzE,GAAQC,EAAAA,EAAAA,OAAsBS,EAC5C8B,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GAClCyE,GAAoC,IAAtBA,EAAW7E,QAAiB4C,GAI/CgC,EAAoB/E,EAAQ+C,EAAKnB,GAAIoD,EAAW,KE5yBlDjE,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,GACvC,OAAER,IAAWa,EAAAA,EAAAA,IAAetB,EAAQO,GAAOiO,aAEjD,OAAOC,EAAAA,EAAAA,IAAmBzO,EAAQ,CAChC0O,cAAe,CAAC,EAChBC,aAAc,CAAC,EACfC,mBAAe/N,KACXK,EAAQ,CAAE2N,eAAgB,CAAEC,OAAQrO,EAAQ8E,UAAU,IAAW,CAAEsJ,oBAAgBhO,GACvFK,SACCX,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACf,EAAQgB,EAASC,KAC3D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,MAAiB,UAAEuO,GAAc9N,GAAW,CAAC,EAC7D,OAAOwN,EAAAA,EAAAA,IAAmBzO,EAAQ,CAChC+O,aACCxO,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACf,EAAQgB,EAASC,KAC3D,MAAM,GAAEW,GAAOX,GACT,qBAAE+N,GAAyBhP,EAEjC,IAAKgP,EACH,MAAO,IACFhP,EACHgP,qBAAsB,CAACpN,IAI3B,MAAMqN,EAAeD,EAAqBhL,QAAQvD,GAAWA,IAAWmB,IAMxE,OALAqN,EAAaC,QAAQtN,GACjBqN,EAAa9O,OAnCY,IAoC3B8O,EAAatF,MAGR,IACF3J,EACHgP,qBAAsBC,EACvB,KAGHlO,EAAAA,EAAAA,IAAiB,2BAA4Bf,IACpC,IACFA,EACHgP,0BAAsBnO,OAI1BE,EAAAA,EAAAA,IAAiB,0BAA0B,CAACf,EAAQgB,EAASC,KAC3D,MAAM,QAAEmM,EAAO,MAAE7M,GAAQC,EAAAA,EAAAA,OAAsBS,EAE/C,OAAOkO,EAAAA,EAAAA,IAA0BnP,EAAQoN,EAAS7M,EAAM,KAG1DQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,GAAEW,EAAE,MAAErB,GAAQC,EAAAA,EAAAA,OAAsBS,EAE1C,OAAOwN,EAAAA,EAAAA,IAAmBzO,EAAQ,CAAES,OAAQmB,EAAIV,WAAOL,EAAW+N,mBAAe/N,GAAaN,EAAM,KC/DtGQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,EAE7C,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BoP,cAAe,CACblO,QACAmO,eAAWxO,IAEZN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,EAE7C,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BsP,UAAW,CACTpO,QACAqO,YAAQ1O,EAER2O,aAAS3O,IAEVN,EAAM,KCnBXQ,EAAAA,EAAAA,IAAiB,sBAAsB,CAACf,EAAQgB,EAASC,KACvD,MAAM,MACJC,EAAK,MACLX,GAAQC,EAAAA,EAAAA,OACNS,EAEJ,OAAOwO,EAAAA,EAAAA,IAAiBzP,EAAQ,CAC9B0P,mBAAe7O,EACf8O,kBAAc9O,EACdgO,eAAgBrH,QAAQtG,GACxBA,SACCX,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,OAAE2O,EAAM,MAAErP,GAAQC,EAAAA,EAAAA,OAAsBS,EAE9C,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6P,WAAY,CAAED,WACbrP,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6P,WAAY,CACVC,iBAAiB,IAElBvP,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAO8O,EAAAA,EAAAA,IAAsB/P,EAAQO,EAAM,I,8CC1C9B,SAASyP,EAAWC,GACjCC,SAASC,iBAAkC,gDACxCzE,SAAS0E,IACJH,EACGG,EAAKC,KAAK5F,SAAS,oBACtB2F,EAAKC,KAAOD,EAAKC,KAAKC,QAAQ,UAAW,mBAG3CF,EAAKC,KAAOD,EAAKC,KAAKC,QAAQ,iBAAkB,UAClD,GAEN,C,eCLO,SAASC,EAAoBC,GAC9BN,SAASO,QAAUD,IACrBN,SAASO,MAAQD,EAErB,CAGO,MAAME,GAAeC,EAAAA,EAAAA,IAASJ,EAXV,KAWmD,G,eCslB9E,IAAIK,EA2EAC,GA1oBJ9P,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,MAAE6P,EAAK,MAAEvQ,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EACnDyC,OAA4B7C,IAAViQ,EAAsBA,IAASxP,EAAAA,EAAAA,IAAetB,EAAQO,GAAOmD,gBAKrF,OAHA1D,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAAE0D,mBAAmBnD,GAC5C,IAAKP,EAAQ2D,oBAAqBD,EAE9B,KAGf3C,EAAAA,EAAAA,IAAiB,sBAAsB,CAACf,EAAQgB,EAASC,KACvD,MAAM,gBAAE8P,GAAoB9P,EAE5B,MAAO,IACFjB,EACH+Q,kBACD,KAGHhQ,EAAAA,EAAAA,IAAiB,wBAAyBf,IACjC,IACFA,EACH+Q,qBAAiBlQ,OAIrBE,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAE/D,IAAKE,EACH,OAGF,MAAM0B,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GAExC,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BgR,WAAY,CACVzF,SAAU,IACLpJ,EAAS6O,WAAWzF,SACvB,CAAC9K,GAAS,IACL0B,EAAS6O,WAAWzF,SAAS9K,GAChCwQ,WAAY9O,EAAS6O,WAAWzF,SAAS9K,IAAW,CAAC,GAAGwQ,aAI7D1Q,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,+BAA+B,CAACf,EAAQgB,EAASC,KAChE,MAAM,OAAEiQ,EAAM,MAAE3Q,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GACpD,OAAER,IAAWE,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAE/D,IAAKE,EACH,OAGF,MAAM0B,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GAExC,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BgR,WAAY,CACVzF,SAAU,IACLpJ,EAAS6O,WAAWzF,SACvB,CAAC9K,GAAS,IACL0B,EAAS6O,WAAWzF,SAAS9K,GAChCwQ,UAAU,EACVE,WAAYD,MAIjB3Q,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAE/D,IAAKE,EACH,OAGF,MAAM0B,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GAExC,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BgR,WAAY,CACVzF,SAAU,IACLpJ,EAAS6O,WAAWzF,SACvB,CAAC9K,GAAS,IACL0B,EAAS6O,WAAWzF,SAAS9K,GAChCwQ,UAAU,MAIf1Q,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,YAAY,CAACf,EAAQgB,EAASC,KAC7C,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,EACtC,IAAKkI,EAAAA,EAAAA,QAAkBiI,EAAAA,EAAAA,MAIvB,OAAO7O,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BqR,kBAAyE,KAAtD/P,EAAAA,EAAAA,IAAetB,EAAQO,GAAO+Q,aAAanR,QAC7DI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B2C,mBAAoBR,EAASQ,kBAC7B4O,WAAY,IACPpP,EAASoP,WACZC,sBAAkB3Q,IAEnBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,2BAA2B,CAACf,EAAQgB,EAASC,KAC5D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,MAAiB,UAAE0G,GAAcjG,GAAW,CAAC,EAC7D,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BuR,WAAY,KACPjQ,EAAAA,EAAAA,IAAetB,EAAQO,GAAOgR,WACjCC,iBAAkBtK,IAEnB3G,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BqR,oBAAoB/P,EAAAA,EAAAA,IAAetB,EAAQO,GAAO8Q,mBACjD9Q,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,MAAEqF,GAAUrF,GACZ,aAAEwQ,GAAiBzR,EACzB,IAAKyR,EACH,MAAO,IACFzR,EACHyR,aAAc,CAACnL,IAInB,MAAMoL,EAAYD,EAAazN,QAAQ2N,GAAMA,IAAMrL,IAMnD,OALAoL,EAAUxC,QAAQ5I,GACdoL,EAAUvR,OAtJU,IAuJtBuR,EAAU/H,MAGL,IACF3J,EACHyR,aAAcC,EACf,KAGH3Q,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,QAAE2Q,GAAY3Q,GACd,OAAE4Q,GAAW7R,EAAO8R,SAC1B,IAAKD,EACH,MAAO,IACF7R,EACH8R,SAAU,IACL9R,EAAO8R,SACVD,OAAQ,CACNE,KAAM,IACND,SAAU,CAACF,MAMnB,MAAMI,EAAcH,EAAOC,SAAS9N,QAAQiO,GAAMA,EAAErQ,KAAOgQ,EAAQhQ,KAGnE,OAFAoQ,EAAY9C,QAAQ0C,GAEb,IACF5R,EACH8R,SAAU,IACL9R,EAAO8R,SACVD,OAAQ,IACHA,EACHC,SAAUE,IAGf,KAGHjR,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,WAAEiR,GAAejR,GACjB,mBAAEkR,GAAuBnS,EAC/B,IAAKmS,EACH,MAAO,IACFnS,EACHmS,mBAAoB,CAACD,IAIzB,MAAMR,EAAYS,EAAmBnO,QAAQpC,GAAOA,IAAOsQ,IAM3D,OALAR,EAAUxC,QAAQgD,GACdR,EAAUvR,OA3MU,IA4MtBuR,EAAU/H,MAGL,IACF3J,EACHmS,mBAAoBT,EACrB,KAGH3Q,EAAAA,EAAAA,IAAiB,0BAA2Bf,IACnC,IACFA,EACHmS,mBAAoB,QAIxBpR,EAAAA,EAAAA,IAAiB,sBAAsB,CAACf,EAAQgB,EAASC,KACvD,MAAM,MAAEmR,EAAK,cAAEC,GAAkBpR,EACjC,MAAO,IACFjB,EACH8R,SAAU,IACL9R,EAAO8R,SACVQ,MAAO,CACLC,OAAUF,EAAwBrS,EAAO8R,SAASQ,MAAMC,OAA9BH,IAG9BI,aAAc,IACTxS,EAAOwS,aACVF,MAAO,CACLC,OAASF,EAAgBD,EAAQpS,EAAOwS,aAAaF,MAAMC,SAGhE,KAGHxR,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,SAAsBiS,GAAiBxR,EACvDwR,EAAaC,SAAUC,EAAAA,EAAAA,GAAc,CAAC,GAEtC,MAAMC,EAAmB,KAAItR,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsS,eACrDC,EAA4BF,EAAiBG,WAAWC,GAAMA,EAAEvN,UAAYgN,EAAahN,UAO/F,OANmC,IAA/BqN,GACFF,EAAiBK,OAAOH,EAA2B,GAGrDF,EAAiBxM,KAAKqM,IAEflQ,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6S,cAAeD,GACdrS,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uCAAuC,CAACf,EAAQgB,EAASC,KACxE,MAAM,OAAER,EAAM,MAAEF,GAAQC,EAAAA,EAAAA,OAAsBS,EAExC8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EAAM,OAEX,MAAM,iBACJmQ,EAAgB,cAAEC,EAAa,cAAEC,EAAa,iBAAEC,EAAgB,cAAEC,EAAa,gBAC/EC,EAAe,mBAAEC,EAAkB,cAAEC,IACnCC,EAAAA,EAAAA,IAA4B3Q,GAC1B4Q,GAAiBxJ,EAAAA,EAAAA,IAAQ,CAC7B+I,EAAmB,uCAAoCrS,EACvDsS,EAAgB,wCAAqCtS,EACrDuS,EAAgB,wCAAqCvS,EACrD4S,EAAgB,+CAA4C5S,EAC5D2S,EAAqB,+CAA4C3S,EACjEwS,EAAmB,uCAAoCxS,EACvDyS,EAAgB,wCAAqCzS,EACrD0S,EAAkB,0CAAuC1S,IACxD2E,KAAKoO,GAAMzO,EAAAA,GAAuByO,KAErC,IAAKD,EAAexT,OAKlB,YAJAa,EAAQqL,iBAAiB,CACvB5G,QAASN,EAAAA,GAAuB,2BAChC5E,UAKJ,MAAMsT,EAAgB1O,EAAAA,GAAuB,sCACvC2O,EAAuBH,EAAejN,KAAK,MAAM4J,QAAQ,YAAc,GAAEuD,OAE/E7S,EAAQqL,iBAAiB,CACvB5G,QAASN,EAAAA,GAAuB,8BAA+B2O,GAC/DvT,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,EAChC2R,GAAmBtR,EAAAA,EAAAA,IAAetB,EAAQO,GAC7CsS,cAAc7O,QAAO5D,IAAA,IAAC,QAAEsS,GAAStS,EAAA,OAAKsS,IAAYzR,EAAQyR,OAAO,IAEpE,OAAOnQ,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6S,cAAeD,GACdrS,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,cAAc,CAACf,EAAQgB,EAASC,KAC/C,MAAM,KAAE8S,EAAI,MAAExT,GAAQC,EAAAA,EAAAA,OAAsBS,EAG5C,GAAI,YAAa8S,GAAQA,EAAKC,eAAgBC,EAAAA,EAAAA,IAAqBF,GACjE,OAAO/T,EAGT,MAAMkU,EAAa,KAAI5S,EAAAA,EAAAA,IAAetB,EAAQO,GAAO4T,SACrD,GAAI,YAAaJ,EAAM,CACrB,MAAMK,EAAqBF,EAAWnB,WAAWsB,GAASA,EAAiB5O,UAAYsO,EAAKtO,WAChE,IAAxB2O,GACFF,EAAWjB,OAAOmB,EAAoB,EAE1C,CAIA,OAFAF,EAAW9N,KAAK2N,IAETxR,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BmU,QAASD,GACR3T,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,iBAAiB,CAACf,EAAQgB,EAASC,KAClD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CiT,EAAa,KAAI5S,EAAAA,EAAAA,IAAetB,EAAQO,GAAO4T,SAIrD,OAFAD,EAAWvK,OAEJpH,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BmU,QAASD,GACR3T,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAQqT,IAAKC,EAAgB,MAAEhU,GAAQC,EAAAA,EAAAA,OAAsBS,EAE7D,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BuU,oBACChU,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,WAAEuT,EAAU,MAAEjU,GAAQC,EAAAA,EAAAA,OAAsBS,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5ByU,0BAA2BD,GAC1BjU,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5ByU,+BAA2B5T,GAC1BN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,YAAY,CAACf,EAAQgB,EAASC,KAC7C,MAAM,IACJqT,EAAG,OAAE7T,EAAM,UAAEyG,EAAS,MAAE3G,GAAQC,EAAAA,EAAAA,OAC9BS,EAEEwE,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQyG,GAClD,IAAKzB,EAAS,OAEd,MAAMkP,EAAQlP,EAAQmP,UAAYnP,EAAQoP,SAC1C,GAAKF,EAAL,CAEA,KAAKG,EAAAA,EAAAA,IAAmB9U,EAAQ2U,GAY9B,OAXA3U,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B+U,gBAAiB,CACfJ,QACA7S,KAAM,OACNkT,UAAW,CACTC,OAAQ,WACRhU,aAGHV,QACHqD,EAAAA,EAAAA,IAAU5D,GAIZA,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BkV,WAAY,CACVZ,MACA7T,SACAyG,cAED3G,IACHqD,EAAAA,EAAAA,IAAU5D,EAxBQ,CAwBD,KAGnBe,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASC,KAC9C,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BkV,gBAAYrU,GACXN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,IACJkU,EAAG,KAAEC,EAAI,MAAEC,EAAK,OAAEC,EAAM,MAAE/U,GAAQC,EAAAA,EAAAA,OAChCS,GAAW,CAAC,EAChB,IAAKsU,EAAAA,EAAAA,IAA0BvV,GAE/B,OAAOuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BwV,SAAU,CACRC,iBAAkB/I,KAAKC,MACvBwI,MACAC,OACAC,QACAC,WAED/U,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,4BAA4B,CAACf,EAAQgB,EAASC,KAC7D,MAAM,eACJyU,EAAc,kBAAEC,GACd1U,EAEJ,MAAO,IACFjB,EACH4V,mBAAoB,CAClBF,eAAgBA,QAAAA,EAAkB1V,EAAO4V,mBAAmBF,eAC5DC,kBAAmBA,QAAAA,EAAqB3V,EAAO4V,mBAAmBD,mBAErE,KAGH5U,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,MAAE4U,EAAK,MAAEtV,GAAQC,EAAAA,EAAAA,OAAsBS,EAE7C,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B8V,kBAAmB,CACjBD,UAEDtV,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACf,EAAQgB,EAASC,KAC3D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B8V,uBAAmBjV,GAClBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B+V,+BAA2BlV,GAC1BN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,OAAEsR,EAAM,MAAEhS,GAAQC,EAAAA,EAAAA,OAAsBS,EAC9C,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BgW,wBAAyBzD,GACxBhS,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BgW,6BAAyBnV,GACxBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,kCAAkC,CAACf,EAAQgB,EAASC,KACnE,MAAM,IAAEgJ,GAAQhJ,GACV,aAAEgV,GAAiBjW,EAAOwS,aAEhC,MAAO,IACFxS,EACHwS,aAAc,IACTxS,EAAOwS,aACVyD,cAAcC,EAAAA,EAAAA,IAAO,IAAID,KAAiBhM,IAAM6C,MAAM,EAAGqJ,EAAAA,MAE5D,KAGHpV,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,OAAER,EAAM,MAAEF,GAAQC,EAAAA,EAAAA,OAAsBS,EAM9C,OAHoB6K,EAAAA,EAAAA,IAAkB9L,EAAQO,IAC5BS,EAAQ6C,SAAS,CAAEjC,GAAInB,EAAQC,SAAUmB,EAAAA,GAAgBtB,WAEpEgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BoW,iBAAkB,CAChB3V,WAEDF,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BoW,sBAAkBvV,GACjBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,sBAAsB,CAACf,EAAQgB,EAASC,KACvD,MAAM,OAAER,EAAM,QAAE4V,EAAO,MAAE9V,GAAQC,EAAAA,EAAAA,OAAsBS,EAMvD,OAHoB6K,EAAAA,EAAAA,IAAkB9L,EAAQO,IAC5BS,EAAQ6C,SAAS,CAAEjC,GAAInB,EAAQF,WAE1CgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BsW,eAAgB,CACd7V,SACA4V,YAED9V,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BsW,oBAAgBzV,GACfN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,gBAAEsV,GAAoBvW,GACtB,SAAEwW,EAAWD,EAAgBC,SAAQ,YAAEC,EAAcF,EAAgBE,aAAgBxV,EAE3F,MAAO,IACFjB,EACHuW,gBAAiB,CACfC,WACAC,eAEH,KAGH1V,EAAAA,EAAAA,IAAiB,mBAAoBf,IACnC,MAAM0W,EAAoB,qBAE1BC,MAAO,eAAqBjK,KAAKC,SAC9BiK,MAAMC,GAAaA,EAAS/S,SAC5B8S,MAAM5J,IACLA,EAAUA,EAAQ8J,OAEdJ,EAAkBK,KAAK/J,IAAYA,IAAYH,EAAAA,MACjD7M,GAASuJ,EAAAA,EAAAA,MACTvJ,EAAS,IACJA,EACHgX,mBAAmB,IAErBpT,EAAAA,EAAAA,IAAU5D,GACZ,IAEDiX,OAAO5C,IACF6C,EAAAA,KAEFC,QAAQC,MAAM,4BAA6B/C,EAC7C,GACA,KAGNtT,EAAAA,EAAAA,IAAiB,eAAgBf,KAC1BsB,EAAAA,EAAAA,IAAetB,GAAQQ,EAAAA,EAAAA,OAAmB6W,qBAC/CC,EAAAA,EAAAA,IAAyB,KAO3BvW,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,UAAEsW,EAAS,MAAEhX,GAAQC,EAAAA,EAAAA,OAAsBS,EAmBjD,OAjBIsW,GACE3G,GAAsB4G,cAAc5G,GAExCA,EAAuBrN,OAAOkU,aAAY,KACxCzW,EAAQqC,gBAAgB,CACtB9C,SACA,GAXsB,OAc1BiX,cAAc5G,GACdA,OAAuB/P,GAGzBb,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BuX,aACChX,GAEI,IACFP,EACH0X,2BAA4BH,GAAYI,EAAAA,EAAAA,WAA6B9W,EACtE,KAGHE,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,sBAAE2W,GAA0B5X,EAAO6X,SAASC,MAC5CC,EAAgB/X,EAAO+X,cAE7B,GAAI7H,SAASO,MAAMhG,SAASuN,EAAAA,KAG1B,OAFAhI,GAAW,QACXO,EAAqB,GAAE0H,EAAAA,OAAcD,EAAAA,OAIvC,GAAIhY,EAAO0X,4BAA8BhK,KAAKwK,MAAMxL,KAAKC,MAAQ,KAAQ,GAAM,EAAG,CAChF,MAEMwL,GAFoBR,EAAAA,EAAAA,MAEY3X,EAAO0X,2BAE7C,GAAIS,EAAY,EAGd,OAFA5H,EAAqB,GAAE4H,iBAAyBA,EAAY,EAAI,IAAM,WACtEnI,GAAW,EAGf,CAEAA,GAAW,GAEX,MAAMoI,GAAczX,EAAAA,EAAAA,IAAyBX,EAAQO,GAErD,GAAI6X,GAAeR,IAA0B5X,EAAOqY,SAASC,eAAgB,CAC3E,MAAM,OAAE7X,EAAM,SAAEC,GAAa0X,EACvBG,GAAcvV,EAAAA,EAAAA,IAAWhD,EAAQS,GACvC,GAAI8X,EAAa,CACf,MAAM9H,GAAQ+H,EAAAA,EAAAA,GAAarT,EAAAA,GAAwBoT,EAAa9X,IAAWsX,GAC3E,OAAIQ,EAAYtV,SAAWsV,EAAYE,SAAS/X,QAC9CgQ,EAAc,GAAED,OAAW8H,EAAYE,OAAO/X,GAAU+P,cAI1DC,EAAaD,EAEf,CACF,CAEAF,EAAoB0H,EAAAA,IAAW,IAIjC,IACIS,EADAC,EAA+B,GAGnCC,EAAAA,EAAAA,KAAa5Y,IAEX,MAAM,gBAAEqD,EAAe,eAAEwV,IAAmBC,EAAAA,EAAAA,MAEtCC,EAAkB/Y,EAAOqY,SAASC,iBAAmBzH,EACrDmI,EAAmBlR,OAAOmR,OAAOjZ,EAAOkZ,SAASlV,QAAQ4P,GAAMA,EAAE2D,YAAWpX,OAC5EgZ,GAAc7X,EAAAA,EAAAA,IAAetB,GAAQQ,EAAAA,EAAAA,OAAmB2Y,YAE1DJ,GACF1V,IAGE2V,IAAqBL,GAAwBQ,IAC3CT,GAAerO,aAAaqO,GAEhCA,EAAgBnV,OAAO+F,YAAW,KAChCtJ,GAASuJ,EAAAA,EAAAA,MACT,MAAM6P,EAAsBtR,OAAOmR,OAAOjZ,EAAOkZ,SAASlV,QAAQ4P,GAAMA,EAAE2D,YAAWpX,OACrF0Y,EAAeO,KAAwBC,EAAAA,EAAAA,MAAuBlZ,OAAO,GAnBpD,MAuBrB0Q,EAAqB7Q,EAAOqY,SAASC,eACrCK,EAAuBK,CAAgB,KCjsBzCjY,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CqY,GAAShY,EAAAA,EAAAA,IAAetB,EAAQO,GAAOgZ,QAAQD,OASrD,OARAtZ,GAASwZ,EAAAA,EAAAA,IAAaxZ,EAAQO,GAC9BP,GAASyZ,EAAAA,EAAAA,IAAazZ,EAAQO,IACrBgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BuZ,QAAS,KACJjY,EAAAA,EAAAA,IAAetB,EAAQO,GAAOgZ,QACjCD,WAED/Y,EACU,KAGfQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,MAAEmW,EAAK,MAAE7W,GAAQC,EAAAA,EAAAA,OAAsBS,EAE7C,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BuZ,QAAS,KACJjY,EAAAA,EAAAA,IAAetB,EAAQO,GAAOgZ,QACjCD,OAAQ,SACRlC,UAED7W,EAAM,I,gBCzBXQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,OACJR,EAAM,SAAEC,EAAQ,QAAEgZ,EAAO,cAAEC,EAAa,kBAAEC,EAAiB,OAAEnR,EAAM,OAAEC,EAAM,aAAEC,EAAY,QAAEC,EAAO,MAClGrI,GAAQC,EAAAA,EAAAA,OACNS,EAEEkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6Z,YAAa,IACR1X,EAAS0X,YACZpZ,SACAC,WACAgZ,UACAC,gBACAC,oBACAnR,SACA+N,UAAU,EACV9N,OAAQA,QAAAA,EAAUvG,EAAS0X,YAAYnR,OACvCC,aAAcA,GAAgBxG,EAAS0X,YAAYlR,cAAgB3I,EAAO6Z,YAAY/Q,iBACtFF,QAASA,GAAWzG,EAAS0X,YAAYjR,SAE3C/F,gBAAiB,CAAC,GACjBtC,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OACJyH,EAAM,QAAEE,EAAO,aAAED,EAAY,SAAE6N,IAC7BlV,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsZ,YAElC,OAAOtX,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6Z,YAAa,CACXnR,SACAE,UACA4N,WACA7N,iBAEDpI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,OACJyH,EAAM,MACNnI,GAAQC,EAAAA,EAAAA,OACNS,EAEJ,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6Z,YAAa,KACRvY,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsZ,YACjCnR,SACAE,SAAS,IAEVrI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,8BAA8B,CAACf,EAAQgB,EAASC,KAC/D,MAAM,aACJ0H,EAAY,MACZpI,GAAQC,EAAAA,EAAAA,OACNS,EAUJ,OARAjB,EAAS,IACJA,EACH6Z,YAAa,IACR7Z,EAAO6Z,YACV/Q,iBAAkBH,KAIfpG,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6Z,YAAa,KACRvY,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsZ,YACjClR,iBAEDpI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,QACJ2H,EAAO,MACPrI,GAAQC,EAAAA,EAAAA,OACNS,EAEJ,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6Z,YAAa,KACRvY,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsZ,YACjCjR,YAEDrI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,SAAEuV,EAAQ,MAAEjW,GAAQC,EAAAA,EAAAA,OAAsBS,EAEhD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6Z,YAAa,KACRvY,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsZ,YACjCrD,aAEDjW,EAAM,I,+CC5FX,IAAIuZ,GAAiB,GACrBC,EAAAA,EAAAA,KAAe,MAETxQ,EAAAA,EAAAA,MAAY8O,SAAS2B,cAAgBF,GAA8D,IAA5ChS,OAAOC,MAAKwB,EAAAA,EAAAA,MAAY2P,SAAS/Y,SAC1F8Z,EAAAA,EAAAA,KACF,KAGFlZ,EAAAA,EAAAA,IAAiB,eAAemZ,MAAOla,EAAQgB,EAASC,KACtD,MAAM,SAAEoX,GAAapX,EACrBjB,GAASma,EAAAA,EAAAA,IAAuBna,EAAQ,CACtCoa,WAAW,KAEbxW,EAAAA,EAAAA,IAAU5D,SACJqa,EAAAA,EAAAA,IAAchC,GAEpB,MAAMiC,EAAcC,KAAKC,UAAU,KAAKC,EAAAA,EAAAA,MAAqB7K,OAAQ5P,EAAO+X,gBAC5E/X,GAASuJ,EAAAA,EAAAA,MACT,MAAMmR,GAAaC,EAAAA,EAAAA,KAAgBR,EAAAA,EAAAA,IAAuBna,EAAQ,CAChEga,aAAa,EACb5C,WAAOvW,EACPuZ,WAAW,WAGPQ,EAAAA,EAAAA,IAAeN,EAAaI,IAElCG,EAAAA,EAAAA,MACA7a,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASma,EAAAA,EAAAA,IAAuBna,EAAQ,CACtCga,aAAa,EACb5C,WAAOvW,EACPuZ,WAAW,KAEbxW,EAAAA,EAAAA,IAAU5D,IAEV8a,EAAAA,EAAAA,KAAiB,EAAK,KAGxB/Z,EAAAA,EAAAA,IAAiB,iBAAkBf,KAC5B+a,EAAAA,EAAAA,OAEEC,EAAAA,EAAAA,IAAsBhb,OAG/Be,EAAAA,EAAAA,IAAiB,gBAAgB,CAACf,EAAQgB,EAASC,KACjD,MAAMga,EAAkBnT,OAAOmR,OAAOjZ,EAAOkZ,UACvC,YAAEoB,EAAW,WAAEI,GAAezZ,EAC9Bia,EAAUX,KAAKY,MAAMb,IAC3Bc,EAAAA,EAAAA,IAAaF,EAASA,EAAQtL,QAE9B,MAAMyL,EAAiBrb,GACvBA,EAASua,KAAKY,MAAMT,IACbxB,QAAUmC,EAAenC,SAChCoC,EAAAA,EAAAA,IAAatb,GAAQub,EAAAA,EAAAA,IAAUC,EAAAA,KAE/Bxb,GAASma,EAAAA,EAAAA,IACPna,EACA,CACEsY,gBAAgB,EAChBlB,WAAOvW,EACP4a,qBAAsB,KAG1B7X,EAAAA,EAAAA,IAAU5D,IAEV6a,EAAAA,EAAAA,MAEAI,EAAgBvP,SAAQtL,IAAA,IAAGwB,GAAIrB,EAAK,YAAE4Y,GAAa/Y,EAAA,OAAKY,EAAQ0a,KAAK,CAAEnb,QAAO4Y,eAAc,IAC5FnY,EAAQ2a,SAAS,KAGnB5a,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,SAAEoX,GAAapX,GACrB2a,EAAAA,EAAAA,IAAevD,GAAUzB,KAAK5V,EAAQ6a,cAAc,KAClD7a,EAAQ8a,yBAAyB,GACjC,KAMJ/a,EAAAA,EAAAA,IAAiB,2BAA4Bf,IAA6B,IAAA+b,EACxE,MAAMN,GAA6D,QAAtCM,EAAC/b,EAAOqY,UAAUoD,4BAAoB,IAAAM,EAAAA,EAAI,GAAK,EAE5E,OAAO5B,EAAAA,EAAAA,IAAuBna,EAAQ,CACpCyb,uBACAO,aAAeP,GARU,EASrB/O,KAAKC,MAR6B,UAQe9L,GACrD,KAGJE,EAAAA,EAAAA,IAAiB,8BAA+Bf,IACvCma,EAAAA,EAAAA,IAAuBna,EAAQ,CACpCyb,qBAAsB,EACtBO,kBAAcnb,OAIlBE,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEmW,GAAUnW,EAElB,OAAOkZ,EAAAA,EAAAA,IAAuBna,EAAQ,CAAEoX,SAAQ,KAGlDrW,EAAAA,EAAAA,IAAiB,sBAAuBf,IAC/Bma,EAAAA,EAAAA,IAAuBna,EAAQ,CAAEoX,WAAOvW,OAGjDE,EAAAA,EAAAA,IAAiB,oBAAoB,KACnC+Y,GAAiB,CAAI,KCnHvB/Y,EAAAA,EAAAA,IAAiB,YAAY,CAACf,EAAQgB,EAASC,KAC7C,MAAM,GACJW,EAAE,MACFrB,GAAQC,EAAAA,EAAAA,OACNS,EAEJ,OAAIW,GACKW,EAAAA,EAAAA,GAAevC,EAAQ,CAC5Bic,eAAgB,CACdxb,OAAQmB,EACRsF,eAAWrG,EACXyD,cAAUzD,IAEXN,IAGEgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5Bic,oBAAgBpb,GACfN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,sBAAsB,CAACf,EAAQgB,EAASC,KACvD,MAAM,OACJR,EAAM,UACNyG,EAAS,SACT5C,EAAQ,MACR/D,GAAQC,EAAAA,EAAAA,OACNS,EAEJ,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5Bic,eAAgB,CACdxb,SACAyG,YACA5C,aAED/D,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GAExC,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5Bic,eAAgB,IACX9Z,EAAS8Z,eACZ/U,eAAWrG,EACXyD,cAAUzD,IAEXN,EAAM,I,8CCmDX,MAEM2b,EAA0B,IAAIC,IAE9BC,GAA0BzL,EAAAA,EAAAA,KAAU0L,GAAOA,KAAM,KAAK,GAg1B5DnC,eAAetP,EACb5K,EACA+C,EACArC,EACA4b,EACA3R,GAIA,IAHA4R,EAAUrc,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GACVsc,EAAetc,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GAAQ,QAAAuc,EAAAvc,UAAAC,OAAAuc,EAAA,IAAArc,MAAAoc,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,EAAA,GAAAzc,UAAAyc,GAAA,IACnBpc,GAAQC,EAAAA,EAAAA,OAAkBkc,EAE9B,MAAMjc,EAASsC,EAAKnB,GAEpB,IAAIgb,EACJ,OAAQjS,GACN,KAAKkS,EAAAA,GAAAA,UACHD,OAAY/b,EACZ,MACF,KAAKgc,EAAAA,GAAAA,OACHD,IAAclP,KAAKwK,MAAM4E,EAAAA,IAAqB,GAAK,GACnD,MACF,KAAKD,EAAAA,GAAAA,SACHD,IAAcE,EAAAA,IAAqB,GAIvC9c,GAASuJ,EAAAA,EAAAA,MACT,MAAMxD,QAAegX,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5Cha,MAAMC,EAAAA,EAAAA,IAAWhD,EAAQS,GACzB6b,WACAM,YACA/G,MAAOiH,EAAAA,IACPpc,aAGF,IAAKqF,EACH,OAGF,MAAM,SACJR,EAAQ,MAAEyX,EAAK,MAAElO,EAAK,mBAAEmO,GACtBlX,EAEJ/F,GAASuJ,EAAAA,EAAAA,MAET,MAAM2T,EAAgBzc,IAAWwM,EAAAA,IAC7BjN,EAAO+M,qBAAqB/I,QAAOmZ,IAAA,IAAC,UAAEC,GAAWD,EAAA,OAAMC,CAAS,IAAE5X,KAAI6X,IAAA,IAAC,QAAE5X,GAAS4X,EAAA,OAAK5X,CAAO,IAC9F,GACE6X,EAAe,GAAoBC,OAAOhY,EAAU2X,GACpDM,GAAOC,EAAAA,EAAAA,IAAqBH,EAAa,MACzCrT,EAAMnC,OAAOC,KAAKyV,GAAMhY,IAAI0C,QAElClI,GAAS0d,EAAAA,EAAAA,IAAoB1d,EAAQS,EAAQ+c,GAC7Cxd,EAASuc,GACLoB,EAAAA,EAAAA,IAAoB3d,EAAQS,EAAQC,EAAUuJ,IAC9C2T,EAAAA,EAAAA,IAAgB5d,EAAQS,EAAQC,EAAUuJ,GAE9CjK,GAAS6d,EAAAA,EAAAA,IAAS7d,GAAQyd,EAAAA,EAAAA,IAAqBT,EAAO,OACtDhd,GAAS8d,EAAAA,EAAAA,IAAS9d,GAAQyd,EAAAA,EAAAA,IAAqB3O,EAAO,OACtD9O,GAAS+d,EAAAA,EAAAA,IAAkB/d,EAAQS,EAAQwc,GAE3C,IAAIe,GAAYC,EAAAA,EAAAA,IAAgBje,EAAQS,EAAQC,GAChD,MAAMwd,EAAe5B,GAAW6B,EAAAA,EAAAA,IAA8Bne,EAAQS,EAAQC,EAAU4b,QAAYzb,EAWpG,GATI0b,GAAcyB,GAAaE,IACxBA,EAAa/d,UAAUie,EAAAA,EAAAA,IAA4BJ,EAAWE,KACjEle,GAAS4d,EAAAA,EAAAA,IAAgB5d,EAAQS,EAAQC,EAAUwd,GACnDF,GAAYC,EAAAA,EAAAA,IAAgBje,EAAQS,EAAQC,GAC5CV,GAASqe,EAAAA,EAAAA,IAAmBre,EAAQS,EAAQC,EAAUwd,GACtD3B,GAAa,KAIZC,EAAiB,CACpB,MAAM8B,EAAa/B,EAAa2B,EAAgBF,GAC1C,eAAEO,GAAmBC,GAAiBF,EAAYhC,EAAU3R,GAClE3K,GAASye,EAAAA,EAAAA,IAAuBze,EAAQS,EAAQC,EAAU6d,EAAiBhe,EAC7E,EAEAqD,EAAAA,EAAAA,IAAU5D,EACZ,CA+CA,SAASwe,GACPE,EACApC,EACA3R,GAEA,MAAM,OAAExK,GAAWue,EACbC,EAAQrC,EArBhB,SAA0BoC,EAAqBpC,GAC7C,OAAIA,EAAWoC,EAAU,GAChB,EAGLpC,EAAWoC,EAAUA,EAAUve,OAAS,GACnCue,EAAUve,OAAS,EAGrBue,EAAU3L,WAAU,CAACnR,EAAIgd,IAC9Bhd,IAAO0a,GACH1a,EAAK0a,GAAYoC,EAAUE,EAAI,GAAKtC,GAE5C,CAQ2BuC,CAAiBH,EAAWpC,IAAa,EAG5DwC,EAFcnU,IAAckS,EAAAA,GAAAA,UAEM8B,EAASA,EAAQ,GAAMxe,EACzD4e,EAFWpU,IAAckS,EAAAA,GAAAA,OAEFnP,KAAKwK,MAAM4E,EAAAA,IAAqB,GAAKA,EAAAA,IAC5DkC,EAAOF,EAAoBC,EAC3BE,EAAKH,EAAoBC,EAAY,EACrCR,EAAiBG,EAAU5R,MAAMY,KAAKC,IAAI,EAAGqR,GAAOC,EAAK,GAE/D,IAAIC,EACAC,EACJ,OAAQxU,GACN,KAAKkS,EAAAA,GAAAA,UACHqC,EAAeJ,EAAoB,EACnCK,EAAcH,GAAQ,EACtB,MACF,KAAKnC,EAAAA,GAAAA,SACHqC,EAAeJ,EAAoB3e,EACnCgf,EAAcF,GAAM9e,EAAS,EAC7B,MACF,KAAK0c,EAAAA,GAAAA,OACL,QACEqC,EAAeX,EAAepe,OAAS,EACvCgf,EAAcZ,EAAepe,SAAW2c,EAAAA,IAI5C,MAAO,CAAEyB,iBAAgBW,eAAcC,cACzC,CAEAjF,eAAekF,GAAmCpf,EAAWqf,GAejB,QAAAC,EAAApf,UAAAC,OAAAof,EAAA,IAAAlf,MAAAif,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,EAAA,GAAAtf,UAAAsf,GAAA,IACtC9M,GADFnS,GAAQC,EAAAA,EAAAA,OAAkB+e,EAE5B,MAAME,EAAmBJ,EAAOK,WAAa,CAACC,EAAkBC,KACzD1D,EAAwB2D,IAAID,KAC/BlN,EAAUkN,EACV1D,EAAwB4D,IAAIF,EAAgBH,IAG9Czf,GAASuJ,EAAAA,EAAAA,MAETvJ,EAAS,IACJA,EACH+f,YAAa,CACXC,iBAAkB,IACbhgB,EAAO+f,YAAYC,iBACtB,CAACJ,GAAiB,CAAED,gBAI1B/b,EAAAA,EAAAA,IAAU5D,EAAO,OACfa,GAGAwe,EAAOY,YAAcC,EAAAA,WACjBC,EAAAA,EAAAA,MAGRngB,GAASuJ,EAAAA,EAAAA,MACT,MAAMrH,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAEF,MAAM,SAAExB,GAAawB,EAEhBmd,EAAOY,YAAcvf,IAAamB,EAAAA,KACrCwd,EAAOY,YAAaG,EAAAA,EAAAA,IAAyBpgB,EAAQqf,EAAOtc,KAAKnB,GAAIlB,IAGnE2e,EAAOY,aAAeZ,EAAOgB,iBAAmB3f,IAAamB,EAAAA,KAC/Dwd,EAAOgB,iBAAkBD,EAAAA,EAAAA,IAAyBpgB,EAAQqf,EAAOtc,KAAKnB,GAAIlB,UAGtEqc,EAAAA,EAAAA,IAAQ,cAAesC,EAAQI,GAEjCA,GAAoB/M,GACtBwJ,EAAwBoE,OAAO5N,EAEnC,EA9iCA3R,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,UACJ0J,EAAYkS,EAAAA,GAAAA,OAAwB,gBACpCL,GAAkB,EAAK,kBACvB3R,GAAoB,EAAK,MACzBtK,GAAQC,EAAAA,EAAAA,OACNS,GAAW,CAAC,EAEhB,IAAI,OAAER,EAAM,SAAEC,GAAaO,GAAW,CAAC,EAEvC,IAAKR,IAAWC,EAAU,CACxB,MAAMwB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAGFzB,EAASyB,EAAmBzB,OAC5BC,EAAWwB,EAAmBxB,QAChC,CAEA,MAAMqC,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAEhC,IAAKsC,GAAQA,EAAKwd,aAChB,OAGF,MAAMnZ,GAAcC,EAAAA,EAAAA,IAAkBrH,EAAQS,EAAQC,EAAUH,GAC1Dyd,GAAYC,EAAAA,EAAAA,IAAgBje,EAAQS,EAAQC,GAElD,GAAK0G,GAAgBA,EAAYjH,QAAUwK,IAAckS,EAAAA,GAAAA,OAqBlD,CACL,MAAMP,EAAW3R,IAAckS,EAAAA,GAAAA,UAA8BzV,EAAY,GAAKA,EAAYA,EAAYjH,OAAS,GACzGoc,EAAa/U,QAAQwW,IAAcA,EAAUvT,SAAS6R,IACtDgC,EAAc/B,GAChB4B,EAAAA,EAAAA,IAA8Bne,EAAQS,EAAQC,EAAU4b,GAAY0B,GAClE,eACJO,EAAc,aAAEW,EAAY,YAAEC,GAC5BX,GAAiBF,EAAYhC,EAAU3R,GAY3C,GAVIuU,IACFlf,GAASye,EAAAA,EAAAA,IAAuBze,EAAQS,EAAQC,EAAU6d,EAAgBhe,KAG5EigB,EAAAA,EAAAA,KAAU,MAcdtG,eACEla,EACAgB,EACAme,EAAsB5C,EAAqBC,EAC3CzZ,EAAerC,EAAkBiK,EAA8B2R,GAE/D,QAAArc,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,EAAA,GAAAJ,UAAAI,GAAA,IADIC,GAAQC,EAAAA,EAAAA,OAAkBJ,EAEzB+e,SACGvU,EACJ5K,EAAQ+C,EAAMrC,EAAU4b,EAAU3R,EAAW4R,EAAYC,EAAiBjc,GAIzEic,GACHxb,EAAQ4J,qBAAqB,CAC3BnK,OAAQsC,EAAKnB,GAAIlB,WAAUiK,YAAW6R,iBAAiB,EAAMjc,SAGnE,CA/BWkgB,CACHzgB,EAAQgB,EAASme,EAAa5C,EAAYC,EAAiBzZ,EAAMrC,EAAWiK,EAAW2R,EAAU/b,EAClG,IAGCic,EACF,MAEJ,KA3CmF,CACjF,MAAMF,GAAWoE,EAAAA,EAAAA,IAAuB1gB,EAAQS,EAAQF,KAAUogB,EAAAA,EAAAA,IAAqB3gB,EAAQS,EAAQC,GACjG6b,EAAa/U,QAAQ8U,GAAY0B,IAAcA,EAAUvT,SAAS6R,IAClEgC,GAAc/B,GAChB4B,EAAAA,EAAAA,IAA8Bne,EAAQS,EAAQC,EAAU4b,GACxD0B,IAAc,IACZ,eACJO,EAAc,aAAEW,EAAY,YAAEC,GAC5BX,GAAiBF,EAAYhC,EAAUO,EAAAA,GAAAA,QAEvCqC,IACFlf,GAASye,EAAAA,EAAAA,IAAuBze,EAAQS,EAAQC,EAAU6d,EAAgBhe,IAGvE4e,IACHqB,EAAAA,EAAAA,KAAU,KACH5V,EACH5K,EAAQ+C,EAAMrC,EAAW4b,EAAUO,EAAAA,GAAAA,OAA0BN,EAAYC,EAAiBjc,EAC3F,GAGP,EAwBAqD,EAAAA,EAAAA,IAAU5D,EAAQ,CAAE0K,sBAAuBG,GAAoB,KAuBjE9J,EAAAA,EAAAA,IAAiB,eAAemZ,MAAOla,EAAQgB,EAASC,KACtD,MAAM,OACJR,EAAM,UAAEyG,EAAS,iBAAE0Z,EAAgB,aAAEC,GACnC5f,EAEE8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EACH,OAGF,MAAM0C,QAozBRyU,eACEla,EAAW+C,EAAemE,EAAmB0Z,GAE7C,MAAM7a,QAAegX,EAAAA,EAAAA,IAAQ,eAAgB,CAAEha,OAAMmE,cACrD,GAAKnB,EAAL,CAIA,GAAIA,IAAW+a,EAAAA,GAmBf,OALA9gB,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS+gB,EAAAA,EAAAA,IAAkB/gB,EAAQ+C,EAAKnB,GAAIsF,EAAWnB,EAAON,SAC9DzF,GAAS6d,EAAAA,EAAAA,IAAS7d,GAAQyd,EAAAA,EAAAA,IAAqB1X,EAAOiX,MAAO,QAC7DpZ,EAAAA,EAAAA,IAAU5D,GAEH+F,EAAON,QAlBZ,GAAImb,EAAkB,CACpB5gB,GAASuJ,EAAAA,EAAAA,MACT,MAAMyX,GAAetM,EAAAA,EAAAA,IAAkB1U,EAAQ+C,EAAKnB,GAAIgf,GACxD5gB,GAAS+gB,EAAAA,EAAAA,IAAkB/gB,EAAQ+C,EAAKnB,GAAIgf,EAAkB,IACzDI,EACHC,sBAAkBpgB,KAEpB+C,EAAAA,EAAAA,IAAU5D,EACZ,CAXF,CAsBF,CAh1BwBkhB,CAAYlhB,EAAQ+C,EAAMmE,EAAW0Z,GAC3D,GAAInb,GAAWob,EAAc,CAC3B,MAAM,cAAEvY,EAAa,WAAE6Y,GAAeN,EACtC7gB,GAASuJ,EAAAA,EAAAA,MAETvJ,GAASohB,EAAAA,EAAAA,IACPphB,EACAyF,EACAhF,EACA6H,EACA6Y,IAEFvd,EAAAA,EAAAA,IAAU5D,EACZ,MAGFe,EAAAA,EAAAA,IAAiB,eAAe,CAACf,EAAQgB,EAASC,KAChD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,EAChCiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAE5D,IAAK2B,EACH,OAGF,MAAM,OAAEzB,EAAM,SAAEC,EAAQ,KAAEoB,GAASI,EAInC,GAFAjB,GAAUogB,EAAAA,EAAAA,IAAKpgB,EAAS,CAAC,UAEZ,cAATa,IAAyBb,EAAQqgB,YACnC,OAAO/e,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B4C,qBAAsB3B,GACrBV,GAGL,MAAMwC,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1BiH,GAAeC,EAAAA,EAAAA,IAAmB3H,EAAQS,EAAQC,GAClD6gB,EAAoB7Z,GAAegN,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQiH,QAAgB7G,EAErFwf,EAAkBtd,EAAKE,SACzBmd,EAAAA,EAAAA,IAAyBpgB,EAAQS,EAAQC,GACzC6gB,GAAmBC,qBAAuBD,GAAmBN,iBAE3D5B,EAAS,IACVpe,EACH8B,OACAkd,WAAYvY,EACZ2Y,kBACAoB,WAAWC,EAAAA,EAAAA,IAAgB1hB,EAAQS,EAAQC,GAC3CihB,QAAQC,EAAAA,EAAAA,IAAa5hB,EAAQS,IAG/BO,EAAQuH,gBAAgB,CAAErB,eAAWrG,EAAWN,UAChDS,EAAQ6gB,oBAAoB,CAAEthB,UAE9B,MAAMuhB,GAAY7gB,EAAQ8gB,aAAe9gB,EAAQ8gB,YAAY5hB,QAAU,EACjE6hB,GAAaF,GAAY7gB,EAAQghB,oBAEvC,GAAIH,EAAU,CACZ,MAAM,YAAEC,KAAgBG,GAAe7C,EACvCD,GAAYpf,EAAQ,IACfkiB,EACHxC,WAAYqC,EAAcA,EAAY,QAAKlhB,GAC1CN,EACL,MAAO,GAAIyhB,EAAW,CACpB,MAAM,KACJle,EAAI,SAAEqe,EAAQ,YAAEJ,KAAgBK,GAC9B/C,EACEgD,EAoxCV,SAAgCN,GAC9B,OAAOA,EAAY/b,QAAO,CAACC,EAAKyZ,EAAYf,EAAO2D,IACnC,IAAV3D,GACF1Y,EAAIG,KAAK,CAACsZ,IACHzZ,IAGIsc,GAAkB7C,KACV6C,GAAkBD,EAAI3D,EAAQ,IAEjD1Y,EAAIA,EAAI9F,OAAS,GAAGiG,KAAKsZ,GAEzBzZ,EAAIG,KAAK,CAACsZ,IAGLzZ,IACN,GACL,CAryCmBuc,CAAuBT,GAEtCM,EAAO3W,SAAQ,CAAC+W,EAAOC,KACrB,MAAMC,GAAqBC,EAAAA,EAAAA,IAAMH,EAA0BI,EAAAA,KAC3D,IAAK,IAAIjE,EAAI,EAAGA,EAAI+D,EAAmBxiB,OAAQye,IAAK,CAClD,MAAOkE,KAAoBC,GAAmBJ,EAAmB/D,GAC3D/U,EAAa,GAAE6C,KAAKC,QAAQ+V,IAAa9D,IAEzCoE,EAAgB,IAANpE,GAA0B,IAAf8D,EAE3BtD,GAAYpf,EAAQ,IACfoiB,EACHte,KAAMkf,EAAUlf,OAAOjD,EACvBshB,SAAUa,EAAUb,OAAWthB,EAC/B6e,WAAYoD,EACZjZ,UAAWkZ,EAAgB5iB,OAAS,EAAI0J,OAAYhJ,GACnDN,GAEHwiB,EAAgBrX,SAASgU,IACvBN,GAAYpf,EAAQ,IACfoiB,EACH1C,aACA7V,aACCtJ,EAAM,GAEb,IAEJ,KAAO,CACL,MAAM,KACJuD,EAAI,SAAEqe,EAAQ,YAAEJ,EAAW,WAAE9B,KAAemC,GAC1C/C,EAEAvb,GACFsb,GAAYpf,EAAQ,IACfoiB,EACHte,OACAqe,WACAlC,cACC1f,GAGLwhB,GAAarW,SAASgU,IACpBN,GAAYpf,EAAQ,IACfoiB,EACH1C,cACCnf,EAAM,GAEb,CAEgB,KAGlBQ,EAAAA,EAAAA,IAAiB,eAAe,CAACf,EAAQgB,EAASC,KAChD,MAAM,KAAE6C,EAAI,SAAEqe,EAAQ,MAAE5hB,GAAQC,EAAAA,EAAAA,OAAsBS,EAEhDiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAGF,MAAM,OAAEzB,EAAM,SAAEC,EAAUoB,KAAMmD,GAAoB/C,EAC9Ca,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1BgF,GAAUwd,EAAAA,EAAAA,IAAqBjjB,EAAQS,EAAQC,EAAUuE,GAC1DlC,GAAS0C,KAITsX,EAAAA,EAAAA,IAAQ,cAAe,CAC1Bha,OAAM0C,UAAS3B,OAAMqe,WAAUV,WAAWC,EAAAA,EAAAA,IAAgB1hB,EAAQS,EAAQC,KAG5EM,EAAQkiB,aAAa,CAAEhc,eAAWrG,EAAWN,UAAQ,KAGvDQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,OAAER,EAAM,UAAEyG,GAAcjG,EACxBwE,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQyG,GAC5CuY,EAAmBha,GAAWyW,EAAwBiH,KAAIC,EAAAA,EAAAA,IAAqB3d,IACjFga,IACF4D,EAAAA,EAAAA,IAAkB5D,GAGpBze,EAAQkN,UAAU,CAChB,QAAS,iBACTjE,IAAK,CAAC/C,GACNzG,UACA,KAGJM,EAAAA,EAAAA,IAAiB,aAAamZ,MAAOla,EAAQgB,EAASC,KACpD,MAAM,OACJR,EAAM,SAAEC,EAAQ,MAAE4iB,EAAK,YAAEC,GACvBtiB,EACJ,IAAKqiB,EACH,OAGF,MAAM,KAAExf,EAAI,SAAEqe,GAAamB,EACrBvgB,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1B+iB,GAAOC,EAAAA,EAAAA,IAAWzjB,EAAQS,GAC5B+iB,IAAQE,EAAAA,EAAAA,IAAcF,KAE1BF,EAAMK,SAAU,EAChBL,EAAMC,YAAcA,EACpBvjB,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQC,EAAU,QAAS4iB,GAC/DtjB,GAAS4jB,EAAAA,EAAAA,IAAW5jB,EAAQS,EAAQ,CAAEojB,UAAWnW,KAAKwK,MAAMxL,KAAKC,MAAQ,QAEzE/I,EAAAA,EAAAA,IAAU5D,SAEW+c,EAAAA,EAAAA,IAAQ,YAAa,CACxCha,OACAe,OACAqe,WACA2B,cAAcnc,EAAAA,EAAAA,IAAmB3H,EAAQS,EAAQC,GACjDA,UAAU0f,EAAAA,EAAAA,IAAyBpgB,EAAQS,EAAQC,OAInD4iB,EAAMK,SAAU,GAGlB3jB,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQC,EAAU,QAAS4iB,GAC/DtjB,GAAS4jB,EAAAA,EAAAA,IAAW5jB,EAAQS,EAAQ,CAAEojB,UAAWnW,KAAKwK,MAAMxL,KAAKC,MAAQ,QAEzE/I,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,cAAc,CAACf,EAAQgB,EAASC,KAC/C,MAAM,OACJR,EAAM,SAAEC,EAAWmB,EAAAA,GAAc,UAAEkiB,EAAS,YAAER,GAC5CtiB,EACJ,KAAK+iB,EAAAA,EAAAA,IAAYhkB,EAAQS,EAAQC,GAC/B,OAGF,MAAMqC,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAE3BsjB,IACEhH,EAAAA,EAAAA,IAAQ,aAAcha,GAAMqd,EAAAA,EAAAA,IAAyBpgB,EAAQS,EAAQC,IAG5E,MAAMujB,EAAiCV,EAAc,CAAEA,cAAazf,KAAM,SAAOjD,EAIjF,OAHAb,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQC,EAAU,QAASujB,IACtDL,EAAAA,EAAAA,IAAW5jB,EAAQS,EAAQ,CAAEojB,eAAWhjB,GAEpC,KAGfE,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,OAAER,EAAM,SAAEC,EAAQ,UAAE+gB,GAAcxgB,EAExC,OAAOgG,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQC,EAAU,YAAa+gB,EAAU,KAG7E1gB,EAAAA,EAAAA,IAAiB,cAAc,CAACf,EAAQgB,EAASC,KAC/C,MAAM,UACJiG,EAAS,QAAEgd,EAAO,UAAEC,EAAS,SAAEC,EAAQ,MAAE7jB,GAAQC,EAAAA,EAAAA,OAC/CS,EAEE8B,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GAClCwC,IAIAga,EAAAA,EAAAA,IAAQ,aAAc,CACzBha,OAAMmE,YAAWgd,UAASC,YAAWC,YACrC,KAGJrjB,EAAAA,EAAAA,IAAiB,oBAAoBmZ,MAAOla,EAAQgB,EAASC,KAC3D,MAAM,OAAER,EAAM,SAAEC,GAAaO,EACvB8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EACH,OAGF,MAAMshB,GAAQjE,EAAAA,EAAAA,IAAyBpgB,EAAQS,EAAQC,SACjDqc,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEha,OAAMrC,SAAU2jB,IAEpDrkB,GAASuJ,EAAAA,EAAAA,MACT,MAAM+a,GAAYC,EAAAA,EAAAA,IAAgBvkB,EAAQS,EAAQC,GAClD4jB,GAAW5Y,SAAS9J,IAClB5B,GAAS+gB,EAAAA,EAAAA,IAAkB/gB,EAAQS,EAAQmB,EAAI,CAAE4iB,UAAU,GAAQ,IAErExkB,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQ+C,EAAKnB,GAAIC,EAAAA,GAAgB,YAAa,KAC1E+B,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,WAAE+D,EAAU,mBAAEyf,EAAkB,MAAElkB,GAAQC,EAAAA,EAAAA,OAAsBS,EAChEiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAEF,MAAM,OAAEzB,EAAM,SAAEC,GAAawB,EACvBa,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,IAE3Bsc,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEha,OAAMiC,aAAYyf,uBAEnD,MAAMC,GAAYC,EAAAA,EAAAA,IAAgB3kB,EAAQS,EAAQC,GAC9CgkB,GAAa1f,EAAWyF,SAASia,IACnC1jB,EAAQkiB,aAAa,CAAEhc,eAAWrG,EAAWN,SAC/C,KAGFQ,EAAAA,EAAAA,IAAiB,2BAA2B,CAACf,EAAQgB,EAASC,KAC5D,MAAM,WAAE+D,EAAU,MAAEzE,GAAQC,EAAAA,EAAAA,OAAsBS,EAC5CiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAGF,MAAM,OAAEzB,GAAWyB,EACba,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,IAE3Bsc,EAAAA,EAAAA,IAAQ,0BAA2B,CAAEha,OAAMiC,eAEhD,MAAM0f,GAAYE,EAAAA,EAAAA,IAAyB5kB,EAAQS,GAC/CikB,GAAa1f,EAAWyF,SAASia,IACnC1jB,EAAQkiB,aAAa,CAAEhc,eAAWrG,EAAWN,SAC/C,KAGFQ,EAAAA,EAAAA,IAAiB,iBAAiBmZ,MAAOla,EAAQgB,EAASC,KACxD,MAAM,OAAER,EAAM,mBAAEgkB,EAAkB,MAAElkB,GAAQC,EAAAA,EAAAA,OAAsBS,EAC5D8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EACH,aAGIga,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEha,OAAM0hB,uBAEvCzkB,GAASuJ,EAAAA,EAAAA,MACT,MAAMsb,GAAalkB,EAAAA,EAAAA,IAAyBX,EAAQO,GAChDskB,GAAcA,EAAWpkB,SAAWA,GACtCO,EAAQ6C,SAAS,CAAEjC,QAAIf,EAAWN,UAIpC,MAAMukB,EAAU9kB,EAAO+kB,YAAYvH,KACnC1V,OAAOmR,OAAO6L,GAASpZ,SAASsZ,IAC9B,GAAIA,EAAOC,gBAAgBxa,SAAShK,IAAWukB,EAAOE,eAAeza,SAAShK,GAAS,CACrF,MAAM0kB,EAAqBH,EAAOC,gBAAgBjhB,QAAQpC,GAAOA,IAAOnB,IAClE2kB,EAAmBJ,EAAOE,eAAelhB,QAAQpC,GAAOA,IAAOnB,IAE/D4kB,EAAgB,IACjBL,EACHC,gBAAiBE,EACjBD,cAAeE,IAGjBrI,EAAAA,EAAAA,IAAQ,iBAAkB,CACxBnb,GAAIojB,EAAOpjB,GACX0jB,aAAcD,GAElB,IACA,KAGJtkB,EAAAA,EAAAA,IAAiB,kBAAkBmZ,MAAOla,EAAQgB,EAASC,KACzD,MAAM,WACJ+D,EAAU,OAAEugB,EAAM,YAAEC,EAAW,MAAEjlB,GAAQC,EAAAA,EAAAA,OACvCS,EACEiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAGF,MAAM,OAAEzB,GAAWyB,EACba,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAE1BsF,QAAegX,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7C0I,KAAM1iB,EAAMiC,aAAYugB,SAAQC,gBAGlCxkB,EAAQqL,iBAAiB,CACvB5G,QAASM,GACL2f,EAAAA,EAAAA,IAAU,2BACV,2EACJnlB,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,qBAAqBmZ,MAAOla,EAAQgB,EAASC,KAC5D,MAAM,OAAEgU,EAAM,OAAExU,EAAM,SAAEC,GAAaO,EACrC,GAAIR,IAAWT,EAAO+X,cAAe,OAErC,MAAMhV,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EAAM,OACX,MAAMygB,GAAOC,EAAAA,EAAAA,IAAWzjB,EAAQS,GAC5B+iB,KAASmC,EAAAA,EAAAA,IAAUnC,KAASE,EAAAA,EAAAA,IAAcF,WAExCzG,EAAAA,EAAAA,IAAQ,oBAAqB,CACjC0I,KAAM1iB,EAAMrC,WAAUuU,UACtB,KAGJlU,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,MAAEwM,EAAK,MAAElN,GAAQC,EAAAA,EAAAA,OAAsBS,EAEvCiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAGF,MAAM,OAAEzB,EAAM,SAAEC,GAAawB,EACvBa,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EACH,OAGFqZ,GAAwB,MACjBW,EAAAA,EAAAA,IAAQ,sBAAuB,CAClCha,OAAMrC,WAAU+M,SAChB,IAGAhN,IAAWwM,EAAAA,MACbjN,EAAS,IACJA,EACH+M,qBAAsB/M,EAAO+M,qBAAqBvH,KAAKiN,GAC9CA,EAAaxE,UAAYwE,EAAa7Q,IAAM6L,EAAQ,IAAKgF,EAAcxE,UAAU,GAAUwE,MAKxG,MAAMrL,GAAcC,EAAAA,EAAAA,IAAkBrH,EAAQS,EAAQC,EAAUH,GAC1DqlB,GAAQC,EAAAA,EAAAA,IAAoB7lB,EAAQS,EAAQC,GAClD,IAAK0G,IAAgBwe,IAAU7iB,EAAK+iB,YAClC,OAAO9lB,EAGT,MAAM+lB,EAu7BR,SAAwB9b,EAAe+U,EAAcC,GACnD,IAAI+G,EAAQ,EAEZ,IAAK,IAAIpH,EAAI,EAAGhL,EAAI3J,EAAI9J,OAAQye,EAAIhL,IAC9B3J,EAAI2U,IAAMI,GAAQ/U,EAAI2U,IAAMK,GAC9B+G,MAGE/b,EAAI2U,IAAMK,IALuBL,KAUvC,OAAOoH,CACT,CAr8BoBC,CAAe7e,EAAcwe,EAAOnY,GACtD,IAAKsY,EACH,OAAO/lB,EAGT,GAAI+C,EAAKE,SAAWF,EAAK0V,SAAS/X,GAAW,CAC3C,MAAMwlB,EAAQnjB,EAAK0V,OAAO/X,GAC1BV,GAASmmB,EAAAA,EAAAA,IAAiBnmB,EAAQS,EAAQC,EAAU,CAClD0lB,uBAAwB3Y,IAE1B,MAAM4Y,EAAsB3Y,KAAKC,IAAI,EAAGuY,EAAMJ,YAAcC,GAM5D,OAL4B,IAAxBM,IACFrmB,GAAS4jB,EAAAA,EAAAA,IAAW5jB,EAAQS,EAAQ,CAClCqlB,YAAapY,KAAKC,IAAI,EAAG5K,EAAK+iB,YAAc,OAGzCQ,EAAAA,EAAAA,IAAYtmB,EAAQS,EAAQC,EAAU,CAC3ColB,YAAaO,GAEjB,CAGA,OAAI3lB,IAAamB,EAAAA,IAIV+hB,EAAAA,EAAAA,IAAW5jB,EAAQS,EAAQ,CAChC2lB,uBAAwB3Y,EACxBqY,YAAapY,KAAKC,IAAI,EAAG5K,EAAK+iB,YAAcC,UAN9C,CAOE,KAGJhlB,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,WAAE+D,EAAU,MAAEzE,GAAQC,EAAAA,EAAAA,OAAsBS,EAE5C8B,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GAClCwC,IAIAga,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEha,OAAMiC,cAAa,KAGxDjE,EAAAA,EAAAA,IAAiB,sBAAsBmZ,MAAOla,EAAQgB,EAASC,KAC7D,MAAM,KAAE6C,EAAI,MAAEvD,GAAQC,EAAAA,EAAAA,OAAsBS,EAEtCslB,QAAuBxJ,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEtX,QAAS3B,IAEvE9D,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BumB,kBACChmB,IACHqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,IAAKK,EAAAA,EAAAA,IAAetB,EAAQO,GAAOgmB,eAInC,OAAOhkB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BumB,oBAAgB1lB,GACfN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,gBAAgB,CAACf,EAAQgB,EAASC,KACjD,MAAM,OAAER,EAAM,UAAEyG,EAAS,QAAEsf,GAAYvlB,EACjC8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAE5BsC,IACGga,EAAAA,EAAAA,IAAQ,eAAgB,CAAEha,OAAMmE,YAAWsf,WAClD,KAGFzlB,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,OAAER,EAAM,UAAEyG,GAAcjG,EACxB8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAE5BsC,IACGga,EAAAA,EAAAA,IAAQ,eAAgB,CAAEha,OAAMmE,YAAWsf,QAAS,IAC3D,KAGFzlB,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASC,KAC9C,MAAM,OAAER,EAAM,UAAEyG,GAAcjG,EACxB8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1BgmB,GAAO/R,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQyG,IAAYkG,QAAQqZ,KAC/D1jB,GAAQ0jB,IACL1J,EAAAA,EAAAA,IAAQ,YAAa,CAAEha,OAAMmE,YAAWuf,QAC/C,KAGF1lB,EAAAA,EAAAA,IAAiB,yBAAyBmZ,MAAOla,EAAQgB,EAASC,KAChE,MAAM,KACJ8B,EAAI,UAAEmE,EAAS,OAAEwf,EAAM,OAAEnX,EAAM,MAAEsG,EAAK,kBAAE8Q,EAAiB,MAAEpmB,GAAQC,EAAAA,EAAAA,OACjES,EAEE8E,QAAegX,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDha,OAAMmE,YAAWwf,SAAQnX,SAAQsG,UAGnC,IAAK9P,EACH,OAGF/F,GAASuJ,EAAAA,EAAAA,MAETvJ,GAAS6d,EAAAA,EAAAA,IAAS7d,GAAQyd,EAAAA,EAAAA,IAAqB1X,EAAOiX,MAAO,OAE7D,MAAM7a,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,IAClC,YAAE6I,GAAgBjH,GAClB,OAAEkH,GAAWlH,EAASiH,YAE5BpJ,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BoJ,YAAa,IACRA,EACHC,OAAQ,IACHA,EACH,CAACqd,IAASxQ,EAAAA,EAAAA,IAAO,KACVyQ,GAAqBtd,GAAUA,EAAOqd,GAAUrd,EAAOqd,GAAU,MAClE3gB,GAAUA,EAAOiX,MAAMxX,KAAKge,GAASA,EAAK5hB,QAGlDglB,QAAS,IACHxd,EAAYwd,QAAUxd,EAAYwd,QAAU,CAAC,EACjD,CAACF,GAAS3gB,EAAO8gB,YAAc,MAGlCtmB,IACHqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,OAAER,EAAM,IAAEwJ,GAAQhJ,EAClB8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC5BsC,IACGga,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEha,OAAMkH,OAC7C,KAGFlJ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,SAAEmjB,EAAQ,YAAE9C,EAAW,MAAE/gB,GAAQC,EAAAA,EAAAA,OAAsBS,GAEvD,WACJ6J,EAAU,WAAE9F,EAAU,SAAElC,EAAQ,YAAEiI,EAAW,UAAEI,EAAS,WAAEC,EAAU,WAAE0b,IACpExlB,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsC,gBAC5BkkB,GAAuBC,EAAAA,EAAAA,IAA2BhnB,GAClDinB,EAAWnc,GAAa9H,EAAAA,EAAAA,IAAWhD,EAAQ8K,QAAcjK,EACzDqmB,EAASpkB,GAAWE,EAAAA,EAAAA,IAAWhD,EAAQ8C,QAAYjC,EACnD0E,EAAWuF,GAAc9F,EAC3BA,EACCY,MAAK,CAACuhB,EAAGC,IAAMD,EAAIC,IACnB5hB,KAAK5D,IAAO8S,EAAAA,EAAAA,IAAkB1U,EAAQ8K,EAAYlJ,KAAKoC,OAAOwD,cAC/D3G,EAEJ,IAAKomB,IAAaC,IAAW3hB,GAAauhB,IAAeI,EAAOjkB,QAC9D,OAGF,MAAM0e,GAASC,EAAAA,EAAAA,IAAa5hB,EAAQ8C,GAE9BukB,EAAe9hB,EAASvB,QAAQsjB,KAAOC,EAAAA,EAAAA,IAA6BD,KACtED,EAAalnB,SACV4c,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9BkK,WACAC,SACAJ,aACAvhB,SAAU8hB,EACVjD,WACA9C,cACAK,SACA5W,cACAI,YACAC,aACA2b,yBAIJxhB,EACGvB,QAAQsjB,IAAMC,EAAAA,EAAAA,IAA6BD,KAC3C5b,SAASjG,IACR,MAAM,KAAE3B,EAAI,SAAEqe,GAAa1c,EAAQ2H,QAAQtJ,MAAQ,CAAC,GAC9C,QAAE8N,EAAO,KAAE6U,GAAShhB,EAAQ2H,QAE7BgS,GAAYpf,EAAQ,CACvB+C,KAAMmkB,EACN7G,gBAAiByG,EACjBhjB,OACAqe,WACAvQ,UACA6U,OACArC,WACA9C,cACAK,UACCphB,EAAM,IAGbP,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B6C,gBAAiB,CAAC,GACjBtC,IACHqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,wBAAwBmZ,MAAOla,EAAQgB,EAASC,KAC/D,MAAM,OAAER,GAAWQ,EACb8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EACH,OAGF,MAAMgD,QAAegX,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEha,SACxD,IAAKgD,EACH,OAGF,MAAM,SAAER,GAAaQ,EAEfyX,GAAOC,EAAAA,EAAAA,IAAqBlY,EAAU,MACtC0E,EAAMnC,OAAOC,KAAKyV,GAAMhY,IAAI0C,QAAQtC,MAAK,CAACuhB,EAAGC,IAAMA,EAAID,IAK7D,GAHAnnB,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASwnB,EAAAA,EAAAA,IAAyBxnB,EAAQ+C,EAAKnB,GAAI4b,GACnDxd,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQ+C,EAAKnB,GAAIC,EAAAA,GAAgB,eAAgBoI,GACzElH,GAAME,QAAS,CACjB,MAAMwkB,EAA+C,CAAC,EACtDliB,EAASmG,SAASjG,IAChB,MAAM/E,GAAWgnB,EAAAA,EAAAA,IAA0B1nB,EAAQyF,GAC7CkiB,EAAoBF,EAAmB/mB,IAAa,GAC1DinB,EAAkBvhB,KAAKX,EAAQ7D,IAC/B6lB,EAAmB/mB,GAAYinB,CAAiB,IAGlD7f,OAAO8f,QAAQH,GAAoB/b,SAAQkC,IAA8B,IAA5BlN,EAAUmnB,GAAaja,EAClE5N,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQ+C,EAAKnB,GAAIsG,OAAOxH,GAAW,eAAgBmnB,EAAa,GAEhG,EACAjkB,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,OACJR,EAAM,GAAEmB,GACNX,EAEE8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAE3BsC,IAIAga,EAAAA,EAAAA,IAAQ,wBAAyB,CACpCha,OACAkH,IAAK,CAACrI,IACN,KAGJb,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,OACJR,EAAM,UAAEyG,EAAS,YAAEoa,GACjBrgB,EAEE8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1BgF,EAAU1C,IAAQ+kB,EAAAA,EAAAA,IAAuB9nB,EAAQ+C,EAAKnB,GAAIsF,GAC3DnE,GAAS0C,IAITsX,EAAAA,EAAAA,IAAQ,oBAAqB,CAChCha,OACA0C,UACA6b,eACA,KAGJvgB,EAAAA,EAAAA,IAAiB,2BAA2BmZ,MAAOla,EAAQgB,EAASC,KAClE,MAAM,OAAER,EAAM,SAAEC,GAAaO,EACvB8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EACH,OAGF,MAAMglB,GAAkBC,EAAAA,EAAAA,IAAuBhoB,EAAQS,EAAQC,IAAWkB,GAEpEmE,QAAegX,EAAAA,EAAAA,IAAQ,0BAA2B,CAAEha,OAAMrC,WAAUqnB,oBACrEhiB,IACL/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS6d,EAAAA,EAAAA,IAAS7d,GAAQyd,EAAAA,EAAAA,IAAqB1X,EAAOiX,MAAO,QAC7DpZ,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,mBAAmBmZ,MAAOla,EAAQgB,EAASC,KAC1D,MAAM,UAAEiG,EAAS,OAAEzG,GAAWQ,EAExB8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAEhC,IAAKsC,EAAM,OAEX/C,GAAS+gB,EAAAA,EAAAA,IAAkB/gB,EAAQS,EAAQyG,EAAW,CACpD+gB,gBAAiB,MAGnBrkB,EAAAA,EAAAA,IAAU5D,GAEV,MAAM+F,QAAegX,EAAAA,EAAAA,IAAQ,kBAAmB,CAAEha,OAAMmE,cAExDlH,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS+gB,EAAAA,EAAAA,IAAkB/gB,EAAQS,EAAQyG,EAAW,CACpD+gB,gBAAiBliB,EACjBmiB,sBAAuBniB,KAGzBnC,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,oBAAoBmZ,MAAOla,EAAQgB,EAASC,KAC3D,MAAM,IAAEgJ,EAAG,YAAEke,GAAgBlnB,EACvBmnB,EAAoBD,EAAcle,GACpCiM,EAAAA,EAAAA,IAAOjM,EAAIjG,QAAQkO,IAAgBlS,EAAOwS,aAAagL,KAAKtL,MAC1DmW,QAAoBtL,EAAAA,EAAAA,IAAQ,mBAAoB,CACpD7K,WAAYkW,IAETC,IAELroB,GAASuJ,EAAAA,EAAAA,MACTvJ,EAAS,IACJA,EACHwS,aAAc,IACTxS,EAAOwS,aACVgL,KAAM,IACDxd,EAAOwS,aAAagL,SACpBC,EAAAA,EAAAA,IAAqB4K,EAAa,UAI3CzkB,EAAAA,EAAAA,IAAU5D,GAAO,KAqOnBe,EAAAA,EAAAA,IAAiB,sBAAsBmZ,MAAOla,EAAQgB,EAASC,KAC7D,MAAM,OAAER,EAAM,SAAEC,GAAaO,EACvB8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EACH,OAGF,MAAMgD,QAAegX,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEha,OAAMrC,aAC5D,IAAKqF,EACH,OAGF,MAAM,SAAER,EAAQ,MAAEuJ,EAAK,MAAEkO,GAAUjX,EAE7ByX,GAAOC,EAAAA,EAAAA,IAAqBlY,EAAU,MACtC0E,EAAMnC,OAAOC,KAAKyV,GAAMhY,IAAI0C,QAAQtC,MAAK,CAACuhB,EAAGC,IAAMA,EAAID,IAE7DnnB,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS0d,EAAAA,EAAAA,IAAoB1d,EAAQ+C,EAAKnB,GAAI4b,GAC9Cxd,GAASsoB,EAAAA,EAAAA,IAAqBtoB,EAAQ+C,EAAKnB,GAAIlB,EAAUuJ,GACzDjK,GAAS6d,EAAAA,EAAAA,IAAS7d,GAAQyd,EAAAA,EAAAA,IAAqBT,EAAO,OACtDhd,GAAS8d,EAAAA,EAAAA,IAAS9d,GAAQyd,EAAAA,EAAAA,IAAqB3O,EAAO,QACtDlL,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,cAAcmZ,MAAOla,EAAQgB,EAASC,KACrD,MAAM,OAAER,EAAM,UAAEyG,GAAcjG,EACxB8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EACH,OAGF,MAAMgD,QAAegX,EAAAA,EAAAA,IAAQ,cAAe,CAAEha,OAAMmE,cAC/CnB,IAIL/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS+gB,EAAAA,EAAAA,IAAkB/gB,EAAQS,EAAQyG,EAAW,CACpDqhB,cAAexiB,KAEjBnC,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,OAAER,EAAM,SAAE+nB,GAAavnB,EACvB8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1BgoB,GAAazlB,EAAAA,EAAAA,IAAWhD,EAAQwoB,KAAa/E,EAAAA,EAAAA,IAAWzjB,EAAQwoB,GACtE,GAAKzlB,GAAS0lB,EAMd,OAFK1L,EAAAA,EAAAA,IAAQ,oBAAqB,CAAE4E,OAAQ8G,EAAY1lB,UAEjD2lB,EAAAA,EAAAA,IAAmB1oB,EAAQS,EAAQ,CAAE+nB,YAAW,KAGzDznB,EAAAA,EAAAA,IAAiB,cAAcmZ,MAAOla,EAAQgB,EAASC,KACrD,MAAM,OAAER,GAAWQ,EACb8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EACH,OAGF,MAAMgD,QAAegX,EAAAA,EAAAA,IAAQ,cAAe,CAAEha,SAC9C,IAAKgD,EAOH,OANA/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS4jB,EAAAA,EAAAA,IAAW5jB,EAAQS,EAAQ,CAClCkoB,cAAe,UAEjB/kB,EAAAA,EAAAA,IAAU5D,GAKZA,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS6d,EAAAA,EAAAA,IAAS7d,GAAQyd,EAAAA,EAAAA,IAAqB1X,EAAOiX,MAAO,OAC7Dhd,GAAS8d,EAAAA,EAAAA,IAAS9d,GAAQyd,EAAAA,EAAAA,IAAqB1X,EAAO+I,MAAO,OAC7D9O,GAAS4jB,EAAAA,EAAAA,IAAW5jB,EAAQS,EAAQ,CAAEkoB,cAAe5iB,EAAO4b,UAC5D/d,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,yBAAyBmZ,MAAOla,EAAQgB,EAASC,KAChE,MAAM,OAAER,GAAWQ,EACb8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EACH,OAGF,MAAMgD,QAAegX,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEha,SACpDgD,IAIL/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS4oB,EAAAA,EAAAA,IAAuB5oB,EAAQS,EAAQsF,EAAOR,SAAS,IAChEvF,GAAS6d,EAAAA,EAAAA,IAAS7d,GAAQyd,EAAAA,EAAAA,IAAqB1X,EAAOiX,MAAO,OAC7Dhd,GAAS8d,EAAAA,EAAAA,IAAS9d,GAAQyd,EAAAA,EAAAA,IAAqB1X,EAAO+I,MAAO,QAC7DlL,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,OAAER,GAAWQ,EACb8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1BgF,GAAUojB,EAAAA,EAAAA,IAAuB7oB,EAAQS,GAC1CsC,GAAS0C,IAITsX,EAAAA,EAAAA,IAAQ,uBAAwB,CAAEha,OAAM+lB,OAAQrjB,EAAQsjB,UAAW,KAG1EhoB,EAAAA,EAAAA,IAAiB,uBAAuBmZ,MAAOla,EAAQgB,EAASC,KAC9D,MAAM,OAAER,EAAM,SAAE6b,GAAarb,EACvB8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EAAM,OAEX,MAAMgD,QAAegX,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEha,OAAMuZ,aAE5D,IAAKvW,EAAQ,OAEb,MAAM,SAAER,EAAQ,MAAEuJ,EAAK,MAAEkO,GAAUjX,EAE7ByX,GAAOC,EAAAA,EAAAA,IAAqBlY,EAAU,MACtC0E,EAAMnC,OAAOC,KAAKyV,GAAMhY,IAAI0C,QAElClI,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS0d,EAAAA,EAAAA,IAAoB1d,EAAQ+C,EAAKnB,GAAI4b,GAC9Cxd,GAAS6d,EAAAA,EAAAA,IAAS7d,GAAQyd,EAAAA,EAAAA,IAAqBT,EAAO,OACtDhd,GAAS8d,EAAAA,EAAAA,IAAS9d,GAAQyd,EAAAA,EAAAA,IAAqB3O,EAAO,OACtD9O,GAAS4jB,EAAAA,EAAAA,IAAW5jB,EAAQS,EAAQ,CAClCuoB,eAAgB,IAAKjmB,EAAKimB,gBAAkB,MAAQ/e,MAGtDrG,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,WAAE+D,EAAU,MAAEzE,GAAQC,EAAAA,EAAAA,OAAsBS,EAE5C8B,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GACvC,IAAKwC,EAAM,OAEX,MAAMimB,GAAkBjmB,EAAKimB,gBAAkB,IAAIhlB,QAAQpC,IAAQoD,EAAWyF,SAAS7I,KACvF5B,GAAS4jB,EAAAA,EAAAA,IAAW5jB,EAAQ+C,EAAKnB,GAAI,CACnConB,oBAGFplB,EAAAA,EAAAA,IAAU5D,GAEVgB,EAAQioB,iBAAiB,CAAEjkB,aAAYzE,SAAQ,KAGjDQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAE5C8B,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GAElCwC,GAAMimB,gBAEXhoB,EAAQwH,aAAa,CAAE/H,OAAQsC,EAAKnB,GAAIsF,UAAWnE,EAAKimB,eAAe,GAAIzoB,SAAQ,KAGrFQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAE5C8B,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GACvC,GAAKwC,EAIL,OAFAga,EAAAA,EAAAA,IAAQ,kBAAmB,CAAEha,UAEtB6gB,EAAAA,EAAAA,IAAW5jB,EAAQ+C,EAAKnB,GAAI,CACjCsnB,yBAAqBroB,EACrBmoB,oBAAgBnoB,GAChB,KAGJE,EAAAA,EAAAA,IAAiB,WAAW,CAACf,EAAQgB,EAASC,KAC5C,MAAM,IAAEqT,EAAG,gBAAE6U,EAAe,MAAE5oB,GAAQC,EAAAA,EAAAA,OAAsBS,EACtDmoB,GAAkBC,EAAAA,EAAAA,GAAe/U,GAEvC,GAAI8U,EAAgBE,MAAMC,EAAAA,MAAgBH,EAAgBE,MAAME,EAAAA,KAE9D,YADAxoB,EAAQyoB,iBAAiB,CAAEnV,MAAK/T,UAIlC,MAAM,UAAEmpB,GAAc1pB,EACtB,GAAI0pB,EAAW,CACb,MAAMC,EAAY,IAAIC,IAAIR,GAE1B,GAAIM,EAAUG,iBAAiBpf,SAASkf,EAAUG,UAGhD,OAFAH,EAAUI,aAAajK,IArvCD,kBAqvC0B4J,EAAUM,qBAC1DzmB,OAAOC,KAAKmmB,EAAUtZ,KAAM,SAAU,YAIxC,GAAIqZ,EAAUO,eAAexf,SAASkf,EAAUG,UAE9C,YADA9oB,EAAQkpB,mBAAmB,CAAE5V,MAAK/T,SAGtC,CAE4B6oB,EAAgBE,MAAMa,EAAAA,MAAsBhB,EAKtE5lB,OAAOC,KAAK4lB,EAAiB,SAAU,YAFvCpoB,EAAQopB,oBAAoB,CAAE9V,IAAK8U,EAAiB7oB,SAGtD,KAGFQ,EAAAA,EAAAA,IAAiB,yBAAyBmZ,MAAOla,EAAQgB,EAASC,KAChE,MAAM,OAAER,EAAM,QAAE4V,EAAO,MAAE9V,GAAQC,EAAAA,EAAAA,OAAsBS,EACvD,IAAIuiB,GAAOC,EAAAA,EAAAA,IAAWzjB,EAAQS,GAC9B,GAAI+iB,IAAQ6G,EAAAA,EAAAA,IAAmCrqB,EAAQO,GAAQ,CAC7D,IAAI+pB,GAAWC,EAAAA,EAAAA,IAAmBvqB,EAAQS,GAC1C,IAAK6pB,EAAU,CACb,MAAM,WAAEE,GAAehH,EACjBzd,QAAegX,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEnb,GAAInB,EAAQ+pB,eAC5DxqB,GAASuJ,EAAAA,EAAAA,MACTia,EAAOzd,GAAQyd,KACf8G,EAAWvkB,GAAQukB,QACrB,CAEA,GAAIA,EAAUG,gBAOZ,YANAzpB,EAAQ0pB,WAAW,CACjB3W,KAAM,CACJtO,SAASigB,EAAAA,EAAAA,IAAU,oCAAoCiF,EAAAA,EAAAA,IAAgBnH,KAEzEjjB,SAIN,EAEKqqB,EAAAA,EAAAA,IAA8B5qB,EAAQS,EAAQF,IAKnDP,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B6C,gBAAiB,KACZvB,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsC,gBACjCC,SAAUrC,EACVqmB,WAAYzQ,EACZnL,cAAc,IAEf3K,IACHqD,EAAAA,EAAAA,IAAU5D,GAEVgB,EAAQ6C,SAAS,CAAEjC,GAAInB,EAAQC,SAAU2V,EAAS9V,UAClDS,EAAQ6pB,iBAAiB,CAAEtqB,UAC3BS,EAAQ0B,sBAAsB,CAAEnC,WAhB9BS,EAAQ8pB,oCAAoC,CAAErqB,SAAQF,SAgBhB,KAG1CQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACf,EAAQgB,EAASC,KAC3D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClDjB,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B6C,gBAAiB,KACZvB,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsC,gBACjCC,SAAU9C,EAAO+X,gBAElBxX,IACHqD,EAAAA,EAAAA,IAAU5D,GAEVgB,EAAQ0B,sBAAsB,CAAEnC,UAChCS,EAAQ6B,gBAAgB,CAAEuhB,UAAU,EAAM7jB,SAAQ,KAGpDQ,EAAAA,EAAAA,IAAiB,6BAA6B,CAACf,EAAQgB,EAASC,KAC9D,MAAM,OACJR,EAAM,GAAEmB,EAAE,eAAEmpB,GAAiBC,EAAAA,EAAAA,IAAmBhrB,GAAO,MAAEO,GAAQC,EAAAA,EAAAA,OAC/DS,EAIJ,OAFSgqB,EAAAA,EAAAA,IAAkCjrB,EAAQS,EAAQmB,EAAImpB,EAAgBxqB,EAElE,KAGfQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,OACJR,EAAM,GAAEmB,EAAE,MAAErB,GAAQC,EAAAA,EAAAA,OAClBS,EAIJ,OAFSiqB,EAAAA,EAAAA,IAAkClrB,EAAQS,EAAQmB,EAAIrB,EAElD,KAGfQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,OACJR,EAAM,WAAEuE,EAAU,eAAE+lB,GAAiBC,EAAAA,EAAAA,IAAmBhrB,IACtDiB,EAEE8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,GAAKsC,EAcL,OAZAiC,EAAW0G,SAAS9J,IAClB5B,GAASmrB,EAAAA,EAAAA,IAAyBnrB,EAAQS,EAAQmB,EAAImpB,EAAgB,CACpEK,WAAW,GACX,KAGJrO,EAAAA,EAAAA,IAAQ,gBAAiB,CACvBha,OACAiC,aACA+lB,mBAGK/qB,CAAM,IAKf,IAAIqrB,GACAC,GAAmD,CAAC,EAExD,SAASC,KACHF,KACFhhB,aAAaghB,IACbA,QAAwBxqB,GAI1B,MAAM,iBAAE2qB,IAAqB1S,EAAAA,EAAAA,MAC7BhR,OAAO8f,QAAQ0D,IAAqB5f,SAAQ+f,IAAmB,IAAjBhrB,EAAQwJ,GAAIwhB,EACxDD,EAAiB,CAAE/qB,SAAQwJ,IAAK5J,MAAM2e,KAAK/U,GAAMyhB,iBAAiB,GAAO,IAG3EJ,GAAsB,CAAC,CACzB,CA2FA,SAAS/I,GAAkB7C,GACzB,MAAM,iBACJiM,EAAgB,SAAEC,GAChBlM,EACJ,OAAIiM,EAAyB,OACzBC,IAAaC,EAAAA,IAAsB,MACnCC,EAAAA,IAAAA,IAAkCF,IAAaG,EAAAA,IAAAA,IAAkCH,GAAkB,QACnGI,EAAAA,IAAAA,IAAkCJ,GAAkB,QACpDlM,EAAWuM,MAAc,QACtB,MACT,EApGAlrB,EAAAA,EAAAA,IAAiB,6BAA6B,CAACf,EAAQgB,EAASC,KAC9D,MAAM,IAAEgJ,EAAG,OAAExJ,GAAWQ,EAEnBoqB,IACH/hB,WAAWiiB,GAtBY,KAyBpBD,GAAoB7qB,KACvB6qB,GAAoB7qB,GAAU,IAAIyrB,KAGpCjiB,EAAIyB,SAAS9J,IACX0pB,GAAoB7qB,GAAQ0rB,IAAIvqB,EAAG,GACnC,KAGJb,EAAAA,EAAAA,IAAiB,oBAAoBmZ,MAAOla,EAAQgB,EAASC,KAC3D,MAAM,OAAER,EAAM,IAAEwJ,EAAG,gBAAEyhB,GAAoBzqB,EAEnC8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EAAM,OAEX,MAAMgD,QAAegX,EAAAA,EAAAA,IAAQ,oBAAqB,CAChDha,OACAkH,MACAyhB,oBAGG3lB,IAEL/F,GAASuJ,EAAAA,EAAAA,MACTxD,EAAO2F,SAAS0gB,IACdpsB,GAAS+gB,EAAAA,EAAAA,IAAkB/gB,EAAQS,EAAQ2rB,EAAOxqB,GAAI,CACpDyqB,MAAOD,EAAOC,MACdC,SAAUF,EAAOE,WAGnB,MAAM7mB,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQ2rB,EAAOxqB,IACzD,IAAK6D,EAAS,OAEd,MAAM8mB,EAAgB9mB,EAAQ+mB,mBAAmB/rB,OAC3CC,EAAW+E,EAAQ+mB,mBAAmB9rB,SACvC6rB,GAAkB7rB,IAEvBV,GAASmmB,EAAAA,EAAAA,IAAiBnmB,EAAQusB,EAAe7rB,EAAU,CACzD+rB,cAAeL,EAAOK,cACtBC,iBAAkBN,EAAOM,iBACzBpkB,cAAe8jB,EAAO3e,MACtB2Y,uBAAwBgG,EAAOO,YAC/B,KAGJ/oB,EAAAA,EAAAA,IAAU5D,GAAO,I,2BC//CnB,MAGM4sB,IAAkBC,EAAAA,EAAAA,KAAUxQ,GAAOA,KAAM,KAAK,GAkfpDnC,eAAe4S,GAA0C9sB,EAAW+R,GAClE,MAAMgb,QAAuBhQ,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEhL,SACzDgb,IAIL/sB,GAASuJ,EAAAA,EAAAA,MAETvJ,EAAS,IACJA,EACH8R,SAAU,IACL9R,EAAO8R,SACVD,OAAQkb,KAGZnpB,EAAAA,EAAAA,IAAU5D,GACZ,CAEAka,eAAe8S,GACbhtB,EACAgB,EACAisB,GAEA,QAAAhtB,EAAAC,UAAAC,OAAAuc,EAAA,IAAArc,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAoc,EAAApc,EAAA,GAAAJ,UAAAI,GAAA,IACI4sB,GAFA3sB,GAAQC,EAAAA,EAAAA,OAAkBkc,EAG9B,IACEwQ,QAAmBnQ,EAAAA,EAAAA,IACjB,gBACA,CAAEkQ,kBAEN,CAAE,MAAO7V,GACP,GAAoC,uBAA/BA,EAAmB3R,QAatB,OAZAzE,EAAQqL,iBAAiB,CACvB5G,SAASigB,EAAAA,EAAAA,IAAU,6BACnBnlB,eAGE,cAAe0sB,IACd3rB,EAAAA,EAAAA,IAAetB,EAAQO,GAAOwV,4BAA8BkX,EAAeE,YAC9EntB,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B+V,+BAA2BlV,GAC1BN,IACHqD,EAAAA,EAAAA,IAAU5D,IAIhB,CAGA,GAFAA,GAASuJ,EAAAA,EAAAA,OAEJ2jB,EAEH,OAGF,MAAM,IAAEpN,EAAG,SAAEhO,EAAQ,MAAEsb,GAAUF,EAI3BG,GAFNrtB,GAASstB,EAAAA,EAAAA,IAAiBttB,EAAQ8f,EAAIle,GAAI,IAAKke,EAAKhO,WAAUsb,WAElCtb,SAASyb,SAASjnB,MAC1C+mB,GAAgBD,EAAMC,KACxBrtB,GAASwtB,EAAAA,EAAAA,IAAwBxtB,KAGnC4D,EAAAA,EAAAA,IAAU5D,EACZ,CAkLAka,eAAeuT,GAAkCztB,EAAWkB,EAAewsB,EAAsBne,GACnD,QAAAkN,EAAAvc,UAAAC,OAAAof,EAAA,IAAAlf,MAAAoc,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAA4C,EAAA5C,EAAA,GAAAzc,UAAAyc,GAAA,IAAxCpc,GAAQC,EAAAA,EAAAA,OAAkB+e,EAC9B,MAAMxZ,QAAegX,EAAAA,EAAAA,IAAQ,aAAc,CAAE7b,QAAOqO,SAAQoe,SAAUD,IACjE3nB,IAIL/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS4tB,EAAAA,EAAAA,IAAgB5tB,GAASuP,EAAQxJ,EAAO8nB,KAAM9nB,EAAO8gB,WAAYtmB,IAC1EqD,EAAAA,EAAAA,IAAU5D,GACZ,EA5uBAe,EAAAA,EAAAA,IAAiB,mBAAmBmZ,MAAOla,EAAQgB,KACjD,MAAO8sB,EAAeC,SAA2BC,QAAQC,IAAI,EAC3DlR,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEhL,KAAM/R,EAAO8R,SAASQ,MAAMP,QAC1DgL,EAAAA,EAAAA,IAAQ,uBAAwB,CAAEhL,KAAM/R,EAAOwS,aAAaF,MAAMP,SAE/Dgc,GAAsBD,IAI3B9tB,GAASuJ,EAAAA,EAAAA,MAETvJ,GAASkuB,EAAAA,EAAAA,IACPluB,EACA,QACA8tB,EAAc/b,KACd+b,EAAcK,MAGhBnuB,GAASouB,EAAAA,EAAAA,IACPpuB,EACA+tB,EAAkBhc,KAClBgc,EAAkBI,OAGpBvqB,EAAAA,EAAAA,IAAU5D,GAEVgB,EAAQqtB,iBAAiB,CACvBpkB,IAAKjK,EAAOmS,qBACZ,KAGJpR,EAAAA,EAAAA,IAAiB,qBAAqBmZ,MAAOla,EAAQgB,EAASC,KAC5D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAEhDqR,OACEC,OAAQ+b,EAAc,IAExBC,SAAUC,GACRxuB,EAAO8R,UAETQ,OACEC,OAAQkc,EAAoB,KAE5BzuB,EAAOwS,aACLkc,EAAe,IAAIJ,KAAgBG,GACzC,GAAKC,EAAavuB,OAIlB,IAAK,IAAIye,EAAI,EAAGA,EAAI8P,EAAavuB,OAAQye,IAAK,CAC5C,MAAMhd,EAAK8sB,EAAa9P,GACpB4P,EAAO5sB,IAAKkQ,WAGhB9Q,EAAQgsB,aAAa,CACnBC,eAAgB,CAAErrB,KAAI4oB,WAAYgE,EAAO5sB,GAAI4oB,YAC7CjqB,UAGEqe,EA/D0B,IA+DQ,GAAKA,EAAI,SACvC+P,EAAAA,EAAAA,IAjEgB,KAmE1B,MAGF5tB,EAAAA,EAAAA,IAAiB,sBAAuBf,IACtC,MAAM,KAAE+R,GAAS/R,EAAO8R,SAASD,QAAU,CAAC,EACvCib,GAAmB9sB,EAAQ+R,EAAK,KAGvChR,EAAAA,EAAAA,IAAiB,wBAAwBmZ,UACvC,MAAM,KAAEnI,GAAS/R,EAAO8R,SAAS8c,UAAY,CAAC,EAExCC,QAAyB9R,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEhL,SAC7D8c,IAIL7uB,GAASuJ,EAAAA,EAAAA,MAETvJ,EAAS,IACJA,EACH8R,SAAU,IACL9R,EAAO8R,SACV8c,SAAUC,KAGdjrB,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,uBAAuBmZ,UACtC,MAAM,KAAEnI,GAAS/R,EAAO8R,SAASgd,SAAW,CAAC,EAEvC/oB,QAAegX,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEzW,MAAO,OAAQyL,SAClEhM,IAIL/F,GAASuJ,EAAAA,EAAAA,MAETvJ,EAAS,IACJA,EACH8R,SAAU,IACL9R,EAAO8R,SACVgd,QAAS,CACP/c,KAAMhM,EAAOgM,KACbD,SAAU/L,EAAO+L,aAIvBlO,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,0BAA0BmZ,UACzC,MAAM,KAAEnI,GAAS/R,EAAO8R,SAASgd,SAAW,CAAC,EAEvC/oB,QAAegX,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEzW,MAAO,OAAQyL,SAClEhM,IAIL/F,GAASuJ,EAAAA,EAAAA,MAETvJ,EAAS,IACJA,EACH8R,SAAU,IACL9R,EAAO8R,SACVid,WAAY,CACVhd,KAAMhM,EAAOgM,KACbD,SAAU/L,EAAO+L,aAIvBlO,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,wBAAwBmZ,UACvC,MAAM,KAAEnI,GAAS/R,EAAO8R,SAASkd,UAAY,CAAC,EAExCA,QAAiBjS,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEzW,MAAO,OAAQyL,SACpEid,IAILhvB,GAASuJ,EAAAA,EAAAA,MAETvJ,EAAS,IACJA,EACH8R,SAAU,IACL9R,EAAO8R,SACVkd,SAAU,CACRjd,KAAMid,EAASjd,KACfD,SAAUkd,EAASld,SAAS9N,QAAQ4N,GAA8B,OAAlBA,EAAQtL,YAI9D1C,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,wBAAwBmZ,UACvC,MAAM,KAAEnI,GAAS/R,EAAO8R,SAASmd,UAAY,CAAC,EACxCC,QAAyBnS,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEhL,SAC7Dmd,IAILlvB,GAASuJ,EAAAA,EAAAA,MAETvJ,GAASkuB,EAAAA,EAAAA,IACPluB,EACA,WACAkvB,EAAiBnd,KACjBmd,EAAiBf,OAEnBvqB,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,oBAAoBmZ,UACnC,MAAMgT,QAAmBnQ,EAAAA,EAAAA,IAAQ,qBACjC,IAAKmQ,EACH,OAGF,MAAM,IAAEpN,EAAG,SAAEhO,GAAaob,EAE1BltB,GAASuJ,EAAAA,EAAAA,MACTvJ,EAAS,IACJA,EACHmvB,aAAc,IAAKrP,EAAKhO,cAE1BlO,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,yBAAyBmZ,UACxC,MAAMgT,QAAmBnQ,EAAAA,EAAAA,IAAQ,0BACjC,IAAKmQ,EACH,OAEFltB,GAASuJ,EAAAA,EAAAA,MAET,MAAM,IAAEuW,EAAG,SAAEhO,GAAaob,EAEpBkC,EAAU,IAAKtP,EAAKhO,YAE1B9R,GAASstB,EAAAA,EAAAA,IAAiBttB,EAAQovB,EAAQxtB,GAAIwtB,GAC9CpvB,EAAS,IACJA,EACHqvB,oBAAqBD,EAAQxtB,KAE/BgC,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,0BAA0BmZ,UACzC,MAAMgT,QAAmBnQ,EAAAA,EAAAA,IAAQ,4BACjC,IAAKmQ,EACH,OAEFltB,GAASuJ,EAAAA,EAAAA,MAET,MAAM,IAAEuW,EAAG,SAAEhO,GAAaob,EACpBkC,EAAU,IAAKtP,EAAKhO,YAE1B9R,GAASstB,EAAAA,EAAAA,IAAiBttB,EAAQovB,EAAQxtB,GAAIwtB,GAC9CpvB,EAAS,IAAKA,EAAQsvB,qBAAsBF,EAAQxtB,KACpDgC,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,gBAAgB,CAACf,EAAQgB,EAASC,KACjD,MAAM,eAAEgsB,EAAc,MAAE1sB,GAAQC,EAAAA,EAAAA,OAAsBS,EAChDsuB,GAAYC,EAAAA,EAAAA,IAAiBxvB,EAAQitB,GACvCsC,GAAaA,EAAUvJ,QAAUuJ,GAAWzd,UAAU3R,QACrD6sB,GAAahtB,EAAQgB,EAASisB,EAAgB1sB,EAAM,KAG3DQ,EAAAA,EAAAA,IAAiB,sBAAsBmZ,UACrC,MAAOuV,EAAQC,SAAiB1B,QAAQC,IAAI,EAC1ClR,EAAAA,EAAAA,IAAQ,wBACRA,EAAAA,EAAAA,IAAQ,+BAEL0S,GAAWC,IAIhB1vB,GAASuJ,EAAAA,EAAAA,MAETvJ,GAAS2vB,EAAAA,EAAAA,IAAsB3vB,EAAQ,IAAKyvB,EAAO3P,IAAKhO,SAAU2d,EAAO3d,WACzE9R,EAAS,IACJA,EACH4vB,qBAAsB,IAAKF,EAAQ5P,IAAKhO,SAAU4d,EAAQ5d,YAG5DlO,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,2BAA2BmZ,UAC1C,MAAMgT,QAAmBnQ,EAAAA,EAAAA,IAAQ,4BACjC,IAAKmQ,EACH,OAEFltB,GAASuJ,EAAAA,EAAAA,MAET,MAAM,IAAEuW,EAAG,SAAEhO,GAAaob,EAE1BltB,EAAS,IACJA,EACH6vB,oBAAqB,IAAK/P,EAAKhO,cAEjClO,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,iBAAiBmZ,UAChC,MAAM,KAAEnI,GAAS/R,EAAO6tB,KAAKiC,MAEvBC,QAAkBhT,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEhL,SAC/Cge,IAIL/vB,GAASuJ,EAAAA,EAAAA,MAETvJ,EAAS,IACJA,EACH6tB,KAAM,IACD7tB,EAAO6tB,KACViC,MAAOC,KAGXnsB,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,WAAWmZ,MAAOla,EAAQgB,EAASC,KAClD,MAAM,IACJ+uB,EAAG,aAAEC,EAAY,MACjB1vB,GAAQC,EAAAA,EAAAA,OACNS,EACEd,EAASH,EAAO6tB,KAAKiC,MAAMjC,MAAM1tB,OAEjC0V,GAAQqa,EAAAA,GAAAA,GAAmBlwB,EAAQ,aACnCmwB,GAAeC,EAAAA,GAAAA,GAAmBpwB,EAAQ,aAC1CqwB,GAAYrJ,EAAAA,EAAAA,IAA2BhnB,GAoB7C,IAlBKiwB,GAAgB9vB,GAAUA,GAAU0V,GACvC7U,EAAQqL,iBAAiB,CACvBoE,MAAOtL,EAAAA,GAAuB,2BAA4B0Q,EAAM5N,YAChExC,QAAS4qB,EAAYlrB,EAAAA,GAAuB,2CACxCA,EAAAA,GAAuB,mCACvBgrB,EAAaloB,gBACZooB,GAAa,CAChBpb,OAAQ,CACNA,OAAQ,mBACRhU,QAAS,CAAEV,WAGf+vB,UAAW,YACX/vB,iBAIiBwc,EAAAA,EAAAA,IAAQ,UAAW,CAAEiT,MAAKC,iBAE7C,OAGFjwB,GAASuJ,EAAAA,EAAAA,MACT,MAAMskB,EAAO7tB,EAAO6tB,KAAKiC,MAAMjC,MAAM7pB,QAAO5D,IAAA,IAAC,GAAEwB,GAAIxB,EAAA,OAAKwB,IAAOouB,EAAIpuB,EAAE,KAAK,GACpE2uB,EAAUN,EAAepC,EAAO,CAACmC,KAAQnC,GAE/C7tB,EAAS,IACJA,EACH6tB,KAAM,IACD7tB,EAAO6tB,KACViC,MAAO,IACF9vB,EAAO6tB,KAAKiC,MACfjC,KAAM0C,MAIZ3sB,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,eAAe,CAACf,EAAQgB,EAASC,KAChD,MAAM,QAAE2Q,EAAO,MAAErR,GAAQC,EAAAA,EAAAA,OAAsBS,EACzCuvB,EAAUxwB,EAAO8R,SAAS8c,SAAS9c,SAAS3R,OAC5C0V,GAAQqa,EAAAA,GAAAA,GAAmBlwB,EAAQ,iBACnCmwB,GAAeC,EAAAA,GAAAA,GAAmBpwB,EAAQ,iBAC1CqwB,GAAYrJ,EAAAA,EAAAA,IAA2BhnB,GAEzCwwB,GAAW3a,GACb7U,EAAQqL,iBAAiB,CACvBoE,MAAOtL,EAAAA,GAAuB,+BAAgC0Q,EAAM5N,YACpExC,QAAS4qB,EAAYlrB,EAAAA,GAAuB,+CACxCA,EAAAA,GAAuB,uCACvBgrB,EAAaloB,gBACZooB,GAAa,CAChBpb,OAAQ,CACNA,OAAQ,mBACRhU,QAAS,CAAEV,WAGf+vB,UAAW,YACX/vB,UAIAqR,IACGmL,EAAAA,EAAAA,IAAQ,cAAe,CAAEnL,WAChC,KAGF7Q,EAAAA,EAAAA,IAAiB,iBAAiB,CAACf,EAAQgB,EAASC,KAClD,MAAM,QAAE2Q,GAAY3Q,EAEhB2Q,IACF5R,GAASuJ,EAAAA,EAAAA,MAITvJ,EAAS,IACJA,EACH8R,SAAU,IACL9R,EAAO8R,SACV8c,SAAU,IACL5uB,EAAO8R,SAAS8c,SACnB9c,SAAU9R,EAAO8R,SAAS8c,SAAS9c,SAAS9N,QAAO4J,IAAA,IAAC,GAAEhM,GAAIgM,EAAA,OAAKhM,IAAOgQ,EAAQhQ,EAAE,QAItFgC,EAAAA,EAAAA,IAAU5D,IAEL+c,EAAAA,EAAAA,IAAQ,cAAe,CAAEnL,UAAS6e,QAAQ,IACjD,KAGF1vB,EAAAA,EAAAA,IAAiB,uBAAuBmZ,MAAOla,EAAQgB,EAASC,KAC9D,MAAM,QAAE2Q,GAAY3Q,QAEC8b,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEnL,aAKtDkb,IADSvjB,EAAAA,EAAAA,MACiB,KAG5BxI,EAAAA,EAAAA,IAAiB,uBAAuBmZ,gBACjB6C,EAAAA,EAAAA,IAAQ,yBAI7B/c,GAASuJ,EAAAA,EAAAA,MACTvJ,EAAS,IACJA,EACH8R,SAAU,IACL9R,EAAO8R,SACVD,OAAQ,CACNC,SAAU,OAIhBlO,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,aAAEyvB,GAAiBzvB,EACnBisB,GAAasC,EAAAA,EAAAA,IAAiBxvB,EAAQ0wB,GAC5C,IAAKxD,EACH,OAGF,MAAM,WAAE1C,EAAU,cAAEmG,EAAa,WAAEC,GAAe1D,EAC5C2D,GAAeD,GAAcppB,QAAQmpB,IAEtC5T,EAAAA,EAAAA,IAAS8T,EAAoC,sBAAtB,oBAA6C,CAAEH,eAAclG,cAAa,KAGxGzpB,EAAAA,EAAAA,IAAiB,qBAAqBmZ,MAAOla,EAAQgB,EAASC,KAC5D,MAAM,SAAE6vB,GAAa7vB,EAErB,IAAI8vB,EAAuB/wB,EAAOgxB,cAAcF,GAChD,GAAIC,GAAsB3W,UACxB,OAGFpa,EAAS,IACJA,EACHgxB,cAAe,IACVhxB,EAAOgxB,cACV,CAACF,GAAW,IACPC,EACH3W,WAAW,MAIjBxW,EAAAA,EAAAA,IAAU5D,GAEV,MAAMgxB,QAAsBjU,EAAAA,EAAAA,IAAQ,qBAAsB,CACxD+T,WACAG,YAAaF,EAAuBA,EAAqB/jB,QAAU,IAMrE,GAFA+jB,GADA/wB,GAASuJ,EAAAA,EAAAA,OACqBynB,cAAcF,IAEvCE,EAaH,OAZAhxB,EAAS,IACJA,EACHgxB,cAAe,IACVhxB,EAAOgxB,cACV,CAACF,GAAW,IACPC,EACH3W,WAAW,UAIjBxW,EAAAA,EAAAA,IAAU5D,GAKZA,EAAS,IACJA,EACHgxB,cAAe,IACVhxB,EAAOgxB,cACV,CAACF,GAAW,CACV1W,WAAW,EACXpN,QAASgkB,EAAchkB,QACvBkkB,SAAU,IACJH,GAAsBG,YACvBF,EAAcE,cAKzBttB,EAAAA,EAAAA,IAAU5D,EAAO,KAqEnBe,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,EAEzCC,GACG0rB,IAAgB1S,UACnB,MAAMnU,QAAegX,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE7b,UAEjD,IAAK6E,EACH,OAGF/F,GAASuJ,EAAAA,EAAAA,MACT,MAAM,SAAEglB,EAAQ,MAAEjc,GAAUtS,EAAO8R,SAE7BzC,EAAYtJ,EAAOooB,KAAK3oB,KAAI2X,IAAA,IAAC,GAAEvb,GAAIub,EAAA,OAAKvb,CAAE,IAE5C0Q,EAAMC,QACRD,EAAMC,OAAO7G,SAAS9J,IACpB,IAAKyN,EAAU5E,SAAS7I,GAAK,CAC3B,MAAM,MAAE6O,GAAU8d,EAAS3sB,IAAO,CAAC,EAC/B6O,IAAS0gB,EAAAA,GAAAA,GAAY1gB,EAAOvP,IAC9BmO,EAAUH,QAAQtN,EAEtB,KAIJ5B,GAASkuB,EAAAA,EAAAA,IACPluB,EACA,SACA+F,EAAOgM,KACPhM,EAAOooB,MAGTnuB,GAASoxB,EAAAA,EAAAA,IAAoBpxB,EAAQ+F,EAAOgM,KAAM1C,EAAW9O,IAC7DqD,EAAAA,EAAAA,IAAU5D,EAAO,GAErB,KAGFe,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,EAExB,iBAAVC,GACJ0rB,IAAgB,KACnBa,GAAWztB,EAAQkB,EAAOlB,EAAOqxB,QAAQC,uBAAmBzwB,EAAWN,EAAM,GAEjF,KAGFQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,MAAEC,EAAK,OAAEqO,IAAWjO,EAAAA,EAAAA,IAAetB,EAAQO,GAAO+O,UAEnC,iBAAVpO,GACJ0rB,IAAgB,KACnBa,GAAWztB,EAAQkB,EAAOlB,EAAOqxB,QAAQC,kBAAmB/hB,EAAQhP,EAAM,GAE9E,KAGFQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,MAAEqF,GAAUrF,GACZ,KAAE8Q,GAAS/R,EAAO8R,SAASyb,SAE5BX,IAAgB1S,UACnBla,GAASuJ,EAAAA,EAAAA,MACTvJ,EAAS,IACJA,EACH8R,SAAU,IACL9R,EAAO8R,SACVyb,SAAU,IACLvtB,EAAO8R,SAASyb,SACnBjnB,YAIN1C,EAAAA,EAAAA,IAAU5D,GAEV,MAAM+F,QAAegX,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEzW,QAAOyL,SAE/D/R,GAASuJ,EAAAA,EAAAA,MAEJxD,GAAU/F,EAAO8R,SAASyb,SAASjnB,QAAUA,IAIlDtG,GAASuxB,EAAAA,EAAAA,IAAuBvxB,EAAQsG,EAAOP,EAAO+L,SAAU/L,EAAOgM,OAEvEnO,EAAAA,EAAAA,IAAU5D,GAAO,GACjB,KAGJe,EAAAA,EAAAA,IAAiB,yBAA0Bf,IAClC,IACFA,EACH8R,SAAU,IACL9R,EAAO8R,SACVyb,SAAU,CAAC,QAKjBxsB,EAAAA,EAAAA,IAAiB,2BAA2B,CAACf,EAAQgB,EAASC,KAC5D,MAAM,MAAEqF,GAAUrF,EAElB,OAAOuwB,EAAAA,EAAAA,IAA0BxxB,EAAQsG,EAAM,KAGjDvF,EAAAA,EAAAA,IAAiB,4BAA6Bf,IACrC,IACFA,EACHwS,aAAc,IACTxS,EAAOwS,aACV+a,SAAU,CAAC,QAKjBxsB,EAAAA,EAAAA,IAAiB,6BAA6BmZ,UAC5C,MAAMgV,QAAyBnS,EAAAA,EAAAA,IAAQ,8BAClCmS,IAILlvB,GAASuJ,EAAAA,EAAAA,MACTvJ,EAAS,IACJA,EACHwS,aAAc,IACTxS,EAAOwS,aACVif,YAAavC,EAAiBf,KAAK3oB,KAAI6X,IAAA,IAAC,GAAEzb,GAAIyb,EAAA,OAAKzb,CAAE,IACrD4b,KAAM,IACDxd,EAAOwS,aAAagL,SACpBC,EAAAA,EAAAA,IAAqByR,EAAiBf,KAAKuD,SAAS5R,GAAQA,EAAIhO,UAAY,KAAK,QAGxFA,SAAU,IACL9R,EAAO8R,SACVyc,SAAU,IACLvuB,EAAO8R,SAASyc,aAChB9Q,EAAAA,EAAAA,IAAqByR,EAAiBf,KAAM,UAIrDvqB,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,kBAAkBmZ,MAAOla,EAAQgB,EAASC,KACzD,MAAM,eAAEgsB,EAAc,MAAE1sB,GAAQC,EAAAA,EAAAA,OAAsBS,GACjDuuB,EAAAA,EAAAA,IAAiBxvB,EAAQitB,UACtBD,GAAahtB,EAAQgB,EAASisB,EAAgB1sB,GAGtDP,GAASuJ,EAAAA,EAAAA,MACT,MAAMuW,GAAM0P,EAAAA,EAAAA,IAAiBxvB,EAAQitB,GAChCnN,GAAKqN,YAIVntB,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B+V,0BAA2B+J,EAAIqN,WAC9B5sB,IACHqD,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,2BAA2BmZ,UAC1C,MAAMnU,QAAegX,EAAAA,EAAAA,IAAQ,4BACxBhX,IAIL/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS2xB,EAAAA,EAAAA,IAA+B3xB,EAAQ+F,EAAOgM,KAAMhM,EAAO6rB,gBACpEhuB,EAAAA,EAAAA,IAAU5D,GAAO,I,cC7uBnB,MAAM4sB,IAAkBC,EAAAA,EAAAA,KAAUxQ,GAAOA,KAAM,KAAK,GAoFpDnC,eAAe2X,GACb7xB,GAGA,IAFAkB,EAAKhB,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,GAAI4B,EAAgC5B,UAAAC,OAAA,EAAAD,UAAA,QAAAW,EAAEixB,EAAmB5xB,UAAAC,OAAA,EAAAD,UAAA,QAAAW,EAAEkC,EAAc7C,UAAAC,OAAA,EAAAD,UAAA,QAAAW,EAAEkxB,EAAgB7xB,UAAAC,OAAA,EAAAD,UAAA,QAAAW,EAAEmxB,EAAgB9xB,UAAAC,OAAA,EAAAD,UAAA,QAAAW,EAAA,QAAAZ,EAAAC,UAAAC,OAAAkd,EAAA,IAAAhd,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAA+c,EAAA/c,EAAA,GAAAJ,UAAAI,GAAA,IAGjHyF,GAFAxF,GAAQC,EAAAA,EAAAA,OAAkB6c,EAY9B,GAAIta,EAAM,CACR,MAAMkvB,GAAqBlV,EAAAA,EAAAA,IAAQ,sBAAuB,CACxDha,OACA7B,QACAY,OACA+T,MAAOqc,EAAAA,IACP5V,SAAUwV,EACVE,UACAD,YAEII,EAAgBpvB,EAAKE,SAAU8Z,EAAAA,EAAAA,IAAQ,cAAe,CAC1Dha,OACA7B,QACA2U,MAAOuc,EAAAA,WACJvxB,GAEEwxB,EAAa5Z,SAAgBuV,QAAQC,IAAI,CAACgE,EAAoBE,IAErE,GAAIE,EAAa,CACf,MAAM,SACJ9sB,EAAQ,MAAEyX,EAAK,WAAEsV,EAAU,aAAEC,GAC3BF,GAEI5Z,OAAQ+Z,EAAW,MAAExM,GAAUvN,GAAU,CAAC,EAElD1S,EAAS,CACP0S,OAAQ+Z,EACRC,iBAAkBzM,EAClBzgB,WACAyX,QACAlO,MAAO,GACPwjB,aACAI,SAAUH,EAEd,CACF,MACExsB,QAAegX,EAAAA,EAAAA,IAAQ,uBAAwB,CAC7C7b,QACA4wB,aACAjc,MAAOqc,EAAAA,IACPpwB,OACAiwB,UACAC,YAIJhyB,GAASuJ,EAAAA,EAAAA,MACT,MAAMopB,GAAqBC,EAAAA,EAAAA,IAA+B5yB,EAAQO,GAClE,IAAKwF,GAAqB,KAAV7E,GAAgBA,IAAUyxB,EAGxC,OAFA3yB,GAAS6yB,EAAAA,EAAAA,IAAiC7yB,EAAQ,CAAEuF,UAAU,GAAShF,QACvEqD,EAAAA,EAAAA,IAAU5D,GAIZ,MAAM,SACJuF,EAAQ,MAAEyX,EAAK,MAAElO,EAAK,WAAEwjB,EAAU,SAAEI,GAClC3sB,EAEA+I,EAAM3O,SACRH,GAAS8d,EAAAA,EAAAA,IAAS9d,GAAQyd,EAAAA,EAAAA,IAAqB3O,EAAO,QAGpDkO,EAAM7c,SACRH,GAAS6d,EAAAA,EAAAA,IAAS7d,GAAQyd,EAAAA,EAAAA,IAAqBT,EAAO,QAGpDzX,EAASpF,SACXH,GAAS8yB,EAAAA,EAAAA,IAAY9yB,EAAQuF,IAG/BvF,GAAS+yB,EAAAA,EAAAA,IACP/yB,EACAuF,EACA+sB,EACAxwB,EACA4wB,EACAnyB,GAGEwF,EAAO0S,SACTzY,GAASgzB,EAAAA,EAAAA,IAAahzB,EAAQ+C,EAAMnB,GAAImE,EAAO0sB,iBAAmB1sB,EAAO0S,SAG3E,MAAMwa,EAAeltB,EAAO0S,QAAQjT,KAAI+Z,IAAA,IAAC,GAAE3d,GAAI2d,EAAA,OAAK3d,CAAE,IAAEgE,MAAK,CAACuhB,EAAGC,IAAMA,EAAID,IAC3EnnB,GAASyO,EAAAA,EAAAA,IAAmBzO,EAAQ,CAClCkzB,cAAeD,GACd1yB,IAEHqD,EAAAA,EAAAA,IAAU5D,EACZ,CC1EAka,eAAeiZ,GACbnzB,EACA+C,EACArC,EACAoB,EACAwa,GAGA,IAFAE,EAAetc,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GAAQ,QAAAD,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,EAAA,GAAAJ,UAAAI,GAAA,IACnBC,GAAQC,EAAAA,EAAAA,OAAkBJ,EAE9B,MAAM2F,QAAegX,EAAAA,EAAAA,IAAQ,sBAAuB,CAClDha,OACAjB,OACA+T,MAA4B,EAArBud,EAAAA,IACPC,aAAc3yB,IAAamB,EAAAA,QAAiBhB,EAAYH,EACxD4b,aAGF,IAAKvW,EACH,OAGF,MAAM,MACJ+I,EAAK,MAAEkO,EAAK,SAAEzX,EAAQ,WAAE+sB,EAAU,aAAEC,GAClCxsB,EAEEyX,GAAOC,EAAAA,EAAAA,IAAqBlY,EAAU,MACtC+tB,EAAcxrB,OAAOC,KAAKyV,GAAMhY,IAAI0C,QAE1ClI,GAASuJ,EAAAA,EAAAA,OAEagqB,EAAAA,EAAAA,IAAyBvzB,EAAQO,KAKvDP,GAAS8d,EAAAA,EAAAA,IAAS9d,GAAQyd,EAAAA,EAAAA,IAAqB3O,EAAO,OACtD9O,GAAS6d,EAAAA,EAAAA,IAAS7d,GAAQyd,EAAAA,EAAAA,IAAqBT,EAAO,OACtDhd,GAAS0d,EAAAA,EAAAA,IAAoB1d,EAAQ+C,EAAKnB,GAAI4b,GAC9Cxd,GAASwzB,EAAAA,EAAAA,IAA8BxzB,EAAQ+C,EAAKnB,GAAIlB,EAAUoB,EAAMwxB,EAAahB,EAAYC,EAAchyB,IAC/GqD,EAAAA,EAAAA,IAAU5D,GAELwc,GACE2W,GAAkBnzB,EAAQ+C,EAAMrC,EAAUoB,EAAMywB,GAAc,EAAMhyB,GAE7E,CCjJA,IAAIkzB,GA8MApY,IFzNJta,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,GACvC,OAAER,IAAWa,EAAAA,EAAAA,IAAetB,EAAQO,GAAOiO,aAE7CtN,IAAUT,GACPmsB,IAAgB1S,UACnB,MAAMnU,QAAegX,EAAAA,EAAAA,IAAQ,cAAe,CAAE7b,UAE9ClB,GAASuJ,EAAAA,EAAAA,MACT,MAAMopB,GAAqBC,EAAAA,EAAAA,IAA+B5yB,EAAQO,GAClE,IAAKwF,IAAW4sB,GAAuBzxB,IAAUyxB,EAG/C,OAFA3yB,GAAS6yB,EAAAA,EAAAA,IAAiC7yB,EAAQ,CAAE8O,OAAO,GAASvO,QACpEqD,EAAAA,EAAAA,IAAU5D,GAIZ,MAAM,WACJ0zB,EAAU,WAAEC,EAAU,YAAEC,EAAW,YAAEC,GACnC9tB,GAEA2tB,EAAWvzB,QAAUyzB,EAAYzzB,UACnCH,GAAS8d,EAAAA,EAAAA,IAAS9d,GAAQyd,EAAAA,EAAAA,IAAqB,IAAIiW,KAAeE,GAAc,SAG9ED,EAAWxzB,QAAU0zB,EAAY1zB,UACnCH,GAAS6d,EAAAA,EAAAA,IAAS7d,GAAQyd,EAAAA,EAAAA,IAAqB,IAAIkW,KAAeE,GAAc,QAGlF7zB,GAAS6yB,EAAAA,EAAAA,IAAiC7yB,EAAQ,CAAE8O,OAAO,GAASvO,GACpEP,GAASyO,EAAAA,EAAAA,IAAmBzO,EAAQ,CAClC2O,aAAc,CACZmlB,QAASJ,EAAWluB,KAAIpF,IAAA,IAAC,GAAEwB,GAAIxB,EAAA,OAAKwB,CAAE,IACtCmyB,QAASJ,EAAWnuB,KAAIoI,IAAA,IAAC,GAAEhM,GAAIgM,EAAA,OAAKhM,CAAE,KAExC8M,cAAe,KACVpN,EAAAA,EAAAA,IAAetB,EAAQO,GAAOiO,aAAaE,cAC9ColB,QAASF,EAAYpuB,KAAIkX,IAAA,IAAC,GAAE9a,GAAI8a,EAAA,OAAK9a,CAAE,IACvCmyB,QAASF,EAAYruB,KAAI2X,IAAA,IAAC,GAAEvb,GAAIub,EAAA,OAAKvb,CAAE,MAExCrB,IAEHqD,EAAAA,EAAAA,IAAU5D,EAAO,GAErB,KAGFe,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,KAAEiM,EAAI,MAAE3M,GAAQC,EAAAA,EAAAA,OAAsBS,EACtC8wB,EAAU7kB,GAAO8mB,EAAAA,GAAAA,IAAiB9mB,GAAQA,EAEhDlN,GAASyO,EAAAA,EAAAA,IAAmBzO,EAAQ,CAClCkN,OACAhM,MAAO,GACP0N,cAAe,KACVtN,EAAAA,EAAAA,IAAetB,EAAQO,GAAOiO,aAAaI,cAC9C9K,KAAM,CACJwuB,gBAAYzxB,EACZozB,SAAU,GACV1B,aAAc,KAGjBhyB,IACHqD,EAAAA,EAAAA,IAAU5D,GAEV,MAAM,OAAES,IAAWa,EAAAA,EAAAA,IAAetB,EAAQO,GAAOiO,aAEjDqjB,GAAqB7xB,EAAQ,GAAI,YAAQa,EAD5BJ,GAASuC,EAAAA,EAAAA,IAAWhD,EAAQS,QAAUI,EACOkxB,EAAS7kB,EAAM3M,EAAM,KAGjFQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,KAAEa,EAAI,MAAEvB,GAAQC,EAAAA,EAAAA,OAAsBS,GACtC,MACJC,EAAK,cAAE0N,EAAa,OAAEnO,EAAM,KAAEyM,IAC5B5L,EAAAA,EAAAA,IAAetB,EAAQO,GAAOiO,aAC5BujB,EAAU7kB,GAAO8mB,EAAAA,GAAAA,IAAiB9mB,GAAQA,EAC1CqlB,EAAgB3jB,IAAgB9M,IAAsCywB,aAI5EV,GAAqB7xB,EAAQkB,EAAOY,EAAMywB,EAF7B9xB,GAASuC,EAAAA,EAAAA,IAAWhD,EAAQS,QAAUI,EAEWkxB,EAAS7kB,EAAM3M,EAAM,KC7ErFQ,EAAAA,EAAAA,IAAiB,2BAA2BmZ,MAAOla,EAAQgB,EAASC,KAClE,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACnEwC,EAAOtC,GAASuC,EAAAA,EAAAA,IAAWhD,EAAQS,QAAUI,EACnD,IAAIqzB,GAAgBC,EAAAA,EAAAA,IAAwBn0B,EAAQO,GACpD,IAAKwC,IAASmxB,IAAkBxzB,EAC9B,OAGF,MAAM,MAAEQ,EAAK,QAAEsO,GAAY0kB,EACrB5X,EAAW9M,GAAS+iB,aAE1B,IAAIc,EACJ,GAAI3yB,IAAamB,EAAAA,GAAgB,CAC/B,MAAMuG,GAAaC,EAAAA,EAAAA,IAAiBrI,EAAQS,EAASC,GACrD2yB,EAAejrB,GAAYirB,YAC7B,CAEA,IAAKnyB,EACH,OAGF,MAAM6E,QAAegX,EAAAA,EAAAA,IAAQ,sBAAuB,CAClDha,OACAjB,KAAM,OACNZ,QACAmyB,eACAxd,MAAOue,EAAAA,IACP9X,aAGF,IAAKvW,EACH,OAGF,MAAM,MACJ+I,EAAK,MAAEkO,EAAK,SAAEzX,EAAQ,WAAE+sB,EAAU,aAAEC,GAClCxsB,EAEEyX,GAAOC,EAAAA,EAAAA,IAAqBlY,EAAU,MACtC+tB,EAAcxrB,OAAOC,KAAKyV,GAAMhY,IAAI0C,QAE1ClI,GAASuJ,EAAAA,EAAAA,MAET2qB,GAAgBC,EAAAA,EAAAA,IAAwBn0B,EAAQO,GAC3C2zB,GAAiBhzB,IAAUgzB,EAAchzB,QAI9ClB,GAAS8d,EAAAA,EAAAA,IAAS9d,GAAQyd,EAAAA,EAAAA,IAAqB3O,EAAO,OACtD9O,GAAS6d,EAAAA,EAAAA,IAAS7d,GAAQyd,EAAAA,EAAAA,IAAqBT,EAAO,OACtDhd,GAAS0d,EAAAA,EAAAA,IAAoB1d,EAAQ+C,EAAKnB,GAAI4b,GAC9Cxd,GAASq0B,EAAAA,EAAAA,IAA6Br0B,EAAQ+C,EAAKnB,GAAIlB,EAAU4yB,EAAahB,EAAYC,EAAchyB,IACxGqD,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,4BAA4B,CAACf,EAAQgB,EAASC,KAC7D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACzE,IAAKE,IAAWC,EACd,OAGF,MAAMqC,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1ByzB,GAAgBX,EAAAA,EAAAA,IAAyBvzB,EAAQO,GAEvD,IAAKwC,IAASmxB,EACZ,OAGF,MAAQI,YAAaxyB,EAAI,cAAE8M,GAAkBslB,EACvCK,EAAiBzyB,GAAQ8M,GAAiBA,EAAc9M,GACxDwa,EAAWiY,GAAgBhC,aAE5BzwB,GAIAqxB,GAAkBnzB,EAAQ+C,EAAMrC,EAAUoB,EAAMwa,OAAUzb,EAAWN,EAAM,KAGlFQ,EAAAA,EAAAA,IAAiB,wBAAwBmZ,MAAOla,EAAQgB,EAASC,KAC/D,MAAM,UAAEuzB,EAAS,MAAEj0B,GAAQC,EAAAA,EAAAA,OAAsBS,GAE3C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAC/D,IAAKE,EACH,OAGF,MAAMsC,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EACH,OAGF,MAAMmE,QAAkB6V,EAAAA,EAAAA,IAAQ,8BAA+B,CAC7Dha,OACAyxB,cAGGttB,GAILlG,EAAQwH,aAAa,CACnB/H,OAAQsC,EAAKnB,GACbsF,YACA3G,SACA,KErHJQ,EAAAA,EAAAA,IAAiB,mBAAmBmZ,MAAOla,EAAQgB,EAASC,KAC1D,MAAM,SAAE0sB,EAAQ,MAAEptB,GAAQC,EAAAA,EAAAA,OAAsBS,GAE1C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAC/D,IAAKE,EACH,OAIF,IAAIa,EAAAA,EAAAA,IAAetB,EAAQO,GAAOyQ,WAAW2O,WAAa8U,EAAAA,GAAAA,WACxD,OAGFz0B,GAAS00B,EAAAA,EAAAA,IACP10B,EAAQS,EAAQ,CAAEk0B,yBAAqB9zB,EAAW+zB,qBAAiB/zB,GAAaN,IAElFqD,EAAAA,EAAAA,IAAU5D,GAEV,MAAM,OAAE+F,EAAM,MAAEqR,SAAiB2F,EAAAA,EAAAA,IAAQ,oBAAqB,CAAE4Q,aAEhE3tB,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS60B,EAAAA,EAAAA,IACP70B,GAAmB,IAAX+F,EAAkB0uB,EAAAA,GAAAA,SAA8BA,EAAAA,GAAAA,MAA0Bl0B,GAEpFP,GAAS00B,EAAAA,EAAAA,IAAiB10B,EAAQS,EAAQ,CACxCk0B,qBAAgC,IAAX5uB,EACrB6uB,gBAAiBjH,EACjBvW,SACC7W,IACHqD,EAAAA,EAAAA,IAAU5D,QAEKa,IAAXkF,GACF/E,EAAQ8zB,sBAAsB,CAAEjf,MAAO,iBAAkBtV,SAC3D,KAGFQ,EAAAA,EAAAA,IAAiB,oBAAoBmZ,MAAOla,EAAQgB,EAASC,KAC3D,MAAM,SAAE0sB,EAAQ,MAAEptB,GAAQC,EAAAA,EAAAA,OAAsBS,GAE1C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAC/D,IAAKE,EACH,OAGF,MAAMsC,QAAagyB,EAAAA,EAAAA,IAAmB/0B,EAAQgB,EAASP,EAAQF,GAC/D,IAAKwC,EAAM,OAEX/C,GAASuJ,EAAAA,EAAAA,MAETvJ,GAAS60B,EAAAA,EAAAA,IAAyB70B,EAAQy0B,EAAAA,GAAAA,WAA+Bl0B,IACzEqD,EAAAA,EAAAA,IAAU5D,GAEV,MAAM+F,QAAegX,EAAAA,EAAAA,IAAQ,kBAAmB,CAAEha,OAAM4qB,aAExD3tB,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS60B,EAAAA,EAAAA,IAAyB70B,EAAQ+F,EAAS0uB,EAAAA,GAAAA,SAA8BA,EAAAA,GAAAA,MAA0Bl0B,GAC3GP,GAAS00B,EAAAA,EAAAA,IAAiB10B,EAAQS,EAAQ,CACxCk0B,yBAAqB9zB,EACrB+zB,qBAAiB/zB,EACjBuW,WAAOvW,GACNN,IACHqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACzDwC,EAAOtC,IAAUuC,EAAAA,EAAAA,IAAWhD,EAAQS,GACrCA,GAAWsC,IAIhBga,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEha,QAAO,KAGxChC,EAAAA,EAAAA,IAAiB,4BAA4B,CAACf,EAAQgB,EAASC,KAC7D,MAAM,OAAER,EAAM,OAAEu0B,EAAM,MAAEz0B,GAAQC,EAAAA,EAAAA,OAAsBS,EAEtDjB,GAAS00B,EAAAA,EAAAA,IAAiB10B,EAAQS,EAAQ,CAAEw0B,cAAeD,GAAUz0B,IACrEqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,OAAER,EAAM,OAAEu0B,EAAM,MAAEz0B,GAAQC,EAAAA,EAAAA,OAAsBS,EAEhDmrB,EAAS4I,EAAS,CAAEE,WAAY,CAAEF,WAAa,CAAEE,gBAAYr0B,GAEnEb,GAAS00B,EAAAA,EAAAA,IAAiB10B,EAAQS,EAAQ2rB,EAAQ7rB,IAClDqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,2BAA2BmZ,MAAOla,EAAQgB,EAASC,KAClE,MAAM,OACJR,EAAM,QAAE00B,EAAO,UAAEC,EAAS,MAAEvf,EAAK,MAAEtV,GAAQC,EAAAA,EAAAA,OACzCS,EACEwkB,GAAOziB,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1B40B,GAAQ5R,EAAAA,EAAAA,IAAWzjB,EAAQm1B,GAAWn1B,EAAO+X,eACnD,IAAK0N,IAAS4P,EAAO,OAErB,MAAMtvB,QAAegX,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD0I,OAAM4P,QAAOD,YAAWvf,UAE1B,IAAK9P,EACH,OAEF/F,GAASuJ,EAAAA,EAAAA,MACT,MAAM,QAAE+rB,EAAO,MAAEtY,GAAUjX,EAE3B/F,GAAS6d,EAAAA,EAAAA,IAAS7d,GAAQyd,EAAAA,EAAAA,IAAqBT,EAAO,OAEtD,MAAMoP,EAASgJ,EAAY,CAAEG,eAAgBD,GAAY,CAAEA,WAC3Dt1B,GAAS00B,EAAAA,EAAAA,IAAiB10B,EAAQS,EAAQ2rB,EAAQ7rB,IAClDqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,0BAA0BmZ,MAAOla,EAAQgB,EAASC,KACjE,MAAM,OACJR,EAAM,KAAE2P,EAAI,UAAEglB,EAAS,WAAEI,EAAU,WAAEC,EAAU,gBAAEC,EAAe,MAAEjlB,EAAK,MAAElQ,GAAQC,EAAAA,EAAAA,OAC/ES,EACEwkB,GAAOziB,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKglB,EAAM,OAEX,MAAM1f,QAAegX,EAAAA,EAAAA,IAAQ,yBAA0B,CACrD0I,OACArV,OACAglB,YACAI,aACAC,aACAC,kBACAjlB,UAEF,IAAK1K,EACH,OAGF,MAAM,UAAE4vB,EAAS,UAAEC,EAAS,MAAE5Y,GAAUjX,EAExC/F,GAASuJ,EAAAA,EAAAA,MACT,MAAM,WAAEyH,IAAe1P,EAAAA,EAAAA,IAAetB,EAAQO,GACxC+0B,GAAWtkB,EAAWzF,SAAS9K,GAAQ60B,SAAW,IACrDtxB,QAAQwsB,GAAYA,EAAQpgB,OAASulB,EAAUvlB,OAC5CmlB,EAAiB,IAAKvkB,EAAWzF,SAAS9K,GAAQ80B,gBAAkB,IAEtEK,EAAUR,UACZG,EAAermB,QAAQ0mB,GAEvBN,EAAQlvB,KAAKwvB,GAGf51B,GAAS6d,EAAAA,EAAAA,IAAS7d,GAAQyd,EAAAA,EAAAA,IAAqBT,EAAO,OAEtDhd,GAAS00B,EAAAA,EAAAA,IAAiB10B,EAAQS,EAAQ,CACxC60B,UACAC,kBACCh1B,IACHqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,oBAAoBmZ,MAAOla,EAAQgB,EAASC,KAC3D,MAAM,OACJR,EAAM,WAAE+0B,EAAU,WAAEC,EAAU,gBAAEC,EAAe,MAAEjlB,EAAK,MAAElQ,GAAQC,EAAAA,EAAAA,OAC9DS,EACEwkB,GAAOziB,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKglB,EAAM,OAEX,MAAM1f,QAAegX,EAAAA,EAAAA,IAAQ,mBAAoB,CAC/C0I,OACA+P,aACAC,aACAC,kBACAjlB,UAEF,IAAK1K,EACH,OAGF/F,GAASuJ,EAAAA,EAAAA,MACT,MAAM+rB,GAAUh0B,EAAAA,EAAAA,IAAetB,EAAQO,GAAOyQ,WAAWzF,SAAS9K,GAAQ60B,SAAW,GACrFt1B,GAAS00B,EAAAA,EAAAA,IAAiB10B,EAAQS,EAAQ,CACxC60B,QAAS,IAAIA,EAASvvB,IACrBxF,IACHqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,4BAA4BmZ,MAAOla,EAAQgB,EAASC,KACnE,MAAM,OACJR,EAAM,KAAE2P,EAAI,MAAE7P,GAAQC,EAAAA,EAAAA,OACpBS,EACEwkB,GAAOziB,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKglB,EAAM,OAMX,UAJqB1I,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD0I,OACArV,SAGA,OAGFpQ,GAASuJ,EAAAA,EAAAA,MACT,MAAMssB,GAAkBv0B,EAAAA,EAAAA,IAAetB,EAAQO,GAAOyQ,WAAWzF,SAAS9K,GAC1ET,GAAS00B,EAAAA,EAAAA,IAAiB10B,EAAQS,EAAQ,CACxC60B,QAASO,GAAiBP,SAAStxB,QAAQgxB,GAAWA,EAAO5kB,OAASA,IACtEmlB,eAAgBM,GAAiBN,gBAAgBvxB,QAAQgxB,GAAWA,EAAO5kB,OAASA,KACnF7P,IACHqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,oCAAoCmZ,MAAOla,EAAQgB,EAASC,KAC3E,MAAM,OACJR,EAAM,QAAE00B,EAAO,MAAE50B,GAAQC,EAAAA,EAAAA,OACvBS,EACEwkB,GAAOziB,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1B40B,GAAQ5R,EAAAA,EAAAA,IAAWzjB,EAAQm1B,GAAWn1B,EAAO+X,eAC9C0N,GAAS4P,SAEOtY,EAAAA,EAAAA,IAAQ,mCAAoC,CAC/D0I,OACA4P,YAMFr1B,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS00B,EAAAA,EAAAA,IAAiB10B,EAAQS,EAAQ,CACxC80B,eAAgB,IACfh1B,IACHqD,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,2BAA2BmZ,MAC1Cla,EAAQgB,EAASC,KAEjB,MAAM,OACJR,EAAM,KAAE2P,EAAI,WAAE0lB,EAAU,aAAEC,EAAY,MAAElgB,EAAK,MAAEtV,GAAQC,EAAAA,EAAAA,OACrDS,EACEwkB,GAAOziB,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1Bu1B,EAAaD,GAAetS,EAAAA,EAAAA,IAAWzjB,EAAQ+1B,QAAgBl1B,EACrE,IAAK4kB,GAASsQ,IAAiBC,EAAa,OAE5C,MAAMjwB,QAAegX,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD0I,OACArV,OACA0lB,aACAE,aACAngB,UAEF,IAAK9P,EACH,OAEF,MAAM,UAAEkwB,EAAS,MAAEjZ,GAAUjX,EAE7B/F,GAASuJ,EAAAA,EAAAA,MACT,MAAM2sB,GAAoB50B,EAAAA,EAAAA,IAAetB,EAAQO,GAAOyQ,WAAWzF,SAAS9K,IAASy0B,WAChFgB,GAAmBlB,QAAUkB,EAAkBlB,OAAO5kB,OAASA,IAIpEpQ,GAAS00B,EAAAA,EAAAA,IAAiB10B,EAAQS,EAAQ,CACxCy0B,WAAY,IACPgB,EACHD,cAED11B,GACHP,GAAS6d,EAAAA,EAAAA,IAAS7d,EAAQgd,IAC1BpZ,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,4BAA4BmZ,MAC3Cla,EAAQgB,EAASC,KAEjB,MAAM,OACJR,EAAM,KAAE2P,EAAI,WAAE0lB,EAAU,aAAEC,EAAY,MAAElgB,EAAK,MAAEtV,GAAQC,EAAAA,EAAAA,OACrDS,EACEwkB,GAAOziB,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1Bu1B,EAAaD,GAAetS,EAAAA,EAAAA,IAAWzjB,EAAQ+1B,QAAgBl1B,EACrE,IAAK4kB,GAASsQ,IAAiBC,EAAa,OAE5C,MAAMjwB,QAAegX,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD0I,OACArV,OACA0lB,aACAE,aACAngB,QACAsgB,aAAa,IAEf,IAAKpwB,EACH,OAEF,MAAM,UAAEkwB,EAAS,MAAEjZ,GAAUjX,EAE7B/F,GAASuJ,EAAAA,EAAAA,MACT,MAAM2sB,GAAoB50B,EAAAA,EAAAA,IAAetB,EAAQO,GAAOyQ,WAAWzF,SAAS9K,IAASy0B,WAChFgB,GAAmBlB,QAAUkB,EAAkBlB,OAAO5kB,OAASA,IAGpEpQ,GAAS00B,EAAAA,EAAAA,IAAiB10B,EAAQS,EAAQ,CACxCy0B,WAAY,IACPgB,EACHE,WAAYH,IAEb11B,GACHP,GAAS6d,EAAAA,EAAAA,IAAS7d,EAAQgd,IAC1BpZ,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,wBAAwBmZ,MAAOla,EAAQgB,EAASC,KAC/D,MAAM,OACJR,EAAM,WAAEq1B,EAAa,EAAC,aAAEC,EAAY,MAAElgB,EAAQ,GAC5C5U,EACEwkB,GAAOziB,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1Bu1B,EAAaD,GAAetS,EAAAA,EAAAA,IAAWzjB,EAAQ+1B,QAAgBl1B,EACrE,IAAK4kB,GAASsQ,IAAiBC,EAAa,OAE5C,MAAMjwB,QAAegX,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD0I,OACAqQ,aACAE,aACAngB,QACAsgB,aAAa,IAEf,IAAKpwB,EACH,OAEF,MAAM,UAAEkwB,EAAS,MAAEjZ,GAAUjX,EAE7B/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS4jB,EAAAA,EAAAA,IAAW5jB,EAAQS,EAAQ,CAAE41B,aAAcJ,IACpDj2B,GAAS6d,EAAAA,EAAAA,IAAS7d,EAAQgd,IAC1BpZ,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,uBAAuBmZ,MAAOla,EAAQgB,EAASC,KAC9D,MAAM,OACJR,EAAM,OAAEmP,EAAM,WAAE0mB,GACdr1B,EACEwkB,GAAOziB,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1B+iB,GAAOC,EAAAA,EAAAA,IAAWzjB,EAAQ4P,GAChC,IAAK6V,IAASjC,EAAM,OAOpB,UALqBzG,EAAAA,EAAAA,IAAQ,sBAAuB,CAClD0I,OACAjC,OACA8S,eAEW,OAEbt2B,GAASuJ,EAAAA,EAAAA,MACT,MAAMgtB,GAAavzB,EAAAA,EAAAA,IAAWhD,EAAQS,GACjC81B,IAELv2B,GAAS4jB,EAAAA,EAAAA,IAAW5jB,EAAQS,EAAQ,CAClC41B,aAAcE,EAAWF,cAAcryB,QAAQwyB,GAAaA,EAAS5mB,SAAWA,OAElFhM,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,2BAA2BmZ,MAAOla,EAAQgB,EAASC,KAClE,MAAM,OACJR,EAAM,WAAE61B,EAAU,KAAElmB,GAClBnP,EACEwkB,GAAOziB,EAAAA,EAAAA,IAAWhD,EAAQS,GAC3BglB,SAEgB1I,EAAAA,EAAAA,IAAQ,0BAA2B,CACtD0I,OACA6Q,aACAlmB,WAIFpQ,GAASuJ,EAAAA,EAAAA,OACUvG,EAAAA,EAAAA,IAAWhD,EAAQS,KAGtCT,GAAS4jB,EAAAA,EAAAA,IAAW5jB,EAAQS,EAAQ,CAAE41B,aAAc,KACpDr2B,GAAS0oB,EAAAA,EAAAA,IAAmB1oB,EAAQS,EAAQ,CAC1Cg2B,mBAAoB,GACpBC,gBAAiB,KAEnB9yB,EAAAA,EAAAA,IAAU5D,IAAO,KAGnBe,EAAAA,EAAAA,IAAiB,uBAAuBmZ,MAAOla,EAAQgB,EAASC,KAC9D,MAAM,OAAER,GAAWQ,EACb8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC3BsC,SAEgBga,EAAAA,EAAAA,IAAQ,sBAAuBha,KAGpD/C,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS4jB,EAAAA,EAAAA,IAAW5jB,EAAQS,EAAQ,CAClCoX,cAAUhX,KAEZ+C,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,6BAA6BmZ,MAAOla,EAAQgB,EAASC,KACpE,MAAM,OACJ2O,EAAM,KAAE+mB,EAAI,UAAEC,EAAS,MAAEr2B,GAAQC,EAAAA,EAAAA,OAC/BS,EAEEuiB,GAAOC,EAAAA,EAAAA,IAAWzjB,EAAQ4P,GAChC,IAAK4T,EAAM,OAEXxjB,GAAS60B,EAAAA,EAAAA,IAAyB70B,EAAQy0B,EAAAA,GAAAA,WAA+Bl0B,IACzEqD,EAAAA,EAAAA,IAAU5D,GAEV,MAAM+F,QAAegX,EAAAA,EAAAA,IAAQ,4BAA6B,CACxDyG,OACAmT,OACAC,cAGF,IAAK7wB,EAKH,OAJA/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS60B,EAAAA,EAAAA,IAAyB70B,EAAQy0B,EAAAA,GAAAA,MAA0Bl0B,QACpEqD,EAAAA,EAAAA,IAAU5D,GAKZA,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS6d,EAAAA,EAAAA,IAAS7d,GAAQyd,EAAAA,EAAAA,IAAqB1X,EAAOiX,MAAO,QAC7DpZ,EAAAA,EAAAA,IAAU5D,GAEV,MAAM,GAAE4B,EAAE,WAAE4oB,GAAehH,EAE3B,UADsBzG,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEnb,KAAI4oB,eAKnD,OAHAxqB,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS60B,EAAAA,EAAAA,IAAyB70B,EAAQy0B,EAAAA,GAAAA,MAA0Bl0B,QACpEqD,EAAAA,EAAAA,IAAU5D,GAIZgB,EAAQ61B,kBAAkB,CAAEC,UAAWlnB,IAEvC5P,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS60B,EAAAA,EAAAA,IAAyB70B,EAAQy0B,EAAAA,GAAAA,SAA6Bl0B,IACvEqD,EAAAA,EAAAA,IAAU5D,GAEN22B,IAASC,GACX51B,EAAQqL,iBAAiB,CACvB5G,QAASN,EAAAA,GAAuB,4CAA4C4xB,EAAAA,EAAAA,IAAuBvT,IACnGjjB,SAEJ,KD3aFQ,EAAAA,EAAAA,IAAiB,QAAQ,CAACf,EAAQgB,KAC5BkW,EAAAA,KAEFC,QAAQ6f,IAAI,kBAGVvD,IACFppB,aAAaopB,IAGfzzB,GAASuJ,EAAAA,EAAAA,MACTvJ,EAAS,IAAKA,EAAQi3B,WAAW,IACjCrzB,EAAAA,EAAAA,IAAU5D,GAGVyzB,GAAuBlwB,OAAO+F,YAAW,KACvCtJ,GAASuJ,EAAAA,EAAAA,MACTvJ,EAAS,IAAKA,EAAQi3B,WAAW,IACjCrzB,EAAAA,EAAAA,IAAU5D,GACVyzB,QAAuB5yB,CAAS,GAvBL,MA0B7B,MAAM,aAAEq2B,EAAY,uBAAEC,GAA2Bn2B,EAEjDk2B,EAAa,CACXE,SAAU,SACVC,eAAe,EACfC,UAAWpd,gBAwBfA,eAA6Dla,EAAWgB,GACtE,IAAIu2B,GAAoB,EAExBv3B,GAASuJ,EAAAA,EAAAA,MAET,IAAIiuB,GAAW,EAGf,MAEMC,EAFe3vB,OAAOC,KAAK/H,EAAOuF,SAASgG,UAEbvF,QAAwD,CAACC,EAAKxF,KAChGwF,EAAIxF,GAAUqH,OACXC,KAAK/H,EAAOuF,SAASgG,SAAS9K,GAAQi3B,aACtC1xB,QAAwC,CAAC2xB,EAAMj3B,KAC9Ci3B,EAAKzvB,OAAOxH,IAAa,CACvB4iB,OAAOU,EAAAA,EAAAA,IAAYhkB,EAAQS,EAAQyH,OAAOxH,IAC1CgkB,WAAWC,EAAAA,EAAAA,IAAgB3kB,EAAQS,EAAQyH,OAAOxH,IAClDk3B,cAAcC,EAAAA,EAAAA,GAAmB73B,EAAQS,EAAQyH,OAAOxH,IACxDgH,cAAcC,EAAAA,EAAAA,IAAmB3H,EAAQS,EAAQyH,OAAOxH,KAGnDi3B,IACN,CAAC,GACC1xB,IACN,CAAC,GAGJ,IAAK,MAAQrE,GAAIrB,KAAWuH,OAAOmR,OAAOjZ,EAAOkZ,SAAU,CACzDlZ,GAASuJ,EAAAA,EAAAA,MACT,MAAQ9I,OAAQq3B,EAAep3B,SAAUq3B,IAAoBp3B,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACnGy3B,EAAiBD,GAAmBl2B,EAAAA,GACpCuG,EAAa2vB,GAAmBD,GAClCzvB,EAAAA,EAAAA,IAAiBrI,EAAQ83B,EAAeC,QAAmBl3B,EACzD0X,EAAcuf,EAAgB93B,EAAO8O,MAAM0O,KAAKsa,QAAiBj3B,EACvE,GAAIi3B,GAAiBvf,EAAa,CAChC,MAAMxS,QA4GahD,EA5GkBwV,EA4GH7X,EA5GgBs3B,EA4GEC,EA5Gc7vB,GAAYge,wBA6G3ErJ,EAAAA,EAAAA,IAAQ,gBAAiB,CAC9Bha,OACArC,WACA4b,SAAU2b,GAAmBl1B,EAAKqjB,uBAClCxJ,YAAalP,KAAKwK,MAAM4E,EAAAA,IAAqB,GAAK,GAClDjH,MAAOiH,EAAAA,OAjHL9c,GAASuJ,EAAAA,EAAAA,MACT,MAAQ9I,OAAQy3B,IAAqBv3B,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAEjF,GAAIwF,GAAUmyB,IAAqBJ,EAAe,CAChD,MAAMK,GAAsB7yB,EAAAA,EAAAA,IAAmBtF,EAAQ83B,GACjD5a,EAAgB4a,IAAkB7qB,EAAAA,IACpCjN,EAAO+M,qBAAqB/I,QAAO5D,IAAA,IAAC,UAAEgd,GAAWhd,EAAA,OAAMgd,CAAS,IAAE5X,KAAIoI,IAAA,IAAC,QAAEnI,GAASmI,EAAA,OAAKnI,CAAO,IAC9F,GACE2yB,EAAoB7f,EAAYtV,SAAWsV,EAAYE,OACzD3Q,OAAOmR,OAAOV,EAAYE,QACzBjT,KAAIkX,IAAA,IAAC,cAAEpU,GAAeoU,EAAA,OAAKyb,EAAoB7vB,EAAc,IAC7DtE,OAAOwD,SACR,GAEE8V,EAAe,GAAoBC,OAAOxX,EAAOR,SAAU2X,GAC3Dmb,EAAmC/a,EAAYC,OAAO6a,GACtD5a,GAAOC,EAAAA,EAAAA,IAAqB4a,EAAkC,MAC9Dra,EAAYV,EAAY9X,KAAI2X,IAAA,IAAC,GAAEvb,GAAIub,EAAA,OAAKvb,CAAE,IAE3C41B,IACHx3B,EAAS,IACJA,EACHuF,SAAU,IACLvF,EAAOuF,SACVgG,SAAU,CAAC,IAIfzD,OAAOmR,OAAOjZ,EAAOkZ,SAASxN,SAAQ2R,IAAwB,IAArBzb,GAAI02B,GAAYjb,EACvDrd,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9Bu4B,WAAY,CAAC,GACZD,EAAW,IAEhBd,GAAW,GAGbx3B,GAAS0d,EAAAA,EAAAA,IAAoB1d,EAAQ83B,EAAeta,GACpDxd,GAAS4d,EAAAA,EAAAA,IAAgB5d,EAAQ83B,EAAeE,EAAgBha,GAC5D5V,GAAY2f,kBACd/nB,GAASmmB,EAAAA,EAAAA,IAAiBnmB,EAAQ83B,EAAeE,EAAgB5vB,IAGnEN,OAAOmR,OAAOjZ,EAAOkZ,SAASxN,SAAQ6T,IAAwB,IAArB3d,GAAI02B,GAAY/Y,EACvD,MAAQ9e,OAAQ+3B,EAAa93B,SAAU+3B,IAAkB93B,EAAAA,EAAAA,IAAyBX,EAAQs4B,IAAe,CAAC,EACtGE,IAAgBV,GAAiBW,IAAkBT,IACrDh4B,GAASye,EAAAA,EAAAA,IAAuBze,EAAQ83B,EAAeE,EAAgBha,EAAWsa,GACpF,IAEFt4B,GAAS04B,EAAAA,EAAAA,IAAY14B,GAAQyd,EAAAA,EAAAA,IAAqB1X,EAAO+I,MAAO,OAChE9O,GAAS24B,EAAAA,EAAAA,IAAY34B,GAAQyd,EAAAA,EAAAA,IAAqB1X,EAAOiX,MAAO,OAC5DjX,EAAOkX,mBAAmB9c,SAC5BH,GAAS+d,EAAAA,EAAAA,IAAkB/d,EAAQ83B,EAAe/xB,EAAOkX,qBAG3Dsa,GAAoB,CACtB,CACF,EAEA3zB,EAAAA,EAAAA,IAAU5D,GAENuY,GAAatV,UACfjC,EAAQ43B,WAAW,CAAEn4B,OAAQq3B,EAAgBhnB,OAAO,IAChDinB,GAAmBA,IAAoBl2B,EAAAA,IACzCb,EAAQ63B,cAAc,CACpBp4B,OAAQq3B,EAAgBzhB,QAAS0hB,EAAiBe,wBAAwB,IAIlF,CAuCF,IAAyB/1B,EAAerC,EAAkBu3B,EArCxDj4B,GAASuJ,EAAAA,EAAAA,MAEJguB,IACHv3B,EAAS,IACJA,EACHuF,SAAU,IACLvF,EAAOuF,SACVgG,SAAU,CAAC,IAIfzD,OAAOmR,OAAOjZ,EAAOkZ,SAASxN,SAAQ+f,IAAwB,IAArB7pB,GAAI02B,GAAY7M,EACvDzrB,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9Bu4B,WAAY,CAAC,GACZD,EAAW,KAMlBxwB,OAAOC,KAAK0vB,GAAgB/rB,SAASjL,IACnC,MAAMs4B,EAAUtB,EAAeh3B,GAC/BqH,OAAOC,KAAKgxB,GAASrtB,SAAShL,IAC5BV,GAASg5B,EAAAA,EAAAA,IAAah5B,EAAQS,EAAQyH,OAAOxH,GAAW+2B,EAAeh3B,GAAQyH,OAAOxH,IAAW,GACjG,KAGJkD,EAAAA,EAAAA,IAAU5D,GAEV8H,OAAOmR,OAAOjZ,EAAOkZ,SAASxN,SAAQutB,IAAmB,IAAhBr3B,GAAIrB,GAAO04B,EAClD,MAAQx4B,OAAQy4B,EAAahyB,UAAWiyB,IAAmB73B,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsI,YACrFqwB,GAAeC,KAAmBzkB,EAAAA,EAAAA,IAAkB1U,EAAQk5B,EAAaC,IAC3En4B,EAAQo4B,iBAAiB,CAAE74B,SAC7B,GAEJ,CApKY84B,CAAuBr5B,EAAQgB,GAErChB,GAASuJ,EAAAA,EAAAA,MACTvJ,EAAS,IACJA,EACHs5B,aAAc5sB,KAAKC,MACnBsqB,WAAW,IAEbrzB,EAAAA,EAAAA,IAAU5D,GAENkX,EAAAA,KAEFC,QAAQ6f,IAAI,oBAGduC,EAAAA,EAAAA,MACArC,EAAa,CAAEE,SAAU,WAAYC,eAAe,KAC/Cta,EAAAA,EAAAA,IAAQ,oBACboa,GAAwB,GAE1B,KA8JJve,EAAAA,EAAAA,KAAa5Y,IACX,MAAM,gBAAEw5B,EAAe,UAAEC,GAAcz5B,GACjC,YAAEmZ,IAAgB7X,EAAAA,EAAAA,IAAetB,IAClCmZ,GAAgBkC,IAAgBme,kBAAoBA,GACpDne,IAAgBoe,YAAcA,GAKX,yBAApBD,GAA4D,4BAAdC,IAEhD3gB,EAAAA,EAAAA,MAAa4gB,OANbre,GAAiBrb,CASI,KE3PzBe,EAAAA,EAAAA,IAAiB,cAAcmZ,MAAOla,EAAQgB,EAASC,KACrD,MAAM,OACJR,EAAM,OACN8kB,EAAM,YACNC,EAAW,MACXjlB,GAAQC,EAAAA,EAAAA,OACNS,EACJ,IAAKR,EACH,OAGF,MAAMsC,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EACH,OAGF,MAAMgD,QAAegX,EAAAA,EAAAA,IAAQ,aAAc,CACzC0I,KAAM1iB,EACNwiB,SACAC,gBAGFxkB,EAAQqL,iBAAiB,CACvB5G,QAASM,GACL2f,EAAAA,EAAAA,IAAU,2BACV,2EACJnlB,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,sBAAsBmZ,MAAOla,EAAQgB,EAASC,KAC7D,MAAM,OACJR,EAAM,OACN8kB,EAAM,YACNC,EAAW,MACXmU,EAAK,MACLp5B,GAAQC,EAAAA,EAAAA,OACNS,EACJ,IAAKR,EACH,OAGF,MAAMsC,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,IAAS42B,EACZ,OAGF,MAAM5zB,QAAegX,EAAAA,EAAAA,IAAQ,qBAAsB,CACjD0I,KAAM1iB,EACN42B,QACApU,SACAC,gBAGFxkB,EAAQqL,iBAAiB,CACvB5G,QAASM,GACL2f,EAAAA,EAAAA,IAAU,2BACV,2EACJnlB,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,sBAAsBmZ,UACrC,MAAMnU,QAAegX,EAAAA,EAAAA,IAAQ,uBACxBhX,IAIL/F,GAASuJ,EAAAA,EAAAA,MACTvJ,EAAS,IACJA,EACH45B,eAAgB,CACdC,OAAQ9zB,EAAO+zB,eACfC,cAAejyB,OAAOC,KAAKhC,EAAO+zB,gBAClCE,QAASj0B,EAAOi0B,WAGpBp2B,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,0BAA0BmZ,MAAOla,EAAQgB,EAASC,KACjE,MAAM,KAAE8Q,GAAS9Q,EAGjB,UADqB8b,EAAAA,EAAAA,IAAQ,yBAA0BhL,GAErD,OAGF/R,GAASuJ,EAAAA,EAAAA,MAET,MAAQ,CAACwI,GAAOkoB,KAAoBC,GAAgBl6B,EAAO45B,eAAeC,OAE1E75B,EAAS,IACJA,EACH45B,eAAgB,CACdC,OAAQK,EACRH,cAAe/5B,EAAO45B,eAAeG,cAAc/1B,QAAQm2B,GAAOA,IAAOpoB,OAG7EnO,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,8BAA8BmZ,UAE7C,UADqB6C,EAAAA,EAAAA,IAAQ,8BAE3B,OAIF,MAAMqd,GADNp6B,GAASuJ,EAAAA,EAAAA,OACyBqwB,eAAeG,cAC9CpuB,MAAMoG,GAAS/R,EAAO45B,eAAeC,OAAO9nB,GAAMsoB,YACrD,IAAKD,EACH,OAEF,MAAME,EAAiBt6B,EAAO45B,eAAeC,OAAOO,GAEpDp6B,EAAS,IACJA,EACH45B,eAAgB,CACdC,OAAQ,CACN,CAACO,GAAqBE,GAExBP,cAAe,CAACK,MAGpBx2B,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,yBAAyBmZ,MAAOla,EAAQgB,EAASC,KAChE,MAAM,KAAE8Q,EAAI,gBAAEwoB,EAAe,sBAAEC,GAA0Bv5B,QACpC8b,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDhL,OACAwoB,kBACAC,4BAOFx6B,GAASuJ,EAAAA,EAAAA,MACTvJ,EAAS,IACJA,EACH45B,eAAgB,IACX55B,EAAO45B,eACVC,OAAQ,IACH75B,EAAO45B,eAAeC,OACzB,CAAC9nB,GAAO,IACH/R,EAAO45B,eAAeC,OAAO9nB,WACRlR,IAApB05B,EAAgC,CAAEA,wBAAoB15B,UAC5BA,IAA1B25B,EAAsC,CAAEA,8BAA0B35B,OAK9E+C,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,oBAAoBmZ,MAAOla,EAAQgB,EAASC,KAC3D,MAAM,KAAEw5B,GAASx5B,QAEI8b,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE0d,WAMnDz6B,GAASuJ,EAAAA,EAAAA,MACTvJ,EAAS,IACJA,EACH45B,eAAgB,IACX55B,EAAO45B,eACVI,QAASS,KAGb72B,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,yBAAyBmZ,UACxC,MAAMnU,QAAegX,EAAAA,EAAAA,IAAQ,0BAC7B,IAAKhX,EACH,OAEF,MAAM,MAAEiX,EAAK,kBAAE0d,GAAsB30B,EACrC/F,GAASuJ,EAAAA,EAAAA,MAETvJ,GAAS6d,EAAAA,EAAAA,IAAS7d,GAAQyd,EAAAA,EAAAA,IAAqBT,EAAO,OAEtDhd,EAAS,IACJA,EACH26B,kBAAmB,CACjBd,OAAQa,EACRX,cAAejyB,OAAOC,KAAK2yB,MAG/B92B,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,6BAA6BmZ,MAAOla,EAAQgB,EAASC,KACpE,MAAM,KAAE8Q,GAAS9Q,EAGjB,UADqB8b,EAAAA,EAAAA,IAAQ,4BAA6BhL,GAExD,OAGF/R,GAASuJ,EAAAA,EAAAA,MAET,MAAQ,CAACwI,GAAOkoB,KAAoBC,GAAgBl6B,EAAO26B,kBAAkBd,OAE7E75B,EAAS,IACJA,EACH26B,kBAAmB,CACjBd,OAAQK,EACRH,cAAe/5B,EAAO26B,kBAAkBZ,cAAc/1B,QAAQm2B,GAAOA,IAAOpoB,OAGhFnO,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,iCAAiCmZ,gBAC3B6C,EAAAA,EAAAA,IAAQ,mCAK7B/c,GAASuJ,EAAAA,EAAAA,MAETvJ,EAAS,IACJA,EACH26B,kBAAmB,CACjBd,OAAQ,CAAC,EACTE,cAAe,MAGnBn2B,EAAAA,EAAAA,IAAU5D,GAAO,ICjNnB,MACM46B,IAAwB/N,EAAAA,EAAAA,KAAUxQ,GAAOA,KAAM,KAAK,GC7BnD,SAASwe,GACd76B,EAAW2tB,EAAkBmN,GAE1B,QAAA76B,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,EAAA,GAAAJ,UAAAI,GAAA,IADCC,GAAQC,EAAAA,EAAAA,OAAkBJ,EAE9B,MAAM+B,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B+6B,WAAY,IACP54B,EAAS44B,WACZC,WAAY,IACP74B,EAAS44B,WAAWC,WACvB,CAACrN,GAAWmN,KAGfv6B,EACL,CAEO,SAAS06B,GACdj7B,EAAWoa,GAER,QAAAqC,EAAAvc,UAAAC,OAAAyN,EAAA,IAAAvN,MAAAoc,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAA/O,EAAA+O,EAAA,GAAAzc,UAAAyc,GAAA,IADCpc,GAAQC,EAAAA,EAAAA,OAAkBoN,EAE9B,OAAOrL,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B+6B,WAAY,KACPz5B,EAAAA,EAAAA,IAAetB,EAAQO,GAAOw6B,WACjC3gB,cAED7Z,EACL,EDKAQ,EAAAA,EAAAA,IAAiB,gBAAgBmZ,MAAOla,EAAQgB,EAASC,KACvD,MAAM,OAAE2O,GAAW3O,EACbuiB,GAAOC,EAAAA,EAAAA,IAAWzjB,EAAQ4P,GAChC,IAAK4T,EACH,OAGF,MAAM,GAAE5hB,EAAE,WAAE4oB,GAAehH,EACrBzd,QAAegX,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEnb,KAAI4oB,eACpD,IAAKzkB,GAAQyd,KAAM,OAEnBxjB,GAASuJ,EAAAA,EAAAA,MACT,MAAM+gB,GAAWC,EAAAA,EAAAA,IAAmBvqB,EAAQ4P,IACpC4T,KAAM0X,EAAS5Q,SAAU6Q,GAAgBp1B,GACpByd,EAAK4X,aAAeF,EAAQE,YAC1B9Q,GAAU+Q,cAAcz5B,KAAOu5B,GAAaE,cAAcz5B,IACzD0oB,GAAUgR,eAAe15B,KAAOu5B,GAAaG,eAAe15B,IAC5D0oB,GAAUiR,eAAe35B,KAAOu5B,GAAaI,eAAe35B,KAEvF4hB,EAAKgY,QAAQr7B,QAChBa,EAAQ61B,kBAAkB,CAAEC,UAAWlnB,GACzC,KAGF7O,EAAAA,EAAAA,IAAiB,YAAYmZ,MAAOla,EAAQgB,EAASC,KACnD,MAAM,OAAE2O,GAAW3O,EACbuiB,GAAOC,EAAAA,EAAAA,IAAWzjB,EAAQ4P,GAChC,IAAK4T,EACH,OAGF,MAAMzd,QAAegX,EAAAA,EAAAA,IAAQ,aAAc,CAAEC,MAAO,CAACwG,KACrD,IAAKzd,EACH,OAGF,MAAM,MAAEiX,EAAK,iBAAEye,GAAqB11B,EAEpC/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS24B,EAAAA,EAAAA,IAAY34B,GAAQyd,EAAAA,EAAAA,IAAqBT,EAAO,OACzDhd,GAAS07B,EAAAA,EAAAA,IAAoB17B,EAAQ,IAChCA,EAAOgd,MAAM2e,gBACbF,KAEL73B,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,gBAAgBmZ,UAC/B,MAAQ0hB,UAAU,gBAAEC,IAAsB77B,EAE1C,GAAO67B,MAAmB1uB,EAAAA,EAAAA,MAAkB0uB,EArDX,IAsD/B,OAGF,MAAM91B,QAAegX,EAAAA,EAAAA,IAAQ,iBAC7B,IAAKhX,EACH,OAGF,MAAM,IAAEkE,EAAG,MAAE+S,GAAUjX,EAEvB/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS6d,EAAAA,EAAAA,IAAS7d,GAAQyd,EAAAA,EAAAA,IAAqBT,EAAO,OACtDhd,EAAS,IACJA,EACH47B,SAAU,IACL57B,EAAO47B,SACV7H,QAAS9pB,EACT4xB,iBAAiB1uB,EAAAA,EAAAA,SAGrBvJ,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,mBAAmBmZ,UAClC,MAAM4hB,QAAoB/e,EAAAA,EAAAA,IAAQ,oBAClC,IAAK+e,EACH,OAGF97B,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS6d,EAAAA,EAAAA,IAAS7d,GAAQyd,EAAAA,EAAAA,IAAqBqe,EAAY9e,MAAO,OAClEhd,GAAS8d,EAAAA,EAAAA,IAAS9d,GAAQyd,EAAAA,EAAAA,IAAqBqe,EAAYhtB,MAAO,OAClE9O,GAAS+7B,EAAAA,EAAAA,IAAgB/7B,EAAQ87B,EAAYL,kBAG7C,MAAMO,EAAoBxY,GAAmBA,EAAKyY,UAAYzY,EAAK0Y,WAAa,GAC1EC,EAAW,IAAIC,KAAKC,SAAS,SAE7BC,EAAcR,EAAY9e,MAAMpX,MAAK,CAACuhB,EAAGC,IAC7C+U,EAASI,QAAQP,EAAiB7U,GAAI6U,EAAiB5U,MACtDpjB,QAAQwf,IAAUA,EAAKgZ,SAE1Bx8B,EAAS,IACJA,EACH87B,YAAa,CACX/H,QAASuI,EAAY92B,KAAKge,GAASA,EAAK5hB,QAG5CgC,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,mBAAmB,MAC7Bgc,EAAAA,EAAAA,IAAQ,mBAAmB,KAGlChc,EAAAA,EAAAA,IAAiB,mBAAmBmZ,MAAOla,EAAQgB,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACzDijB,EAAO/iB,GAASgjB,EAAAA,EAAAA,IAAWzjB,EAAQS,QAAUI,EACnD,IAAK2iB,IAAQmC,EAAAA,EAAAA,IAAUnC,IAASA,EAAKiZ,aAAaC,cAChD,OAGF,MAAMjvB,EAAQ+V,EAAKiZ,aAAahvB,MAC1B1H,QAAegX,EAAAA,EAAAA,IAAQ,mBAAoByG,EAAK5hB,GAAI4hB,EAAKgH,WAAa/c,GAC5E,IAAK1H,EACH,OAGF,MAAM,MAAE+I,EAAK,QAAEglB,EAAO,cAAE4I,GAAkB32B,EAE1C/F,GAASuJ,EAAAA,EAAAA,MACLuF,EAAM3O,SACRH,GAAS8d,EAAAA,EAAAA,IAAS9d,GAAQyd,EAAAA,EAAAA,IAAqB3O,EAAO,QAExD9O,GAAS28B,EAAAA,EAAAA,IAAW38B,EAAQwjB,EAAK5hB,GAAI,CACnC66B,YAAa,CACXhvB,MAAOqmB,EAAQ3zB,OAAS2zB,EAAQA,EAAQ3zB,OAAS,GAAK,IACtD8J,KAAKiM,EAAAA,EAAAA,KAAQsN,EAAKiZ,aAAaxyB,KAAO,IAAIsT,OAAOuW,IACjD4I,oBAIJ94B,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,iBAAiBmZ,MAAOla,EAAQgB,EAASC,KACxD,MAAM,OACJ2O,EAAM,QAAEhH,GAAU,EAAK,UAAEszB,EAAS,SAAED,EAAQ,uBAAEW,EAAsB,MACpEr8B,GAAQC,EAAAA,EAAAA,OACNS,EAEEuiB,GAAOC,EAAAA,EAAAA,IAAWzjB,EAAQ4P,GAChC,IAAK4T,EACH,OASF,IAAIzd,EACJ,GAPA/E,EAAQ67B,qBAAqB,CAAEp8B,OAAQmP,EAAQhH,YAE/C5I,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS60B,EAAAA,EAAAA,IAAyB70B,EAAQy0B,EAAAA,GAAAA,WAA+Bl0B,IACzEqD,EAAAA,EAAAA,IAAU5D,IAGLwjB,EAAKsZ,WAAatZ,EAAKuZ,YAC1Bh3B,QAAegX,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEigB,MAAOxZ,EAAKuZ,YAAab,YAAWD,iBACzE,CACL,MAAM,GAAEr6B,EAAE,WAAE4oB,GAAehH,EAC3Bzd,QAAegX,EAAAA,EAAAA,IAAQ,gBAAiB,CACtCnb,KACA4oB,aACAuS,YAAa,GACbb,YACAD,WACAW,0BAEJ,CAEI72B,IACF/E,EAAQi8B,iBAAiB,CAAEx8B,OAAQmP,IAEnC5P,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS28B,EAAAA,EAAAA,IACP38B,EACAwjB,EAAK5hB,GACL,CACEs6B,YACAD,cAGJr4B,EAAAA,EAAAA,IAAU5D,IAGZA,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS60B,EAAAA,EAAAA,IAAyB70B,EAAQy0B,EAAAA,GAAAA,SAA6Bl0B,GACvEP,GAAS+P,EAAAA,EAAAA,IAAsB/P,EAAQO,IACvCqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,iBAAiBmZ,MAAOla,EAAQgB,EAASC,KACxD,MAAM,OAAE2O,GAAW3O,EAEbuiB,GAAOC,EAAAA,EAAAA,IAAWzjB,EAAQ4P,GAEhC,IAAK4T,EACH,OAGF,MAAM,GAAE5hB,EAAE,WAAE4oB,GAAehH,QAErBzG,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEnb,KAAI4oB,cAAa,KAGpDzpB,EAAAA,EAAAA,IAAiB,qBAAqBmZ,MAAOla,EAAQgB,EAASC,KAC5D,MAAM,UAAE61B,GAAc71B,EAChBi8B,GAAYC,EAAAA,EAAAA,IAASrG,GAE3B,IAAItT,EAAO0Z,GAAYzZ,EAAAA,EAAAA,IAAWzjB,EAAQ82B,QAAaj2B,EACvD,MAAMkC,EAAQm6B,OAA4Cr8B,GAAhCmC,EAAAA,EAAAA,IAAWhD,EAAQ82B,GAC7C,IAAKtT,IAASzgB,EACZ,OAGF,IAAIunB,GAAWC,EAAAA,EAAAA,IAAmBvqB,EAAQ82B,GAC1C,GAAItT,IAAS8G,GAAU+Q,aAAc,CACnC,MAAM,GAAEz5B,EAAE,WAAE4oB,GAAehH,EACrBzd,QAAegX,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEnb,KAAI4oB,eACpD,IAAKzkB,GAAQyd,KACX,OAGFA,EAAOzd,EAAOyd,KACd8G,EAAWvkB,EAAOukB,QACpB,CAEA,MAAMvkB,QAAegX,EAAAA,EAAAA,IAAQ,qBAAsByG,EAAMzgB,GACzD,IAAKgD,IAAWA,EAAOy1B,OACrB,OAGFx7B,GAASuJ,EAAAA,EAAAA,MAET,MAAM6zB,EAAa5Z,GAAQzgB,GACrB,OAAEy4B,EAAM,MAAExe,GAAUjX,EAC1By1B,EAAO51B,MAAMuhB,GAAOA,EAAEvlB,KAAOw7B,GAAYhC,YAAc,EAAI,IAC3D,MAAME,EAAgBhR,GAAUgR,cAC1BC,EAAgBjR,GAAUiR,cAC5BD,GAAeE,EAAOp1B,KAAKk1B,GAC3BC,GAAeC,EAAOtsB,QAAQqsB,GAElCv7B,GAAS6d,EAAAA,EAAAA,IAAS7d,GAAQyd,EAAAA,EAAAA,IAAqBT,EAAO,OAGpDhd,EADEk9B,GACOP,EAAAA,EAAAA,IAAW38B,EAAQ82B,EAAW,CAAE0E,YAEhC5X,EAAAA,EAAAA,IAAW5jB,EAAQ82B,EAAW,CAAE0E,YAG3C53B,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,sBAAsB,CAACf,EAAQgB,EAASC,KACvD,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,EAExCC,GAEA05B,IAAsB1gB,UACzB,MAAMnU,QAAegX,EAAAA,EAAAA,IAAQ,cAAe,CAAE7b,UAE9ClB,GAASuJ,EAAAA,EAAAA,MACT,MAAMopB,GAAqBrxB,EAAAA,EAAAA,IAAetB,EAAQO,GAAO88B,WAAWn8B,MAEpE,IAAK6E,IAAW4sB,GAAuBzxB,IAAUyxB,EAG/C,OAFA3yB,GAASs9B,EAAAA,EAAAA,IAA+Bt9B,GAAQ,EAAOO,QACvDqD,EAAAA,EAAAA,IAAU5D,GAIZ,MAAM,WAAE2zB,EAAU,YAAEE,GAAgB9tB,EAEpC,IAAI4J,EACAD,EACAikB,EAAWxzB,SACbH,GAAS6d,EAAAA,EAAAA,IAAS7d,GAAQyd,EAAAA,EAAAA,IAAqBkW,EAAY,OAC3DhkB,EAAegkB,EAAWnuB,KAAIpF,IAAA,IAAC,GAAEwB,GAAIxB,EAAA,OAAKwB,CAAE,KAE1CiyB,EAAY1zB,SACdH,GAAS6d,EAAAA,EAAAA,IAAS7d,GAAQyd,EAAAA,EAAAA,IAAqBoW,EAAa,OAC5DnkB,EAAgBmkB,EAAYruB,KAAIoI,IAAA,IAAC,GAAEhM,GAAIgM,EAAA,OAAKhM,CAAE,KAGhD5B,GAASs9B,EAAAA,EAAAA,IAA+Bt9B,GAAQ,EAAOO,GACvDP,GAASyP,EAAAA,EAAAA,IAAiBzP,EAAQ,CAAE2P,eAAcD,iBAAiBnP,IAEnEqD,EAAAA,EAAAA,IAAU5D,EAAO,GACjB,KAGJe,EAAAA,EAAAA,IAAiB,iBAAiBmZ,MAAOla,EAAQgB,EAASC,KACxD,MACE87B,YAAaC,EAAK,UAAEd,EAAS,SAAED,EAAQ,MACvC17B,GAAQC,EAAAA,EAAAA,OACNS,EAEE8E,QAAegX,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEigB,QAAOd,YAAWD,aAC7Dl2B,GASL/E,EAAQ6C,SAAS,CAAEjC,GAAImE,EAAQxF,UAE/BP,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS+P,EAAAA,EAAAA,IAAsB/P,EAAQO,IACvCqD,EAAAA,EAAAA,IAAU5D,IAZRgB,EAAQqL,iBAAiB,CACvB5G,QAASN,EAAAA,GAAuB,qCAChC5E,SAUa,KAGnBQ,EAAAA,EAAAA,IAAiB,cAAc,CAACf,EAAQgB,EAASC,KAC/C,MAAM,OAAER,GAAWQ,EACbm8B,GAAaD,EAAAA,EAAAA,IAAS18B,IAAUgjB,EAAAA,EAAAA,IAAWzjB,EAAQS,IAAUuC,EAAAA,EAAAA,IAAWhD,EAAQS,GACjF28B,IAIArgB,EAAAA,EAAAA,IAAQ,aAAcqgB,EAAW,KAGxCr8B,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,YAAEs8B,EAAW,QAAEC,GAAYv8B,GAE5B8b,EAAAA,EAAAA,IAAQ,oBAAqBwgB,EAAaC,EAAQ,I,gBExWzD,MAAMC,GAAkBvd,EAAAA,IAAUwd,EAAAA,GAEnB,MAAMC,GAGnBC,YAAoBC,EAA2BC,G,UAA6B,KAAxDD,SAAAA,EAAiB,KAAUC,OAAAA,E,EAA2B,K,OAAA,G,+SAAA,gB,uFAC1E,CAEAC,kBACON,KAELO,KAAKC,UAAY16B,OAAOC,KAAK,mBAAe3C,EAAWm9B,KAAKH,UACxDG,KAAKC,UACPD,KAAKC,UAAUC,OAEfF,KAAKF,WAET,CAEAt6B,KAAK8Q,GACH,GAAI0pB,KAAKC,UAKP,OAJAD,KAAKC,UAAWE,SAAS9tB,KAAOiE,EAChC0pB,KAAKC,UAAWG,aAChBJ,KAAKC,eAAYp9B,GAKnB,IAAK48B,GAAiB,CACpB,MAAMY,EAAQ96B,OAAOC,KAAK8Q,OAAKzT,EAAWm9B,KAAKH,UAC3CQ,EACFA,EAAMD,QAENJ,KAAKF,UAET,CACF,CAEAQ,gBACEN,KAAKC,WAAWM,QAChBP,KAAKC,eAAYp9B,CACnB,ECfF,MAAM29B,GAAY,4BAEZC,IAAwB9tB,EAAAA,EAAAA,KAAU0L,GAAOA,KAAM,KAAK,GA6pB1DnC,eAAewkB,GACb1+B,EAAW2+B,EAAcC,EAAoBC,SAEvC9hB,EAAAA,EAAAA,IAAQ,kBAAmB,CAAE4hB,MAAKE,iBAAgBD,cACxD5+B,GAASuJ,EAAAA,EAAAA,YACHu1B,GAAe9+B,EACvB,CAEAka,eAAe4kB,GAAsC9+B,EAAW+R,GAC9D,MAAMhM,QAAegX,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEhL,SAC5ChM,IAIL/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS6d,EAAAA,EAAAA,IAAS7d,GAAQyd,EAAAA,EAAAA,IAAqB1X,EAAOiX,MAAO,OAC7Dhd,EAAS,IACJA,EACH++B,WAAY,CACVhtB,KAAMhM,EAAOgM,KACbitB,KAAMj5B,EAAOi5B,QAGjBp7B,EAAAA,EAAAA,IAAU5D,GACZ,CAgMA,SAASi/B,GACPj/B,EACAgB,EACAsT,EAAavO,GAEb,QAAA9F,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,EAAA,GAAAJ,UAAAI,GAAA,IADIC,GAAQC,EAAAA,EAAAA,OAAkBJ,EAE9B,GAAoB,YAAhB2F,EAAOjE,KAAoB,CAC7B9B,GAASuJ,EAAAA,EAAAA,MACT,MAAMpH,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,IAAK4B,EAAS+8B,QAAS,OACvB,MAAM,OAAEC,EAAM,IAAER,EAAG,yBAAES,GAA6Br5B,EAYlD,OAXA/F,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9Bk/B,QAAS,IACJ/8B,EAAS+8B,QACZG,QAAS,CACPF,SACAxqB,MAAOgqB,EAAI/8B,GACXw9B,8BAGH7+B,QACHqD,EAAAA,EAAAA,IAAU5D,EAEZ,CAEA,MAAMs/B,EAA0B,aAAhBv5B,EAAOjE,KAAsBiE,EAAOuO,IAAMA,EAC1D/Q,OAAOC,KAAK87B,EAAS,SAAU,YAC/Bt+B,EAAQu+B,kBAAkB,CAAEh/B,SAC9B,CAkEA2Z,eAAeslB,GACbz8B,GACA,IADerC,EAAQR,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG2B,EAAAA,GAAgB49B,EAAev/B,UAAAC,OAAA,EAAAD,UAAA,QAAAW,EAAEof,EAAmB/f,UAAAC,OAAA,EAAAD,UAAA,QAAAW,EAAE8gB,EAA0BzhB,UAAAC,OAAA,EAAAD,UAAA,QAAAW,QAEpGkc,EAAAA,EAAAA,IAAQ,cAAe,CAC3Bha,OACAsd,gBAAiB3f,EACjBoD,KAAM27B,EACNxf,aACA0B,UAEJ,CAEA,IAAI+d,GAEJxlB,eAAeylB,GACb3/B,EACAgB,EAAgC+B,EAAemE,EAAmB6M,GAElE,IAFiF6rB,EAAM1/B,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GAAQ,QAAAof,EAAApf,UAAAC,OAAAgd,EAAA,IAAA9c,MAAAif,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAArC,EAAAqC,EAAA,GAAAtf,UAAAsf,GAAA,IAC3Fjf,GAAQC,EAAAA,EAAAA,OAAkB2c,EAE9B,MAAM,WACJuN,EAAU,iBAAEre,EAAgB,QAAEwzB,EAAO,SAAEC,GACrC9+B,EAEA4+B,IACGF,KACHA,GAAc,IAAI/B,GAAa,8BAA8B,KAC3DtxB,EAAiB,CAAE5G,QAAS,qCAAsClF,SAAQ,KAI9Em/B,GAAY3B,mBAGd,MAAMh4B,QAAegX,EAAAA,EAAAA,IAAQ,uBAAwB,CACnDtc,OAAQsC,EAAKnB,GACb4oB,WAAYznB,EAAKynB,WACjBtjB,YACA6M,OACA6rB,WAGF,IAAK75B,EACH,OAEF,MAAM,QAAEN,EAASs6B,MAAOC,EAAO,IAAE1rB,GAAQvO,EAErCi6B,EACFtV,EAAW,CAAE3W,KAAM,CAAEtO,QAASA,GAAW,SAAWlF,UAC3CkF,EACT4G,EAAiB,CAAE5G,UAASlF,UACnB+T,IACLsrB,EAEEtrB,EAAI7J,SAAS+zB,IACfkB,GAAal8B,KAAK8Q,IAElBorB,GAAapB,gBACbwB,EAAS,CACPxrB,MAAK7T,OAAQsC,EAAKnB,GAAIsF,YAAW3G,WAIrCs/B,EAAQ,CAAEvrB,MAAK/T,UAGrB,CCp9BA2Z,eAAe+lB,GACbjgC,EAAWkgC,GAEsB,QAAAjgC,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,EAAA,GAAAJ,UAAAI,GAAA,IAD7BC,GAAQC,EAAAA,EAAAA,OAAkBJ,EAE9B,MAAM2F,QAAegX,EAAAA,EAAAA,IAAQ,iBAAkBmjB,GAC/C,IAAKn6B,EACH,OAGF,MAAM,KAAEo6B,EAAI,QAAEC,EAAO,MAAEpjB,GAAUjX,EAQjC,OANA/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASqgC,EAAAA,EAAAA,IAAergC,EAAQmgC,EAAM5/B,GACtCP,GAASsgC,EAAAA,EAAAA,IAAetgC,EAAQugC,EAAAA,GAAAA,SAAsBhgC,GACtDP,GAAS6d,EAAAA,EAAAA,IAAS7d,GAAQyd,EAAAA,EAAAA,IAAqBT,EAAO,QACtDpZ,EAAAA,EAAAA,IAAU5D,GAEHogC,CACT,CAqUAlmB,eAAesmB,GACbxgC,EAAWkgC,EAAsCO,EAAkBC,GAEnE,QAAAC,EAAAzgC,UAAAC,OAAAgd,EAAA,IAAA9c,MAAAsgC,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAAzjB,EAAAyjB,EAAA,GAAA1gC,UAAA0gC,GAAA,IADIrgC,GAAQC,EAAAA,EAAAA,OAAkB2c,EAE9B,MAAMpX,QAAegX,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDmjB,eAAcO,cAAaC,eAE7B,IAAK36B,EACH,OAGF,MAAM,GAAEnE,EAAE,gBAAEi/B,GAAoB96B,EAChC/F,GAASuJ,EAAAA,EAAAA,MAETvJ,GAAS8gC,EAAAA,EAAAA,IAAiB9gC,EAAQ4B,EAAIrB,GAClCsgC,GACF7gC,GAAS+gC,EAAAA,EAAAA,IAAsB/gC,EAAQ6gC,EAAiBtgC,GACxDP,GAASsgC,EAAAA,EAAAA,IAAetgC,EAAQugC,EAAAA,GAAAA,SAAsBhgC,IAEtDP,GAASsgC,EAAAA,EAAAA,IAAetgC,EAAQugC,EAAAA,GAAAA,SAAsBhgC,IAExDqD,EAAAA,EAAAA,IAAU5D,EACZ,ED3aAe,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,UAAEiG,EAAS,OAAE85B,EAAM,MAAEzgC,GAAQC,EAAAA,EAAAA,OAAsBS,EAEzD,OAAQ+/B,EAAOl/B,MACb,IAAK,UACHd,EAAQw+B,eAAe,CAAEC,QAASuB,EAAOl9B,KAAMvD,UAC/C,MACF,IAAK,MAAO,CACV,MAAM,IAAE+T,GAAQ0sB,EAChBhgC,EAAQ6+B,QAAQ,CAAEvrB,MAAK/T,UACvB,KACF,CACA,IAAK,WAAY,CACf,MAAMwC,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GACvC,IAAKwC,EACH,OAGG48B,GAAqB3/B,EAAQgB,EAAS+B,EAAMmE,EAAW85B,EAAOjtB,UAAMlT,EAAWN,GACpF,KACF,CACA,IAAK,cACHS,EAAQigC,cAAc,CAAE10B,OAAQy0B,EAAOz0B,OAAQhM,UAC/C,MACF,IAAK,eAAgB,CACnB,MAAMijB,EAAOxjB,EAAO+X,eAAgB0L,EAAAA,EAAAA,IAAWzjB,EAAQA,EAAO+X,oBAAiBlX,EAC/E,IAAK2iB,EACH,OAEFxiB,EAAQ0pB,WAAW,CACjB3W,KAAM,CACJgpB,YAAavZ,EAAKuZ,YAClBb,UAAW1Y,EAAK0Y,UAChBD,SAAUzY,EAAKyY,SACfrsB,OAAQ4T,EAAK5hB,IAEfrB,UAEF,KACF,CACA,IAAK,UAAW,CACd,MAAMwC,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GACvC,IAAKwC,EACH,OAEF,MAAM,iBAAEm+B,GAAqBF,EAC7BhgC,EAAQmgC,WAAW,CACjBD,mBAAkBzgC,OAAQsC,EAAKnB,GAAIsF,YAAW3G,UAEhD,KACF,CACA,IAAK,MAAO,CACV,MAAMwC,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GACvC,IAAKwC,EACH,OAEF/B,EAAQogC,YAAY,CAClB3gC,OAAQsC,EAAKnB,GACbsF,YACA3G,UAEF,KACF,CACA,IAAK,OAAQ,CACX,MAAMwC,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GACvC,IAAKwC,EACH,OAGG48B,GAAqB3/B,EAAQgB,EAAS+B,EAAMmE,OAAWrG,GAAW,EAAMN,GAC7E,KACF,CACA,IAAK,kBAAmB,CACtB,MAAM,MAAEW,EAAK,WAAEmgC,GAAeL,EAC9BhgC,EAAQsgC,gBAAgB,CACtBpgC,QAAOmgC,aAAYn6B,YAAW3G,UAEhC,KACF,CAEA,IAAK,cAAe,CAClB,MAAM,OAAEqP,GAAWoxB,EACnBhgC,EAAQugC,iBAAiB,CAAE3/B,GAAIgO,EAAQrP,UACvC,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAM,IAAE+T,GAAQ0sB,GACV,OAAEvgC,IAAWE,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAC/D,IAAKE,EACH,OAEF,MAAMgF,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQyG,GAClD,IAAKzB,GAASoP,SAAU,OACxB,MAAM2sB,GAAQC,EAAAA,GAAAA,MACdzgC,EAAQ0gC,qBAAqB,CAC3BptB,MAAKK,MAAOlP,GAASoP,SAAU2sB,QAAOG,WAAYX,EAAOl9B,KAAMvD,UAEjE,KACF,CAEA,IAAK,UAAW,CACd,MAAM,IAAE+T,GAAQ0sB,EACVj+B,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GACvC,IAAKwC,EACH,OAEF,MAAM0C,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQ+C,EAAKnB,GAAIsF,GACnD,IAAKzB,EACH,OAEF,MAAMkP,EAAQlP,EAAQmP,UAAYnP,EAAQoP,SAC1C,IAAKF,EACH,OAEF,MAAM6sB,GAAQC,EAAAA,GAAAA,MACdzgC,EAAQ4gC,eAAe,CACrBttB,MACAK,QACAktB,OAAQ9+B,EAAKnB,GACb4/B,QACAG,WAAYX,EAAOl9B,KACnBvD,UAEF,KACF,CACA,IAAK,UAAW,CACd,MAAM,IAAE+T,GAAQ0sB,EACVj+B,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GACvC,IAAKwC,EACH,OAEF/B,EAAQ8gC,kBAAkB,CACxBrhC,OAAQsC,EAAKnB,GACbsF,YACA66B,SAAUf,EAAOe,SACjBztB,MACA/T,UAEF,KACF,EAAC,KAILQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,QAAEw+B,EAAO,OAAEh/B,EAAM,MAAEF,GAAQC,EAAAA,EAAAA,OAAsBS,EACjD8B,EAAOtC,GAASuC,EAAAA,EAAAA,IAAWhD,EAAQS,IAAUqL,EAAAA,EAAAA,IAAkB9L,EAAQO,GACvE2B,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAE5D,IAAKwC,IAASb,EACZ,OAGF,MAAM,SAAExB,GAAawB,EACrBlB,EAAQuH,gBAAgB,CAAErB,eAAWrG,EAAWN,UAChDS,EAAQ6gB,oBAAoB,CAAEthB,UAEzBi/B,GACHz8B,EAAMrC,EAAU++B,GAAS93B,EAAAA,EAAAA,IAAmB3H,EAAQ+C,EAAKnB,GAAIlB,IAAWkhB,EAAAA,EAAAA,IAAa5hB,EAAQ+C,EAAKnB,IACnG,KAGHb,EAAAA,EAAAA,IAAiB,cAAcmZ,MAAOla,EAAQgB,EAASC,KACrD,MAAM,OAAER,EAAM,MAAEF,GAAQC,EAAAA,EAAAA,OAAsBS,GACxC,cAAE8W,GAAkB/X,EACpB+C,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GACjCo+B,EAAM5mB,IAAiBiqB,EAAAA,EAAAA,IAAchiC,EAAQS,GAC9CsX,GAAkBhV,GAAS47B,SAIX5hB,EAAAA,EAAAA,IAAQ,iBAAkB4hB,EAAI/8B,GAAI+8B,EAAInU,cAK3DxqB,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASiiC,EAAAA,EAAAA,IAAqBjiC,EAAQ2+B,EAAI/8B,KAC1CgC,EAAAA,EAAAA,IAAU5D,GACLw/B,GAAez8B,EAAMlB,EAAAA,GAAgB,cAAUhB,GAAW+gB,EAAAA,EAAAA,IAAa5hB,EAAQS,IAAQ,KAG9FM,EAAAA,EAAAA,IAAiB,qBAAqBmZ,UACpC,MAAM,gBAAE2hB,GAAoB77B,EAAOkiC,cACnC,GAAIrG,IAAmB1uB,EAAAA,EAAAA,MAAkB0uB,EA3LR,GA4L/B,OAGF,MAAM91B,QAAegX,EAAAA,EAAAA,IAAQ,sBAC7B,IAAKhX,EACH,OAGF,MAAM,IAAEkE,EAAG,MAAE+S,GAAUjX,EAEvB/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS6d,EAAAA,EAAAA,IAAS7d,GAAQyd,EAAAA,EAAAA,IAAqBT,EAAO,OACtDhd,EAAS,IACJA,EACHkiC,cAAe,IACVliC,EAAOkiC,cACVnO,QAAS9pB,EACT4xB,iBAAiB1uB,EAAAA,EAAAA,SAGrBvJ,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,kBAAkBmZ,MAAOla,EAAQgB,EAASC,KACzD,MAAM,OACJR,EAAM,SAAEktB,EAAQ,MAAEzsB,EAAK,OAAEqO,EAAM,MAC/BhP,GAAQC,EAAAA,EAAAA,OACNS,EAEJ,IAAIkhC,GAAgB7gC,EAAAA,EAAAA,IAAetB,EAAQO,GAAOw6B,WAAWC,WAAWrN,GACxE,IAAsB,IAAlBwU,EAAJ,CAIA,QAAsBthC,IAAlBshC,EAA6B,CAC/B,MAAQ3e,KAAM4e,EAAS,KAAEr/B,SAAega,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE4Q,cAAe,CAAC,EAEpF,GADA3tB,GAASuJ,EAAAA,EAAAA,OACJ64B,IAAcr/B,EAGjB,OAFA/C,EAAS66B,GAAyB76B,EAAQ2tB,GAAU,EAAOptB,QAC3DqD,EAAAA,EAAAA,IAAU5D,GAIZA,GAAS6d,EAAAA,EAAAA,IAAS7d,EAAQ,CAAE,CAACoiC,EAAUxgC,IAAKwgC,IAC5CpiC,GAAS8d,EAAAA,EAAAA,IAAS9d,EAAQ,CAAE,CAAC+C,EAAKnB,IAAKmB,IACvCo/B,EAAgB,CACdvgC,GAAIwgC,EAAUxgC,GACdV,MAAO,GACPqO,OAAQ,GACR8yB,cAAUxhC,EACVyhC,aAAa,EACb9yB,QAAS,GACT+yB,UAAW,GAGbviC,EAAS66B,GAAyB76B,EAAQ2tB,EAAUwU,EAAe5hC,IACnEqD,EAAAA,EAAAA,IAAU5D,EACZ,EAEIkB,IAAUihC,EAAcjhC,OAAUihC,EAAcG,cAI/C7D,IAAsB,MAypB7BvkB,eAAsDla,EAAS0c,GAYhB,IAZkB,SAC/DiR,EAAQ,cACRwU,EAAa,OACb1hC,EAAM,MACNS,EAAK,OACLqO,GAODmN,EAAA,QAAAD,EAAAvc,UAAAC,OAAAyN,EAAA,IAAAvN,MAAAoc,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAA/O,EAAA+O,EAAA,GAAAzc,UAAAyc,GAAA,IAAMpc,GAAQC,EAAAA,EAAAA,OAAkBoN,EAC/B5N,GAASuJ,EAAAA,EAAAA,MACT,MAAMo1B,GAAMlb,EAAAA,EAAAA,IAAWzjB,EAAQmiC,EAAcvgC,IACvCmB,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKk+B,IAAQ57B,EACX,OAGF,MAAMy/B,EAAwBL,EAAcjhC,QAAUA,EAEtDlB,EAAS66B,GADT76B,EAASi7B,GAA2Bj7B,GAAQ,EAAMO,GACRotB,EAAU,IAC/CwU,EACHjhC,WACIshC,GAAyB,CAAEjzB,YAAQ1O,EAAW2O,QAAS,KAC1DjP,IACHqD,EAAAA,EAAAA,IAAU5D,GAEV,MAAM+F,QAAegX,EAAAA,EAAAA,IAAQ,wBAAyB,CACpD4hB,MACA57B,OACA7B,QACAqO,OAAQizB,OAAwB3hC,EAAY0O,IAG9CvP,GAASuJ,EAAAA,EAAAA,MACT,MAAMk5B,GAAmBnhC,EAAAA,EAAAA,IAAetB,EAAQO,GAAOw6B,WAAWC,WAAWrN,GAE7E,GADA3tB,EAASi7B,GAA2Bj7B,GAAQ,EAAOO,IAC9CwF,IAAW08B,GAAoBvhC,IAAUuhC,EAAiBvhC,MAE7D,YADA0C,EAAAA,EAAAA,IAAU5D,GAIZ,MAAM0iC,EAAa,IAAIxW,KAAKuW,EAAiBjzB,SAAW,IAAIhK,KAAKuO,GAASA,EAAKnS,MACzE+gC,EAAa58B,EAAOyJ,QAAQxL,QAAQ+P,IAAU2uB,EAAW7iB,IAAI9L,EAAKnS,MAExE5B,EAAS66B,GAAyB76B,EAAQ2tB,EAAU,IAC/C8U,EACHG,KAAM78B,EAAO68B,KACbL,UAAW71B,KAAKC,MAA2B,IAAnB5G,EAAOw8B,aAC3BI,EAAWxiC,QAAU,CAAE0iC,UAAW98B,EAAO88B,cACzC98B,EAAOs8B,UAAY,CAAEA,SAAUt8B,EAAOs8B,aACtCt8B,EAAO+8B,eAAiB,CAAEA,cAAe/8B,EAAO+8B,eACpDR,YAAav8B,EAAOyJ,QAAQrP,OAAS,GAAKqH,QAAQzB,EAAO8gB,YACzDrX,QAAqC,KAA5BizB,EAAiBlzB,QAAiBkzB,EAAiBlzB,SAAWxJ,EAAO8gB,WAC1E9gB,EAAOyJ,SACNizB,EAAiBjzB,SAAW,IAAI+N,OAAOolB,GAC5CpzB,OAAQozB,EAAWxiC,OAAS4F,EAAO8gB,WAAa,IAC/CtmB,IAEHqD,EAAAA,EAAAA,IAAU5D,EACZ,CAttBI+iC,CAAgB/iC,EAAQ,CACtB2tB,WACAwU,cAAeA,EACf1hC,SACAS,QACAqO,UACChP,EAAM,GAtCX,CAuCE,KAGJQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,MACJC,EAAK,WAAEmgC,EAAU,UAAEn6B,EAAS,OAAElD,EAAM,MAAEzD,GAAQC,EAAAA,EAAAA,OAC5CS,EACJ,IAAI,MACF0T,GACE1T,EACJ,MAAM8B,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GACvC,IAAKwC,EACH,OAGF,IAAK4R,GAASzN,EAAW,CACvB,MAAMzB,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQ+C,EAAKnB,GAAIsF,GACnD,IAAKzB,EACH,OAEFkP,EAAQlP,EAAQmP,UAAYnP,EAAQoP,QACtC,CAEA,IAAKF,EACH,OAGF,MAAMquB,GAAYvf,EAAAA,EAAAA,IAAWzjB,EAAQ2U,GAChCquB,GAILhiC,EAAQiiC,kBAAkB,CACxBn/B,KAAO,IAAGk/B,EAAUE,UAAW,GAAGvV,YAAYzsB,IAC9CT,OAAQ4gC,EAAat+B,EAAKnB,QAAKf,EAC/BmD,SACAzD,SAEc,KAGlBQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,GACJW,EAAE,QAAEuhC,EAAO,SAAE/e,EAAQ,YAAE9C,EAAW,MAClC/gB,GAAQC,EAAAA,EAAAA,OACNS,EACEiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,IAAuBN,EAC1B,OAGF,MAAM,OAAEnB,EAAM,SAAEC,GAAawB,EAEvBa,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1Bwf,GAAatY,EAAAA,EAAAA,IAAmB3H,EAAQS,EAAQC,GACtD,IAAI2f,EAEAJ,GAAcvf,IAAamB,EAAAA,KAC7Bwe,GAAkBD,EAAAA,EAAAA,IAAyBpgB,EAAQS,EAAQC,IAG7DM,EAAQuH,gBAAgB,CAAErB,eAAWrG,EAAWN,UAChDS,EAAQ6gB,oBAAoB,CAAEthB,WAEzBwc,EAAAA,EAAAA,IAAQ,sBAAuB,CAClCha,OACAqgC,SAAUxhC,EACVuhC,UACAljB,aACAI,kBACAsB,QAAQC,EAAAA,EAAAA,IAAa5hB,EAAQS,GAC7B2jB,WACAif,aAAc/hB,GACd,KAGJvgB,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,SAAE0sB,EAAQ,MAAE7c,EAAK,MAAEvQ,GAAQC,EAAAA,EAAAA,OAAsBS,EAEvD,IAAIkhC,GAAgB7gC,EAAAA,EAAAA,IAAetB,EAAQO,GAAOw6B,WAAWC,WAAWrN,GAEnEwU,KAIArxB,GAASpE,KAAKC,MAAQw1B,EAAcI,YAEzCJ,EAAgB,CACdvgC,GAAIugC,EAAcvgC,GAClBV,MAAO,GACPqO,OAAQ,GACR8yB,cAAUxhC,EACVyhC,aAAa,EACb9yB,QAAS,GACT+yB,UAAW,GAGbviC,EAAS66B,GAAyB76B,EAAQ2tB,EAAUwU,EAAe5hC,IACnEqD,EAAAA,EAAAA,IAAU5D,IAAO,KAGnBe,EAAAA,EAAAA,IAAiB,sBAAsB,CAACf,EAAQgB,EAASC,KACvD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5C85B,GAAaz5B,EAAAA,EAAAA,IAAetB,EAAQO,GAAOw6B,WAAWC,WAE5DlzB,OAAOC,KAAKgzB,GAAYrvB,SAASiiB,IAC/B3sB,EAAQsiC,eAAe,CAAE3V,WAAUptB,SAAQ,GAC3C,KAGJQ,EAAAA,EAAAA,IAAiB,YAAYmZ,MAAOla,EAAQgB,EAASC,KACnD,MAAM,MAAE0T,EAAK,MAAE4uB,GAAUtiC,EAEnB09B,GAAMlb,EAAAA,EAAAA,IAAWzjB,EAAQ2U,GAC/B,IAAKgqB,EACH,OAGF,IAAIrU,GAAWC,EAAAA,EAAAA,IAAmBvqB,EAAQ2U,GAC1C,IAAK2V,EAAU,CACb,MAAMvkB,QAAegX,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEnb,GAAI+8B,EAAI/8B,GAAI4oB,WAAYmU,EAAInU,aAC5EF,EAAWvkB,GAAQukB,QACrB,CAEIA,GAAUkZ,iBACNzmB,EAAAA,EAAAA,IAAQ,iBAAkB4hB,EAAI/8B,GAAI+8B,EAAInU,kBAGxCzN,EAAAA,EAAAA,IAAQ,WAAY,CACxB4hB,MACA8E,WAAYF,GACZ,KAGJxiC,EAAAA,EAAAA,IAAiB,wBAAwBmZ,MAAOla,EAAQgB,EAASC,KAC/D,MAAM,IACJqT,EAAG,MAAEK,EAAK,MAAE6sB,EAAK,WAAEG,EAAU,MAC7BphC,GAAQC,EAAAA,EAAAA,OACNS,EAEE09B,GAAMlb,EAAAA,EAAAA,IAAWzjB,EAAQ2U,GAC/B,IAAKgqB,EAAK,OAEV,KAAK7pB,EAAAA,EAAAA,IAAmB9U,EAAQ2U,GAY9B,OAXA3U,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B+U,gBAAiB,CACfJ,QACA7S,KAAM,SACNkT,UAAW,CACTC,OAAQ,uBACRhU,aAGHV,QACHqD,EAAAA,EAAAA,IAAU5D,GAIZ,MAAM0jC,QAAmB3mB,EAAAA,EAAAA,IAAQ,uBAAwB,CAAEzI,MAAKqqB,MAAK6C,UAChEkC,IAIL1jC,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B2jC,OAAQ,CACNrvB,IAAKovB,EACL/uB,QACAgtB,eAEDphC,IACHqD,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,kBAAkBmZ,MAAOla,EAAQgB,EAASC,KACzD,MAAM,IACJqT,EAAG,MAAEK,EAAK,OAAEktB,EAAM,MAAEL,EAAK,SAAEpd,EAAQ,WAAEud,EAAU,cAAEiC,EAAa,WAAEH,EAAU,MAC1EljC,GAAQC,EAAAA,EAAAA,OACNS,EAEE09B,GAAMlb,EAAAA,EAAAA,IAAWzjB,EAAQ2U,GAC/B,IAAKgqB,EAAK,OACV,MAAMlZ,GAAOziB,EAAAA,EAAAA,IAAWhD,EAAQ6hC,GAChC,IAAKpc,EAAM,OAEX,KAAK3Q,EAAAA,EAAAA,IAAmB9U,EAAQ2U,GAY9B,OAXA3U,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B+U,gBAAiB,CACfJ,QACA7S,KAAM,SACNkT,UAAW,CACTC,OAAQ,iBACRhU,aAGHV,QACHqD,EAAAA,EAAAA,IAAU5D,GAIZ,MAAMkC,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAGF,MAAM,OAAEzB,EAAM,SAAEC,GAAawB,EACvB2hC,EAAQpjC,IAAUkH,EAAAA,EAAAA,IAAmB3H,EAAQS,EAAQC,GACrDihB,GAASC,EAAAA,EAAAA,IAAa5hB,EAAQS,GAC9BsF,QAAegX,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7CzI,MACAqqB,MACAlZ,OACA+b,QACApd,WACAnD,iBAAkB4iB,QAAShjC,EAC3BH,WACAkjC,gBACAH,aACA9hB,WAEF,IAAK5b,EACH,OAGF,MAAQuO,IAAKovB,EAAU,QAAEP,GAAYp9B,EAErC/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B2jC,OAAQ,CACNrvB,IAAKovB,EACL/uB,QACAwuB,UACAliB,iBAAkB4iB,QAAShjC,EAC3BH,WACAihC,eAEDphC,IACHqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,qBAAqBmZ,MAAOla,EAAQgB,EAASC,KAC5D,MAAM,MACJ0T,EAAK,QAAEmvB,EAAO,SAAEC,EAAQ,MAAEvC,EAAK,eAAE3C,EAAc,MAC/Ct+B,GAAQC,EAAAA,EAAAA,OACNS,EAEE09B,GAAMlb,EAAAA,EAAAA,IAAWzjB,EAAQ2U,GAC/B,IAAKgqB,EAAK,OAEV,MAAMqF,QAAejnB,EAAAA,EAAAA,IAAQ,cAAe,CAC1C4hB,MACAmF,YAIF,GAFA9jC,GAASuJ,EAAAA,EAAAA,OAEJy6B,EAEH,YADAhjC,EAAQqL,iBAAiB,CAAE5G,SAASigB,EAAAA,EAAAA,IAAU,8BAA+BnlB,UAI/E,GAAIyjC,EAAOC,cAAenvB,EAAAA,EAAAA,IAAmB9U,EAAQ2U,GAanD,OAZA3U,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B+U,gBAAiB,CACfJ,QACAyqB,yBAA0B4E,EAAO5E,yBACjCt9B,KAAM,SACNkT,UAAW,CACTC,OAAQ,oBACRhU,aAGHV,QACHqD,EAAAA,EAAAA,IAAU5D,GAIZ,MAAMylB,GAAO3Z,EAAAA,EAAAA,IAAkB9L,EAAQO,GAEjC+T,QAAYyI,EAAAA,EAAAA,IAAQ,oBAAqB,CAC7C0I,KAAMA,GAAQkZ,EACduF,IAAKF,EACLP,WAAYM,EACZlF,iBACA2C,UAEFxhC,GAASuJ,EAAAA,EAAAA,MAEJ+K,IAELtU,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B2jC,OAAQ,CACNrvB,MACAK,QACAgtB,WAAY,KAEbphC,IACHqD,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,kBAAkBmZ,MAAOla,EAAQgB,EAASC,KACzD,MAAM,MACJ0T,EAAK,OAAEktB,EAAM,SAAEzd,EAAQ,iBAAEnD,EAAgB,QAAEkiB,EAAO,SAAEziC,EAAQ,MAC5DH,GAAQC,EAAAA,EAAAA,OACNS,EAEE09B,GAAMlb,EAAAA,EAAAA,IAAWzjB,EAAQ2U,GAC/B,IAAKgqB,EAAK,OACV,MAAMlZ,GAAOziB,EAAAA,EAAAA,IAAWhD,EAAQ6hC,GAChC,IAAKpc,EAAM,OAEX,MAAM9D,GAASC,EAAAA,EAAAA,IAAa5hB,EAAQ6hC,SAEf9kB,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7C4hB,MACAlZ,OACArB,WACAnD,mBACAvgB,WACAyiC,UACAxhB,YAIA3gB,EAAQmjC,YAAY,CAAE5jC,SACxB,KAGFQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,IACJ09B,EAAG,KAAE5qB,EAAI,WAAE4tB,GACT1gC,GAEJ8b,EAAAA,EAAAA,IAAQ,kBAAmB,CACzB4hB,MACA5qB,OACA4tB,cACA,KAGJ5gC,EAAAA,EAAAA,IAAiB,eAAe,CAACf,EAAQgB,EAASC,KAChD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B2jC,YAAQ9iC,GACPN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,EAChCkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,GAAK4B,EAASwhC,QAAQrvB,IAEtB,OAAO/R,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B2jC,OAAQ,IACHxhC,EAASwhC,OACZS,KAAMnjC,EAAQmjC,OAEf7jC,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B+U,qBAAiBlU,GAChBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,MAAE0T,EAAK,eAAEkqB,EAAc,MAAEt+B,GAAQC,EAAAA,EAAAA,OAAsBS,GACvD,cAAEojC,GAAkBrkC,EAEpBskC,EAAmB,IAAIpY,IAAImY,GACjCC,EAAiBnY,IAAIxX,GAErB3U,EAAS,IACJA,EACHqkC,cAAehkC,MAAM2e,KAAKslB,IAG5B,MAAMniC,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,GAAI4B,EAAS4S,iBAAiBC,UAAW,CACvC,MAAM,OAAEC,EAAQhU,QAASsjC,GAAoBpiC,EAAS4S,gBAAgBC,UAEtEhU,EAAQiU,GAAQ,IACVsvB,EACJ1F,kBAEJ,CAEA7+B,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B+U,qBAAiBlU,GAChBN,IAEHqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,kBAAkBmZ,MAAOla,EAAQgB,EAASC,KACzD,MAAM,KAAE8Q,GAAS9Q,GAAW,CAAC,QACvB69B,GAAe9+B,EAAQ+R,EAAK,KAGpChR,EAAAA,EAAAA,IAAiB,mBAAmBmZ,MAAOla,EAAQgB,EAASC,KAC1D,MAAM,MAAE0T,EAAK,eAAEkqB,EAAc,UAAED,GAAc39B,EAEvC09B,GAAMlb,EAAAA,EAAAA,IAAWzjB,EAAQ2U,GAE1BgqB,SAECD,GAAgB1+B,EAAQ2+B,EAAKC,EAAWC,EAAe,KA6B/D99B,EAAAA,EAAAA,IAAiB,iBAAiB,CAACf,EAAQgB,EAASC,KAClD,MAAM,OACJR,EAAM,IAAEk+B,EAAG,IAAErqB,EAAG,WAAEmvB,EAAU,SAAE/iC,EAAQ,MACtCH,GAAQC,EAAAA,EAAAA,OACNS,EACE2iC,GAAiBjF,EACvB,IAAKiF,IAAkB5jC,EAAO++B,WAAWC,KAAKL,EAAI/8B,IAChD,OAAOW,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BwkC,0BAA2B,CACzB7F,MACA3pB,UAAW,CACTC,OAAQ,gBACRhU,aAGHV,GAEL,MAAMihC,GAAQC,EAAAA,GAAAA,MACdzgC,EAAQ6C,SAAS,CAAEjC,GAAInB,EAAQC,WAAUH,UACzCS,EAAQ4gC,eAAe,CACrBttB,MACAutB,OAAQphC,EACRkU,MAAOivB,EAAgBnjC,EAASk+B,EAAI/8B,GACpC4/B,QACAG,WAAY,GACZiC,gBACAH,aACAljC,SAGc,KAGlBQ,EAAAA,EAAAA,IAAiB,2BAA2BmZ,MAAOla,EAAQgB,EAASC,KAClE,MAAM,eAAE49B,EAAc,MAAEt+B,GAAQC,EAAAA,EAAAA,OAAsBS,GAChD,0BAAEujC,IAA8BljC,EAAAA,EAAAA,IAAetB,EAAQO,IAEvD,IAAEo+B,EAAG,UAAE3pB,GAAcwvB,EAE3BxkC,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BwkC,+BAA2B3jC,GAC1BN,IACHqD,EAAAA,EAAAA,IAAU5D,GAEV,MAAMykC,GAAUhhB,EAAAA,EAAAA,IAAWzjB,EAAQ2+B,EAAI/8B,IACvC,GAAK6iC,UAEC/F,GAAgB1+B,EAAQykC,GAAS,EAAM5F,GACzC7pB,GAAW,CACb,MAAM,OAAEC,EAAQhU,QAASyjC,GAAkB1vB,EAE3ChU,EAAQiU,GAAQyvB,EAClB,MAGF3jC,EAAAA,EAAAA,IAAiB,0BAA0B,CAACf,EAAQgB,EAASC,KAC3D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BwkC,+BAA2B3jC,GAC1BN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACf,EAAQgB,EAASC,KAC3D,MAAM,IACJ09B,EAAG,OAAE36B,EAAM,WAAEy/B,EAAU,MAAEljC,GAAQC,EAAAA,EAAAA,OAC/BS,EACE62B,GAAgBn3B,EAAAA,EAAAA,IAAyBX,EAAQO,IAAQE,OAEzDkkC,EAAmBhG,EAAIiG,UAAU5gC,QAAQlC,GACpC,SAATA,GAAmBkC,EAAOyG,SAAS3I,KAGhC6iC,EAAiBxkC,QAUtBH,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B6kC,yBAA0B,CACxBlG,MACA36B,OAAQ2gC,EACRlB,eAEDljC,IACHqD,EAAAA,EAAAA,IAAU5D,IAhBRgB,EAAQ8jC,cAAc,CACpBrkC,OAAQq3B,GAAiB6G,EAAI/8B,GAC7B+8B,MACA8E,aACAljC,SAYa,KAGnBQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6kC,8BAA0BhkC,GACzBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,qBAAqBmZ,MAAOla,EAAQgB,EAASC,KAC5D,MAAM,OACJR,EAAM,SAAEshC,EAAQ,UAAE76B,EAAS,IAAEoN,EAAG,MAAE/T,GAAQC,EAAAA,EAAAA,OACxCS,EAEE8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EACH,OAGF,MAAMgD,QAAegX,EAAAA,EAAAA,IAAQ,oBAAqB,CAChDha,OACAg/B,WACA76B,cAGGnB,IACL/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9Bk/B,QAAS,CACP5qB,MACA0sB,OAAQ,CACNe,WACA76B,YACAzG,OAAQsC,EAAKnB,MAGhBrB,IACHqD,EAAAA,EAAAA,IAAU5D,GACVi/B,GAAoBj/B,EAAQgB,EAASsT,EAAKvO,EAAQxF,GAAM,KAG1DQ,EAAAA,EAAAA,IAAiB,oBAAoBmZ,MAAOla,EAAQgB,EAASC,KAC3D,MAAM,eAAE49B,EAAc,MAAEt+B,GAAQC,EAAAA,EAAAA,OAAsBS,EAChDkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,IAAK4B,EAAS+8B,SAAS8B,OAAQ,OAC/B,MAAM,OACJA,EAAM,IAAE1sB,GACNnS,EAAS+8B,SACP,OAAEz+B,EAAM,UAAEyG,EAAS,SAAE66B,GAAaf,EAElCj+B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EACH,OAGF,MAAMgD,QAAegX,EAAAA,EAAAA,IAAQ,mBAAoB,CAC/Cha,OACAmE,YACA66B,WACAlD,mBAEG94B,GAELk5B,GADAj/B,GAASuJ,EAAAA,EAAAA,MACmBvI,EAASsT,EAAKvO,EAAQxF,EAAM,KAG1DQ,EAAAA,EAAAA,IAAiB,sBAAsBmZ,MAAOla,EAAQgB,EAASC,KAC7D,MAAM,IAAEqT,EAAG,MAAE/T,GAAQC,EAAAA,EAAAA,OAAsBS,EAErC8E,QAAegX,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEzI,QAChDvO,IACL/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9Bk/B,QAAS,CACP5qB,QAED/T,IACHqD,EAAAA,EAAAA,IAAU5D,GACVi/B,GAAoBj/B,EAAQgB,EAASsT,EAAKvO,EAAQxF,GAAM,KAG1DQ,EAAAA,EAAAA,IAAiB,qBAAqBmZ,MAAOla,EAAQgB,EAASC,KAC5D,MAAM,eAAE49B,EAAc,MAAEt+B,GAAQC,EAAAA,EAAAA,OAAsBS,EAChDkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,IAAK4B,EAAS+8B,SAAS5qB,IAAK,OAC5B,MAAM,IAAEA,GAAQnS,EAAS+8B,QAEnBn5B,QAAegX,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEzI,MAAKuqB,mBACpD94B,GAELk5B,GADAj/B,GAASuJ,EAAAA,EAAAA,MACmBvI,EAASsT,EAAKvO,EAAQxF,EAAM,KAG1DQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5Bk/B,aAASr+B,GACRN,EAAM,I,UE14BXQ,EAAAA,EAAAA,IAAiB,oBAAoBmZ,UACnC,MAAMnU,QAAegX,EAAAA,EAAAA,IAAQ,mBACxBhX,IAIL/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS+kC,EAAAA,EAAAA,IAAgB/kC,EAAQ,CAAEglC,YAAaj/B,EAAOi/B,cACvDhlC,GAASilC,EAAAA,EAAAA,IAAoBjlC,EAAQ,CAAEklC,KAAMn/B,EAAOm/B,QACpDthC,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,iBAAiBmZ,MAAOla,EAAQgB,EAASC,KACxD,MAAM,gBAAEkkC,EAAe,UAAEC,GAAcnkC,EAEvCjB,GAASilC,EAAAA,EAAAA,IAAoBjlC,EAAQ,CAAEoa,WAAW,EAAMhD,WAAOvW,KAC/D+C,EAAAA,EAAAA,IAAU5D,GAEV,MAAMqlC,QAAkBtoB,EAAAA,EAAAA,IAAQ,gBAAiBooB,GAEjDnlC,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASilC,EAAAA,EAAAA,IAAoBjlC,EAAQ,CAAEoa,WAAW,KAClDxW,EAAAA,EAAAA,IAAU5D,GAENqlC,GACFD,GACF,KAGFrkC,EAAAA,EAAAA,IAAiB,iBAAiBmZ,MAAOla,EAAQgB,EAASC,KACxD,MAAM,gBAAEkkC,EAAe,UAAEC,GAAcnkC,EAEvCjB,GAASilC,EAAAA,EAAAA,IAAoBjlC,EAAQ,CAAEoa,WAAW,EAAMhD,WAAOvW,KAC/D+C,EAAAA,EAAAA,IAAU5D,GAEV,MAAMqlC,QAAkBtoB,EAAAA,EAAAA,IAAQ,gBAAiBooB,GAEjDnlC,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASilC,EAAAA,EAAAA,IAAoBjlC,EAAQ,CAAEoa,WAAW,KAClDxW,EAAAA,EAAAA,IAAU5D,GAENqlC,GACFD,GACF,KAGFrkC,EAAAA,EAAAA,IAAiB,kBAAkBmZ,MAAOla,EAAQgB,EAASC,KACzD,MAAM,gBACJkkC,EAAe,SAAEG,EAAQ,KAAEJ,EAAI,MAAEK,EAAK,UAAEH,GACtCnkC,EAEJjB,GAASilC,EAAAA,EAAAA,IAAoBjlC,EAAQ,CAAEoa,WAAW,EAAMhD,WAAOvW,KAC/D+C,EAAAA,EAAAA,IAAU5D,GAEV,MAAMqlC,QAAkBtoB,EAAAA,EAAAA,IAAQ,iBAAkBooB,EAAiBG,EAAUJ,EAAMK,GAEnFvlC,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASilC,EAAAA,EAAAA,IAAoBjlC,EAAQ,CAAEoa,WAAW,KAClDxW,EAAAA,EAAAA,IAAU5D,GAENqlC,GACFD,GACF,KAGFrkC,EAAAA,EAAAA,IAAiB,uBAAuBmZ,MAAOla,EAAQgB,EAASC,KAC9D,MAAM,gBACJkkC,EAAe,MAAEI,EAAK,UAAEH,GACtBnkC,EAEJjB,GAASilC,EAAAA,EAAAA,IAAoBjlC,EAAQ,CAAEoa,WAAW,EAAMhD,WAAOvW,KAC/D+C,EAAAA,EAAAA,IAAU5D,GAEV,MAAMqlC,QAAkBtoB,EAAAA,EAAAA,IAAQ,sBAAuBooB,EAAiBI,GAExEvlC,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASilC,EAAAA,EAAAA,IAAoBjlC,EAAQ,CAAEoa,WAAW,EAAOorB,4BAAwB3kC,KACjF+C,EAAAA,EAAAA,IAAU5D,GAENqlC,GACFD,GACF,KAGFrkC,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,KAAEwkC,GAASxkC,GAEZ8b,EAAAA,EAAAA,IAAQ,2BAA4B0oB,EAAK,KAGhD1kC,EAAAA,EAAAA,IAAiB,mBAAoBf,IAC5BilC,EAAAA,EAAAA,IAAoBjlC,EAAQ,CAAEoX,WAAOvW,OD7D9CE,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,YAAEw/B,EAAW,SAAEiF,EAAQ,MAAEnlC,GAAQC,EAAAA,EAAAA,OAAsBS,EAEvDi/B,GAAeyF,EAAAA,EAAAA,IAA0B3lC,EAAQO,GACvD,GAAK2/B,EAIL,GAAI,SAAUA,EACPM,GAAsBxgC,EAAQkgC,EAAcO,EAAaiF,EAAUnlC,OACnE,CACL,MAAMwC,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQkgC,EAAaz/B,QAC7C,IAAKsC,EACH,OAGGy9B,GAAsBxgC,EAAQ,CACjC+C,OACAmE,UAAWg5B,EAAah5B,WACvBu5B,EAAaiF,EAAUnlC,EAC5B,MAGFQ,EAAAA,EAAAA,IAAiB,eAAemZ,MAAOla,EAAQgB,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,EACtC,IAAIm/B,EACJ,GAAI,SAAUn/B,EACZm/B,QAAgBH,GAAejgC,EAAQ,CAAEokC,KAAMnjC,EAAQmjC,MAAQ7jC,OAC1D,CACL,MAAMwC,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQiB,EAAQR,QACxC,IAAKsC,EACH,OAGFq9B,QAAgBH,GAAejgC,EAAQ,CACrC+C,OACAmE,UAAWjG,EAAQiG,WAClB3G,EACL,CAEK6/B,IAILpgC,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS4lC,EAAAA,EAAAA,IAAe5lC,EAAQogC,EAAS7/B,GACzCP,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BuZ,QAAS,KACJjY,EAAAA,EAAAA,IAAetB,EAAQO,GAAOgZ,QACjC2mB,aAAcj/B,EACd4kC,oBAAoB,EACpBvsB,OAAQ,YACRwsB,gBAAkB7kC,EAAgB6kC,kBAEnCvlC,IACHqD,EAAAA,EAAAA,IAAU5D,GAAO,KAuBnBe,EAAAA,EAAAA,IAAiB,cAAcmZ,MAAOla,EAAQgB,EAASC,KACrD,MAAM,iBACJigC,EAAgB,OAAEzgC,EAAM,UAAEyG,EAAS,MAAE3G,GAAQC,EAAAA,EAAAA,OAC3CS,EACE8B,EAAOtC,IAAUuC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1C,IAAKyG,IAAcg6B,IAAqBn+B,EACtC,OAGF,MAAMgD,QAAegX,EAAAA,EAAAA,IAAQ,aAAcha,EAAMm+B,GACjD,IAAKn7B,EACH,OAGF/F,GAASuJ,EAAAA,EAAAA,MACT,MAAM9D,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQ+C,EAAKnB,GAAIsF,GACnDlH,GAAS6d,EAAAA,EAAAA,IAAS7d,GAAQyd,EAAAA,EAAAA,IAAqB1X,EAAOiX,MAAO,OAC7Dhd,GAAS+lC,EAAAA,EAAAA,IAAW/lC,EAAQ+F,EAAOigC,QAASvgC,EAASlF,IACrDqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClDjB,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BuZ,QAAS,KACJjY,EAAAA,EAAAA,IAAetB,EAAQO,GAAOgZ,QACjCnC,WAAOvW,IAERN,IACHqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,gBAAgB,CAACf,EAAQgB,EAASC,KACjD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BuZ,QAAS,KACJjY,EAAAA,EAAAA,IAAetB,EAAQO,GAAOgZ,QACjCysB,aAASnlC,IAEVN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,YAAEglC,EAAW,MAAE1lC,GAAQC,EAAAA,EAAAA,OAAsBS,GAE7C,eAAEilC,IAAmB5kC,EAAAA,EAAAA,IAAetB,EAAQO,GAAOgZ,SACnD,KAAExF,GAASkyB,EAEjB,GAAuB,WAAnBC,EAA6B,CAC/B,MAAMC,GAAiBC,EAAAA,EAAAA,IAA6BpmC,EAAQO,GAC5D,IAAK4lC,EACH,QA0ENjsB,eACEla,EACA+T,EACAoyB,GAEA,QAAA1pB,EAAAvc,UAAAC,OAAAyN,EAAA,IAAAvN,MAAAoc,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAA/O,EAAA+O,EAAA,GAAAzc,UAAAyc,GAAA,IADIpc,GAAQC,EAAAA,EAAAA,OAAkBoN,EAE9B,MAAM1M,EErPD,SAA0B6S,GAC/B,MAAM7S,EAAQ4G,OAAOC,KAAKgM,GAAMvO,KAAK6gC,GAAO,GAAEA,KAAKtyB,EAAKsyB,OAAM3/B,KAAK,KACnE,OAAOxF,EAAMf,OAAS,EAAK,IAAGe,IAAU,EAC1C,CFkPgBolC,CAAiB,CAC7B,eAAgBvyB,EAAKwyB,WACrB,kBAAmBxyB,EAAKyyB,YACxB,iBAAkBzyB,EAAK0yB,WACvB,YAAa1yB,EAAK2yB,IAClB,oBAAqB3yB,EAAK4yB,IAC1B,wBAAyB5yB,EAAK6yB,UAG1B/vB,QAAiBF,MAAO,mCAAkCzV,IAAS,CACvE2lC,OAAQ,OACRZ,YAAa,cACba,QAAS,CACP,eAAgB,oCAChBC,cAAgB,UAASZ,OAGvBpgC,QAAe8Q,EAASmwB,OAC9B,GAAIjhC,EAAOqR,MAAO,CAChB,MAAMA,GAAQ6vB,EAAAA,EAAAA,IAAelhC,EAAOqR,OAYpC,OAXApX,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BuZ,QAAS,KACJjY,EAAAA,EAAAA,IAAetB,EAAQO,GAAOgZ,QACjCD,OAAQ,SACRlC,MAAO,IACFA,KAGN7W,QACHqD,EAAAA,EAAAA,IAAU5D,EAEZ,CACAA,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASknC,EAAAA,EAAAA,IAAkBlnC,EAAQ,CACjC8B,KAAMiE,EAAOjE,KACbF,GAAImE,EAAOnE,IACVrB,GACHP,GAASsgC,EAAAA,EAAAA,IAAetgC,EAAQugC,EAAAA,GAAAA,SAAsBhgC,IACtDqD,EAAAA,EAAAA,IAAU5D,EACZ,CAtHSmnC,CAAsBnnC,EAAQ+T,EAAMoyB,EAAgB5lC,EAC3D,MAAO,GAAuB,gBAAnB2lC,EAAkC,CAC3C,MAAMkB,GAAcC,EAAAA,EAAAA,IAA0BrnC,EAAQO,GACtD,IAAK6mC,EACH,QAoHNltB,eACEla,EACA+T,EACAqzB,GAEA,QAAA9nB,EAAApf,UAAAC,OAAAuc,EAAA,IAAArc,MAAAif,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAA9C,EAAA8C,EAAA,GAAAtf,UAAAsf,GAAA,IADIjf,GAAQC,EAAAA,EAAAA,OAAkBkc,EAE9B,MAAM2C,EAAS,CACbioB,KAAM,CACJC,OAAQxzB,EAAKwyB,WAAWj2B,QAAQ,OAAQ,IACxCk3B,iBAAkBzzB,EAAKyyB,YACvBiB,gBAAiB1zB,EAAK0yB,WACtBiB,cAAe3zB,EAAK2yB,IAAIp2B,QAAQ,OAAQ,MAGtCgE,EAAMqzB,EAAAA,IACR,+DACA,oDAEE9wB,QAAiBF,MAAMrC,EAAK,CAChCuyB,OAAQ,OACRC,QAAS,CACPc,OAAQ,mBACR,eAAgB,mBAChB,iBAAkBR,GAEpBS,KAAMttB,KAAKC,UAAU6E,KAEjBtZ,QAAe8Q,EAASmwB,OAE9B,GAAsB,OAAlBjhC,EAAOuT,OAAiB,CAE1B,MAAMlC,EAAQ,CAAEoO,YAAa,iBAY7B,OAXAxlB,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BuZ,QAAS,KACJjY,EAAAA,EAAAA,IAAetB,EAAQO,GAAOgZ,QACjCD,OAAQ,SACRlC,MAAO,IACFA,KAGN7W,QACHqD,EAAAA,EAAAA,IAAU5D,EAEZ,CAEAA,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS8nC,EAAAA,EAAAA,IAAuB9nC,EAAQ,CACtC8B,KAAM,OACNimC,MAAOhiC,EAAOgO,KAAKg0B,OAClBxnC,GACHP,GAASsgC,EAAAA,EAAAA,IAAetgC,EAAQugC,EAAAA,GAAAA,SAAsBhgC,IACtDqD,EAAAA,EAAAA,IAAU5D,EACZ,CAvKSgoC,CAA2BhoC,EAAQ+T,EAAMqzB,EAAa7mC,EAC7D,MAGFQ,EAAAA,EAAAA,IAAiB,mBAAmBmZ,MAAOla,EAAQgB,EAASC,KAC1D,MAAM,iBACJgnC,EAAgB,gBAAEC,EAAe,kBAAEC,EAAiB,UAAEC,EAAS,MAC/D7nC,GAAQC,EAAAA,EAAAA,OACNS,EACEi/B,GAAeyF,EAAAA,EAAAA,IAA0B3lC,EAAQO,GACjD8nC,GAASC,EAAAA,EAAAA,IAAoBtoC,EAAQO,GACrCgoC,GAAgBC,EAAAA,EAAAA,IAAuBxoC,EAAQO,IAC/C,eAAE2lC,EAAc,kBAAEuC,IAAsBnnC,EAAAA,EAAAA,IAAetB,EAAQO,GAAOgZ,QACtE4sB,EAAoC,WAAnBD,GACnBE,EAAAA,EAAAA,IAA6BpmC,EAAQO,IAAS8mC,EAAAA,EAAAA,IAA0BrnC,EAAQO,GAEpF,KAAK2/B,GAAiBiG,GAAmBkC,GAAWnC,GAClD,OAGF,IAAIwC,EACJ,GAAI,SAAUxI,EACZwI,EAAsB,CACpBtE,KAAMlE,EAAakE,UAEhB,CACL,MAAMrhC,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQkgC,EAAaz/B,QAC7C,IAAKsC,EACH,OAGF2lC,EAAsB,CACpB3lC,OACAmE,UAAWg5B,EAAah5B,UAE5B,CAEAlH,GAAS2oC,EAAAA,EAAAA,IAAc3oC,EAAQ,CAAEsZ,OAAQ,WAAa/Y,IACtDqD,EAAAA,EAAAA,IAAU5D,GAEV,MAAMimC,EAAc,CAClB2C,KAAMV,EACNn0B,KAAyB,WAAnBmyB,GACF2C,EAAAA,EAAAA,IAAwB7oC,EAAQO,IAASuoC,EAAAA,EAAAA,IAA6B9oC,EAAQO,UAE/Dwc,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9CmjB,aAAcwI,EACdL,SACApC,cACA8C,gBAAiBR,EACjBN,mBACAE,oBACAM,kBAAmBA,GAAmBO,MACtCZ,gBAOFpoC,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS2oC,EAAAA,EAAAA,IAAc3oC,EAAQ,CAAEsZ,OAAQ,QAAU/Y,GACnDP,GAASyZ,EAAAA,EAAAA,IAAazZ,EAAQO,IAC9BqD,EAAAA,EAAAA,IAAU5D,GAAO,KA0GnBe,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,KAAEgoC,EAAI,MAAE1oC,GAAQC,EAAAA,EAAAA,OAAsBS,EAC5C,OAAOq/B,EAAAA,EAAAA,IAAetgC,EAAQipC,QAAAA,EAAQ1I,EAAAA,GAAAA,SAAsBhgC,EAAM,KAGpEQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,SAAEioC,EAAQ,MAAE3oC,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAEtDkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,GAAK4B,EAASC,aACd,OAAOG,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BoC,aAAc,IACTD,EAASC,gBACR8mC,GAAY,CAAE5mC,QAAQ,GAC1ByM,WAAYm6B,IAEb3oC,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoBmZ,MAAOla,EAAQgB,EAASC,KAC3D,MAAM,eACJkoC,EAAc,WAAEC,EAAU,UAAE/D,EAAS,OAAEgE,EAAM,aAAEC,EAAY,SAAEC,EAAQ,MACrEhpC,GAAQC,EAAAA,EAAAA,OACNS,GAAW,CAAC,EAEhBD,EAAQwoC,sBAER,MAAMzjC,QAAegX,EAAAA,EAAAA,IAAQ,qBACxBhX,IAEL/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS6d,EAAAA,EAAAA,IAAS7d,GAAQyd,EAAAA,EAAAA,IAAqB1X,EAAOiX,MAAO,OAE7Dhd,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BoC,aAAc,CACZC,MAAO0D,EAAO1D,MACd8mC,iBACA7mC,QAAQ,EACR8mC,aACAG,WACAF,SACAC,eACAjE,cAED9kC,IACHqD,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,wBAAwBmZ,MAAOla,EAAQgB,EAASC,KAC/D,MAAM,UAAEwoC,EAAS,MAAElpC,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EACvD8E,QAAegX,EAAAA,EAAAA,IAAQ,qBAC7B,IAAKhX,EAAQ,OAEb/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS6d,EAAAA,EAAAA,IAAS7d,GAAQyd,EAAAA,EAAAA,IAAqB1X,EAAOiX,MAAO,OAG7D,MAAM0sB,EAAQ3jC,EAAO1D,MAAMmkB,QAAQ7a,MAAM+a,GAA6B,IAAlBA,EAAOijB,SAE3D3pC,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B4pC,iBAAkB,CAChBtnC,QAAQ,EACRmnC,YACAI,gBAAiBH,EAAMI,SACvBC,cAAeL,EAAMM,SAEtBzpC,IACHqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClDjB,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B4pC,iBAAkB,CAAEtnC,QAAQ,IAC3B/B,IACHqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,2BAA2BmZ,MAAOla,EAAQgB,EAASC,KAClE,MAAM,SAAEqkC,EAAQ,MAAE/kC,GAAQC,EAAAA,EAAAA,OAAsBS,EAC1C8E,QAAegX,EAAAA,EAAAA,IAAQ,gCAAiCuoB,GAE9DtlC,GAASuJ,EAAAA,EAAAA,MAKPvJ,EAHG+F,EAEM,UAAWA,GACX4iC,EAAAA,EAAAA,IAAc3oC,EAAQ,CAAEoX,MAAO,CAAE3R,QAASM,EAAOqR,MAAO6yB,MAAO,aAAgB1pC,IAE/EooC,EAAAA,EAAAA,IAAc3oC,EAAQ,CAAEyoC,kBAAmB1iC,EAAQkjC,KAAM1I,EAAAA,GAAAA,UAAwBhgC,IAJjFooC,EAAAA,EAAAA,IAAc3oC,EAAQ,CAAEoX,MAAO,CAAE3R,QAAS,gBAAiBwkC,MAAO,aAAgB1pC,IAO7FqD,EAAAA,EAAAA,IAAU5D,EAAO,I,gBG3anB,MAAMkqC,GAAoB,GAAKC,GAAAA,GACzBC,GAA0B,KAAOD,GAAAA,GAC1BE,GAAwB,KAAOF,GAAAA,GAC/BG,GAAwB,GAAKH,GAAAA,GACpCI,GAAqB,OAASJ,GAAAA,G,uCCsB7B,SAASK,GAA6BxqC,EAAqByqC,GAEhE,OAAOA,IADUnpC,EAAAA,EAAAA,IAAetB,GACVqR,qBAAsBlI,EAAAA,EAAAA,MACxCnJ,EAAO+Q,mBArBe25B,EAqBuBC,GAAAA,EAAAA,MAAiBt1B,OApBhDu1B,EAAAA,IACTl9B,KAAKm9B,IACVn9B,KAAKC,IAAkB,IAAd+8B,EAAoBJ,IACf,IAAdI,GAIAA,EAAcI,EAAAA,IACTp9B,KAAKm9B,IACVn9B,KAAKC,IAAkB,IAAd+8B,EAAoBJ,IACf,GAAdI,GAIGL,IAOH,GAtBN,IAA4BK,CAuB5B,CAEO,SAASK,GACd/qC,EAAWyF,EAAqBulC,GAEhC,MAAMC,EAAmBxlC,EAAQylC,WAAa,CAAE17B,QAAS,IAGnDA,EAAUy7B,EAAiBz7B,QAAQhK,KAAKgrB,IAC5C2a,EAAAA,EAAAA,IAAiB3a,GAAW,IACvBA,EACH4a,iBAAavqC,EACbmlB,MAAOwK,EAAQxK,MAAQ,GACrBwK,IACHxsB,QAAO5D,IAAA,IAAC,MAAE4lB,GAAO5lB,EAAA,OAAK4lB,EAAQ,CAAC,IAElCglB,EAAct/B,SAAQ,CAAC2/B,EAAUzsB,KAC/B,MAAM0sB,EAAgB97B,EAAQuD,WAAWw4B,IAAMC,EAAAA,EAAAA,IAAeD,EAAEF,SAAUA,KACtEC,GAAiB,EACnB97B,EAAQ87B,GAAiB,IACpB97B,EAAQ87B,GACXF,YAAaxsB,EACboH,MAAOxW,EAAQ87B,GAAetlB,MAAQ,GAGxCxW,EAAQpJ,KAAK,CACXilC,WACAD,YAAaxsB,EACboH,MAAO,GAEX,IAGF,IAAI,gBAAEylB,EAAkB,IAAOR,EAc/B,OAZIQ,EAAgBtrC,SAClBsrC,EAAkBA,EAAgBznC,QAAO4J,IAAA,IAAC,OAAEgC,GAAQhC,EAAA,OAAKgC,IAAW5P,EAAO+X,aAAa,KAG1FizB,EAAct/B,SAAS2/B,IACrB,MAAM,cAAEtzB,GAAkB/X,EAC1ByrC,EAAgBv8B,QAAQ,CACtBU,OAAQmI,EACRszB,YACA,KAGGtqB,EAAAA,GAAAA,IAAkB/gB,EAAQyF,EAAQhF,OAAQgF,EAAQ7D,GAAI,CAC3DspC,UAAW,IACND,EACHz7B,UACAi8B,oBAGN,CAEO,SAASC,GACd1rC,EAAWS,EAAgB2rB,GAE3B,OAAOxI,EAAAA,GAAAA,IAAW5jB,EAAQS,EAAQ2rB,OAAQvrB,GAAW,EACvD,C,gBCpEA,IAAI8qC,GAAqB,GAEzB5qC,EAAAA,EAAAA,IAAiB,0BAA0BmZ,UACzC,MAAMnU,QAAegX,EAAAA,EAAAA,IAAQ,yBACxBhX,IAKLA,EAAO2F,SAASkgC,IACVA,EAAkBC,iBACpBC,GAAAA,GAAmB,UAASF,EAAkBC,gBAAgBjqC,KAAMmqC,EAAAA,GAAAA,SAElEH,EAAkBI,YACpBF,GAAAA,GAAmB,UAASF,EAAkBI,WAAWpqC,KAAMmqC,EAAAA,GAAAA,SAE7DH,EAAkBK,iBACpBH,GAAAA,GAAmB,UAASF,EAAkBK,gBAAgBrqC,KAAMmqC,EAAAA,GAAAA,SAElEH,EAAkBM,iBACpBJ,GAAAA,IAAkBK,EAAAA,EAAAA,IAAqBP,EAAkBM,iBAAkBH,EAAAA,GAAAA,QAC7E,IAGF/rC,GAASuJ,EAAAA,EAAAA,MACTvJ,EAAS,IACJA,EACHosC,mBAAoBrmC,IAEtBnC,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,6BAA6B,CAACf,EAAQgB,EAASC,KAC9D,MAAM,MACJqF,EAAK,EAAEmkC,EAAC,EAAE4B,EAAC,UAAEC,EAAS,WAAEC,EAAU,MAAEhsC,GAAQC,EAAAA,EAAAA,OAC1CS,EAEEurC,EAAyB,CAC7B5qC,GAAI+pC,KACJc,eAAgBnmC,EAChBmkC,EAAGD,GAA6BxqC,EAAQyqC,GA1CV,GA0Ce/8B,KAAKob,SAClB4jB,GAChCL,EAAGA,EA5C2B,GA4CvB3+B,KAAKob,SAAuC4jB,GACnDJ,YACAC,cAGF,OAAOhqC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B2sC,wBAAyB,KAAKrrC,EAAAA,EAAAA,IAAetB,EAAQO,GAAOosC,yBAA2B,GAAKH,IAC3FjsC,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,UACJiG,EAAS,OAAEzG,EAAM,MAAE6F,EAAK,aAAEsmC,GACxB3rC,EAEE8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAE3BsC,GAASuD,GAAS7F,IAAWT,EAAO+X,gBAIpCgF,EAAAA,EAAAA,IAAQ,uBAAwB,CACnCha,OACAmE,YACA2lC,SAAUvmC,EACVwmC,WAAYF,GACZ,KAGJ7rC,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,OACJR,EAAM,UAAEyG,EAAS,MAAE3G,GAAQC,EAAAA,EAAAA,OACzBS,EACEoqC,GAAW0B,EAAAA,EAAAA,IAAsB/sC,EAAQS,GACzCgF,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQyG,GAE7CmkC,GAAa5lC,KAAWunC,EAAAA,EAAAA,IAAevnC,IAE5CzE,EAAQisC,eAAe,CACrBxsC,SACAyG,YACAmkC,WACA9qC,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,kBAAkBmZ,MAAOla,EAAQgB,EAASC,KACzD,MAAM,OACJR,EAAM,SACN4qC,EAAQ,kBACR6B,EAAiB,MACjB3sC,GAAQC,EAAAA,EAAAA,OACNS,EACJ,IAAI,UAAEiG,GAAcjG,EAEpB,MAAM8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAIgF,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQyG,GAEhD,IAAKnE,IAAS0C,EACZ,OAGF,MAAM0nC,EAAoB3lC,QAAQ/B,EAAQoE,aAAepE,EAAQ2nC,UAC3DC,EAA8BF,GAChCliC,EAAAA,EAAAA,IAA0BjL,EAAQS,EAAQgF,EAAQoE,WAAa,QAC/DhJ,EACJ4E,EAAU0nC,IACNz4B,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQ4sC,IAClC5nC,EACJyB,EAAYzB,GAAS7D,IAAMsF,EAE3B,MAAM8jC,GAAgBsC,EAAAA,EAAAA,IAAiB7nC,GACjC8nC,EAAcvC,EAAcwC,MAAMC,IAAiBjC,EAAAA,EAAAA,IAAeiC,EAAcpC,KAEhFqC,EAAmBH,EACrBvC,EAAchnC,QAAQypC,KAAkBjC,EAAAA,EAAAA,IAAeiC,EAAcpC,KAAa,IAAIL,EAAeK,GAEnGx1B,GAAQ83B,EAAAA,EAAAA,IAAuB3tC,GAC/BkrC,EAAYwC,EAAiB5gC,OAAO+I,GACpC1T,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GAExC,IAAIqtC,EAAAA,EAAAA,IAA+B5tC,EAAQ,mBAAoB,CAC7D,MAAM6tC,EAAqBN,GAAclsB,EAAAA,EAAAA,IAAKlf,EAASM,gBAAiB,CAACyE,IAAc,IAClF/E,EAASM,gBACZ,CAACyE,GAAY,IACP/E,EAASM,gBAAgByE,IAAc,GAC3C,CACEA,YACAmkC,cAINrrC,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9ByC,gBAAiBorC,GAChBttC,EACL,CAEAP,EAAS+qC,GAAmB/qC,EAAQyF,EAASylC,IAC7CtnC,EAAAA,EAAAA,IAAU5D,GAEV,UACQ+c,EAAAA,EAAAA,IAAQ,eAAgB,CAC5Bha,OACAmE,YACAgkC,YACAgC,qBAEJ,CAAE,MAAO91B,GAEPpX,EAAS+qC,GADT/qC,GAASuJ,EAAAA,EAAAA,MAC2B9D,EAASulC,IAC7CpnC,EAAAA,EAAAA,IAAU5D,EACZ,MAGFe,EAAAA,EAAAA,IAAiB,sBAAsB,CAACf,EAAQgB,EAASC,KACvD,MAAM,UAAEiG,EAAS,SAAEmkC,EAAQ,MAAE9qC,GAAQC,EAAAA,EAAAA,OAAsBS,EAErDkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,IAAK4B,EAASM,gBAAgByE,IAAYsmC,MAAMM,IAAWtC,EAAAA,EAAAA,IAAesC,EAAOzC,SAAUA,KACzF,OAAOrrC,EAGT,MAAM+tC,EAA4B5rC,EAASM,gBAAgByE,GACxDlD,QAAQ8pC,KAAYtC,EAAAA,EAAAA,IAAesC,EAAOzC,SAAUA,KAEjDwC,EAAqBE,EAA0B5tC,OAAS,IACzDgC,EAASM,gBACZ,CAACyE,GAAY6mC,IACX1sB,EAAAA,EAAAA,IAAKlf,EAASM,gBAAiB,CAACyE,IAEpC,OAAO3E,EAAAA,EAAAA,GAAevC,EAAQ,CAC5ByC,gBAAiBorC,GAChBttC,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,sBAAsBmZ,MAAOla,EAAQgB,EAASC,KAC7D,MAAM,SAAEoqC,GAAapqC,QAEA8b,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEsuB,gBAKrDrrC,GAASuJ,EAAAA,EAAAA,OAEG8nB,QAKZrxB,EAAS,IACJA,EACHqxB,OAAQ,IACHrxB,EAAOqxB,OACV2c,gBAAiB3C,KAGrBznC,EAAAA,EAAAA,IAAU5D,IAXRgB,EAAQitC,aAWO,KAGnBltC,EAAAA,EAAAA,IAAiB,8BAA8B,CAACf,EAAQgB,EAASC,KAC/D,MAAM,GAAEW,EAAE,MAAErB,GAAQC,EAAAA,EAAAA,OAAsBS,EAE1C,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B2sC,yBAAyBrrC,EAAAA,EAAAA,IAAetB,EAAQO,GAC7CosC,yBAAyB3oC,QAAQ8pC,GAAWA,EAAOlsC,KAAOA,KAC5DrB,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,gBAAgBmZ,MAAOla,EAAQgB,EAASC,KACvD,MAAM,OAAER,EAAM,UAAEyG,EAAS,SAAEmkC,GAAapqC,EAClC8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1BgF,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQyG,GAClD,IAAKnE,IAAS0C,EACZ,OAGF,MAAM8J,EAAS9J,EAAQyoC,UAAUrnB,WAC3B9gB,QAAegX,EAAAA,EAAAA,IAAQ,4BAA6B,CACxDsuB,WACAtoC,OACAmE,YACAqI,WAGGxJ,IAIL/F,GAASuJ,EAAAA,EAAAA,MAELxD,EAAOiX,OAAO7c,SAChBH,GAAS6d,EAAAA,EAAAA,IAAS7d,GAAQyd,EAAAA,EAAAA,IAAqB1X,EAAOiX,MAAO,QAG/Dhd,GAAS+gB,EAAAA,EAAAA,IAAkB/gB,EAAQS,EAAQyG,EAAW,CACpDgnC,SAAUnoC,KAEZnC,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,IAAEgJ,EAAG,OAAExJ,GAAWQ,EAElB8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAE3BsC,IAILga,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE9S,MAAKlH,QAAO,KAGjDhC,EAAAA,EAAAA,IAAiB,gCAAgC,CAACf,EAAQgB,EAASC,KACjE,MAAM,OACJR,EAAM,SAAEosC,EAAQ,EAAEpC,EAAC,EAAE4B,EAAC,UAAEC,EAAS,WAAEC,EAAU,GAAE3qC,EAAE,MAAErB,GAAQC,EAAAA,EAAAA,OACzDS,EAEE8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAE1B0B,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,GAAKwC,GAASZ,EAASwqC,yBAAyBa,MAAMW,GAAgBA,EAAYvsC,KAAOA,KACpFnB,IAAWT,EAAO+X,cAMvB,OAFAgF,EAAAA,EAAAA,IAAQ,+BAAgC,CAAEha,OAAM8pC,cAEzCtqC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B2sC,wBAAyBxqC,EAASwqC,wBAAwBnnC,KAAKgnC,GACzDA,EAAuB5qC,KAAOA,EACzB,IACF4qC,EACH/B,EAAGD,GAA6BxqC,EAAQyqC,GACxC4B,IACAC,YACAC,cAGGC,KAERjsC,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwBmZ,MAAOla,EAAQgB,EAASC,KAC/D,MAAM,OAAER,EAAM,SAAE6b,GAAarb,EACvB8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EAAM,OAEX,MAAMgD,QAAegX,EAAAA,EAAAA,IAAQ,uBAAwB,CAAEha,OAAMuZ,WAAUM,UAAWN,GAAY,OAAIzb,IAGlG,IAAKkF,IAAWA,EAAOR,SAASpF,OAO9B,OALAH,EAAS0rC,GADT1rC,GAASuJ,EAAAA,EAAAA,MAC8B9I,EAAQ,CAC7C2tC,qBAAsB,SAGxBxqC,EAAAA,EAAAA,IAAU5D,GAIZ,MAAM,SAAEuF,EAAQ,MAAEuJ,EAAK,MAAEkO,GAAUjX,EAE7ByX,GAAOC,EAAAA,EAAAA,IAAqBlY,EAAU,MACtC0E,EAAMnC,OAAOC,KAAKyV,GAAMhY,IAAI0C,QAElClI,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS0d,EAAAA,EAAAA,IAAoB1d,EAAQ+C,EAAKnB,GAAI4b,GAC9Cxd,GAAS6d,EAAAA,EAAAA,IAAS7d,GAAQyd,EAAAA,EAAAA,IAAqBT,EAAO,OAEtDhd,EAAS0rC,GADT1rC,GAAS8d,EAAAA,EAAAA,IAAS9d,GAAQyd,EAAAA,EAAAA,IAAqB3O,EAAO,OACfrO,EAAQ,CAC7C4tC,gBAAiB,IAAKtrC,EAAKsrC,iBAAmB,MAAQpkC,MAGxDrG,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,WAAE+D,EAAU,MAAEzE,GAAQC,EAAAA,EAAAA,OAAsBS,EAE5C8B,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GACvC,GAAKwC,EAAL,CAEA,GAAIA,EAAKqrC,qBAAsB,CAC7B,MAAMA,EAAuBrrC,EAAKqrC,qBAAuBppC,EAAW7E,OAC9DkuC,GAAmBtrC,EAAKsrC,iBAAmB,IAAIrqC,QAAQpC,IAAQoD,EAAWyF,SAAS7I,KAEzF5B,EAAS0rC,GAAsB1rC,EAAQ+C,EAAKnB,GAAI,CAC9CysC,qBAGFzqC,EAAAA,EAAAA,IAAU5D,IAELquC,EAAgBluC,QAAUiuC,GAC7BptC,EAAQstC,qBAAqB,CAAE7tC,OAAQsC,EAAKnB,GAAI0a,SAAU5O,KAAKm9B,OAAO7lC,IAE1E,CAIA,GAFAhE,EAAQioB,iBAAiB,CAAEjkB,aAAYzE,YAEnCqtC,EAAAA,EAAAA,IAA+B5tC,EAAQ,mBAI3C,OAFAA,GAASuJ,EAAAA,EAAAA,OAEFhH,EAAAA,EAAAA,GAAevC,EAAQ,CAC5ByC,gBAAiB,KACZnB,EAAAA,EAAAA,IAAetB,EAAQO,GAAOkC,mBAC9BqF,OAAOymC,YAAYvpC,EAAWQ,KAAK0B,IACpC,MAAMzB,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQ+C,EAAKnB,GAAIsF,GAEnD,IAAKzB,EAAS,OAEd,MAAM+oC,EAAS/oC,EAAQylC,WAAWO,iBAAiBznC,QAAO5D,IAAA,IAAC,SAAE6N,GAAU7N,EAAA,OAAK6N,CAAQ,IAEpF,IAAKugC,EAAQ,OAEb,MAAMtD,EAAYsD,EAAOhpC,KAAKqM,GAAWA,EAAOw5B,WAEhD,MAAO,CAACnkC,EAAWgkC,EAAU1lC,KAAK+lC,IAAC,CACjCrkC,YACAmkC,SAAUE,MACR,IACHvnC,OAAOwD,YAEXjH,EA3CwB,CA2ClB,KAGXQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5C8B,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GAElCwC,GAAMsrC,iBAEXrtC,EAAQwH,aAAa,CAAE/H,OAAQsC,EAAKnB,GAAIsF,UAAWnE,EAAKsrC,gBAAgB,GAAI9tC,SAAQ,KAGtFQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5C8B,GAAO+I,EAAAA,EAAAA,IAAkB9L,EAAQO,GACvC,GAAKwC,EAIL,OAFAga,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEha,SAEvB2oC,GAAsB1rC,EAAQ+C,EAAKnB,GAAI,CAC5CwsC,0BAAsBvtC,EACtBwtC,qBAAiBxtC,GACjB,KAGJE,EAAAA,EAAAA,IAAiB,oBAAoBmZ,UACnC,MAAMnU,QAAegX,EAAAA,EAAAA,IAAQ,oBAAqB,CAAC,GAC9ChX,IAIL/F,GAASuJ,EAAAA,EAAAA,MACTvJ,EAAS,IACJA,EACHyuC,aAAc1oC,EAAOmlC,YAEvBtnC,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,uBAAuBmZ,UACtC,MAAMnU,QAAegX,EAAAA,EAAAA,IAAQ,uBAAwB,CAAC,GACjDhX,IAIL/F,GAASuJ,EAAAA,EAAAA,MACTvJ,EAAS,IACJA,EACHyrC,gBAAiB1lC,EAAOmlC,YAE1BtnC,EAAAA,EAAAA,IAAU5D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,wBAAwBmZ,gBAClB6C,EAAAA,EAAAA,IAAQ,0BAK7B/c,GAASuJ,EAAAA,EAAAA,MACTvJ,EAAS,IACJA,EACHyrC,gBAAiB,KAEnB7nC,EAAAA,EAAAA,IAAU5D,GAAO,KCncnBe,EAAAA,EAAAA,IAAiB,kBAAkBmZ,MAAOla,EAAQgB,EAASC,KACzD,MAAM,OAAER,EAAM,QAAEiuC,EAAO,MAAEnuC,GAAQC,EAAAA,EAAAA,OAAsBS,EACjD8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1B6pB,GAAWqkB,EAAAA,EAAAA,IAAmB3uC,EAAQS,GAC5C,IAAKsC,IAASunB,EACZ,OAGF,MAAMvkB,QAAegX,EAAAA,EAAAA,IACnB2xB,EAAU,uBAAyB,yBACnC,CAAE3rC,OAAM6rC,KAAMtkB,EAASukB,iBAEzB,IAAK9oC,EACH,OAGF/F,GAASuJ,EAAAA,EAAAA,MACT,MAAM,MAAEulC,EAAK,MAAE9xB,GAAUjX,EAIzB,GAFA/F,GAAS6d,EAAAA,EAAAA,IAAS7d,GAAQyd,EAAAA,EAAAA,IAAqBT,EAAO,OAElD,sBAAuB8xB,GAASA,EAAMC,kBAAkB5uC,OAAQ,CAClE,MAAMoF,GAAWD,EAAAA,EAAAA,IAAmBtF,EAAQS,GAE5CquC,EAAMC,kBAAoBD,EAAMC,kBAAkBvpC,KAAKC,IAAO,IAAWA,KAAYF,EAASE,EAAQupC,UACxG,CAEAhvC,GAASivC,EAAAA,EAAAA,IAAiBjvC,EAAQS,EAAQquC,EAAOvuC,IACjDqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,yBAAyBmZ,MAAOla,EAAQgB,EAASC,KAChE,MAAM,OAAER,EAAM,UAAEyG,EAAS,MAAE3G,GAAQC,EAAAA,EAAAA,OAAsBS,EACnD8B,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1B6pB,GAAWqkB,EAAAA,EAAAA,IAAmB3uC,EAAQS,GAC5C,IAAKsC,IAASunB,EACZ,OAGF,MAAMskB,EAAOtkB,EAASukB,eACtB,IAAI9oC,QAAegX,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEha,OAAMmE,YAAW0nC,SACnE7oC,IACHA,EAAS,CAAC,GAGZ/F,GAASuJ,EAAAA,EAAAA,MAET,MAAM,MAAE8iB,EAAK,SAAEC,IAAahnB,EAAAA,EAAAA,IAAmBtF,EAAQS,GAAQyG,GAC/DnB,EAAOsmB,MAAQA,EACftmB,EAAOumB,SAAWA,EAElB,MAAM4iB,QAAuBnyB,EAAAA,EAAAA,IAAQ,6BAA8B,CAAEha,OAAMmE,YAAW0nC,SACtF7oC,EAAOmpC,eAAiBA,GAAgB/uC,OACxC4F,EAAOopC,mBAAqBD,EAE5BlvC,GAASuJ,EAAAA,EAAAA,MAETvJ,GAASovC,EAAAA,EAAAA,IAAwBpvC,EAAQ+F,EAAQxF,IACjDqD,EAAAA,EAAAA,IAAU5D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,4BAA4BmZ,MAAOla,EAAQgB,EAASC,KACnE,MAAM,OACJR,EAAM,MAAEsnC,EAAK,KAAEsH,EAAI,aAAEC,EAAY,MAAE/uC,GAAQC,EAAAA,EAAAA,OACzCS,EACEqpB,GAAWqkB,EAAAA,EAAAA,IAAmB3uC,EAAQS,GAC5C,IAAK6pB,EACH,OAGF,MAAMskB,EAAOtkB,EAASukB,eAChB9oC,QAAegX,EAAAA,EAAAA,IAAQ,4BAA6B,CAAEgrB,QAAO6G,OAAMU,iBAEpEvpC,IAIL/F,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASuvC,EAAAA,EAAAA,IAAsBvvC,EAAQS,EAAQ4uC,EAAMtpC,EAAQxF,IAC7DqD,EAAAA,EAAAA,IAAU5D,GAAO,I,0BCxDnBe,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASorB,KAC9C,OAAQA,EAAO,UACb,IAAK,aAAc,CACjB,MAAQnpB,QAASusC,EAAW,wBAAEC,IAA4BzsC,EAAAA,EAAAA,IAAWhD,EAAQosB,EAAOxqB,KAAO,CAAC,EAsC5F,OApCIwqB,EAAOrpB,KAAK0sC,yBAA2BA,GACtCrjB,EAAOrpB,KAAK0sC,wBAA0BA,IACzCrjB,EAAS,IACJA,EACHrpB,MAAMse,EAAAA,EAAAA,IAAK+K,EAAOrpB,KAAM,CAAC,6BAI7B/C,GAAS4jB,EAAAA,EAAAA,IAAW5jB,EAAQosB,EAAOxqB,GAAIwqB,EAAOrpB,KAAMqpB,EAAOsjB,kBAC3D9rC,EAAAA,EAAAA,IAAU5D,GAELosB,EAAOujB,oBAAsBC,EAAAA,EAAAA,GAAmB5vC,EAAQosB,EAAOxqB,KAElEZ,EAAQ6uC,eAGNzjB,EAAOrpB,KAAKnB,KACdkuC,EAAAA,GAAAA,IAA0B,CACxBrvC,OAAQ2rB,EAAOrpB,KAAKnB,GACpBwkB,uBAAwBgG,EAAOrpB,KAAKqjB,8BAIxCte,OAAOmR,OAAOjZ,EAAOkZ,SAASxN,SAAQtL,IAAmB,IAAhBwB,GAAIrB,GAAOH,EAClD,MAAQK,OAAQq3B,IAAkBn3B,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACxEwvC,EAAa3jB,EAEf0L,IAAkBiY,EAAWnuC,IAC5B,YAAamuC,EAAWhtC,MAAQysC,IAAgBO,EAAWhtC,KAAKE,UAC/DusC,GACFxuC,EAAQoC,gBAAgB,CAAE7C,UAE5BS,EAAQ6C,SAAS,CAAEjC,GAAIk2B,EAAev3B,UACxC,GAIJ,CAEA,IAAK,iBAAkB,CACrB,MAAM62B,GAAW4Y,EAAAA,EAAAA,IAAmBhwC,EAAQosB,EAAOxqB,IACnD,IAAKw1B,EACH,OAGFp3B,GAASiwC,EAAAA,EAAAA,IAAkBjwC,EAAQo3B,EAAU,CAAChL,EAAOxqB,KACrD5B,GAAS4jB,EAAAA,EAAAA,IAAW5jB,EAAQosB,EAAOxqB,GAAI,CAAEsuC,aAAa,KACtDtsC,EAAAA,EAAAA,IAAU5D,GAEV,MAAM+C,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQosB,EAAOxqB,IAKvC,YAJImB,GACF/B,EAAQmvC,kBAAkB,CAAE1vC,OAAQsC,EAAKnB,KAI7C,CAEA,IAAK,kBACH,OAAOwuC,EAAAA,EAAAA,IAAUpwC,EAAQosB,EAAOxqB,IAGlC,IAAK,kBACH,OAAOgiB,EAAAA,EAAAA,IAAW5jB,EAAQosB,EAAOxqB,GAAIwqB,EAAOrpB,MAG9C,IAAK,yBAA0B,CAC7B,MAAM,GAAEnB,EAAE,SAAElB,EAAWmB,EAAAA,GAAc,aAAEwuC,GAAiBjkB,EAaxD,OAZApsB,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQ4B,EAAIlB,EAAU,eAAgB2vC,IAClEzsC,EAAAA,EAAAA,IAAU5D,QAEVsJ,YAAW,KACTtJ,GAASuJ,EAAAA,EAAAA,MACT,MAAM+mC,GAAsBC,EAAAA,EAAAA,IAAkBvwC,EAAQ4B,EAAIlB,EAAU,gBAChE2vC,GAAgBC,GAAuBD,EAAa7b,YAAc8b,EAAoB9b,YACxFx0B,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQ4B,EAAIlB,EAAU,oBAAgBG,IAClE+C,EAAAA,EAAAA,IAAU5D,GACZ,GAnF0B,IAuF9B,CAEA,IAAK,aAAc,CACjB,MAAM,QAAEyF,GAAY2mB,EAEpB,GAAI3mB,EAAQoP,WAAa7U,EAAO+X,gBAAkBtS,EAAQ+qC,gBACxD,OAGF,MAAMztC,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQosB,EAAO3rB,QACvC,IAAKsC,EACH,OAGF,MAAM0tC,EAAajpC,QAAQ4kB,EAAO3mB,QAAQ7D,IAAMwqB,EAAO3mB,QAAQirC,kBAoB/D,OAlBA1wC,GAAS4jB,EAAAA,EAAAA,IAAW5jB,EAAQosB,EAAO3rB,OAAQ,CACzCqlB,YAAa/iB,EAAK+iB,YAAc/iB,EAAK+iB,YAAc,EAAI,KACnD2qB,GAAc,CAAEvnB,qBAAsBnmB,EAAKmmB,qBAAuB,GAAK,KAGzEunB,IACFzwC,GAAS4jB,EAAAA,EAAAA,IAAW5jB,EAAQosB,EAAO3rB,OAAQ,CACzCuoB,eAAgB,IAAKjmB,EAAKimB,gBAAkB,GAAKoD,EAAO3mB,QAAQ7D,QAIpEgC,EAAAA,EAAAA,IAAU5D,QAEV2wC,EAAAA,GAAAA,IAAmB,CACjB5tC,OACA0C,WAIJ,CAEA,IAAK,0BACL,IAAK,wBAAyB,CAC5B,MAAM,IAAEwE,EAAG,cAAE2mC,GAAkBxkB,EAC/B,IAAuC,IAAnCwkB,EAAcF,iBAChB,OAsBF,OAnBAzmC,EAAIyB,SAAS9J,IACX,MAAMnB,EAAU,cAAe2rB,EAASA,EAAOykB,WAAYC,EAAAA,EAAAA,IAAsB9wC,EAAQ4B,GACnFmB,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAE5BsC,GAAMqrC,uBACRpuC,EAAS0rC,GAAsB1rC,EAAQS,EAAQ,CAC7C2tC,qBAAuBrrC,EAAKqrC,qBAAuB,QAAMvtC,EACzDwtC,gBAAiBtrC,EAAKsrC,iBAAiBrqC,QAAQ4a,GAAMA,IAAMhd,OAI3DmB,GAAMmmB,sBACRlpB,GAAS4jB,EAAAA,EAAAA,IAAW5jB,EAAQS,EAAQ,CAClCyoB,oBAAsBnmB,EAAKmmB,oBAAsB,QAAMroB,EACvDmoB,eAAgBjmB,EAAKimB,gBAAgBhlB,QAAQ4a,GAAMA,IAAMhd,MAE7D,IAGK5B,CACT,CAEA,IAAK,qBACH,OAAO0oB,EAAAA,EAAAA,IAAmB1oB,EAAQosB,EAAOxqB,GAAIwqB,EAAO9B,UAGtD,IAAK,sBAAuB,CAC1B,MAAM,IAAErgB,EAAG,SAAE8mC,GAAa3kB,EACpBgL,EAAW2Z,IAAaC,EAAAA,IAAqB,WAAa,SAEhE,MAAO,IACFhxC,EACH8O,MAAO,IACF9O,EAAO8O,MACVmiC,iBAAkB,IACbjxC,EAAO8O,MAAMmiC,iBAChB,CAAC7Z,GAAWntB,EAAI9J,OAAS8J,OAAMpJ,IAIvC,CAEA,IAAK,mBAAoB,CACvB,MAAM,GAAEe,EAAE,SAAE4iB,GAAa4H,EACnBgL,GAAW4Y,EAAAA,EAAAA,IAAmBhwC,EAAQ4B,GAC5C,IAAKw1B,EACH,OAGF,MAAQ,CAACA,GAAW6Z,GAAqBjxC,EAAO8O,MAAMmiC,iBAEtD,IAAIC,EAAsBD,GAAoB,GAC9C,GAAKzsB,GAEE,IAAK0sB,EAAoBzmC,SAAS7I,GAAK,CAK5C,GAAiB,WAAbw1B,GAAyB8Z,EAAoB/wC,QAAUgxC,EAAAA,IAAyB,CAClF,MAAMC,EAAUpxC,EAAO8O,MAAMsiC,QAAQtD,OACrCoD,EAAsBA,EAAoBltC,QAAQqtC,GAAaD,GAAWA,EAAQ3mC,SAAS4mC,IAC7F,CAEAH,EAAsB,CAACtvC,KAAOsvC,EAChC,OAZEA,EAAsBA,EAAoBltC,QAAQqtC,GAAaA,IAAazvC,IAc9E,MAAO,IACF5B,EACH8O,MAAO,IACF9O,EAAO8O,MACVmiC,iBAAkB,IACbjxC,EAAO8O,MAAMmiC,iBAChB,CAAC7Z,GAAW8Z,EAAoB/wC,OAAS+wC,OAAsBrwC,IAIvE,CAEA,IAAK,qBAAsB,CACzB,MAAM,GAAEe,EAAE,SAAEmvC,GAAa3kB,EAEzB,OAAOklB,EAAAA,EAAAA,IAAmBtxC,EAAQ4B,EAAImvC,EACxC,CAEA,IAAK,mBAAoB,CACvB,MAAM,GAAEnvC,EAAE,OAAEojB,GAAWoH,GACf5O,KAAM+zB,EAAe,WAAEltC,GAAerE,EAAO+kB,YAE/C3H,OAAuBvc,IAAXmkB,EAElBld,OAAOmR,OAAOjZ,EAAOkZ,SAASxN,SAAQkC,IAAmB,IAAhBhM,GAAIrB,GAAOqN,EAClD,MAAMzL,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACjBuH,OAAOmR,OAAOs4B,GAAiBpvC,EAASqvC,iBAAmB,IAAI5vC,KAAOA,IAG3F5B,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAAEwxC,iBAAkB,GAAKjxC,GAC3D,IAGF,MAAMkxC,EAAsBr0B,GAAmDiE,EAAAA,EAAAA,IAAKkwB,EAAiB,CAAC3vC,IAA9D,IAAK2vC,EAAiB,CAAC3vC,GAAKojB,GAC9D0sB,EAAiBt0B,EAEnB/Y,GAAYL,QAAQ2tC,GAAcA,IAAc/vC,IADhDyC,GAAYoG,SAAS7I,GAAMyC,EAAa,IAAKA,GAAc,GAAKzC,GAGpE,MAAO,IACF5B,EACH+kB,YAAa,IACR/kB,EAAO+kB,YACVvH,KAAMi0B,EACNptC,WAAYqtC,GAGlB,CAEA,IAAK,yBAA0B,CAC7B,MAAM,WAAErtC,GAAe+nB,EAEvB,MAAO,IACFpsB,EACH+kB,YAAa,IACR/kB,EAAO+kB,YACV1gB,cAGN,CAEA,IAAK,+BAAgC,CACnC,MAAM,QAAEygB,GAAYsH,EAEpB,MAAO,IACFpsB,EACH+kB,YAAa,IACR/kB,EAAO+kB,YACV6sB,YAAa9sB,GAGnB,CAEA,IAAK,oBAAqB,CACxB,MAAM+sB,GAAqBlD,EAAAA,EAAAA,IAAmB3uC,EAAQosB,EAAOxqB,KACvD,gBAAEkwC,EAAe,YAAEC,EAAW,gBAAEC,GAAoB5lB,EAC1D,IAAKylB,EACH,OAGF,IAAII,GAAe,EACfC,EAAUL,GAAoBK,QAC9B,IAAIL,EAAmBK,SACvB,GAEJ,GAAIJ,EACFI,EAAUJ,EACVG,GAAe,OACV,GAAIF,EAENG,EAAQ/xC,QACL+xC,EAAQ1E,MAAMlmB,GAAMA,EAAE1X,SAAWmiC,EAAYniC,WAEjDsiC,EAAQ9rC,KAAK2rC,GACbE,GAAe,QAEZ,GAAIC,EAAQ/xC,QAAU6xC,EAAiB,CAC5C,MAAMG,EAAcD,EAAQn/B,WAAWuU,GAAMA,EAAE1X,SAAWoiC,IACtDG,GAAe,IACjBD,EAAQplC,MAAMqlC,EAAa,GAC3BF,GAAe,EAEnB,CAEA,GAAIA,EAAc,CAChB,MAAMG,EAAeF,EAAQluC,QAAO0Y,IAAA,IAAC,QAAE21B,EAAO,QAAEC,GAAS51B,EAAA,OAAK21B,GAAWC,CAAO,IAShF,OANAtyC,GAAS4jB,EAAAA,EAAAA,IAAW5jB,EAAQosB,EAAOxqB,GAAI,CAAE2wC,aAAcL,EAAQ/xC,SAC/DH,GAAS0oB,EAAAA,EAAAA,IAAmB1oB,EAAQosB,EAAOxqB,GAAI,CAC7CswC,UACAM,kBAAkB/0B,EAAAA,EAAAA,IAAqB20B,EAAc,WAIzD,CAEA,MACF,CAEA,IAAK,sBAAuB,CAC1B,MAAM,OAAE3xC,EAAM,IAAEwJ,GAAQmiB,EAClBrpB,EAAO/C,EAAO8O,MAAM0O,KAAK/c,GAE/B,OAAIsC,GAAMy4B,QACD5X,EAAAA,EAAAA,IAAW5jB,EAAQS,EAAQ,CAChC+6B,OAAQz4B,EAAKy4B,OAAOx3B,QAAQ21B,IAAW1vB,EAAIQ,SAASkvB,EAAM/3B,aAI9D,CACF,CAEA,IAAK,eAAgB,CACnB,MAAM,OACJnB,EAAM,cAAEgyC,EAAa,KAAEvlC,EAAI,aAAExF,EAAY,SAAEhH,GACzC0rB,EAEJ,IADapsB,EAAO8O,MAAM0O,KAAK/c,GAE7B,OAMF,OAHAT,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQC,GAAYmB,EAAAA,GAAgB,QAAS4wC,GACjFzyC,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQC,GAAYmB,EAAAA,GAAgB,eAAgB6F,GACxF1H,GAAS4jB,EAAAA,EAAAA,IAAW5jB,EAAQS,EAAQ,CAAEojB,UAAW3W,GAEnD,CAEA,IAAK,aAAc,CACjB,MAAM,KAAE6G,GAASqY,EAMjB,YAJAtkB,OAAOmR,OAAOjZ,EAAOkZ,SAASxN,SAAQyR,IAAmB,IAAhBvb,GAAIrB,GAAO4c,EAClDnc,EAAQ0pB,WAAW,CAAE3W,OAAMxT,SAAQ,GAIvC,CAEA,IAAK,4BAA6B,CAChC,MAAM,OAAEE,EAAM,gBAAEi2B,EAAe,mBAAED,GAAuBrK,EAExD,IADapsB,EAAO8O,MAAM0O,KAAK/c,GAE7B,OAUF,OAPAT,GAAS0oB,EAAAA,EAAAA,IAAmB1oB,EAAQS,EAAQ,CAC1Ci2B,kBACAD,wBAEF7yB,EAAAA,EAAAA,IAAU5D,QAEVgB,EAAQ0xC,qBAAqB,CAAEjyC,UAEjC,CAEA,IAAK,oBAAqB,CACxB,MAAM,OAAEA,EAAM,QAAE4V,EAAO,SAAEmO,GAAa4H,EAGtC,IADapsB,EAAO8O,MAAM0O,KAAK/c,GAE7B,OAQF,OALAT,GAASsmB,EAAAA,EAAAA,IAAYtmB,EAAQS,EAAQ4V,EAAS,CAC5CmO,kBAEF5gB,EAAAA,EAAAA,IAAU5D,EAGZ,CAEA,IAAK,0BAA2B,CAC9B,MAAM,OAAES,EAAM,MAAE2R,GAAUga,EAG1B,IADapsB,EAAO8O,MAAM0O,KAAK/c,GACpB,OAOX,OALAT,GAAS4jB,EAAAA,EAAAA,IAAW5jB,EAAQS,EAAQ,CAClCkyC,sBAAuBvgC,SAEzBxO,EAAAA,EAAAA,IAAU5D,EAGZ,CAEA,IAAK,cAAe,CAClB,MAAM,OAAES,EAAM,QAAE4V,GAAY+V,EAEtBrpB,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,GAAME,QAAS,OAIpB,YAFAjC,EAAQ63B,cAAc,CAAEp4B,SAAQ4V,WAGlC,CAEA,IAAK,eAAgB,CACnB,MAAM,OAAE5V,GAAW2rB,EAEbrpB,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,GAAME,QAAS,OAIpB,YAFAjC,EAAQ43B,WAAW,CAAEn4B,SAAQqQ,OAAO,GAGtC,EAGc,I,gBCvYlB,MAAM8hC,GAAkB,IA8lBxB,SAASC,GACP7yC,EACAS,EACAmB,EACAspC,EACAnoC,EACAuK,EACA7H,GAEA,MAAMwlC,EAAmBxlC,GAASylC,UAGlC,GAAID,IAAoB6H,EAAAA,GAAAA,GAAa5H,EAAWD,GAC9C,OAAOjrC,EAKT,GAFAA,GAAS+gB,EAAAA,EAAAA,IAAkB/gB,EAAQS,EAAQmB,EAAI,CAAEspC,eAE5C59B,EACH,OAAOtN,EAGT,MAAM+yC,EAA2BhwC,EAAKsrC,iBAAiB5jC,SAAS7I,GAGhE,IAAIoxC,EAAAA,EAAAA,IAA0BhzC,EAAQkrC,KAAe6H,EAA0B,CAC7E/yC,EAAS0rC,GAAsB1rC,EAAQS,EAAQ,CAC7C2tC,sBAAuBrrC,GAAMqrC,sBAAwB,GAAK,EAC1DC,gBAAiB,IAAKtrC,GAAMsrC,iBAAmB,GAAKzsC,KAGtD,MAAMqxC,GAAav+B,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQmB,GAErD,IAAKmB,IAASkwC,EAAY,OAAOjzC,GAEjCwgB,EAAAA,EAAAA,KAAU,MACRmwB,EAAAA,GAAAA,IAAmB,CACjB5tC,OACA0C,QAASwtC,EACTC,YAAY,GACZ,GAEN,MAAWH,IACT/yC,EAAS0rC,GAAsB1rC,EAAQS,EAAQ,CAC7C2tC,sBAAuBrrC,GAAMqrC,sBAAwB,GAAK,EAC1DC,gBAAiBtrC,GAAMsrC,iBAAiBrqC,QAAQ4a,GAAMA,IAAMhd,OAIhE,OAAO5B,CACT,CAEA,SAASmzC,GACPnzC,EAA6BS,EAAgBmB,EAAYgvC,GACzD,IAD6FwC,EAAWlzC,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GAExG,MAAMmzC,EAAiBD,GACnBtrB,EAAAA,EAAAA,IAAuB9nB,EAAQS,EAAQmB,IACvC8S,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQmB,GAGtC,GAAIyxC,GAAkBzC,EAAcxjC,QAAS,CAC3C,MAAM,MACJusB,EAAK,MAAE2Z,EAAK,QAAE1hC,EAAO,SAAE1B,IACrBqjC,EAAAA,EAAAA,IAAkBF,GAClB1Z,GAASiX,EAAcxjC,QAAQusB,OACjCiX,EAAcxjC,QAAQusB,MAAM6Z,QAAU7Z,EAAM6Z,QAC5C5C,EAAcxjC,QAAQusB,MAAM8Z,UAAY9Z,EAAM8Z,WACrCH,GAAS1C,EAAcxjC,QAAQkmC,MACxC1C,EAAcxjC,QAAQkmC,MAAME,QAAUF,EAAME,QACnC5hC,GAAWg/B,EAAcxjC,QAAQwE,QAC1Cg/B,EAAcxjC,QAAQwE,QAAQ8hC,oBAAsB9hC,EAAQ8hC,oBACnDxjC,GAAY0gC,EAAcxjC,QAAQ8C,WAC3C0gC,EAAcxjC,QAAQ8C,SAASyjC,eAAiBzjC,EAASyjC,eAE7D,CAEA,MAAMV,EAAaI,EAAiB,IAAKA,KAAmBzC,GAAkBA,EAE9E,OAAOwC,GACHQ,EAAAA,EAAAA,IAAuB5zC,EAAQS,EAAQmB,EAAIqxC,IAC3ClyB,EAAAA,EAAAA,IAAkB/gB,EAAQS,EAAQmB,EAAIqxC,EAC5C,CAEA,SAASY,GACP7zC,EAAWgB,EAAgCyE,EAAqB0b,GAEhE,MAAM,OAAE1gB,GAAWgF,GAEb,WAAE2C,IAAe0rC,EAAAA,EAAAA,IAAsB9zC,EAAQyF,IAAY,CAAC,EAElE,IAAK2C,GAAc3C,EAAQwb,iBAAkB,CAC3C,MAAM8yB,GAAgBr/B,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQgF,EAAQwb,kBAC5D8yB,EACF/zC,GAASohB,EAAAA,EAAAA,IAAuCphB,EAAQ+zC,EAAetzC,EAAQgF,EAAQ7D,GAAIuf,GAE3FngB,EAAQkgB,YAAY,CAClBzgB,SACAyG,UAAWzB,EAAQwb,iBACnBJ,aAAc,CACZM,aACA7Y,cAAe7C,EAAQ7D,KAI/B,CAEA,OAAO5B,CACT,CAEA,SAASg0C,GACPh0C,EAAWgB,EAAgCyE,GAE3C,MAAM,GAAE7D,EAAE,OAAEnB,GAAWgF,GAEjB,WAAE2C,EAAU,eAAE6rC,IAAmBH,EAAAA,EAAAA,IAAsB9zC,EAAQyF,IAAY,CAAC,EAE5E1C,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1ByzC,EAAwBnxC,GAAM+iB,eAAgB7H,EAAAA,EAAAA,IAAgBje,EAAQS,EAAQoB,EAAAA,IA+BpF,OA7BA7B,EAAS6zC,GAAmB7zC,EAAQgB,EAASyE,GAEzC2C,KACE6rC,IAAmBjH,EAAAA,EAAAA,IAAevnC,KACpCzF,GAAS4d,EAAAA,EAAAA,IAAgB5d,EAAQS,EAAQ2H,EAAW1H,SAAU,CAACkB,IAE/DkG,OAAOmR,OAAOjZ,EAAOkZ,SAASxN,SAAQ6T,IAAmB,IAAhB3d,GAAIrB,GAAOgf,GAC9C3X,EAAAA,EAAAA,IAAuB5H,EAAQS,EAAQ2H,EAAW1H,SAAUH,KAC9DP,GAASm0C,EAAAA,EAAAA,IAAcn0C,EAAQS,EAAQ2H,EAAW1H,SAAUkB,EAAIrB,GAE3D0zC,IACHj0C,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQ2H,EAAW1H,SAAU,iBAAkB+E,EAAQ7D,KAE/F,KAIJ5B,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQ2H,EAAW1H,SAAU,aAAc,IAC1E0H,EACHE,cAAe7C,EAAQ7D,MAGpBorC,EAAAA,EAAAA,IAAevnC,KAClBzF,GAASmmB,EAAAA,EAAAA,IAAiBnmB,EAAQS,EAAQ2H,EAAW1H,SAAU,CAC7D+rB,eAAgBrkB,EAAWqkB,eAAiB,GAAK,MAKnDynB,IAIJl0C,GAAS4d,EAAAA,EAAAA,IAAgB5d,EAAQS,EAAQoB,EAAAA,GAAgB,CAACD,IAE1DkG,OAAOmR,OAAOjZ,EAAOkZ,SAASxN,SAAQ+f,IAAmB,IAAhB7pB,GAAIrB,GAAOkrB,EAClD,IAAI7jB,EAAAA,EAAAA,IAAuB5H,EAAQS,EAAQoB,EAAAA,GAAgBtB,GAAQ,CAEjE,MAAM6zC,GAAgBvuB,EAAAA,EAAAA,IAAoB7lB,EAAQS,EAAQoB,EAAAA,IACpDwyC,GAAkBF,EAAAA,EAAAA,IAAcn0C,EAAQS,EAAQoB,EAAAA,GAAgBD,EAAIrB,GACpEge,GAAiBlX,EAAAA,EAAAA,IAAkBgtC,EAAiB5zC,EAAQoB,EAAAA,GAAgBtB,GAE7E6zC,IAAiB71B,EAAgB9T,SAAS2pC,KAC7Cp0C,EAASq0C,EAEb,MAfOr0C,CAmBX,CAEA,SAASs0C,GACPt0C,EACAS,EACAgF,GAEA,IADAqL,EAAK5Q,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GAEL,MAAM,MAAE4O,GAAU9O,EACZ+C,EAAO+L,EAAM0O,KAAK/c,GAClB8zC,EAAqBxxC,GAAMoF,YAE3B+d,EAAQnjB,GAAME,SAAUuxC,EAAAA,EAAAA,IAAuBx0C,EAAQyF,QAAW5E,EAOxE,OANIqlB,IACFlmB,GAASsmB,EAAAA,EAAAA,IAAYtmB,EAAQS,EAAQylB,EAAMtkB,GAAI,CAC7C0G,cAAe7C,EAAQ7D,OAIvB2yC,GAAuBzjC,GAEvByjC,EAAmB3yC,KAAO6D,EAAQ7D,IAAM2yC,EAAmB3yC,KAAO6D,EAAQsI,iBACvEtI,EAAQ7D,GAAK2yC,EAAmB3yC,IAO9BgiB,EAAAA,EAAAA,IAAW5jB,EAAQS,EAAQ,CAAE0H,YAAa1C,IAJxCzF,CAOb,CAEA,SAASy0C,GAAuCz0C,EAAWS,GACzD,MAAM+c,GAAOlY,EAAAA,EAAAA,IAAmBtF,EAAQS,GAClCud,GAAYC,EAAAA,EAAAA,IAAgBje,EAAQS,EAAQoB,EAAAA,IAElD,IAAK2b,IAASQ,EACZ,OAGF,IAAIY,EAAIZ,EAAU7d,OAClB,KAAOye,KAAK,CACV,MAAMnZ,EAAU+X,EAAKQ,EAAUY,IAC/B,IAAKnZ,EAAQ0b,WACX,OAAO1b,CAEX,CAGF,CAEA,SAASivC,GACP10C,EAAWS,EAA4BwJ,EAAejJ,GAItD,GAAIP,EAAQ,CACV,MAAMsC,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EAAM,OAEXkH,EAAIyB,SAAS9J,IACX5B,GAAS+gB,EAAAA,EAAAA,IAAkB/gB,EAAQS,EAAQmB,EAAI,CAC7Cuf,YAAY,IAKd,MAAMwzB,EAAiBF,GAFvBz0C,GAAS40C,EAAAA,EAAAA,IAAwB50C,EAAQS,EAAQmB,GAEFnB,GAC3Ck0C,IACF30C,EAASs0C,GAAsBt0C,EAAQS,EAAQk0C,GAAgB,IAG7D5xC,EAAK0V,SAAS7W,KAChB5B,GAAS60C,EAAAA,EAAAA,IAAY70C,EAAQS,EAAQmB,GACvC,IAGFZ,EAAQmvC,kBAAkB,CAAE1vC,WAE5B,MAAMq0C,EAA8B,GA4BpC,OA1BA7qC,EAAIyB,SAAS9J,IACX,MAAM6D,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQmB,GAClD,IAAK6D,EACH,OAGFzF,EAAS6zC,GAAmB7zC,EAAQgB,EAASyE,GAAS,GAEtD,MAAM/E,GAAWgnB,EAAAA,EAAAA,IAA0B1nB,EAAQyF,GAC/C/E,GACFo0C,EAAkB1uC,KAAK1F,EACzB,KAGFkD,EAAAA,EAAAA,IAAU5D,QAEVsJ,YAAW,KACTtJ,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS+0C,EAAAA,EAAAA,IAAmB/0C,EAAQS,EAAQwJ,IAC5CrG,EAAAA,EAAAA,IAAU5D,IAEVkW,EAAAA,EAAAA,IAAO4+B,GAAmBppC,SAAShL,IACjCM,EAAQg0C,wBAAwB,CAAEv0C,SAAQC,YAAW,GACrD,GACDkyC,GAGL,CAIA,MAAMqC,EAA6B,GAEnChrC,EAAIyB,SAAS9J,IACX,MAAMszC,GAAkBpE,EAAAA,EAAAA,IAAsB9wC,EAAQ4B,GACtD,GAAIszC,EAAiB,CACnBD,EAAiB7uC,KAAK8uC,GAMtB,MAAMP,EAAiBF,GAJvBz0C,GAAS+gB,EAAAA,EAAAA,IAAkB/gB,EAAQk1C,EAAiBtzC,EAAI,CACtDuf,YAAY,IAGiC+zB,GAC3CP,IACF30C,EAASs0C,GAAsBt0C,EAAQk1C,EAAiBP,GAAgB,IAG1ErrC,YAAW,KACTtJ,GAASuJ,EAAAA,EAAAA,MACTvJ,GAAS+0C,EAAAA,EAAAA,IAAmB/0C,EAAQk1C,EAAiB,CAACtzC,KACtDgC,EAAAA,EAAAA,IAAU5D,EAAO,GAChB4yC,GACL,MAGFhvC,EAAAA,EAAAA,IAAU5D,IAEVkW,EAAAA,EAAAA,IAAO++B,GAAkBvpC,SAAS9J,IAChCZ,EAAQmvC,kBAAkB,CAAE1vC,OAAQmB,GAAK,GAE7C,EAn5BAb,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASorB,KAC9C,OAAQA,EAAO,UACb,IAAK,aAAc,CACjB,MAAM,OACJ3rB,EAAM,GAAEmB,EAAE,QAAE6D,EAAO,iBAAE0vC,GACnB/oB,EAEJpsB,EAASg0C,GADTh0C,EAASmzC,GAAqBnzC,EAAQS,EAAQmB,EAAI6D,GACNzE,EAASyE,GAEjDA,EAAQ+mB,oBACVxsB,GAASmmB,EAAAA,EAAAA,IACPnmB,EACAyF,EAAQ+mB,kBAAkB/rB,OAC1BgF,EAAQ+mB,kBAAkB9rB,SAC1B+E,EAAQ+mB,oBAIZ,MAAMymB,GAAav+B,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQmB,GAC/CmB,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC5BsC,GAAME,SACLgwC,EAAWmC,gBACVZ,EAAAA,EAAAA,IAAuBx0C,EAAQizC,IAChCA,EAAWhyB,kBACdjgB,EAAQ63B,cAAc,CAAEp4B,SAAQ4V,QAAS48B,EAAWhyB,mBAGtDnZ,OAAOmR,OAAOjZ,EAAOkZ,SAASxN,SAAQtL,IAAmB,IAAhBwB,GAAIrB,GAAOH,EAClD,MAAMujB,GAAUqpB,EAAAA,EAAAA,IAAevnC,GAC/B,IAAI4vC,EAAAA,EAAAA,IAAoCr1C,EAAQS,EAAQgF,EAAuBlF,GAAQ,CACrF,GAAIojB,GAAWle,EAAQ6H,aAAgB7H,EAAQ2H,SAAS6H,OAAS,CAC/D,MAAM/S,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GACxD2B,GAEFlB,EAAQwH,aAAa,CACnB/H,SACAC,SAAUwB,EAAmBxB,SAC7BwG,UAAWzB,EAAQ7D,GACnB4H,aAAa,EACbQ,qBAAqB,EACrBzJ,SAGN,CAEA,MAAM,WAAE6H,IAAe0rC,EAAAA,EAAAA,IAAsB9zC,EAAQyF,IAA0B,CAAC,EAC5E2C,IAAeub,GACjB3iB,EAAQg0C,wBAAwB,CAAEv0C,SAAQC,SAAU0H,EAAW1H,WAK5DijB,GACHra,YAAW,KACTtJ,GAASuJ,EAAAA,EAAAA,MACL4rC,IACFn1C,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQoB,EAAAA,GAAgB,eAAgBD,IAE9E5B,EAASs0C,GAAsBt0C,EAAQS,EAAQwyC,IAC/CrvC,EAAAA,EAAAA,IAAU5D,EAAO,GAChB4yC,GAEP,MACE5yC,EAASs0C,GAAsBt0C,EAAQS,EAAQwyC,EACjD,KAGFrvC,EAAAA,EAAAA,IAAU5D,IAGL4vC,EAAAA,EAAAA,GAAmB5vC,EAAQS,IAC9BO,EAAQ6uC,eAGV,KACF,CAEA,IAAK,8BACH/nC,OAAOmR,OAAOjZ,EAAOkZ,SAASxN,SAAQkC,IAAmB,IAAhBhM,GAAIrB,GAAOqN,EAClD,MAAQnN,OAAQq3B,IAAkBn3B,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAE9E,GAAIu3B,IAAkB1L,EAAOxqB,GAAI,OACjC,MAAM6D,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQ83B,EAAe1L,EAAOllB,WAEhE,IAAKzB,EAAS,OAGd,IAAI6vC,EAAAA,EAAAA,IAAe7vC,KAAa2mB,EAAO9lB,MAAO,OAE9C,MAAMnE,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxCP,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B2sC,wBAAyB,IAAKxqC,EAASwqC,yBAA2B,GAAK,CACrE/qC,GAAIO,EAASwqC,yBAAyBxsC,QAAU,EAChDssC,eAAgBrgB,EAAO9lB,MACvBY,UAAWklB,EAAOllB,aAEnB3G,EAAM,KAGXqD,EAAAA,EAAAA,IAAU5D,GAEV,MAGF,IAAK,sBAAuB,CAC1B,MAAM,OAAES,EAAM,GAAEmB,EAAE,QAAE6D,GAAY2mB,EAEhCpsB,EAASmzC,GAAqBnzC,EAAQS,EAAQmB,EAAI6D,GAAS,GAE3D,MAAMoiB,GAAe0tB,EAAAA,EAAAA,IAAmBv1C,EAAQS,EAAQoB,EAAAA,KAAmB,GAC3E7B,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQoB,EAAAA,GAAgB,gBAAgBqU,EAAAA,EAAAA,IAAO,IAAI2R,EAAcjmB,KAErG,MAAMlB,GAAWgnB,EAAAA,EAAAA,IAA0B1nB,EAAQyF,GACnD,GAAI/E,IAAamB,EAAAA,GAAgB,CAC/B,MAAM2zC,GAAqBD,EAAAA,EAAAA,IAAmBv1C,EAAQS,EAAQC,IAAa,GAC3EV,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQC,EAAU,gBAAgBwV,EAAAA,EAAAA,IAAO,IAAIs/B,EAAoB5zC,IACvG,EAEAgC,EAAAA,EAAAA,IAAU5D,GAEV,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAM,OAAES,EAAM,GAAEmB,EAAE,QAAE6D,GAAY2mB,EAE1BinB,GAAiB3+B,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQmB,GACnDmB,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAEhCT,EAASmzC,GAAqBnzC,EAAQS,EAAQmB,EAAI6D,GAElD,MAAMwtC,GAAav+B,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQmB,GACjD6D,EAAQ+mB,oBACVxsB,GAASmmB,EAAAA,EAAAA,IACPnmB,EACAyF,EAAQ+mB,kBAAkB/rB,OAC1BgF,EAAQ+mB,kBAAkB9rB,SAC1B+E,EAAQ+mB,oBAIR6mB,IACFrzC,EAASs0C,GAAsBt0C,EAAQS,EAAQwyC,IAG7CxtC,EAAQylC,WAAanoC,IACvB/C,EAAS6yC,GAAgB7yC,EAAQS,EAAQmB,EAAI6D,EAAQylC,UAAWnoC,EAAMkwC,EAAW3lC,WAAY+lC,IAG3F5tC,EAAQ2H,SAAStJ,MAAMA,OAASuvC,GAAgBjmC,SAAStJ,MAAMA,OACjE9D,GAAS40C,EAAAA,EAAAA,IAAwB50C,EAAQS,EAAQmB,KAGnDgC,EAAAA,EAAAA,IAAU5D,GAEV,KACF,CAEA,IAAK,yBAA0B,CAC7B,MAAM,OAAES,EAAM,GAAEmB,EAAE,QAAE6D,GAAY2mB,EAE1BinB,GAAiBvrB,EAAAA,EAAAA,IAAuB9nB,EAAQS,EAAQmB,GAC9D,IAAKyxC,EACH,OAGFrzC,EAASmzC,GAAqBnzC,EAAQS,EAAQmB,EAAI6D,GAAS,GAC3D,MAAMwE,EAAMnC,OAAOC,MAAK1C,EAAAA,EAAAA,IAA4BrF,EAAQS,IAAW,CAAC,GAAG+E,IAAI0C,QAAQtC,MAAK,CAACuhB,EAAGC,IAAMA,EAAID,IAC1GnnB,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQoB,EAAAA,GAAgB,eAAgBoI,GAE5E,MAAMvJ,GAAWgnB,EAAAA,EAAAA,IAA0B1nB,EAAQqzC,GACnD,GAAI3yC,IAAamB,EAAAA,GAAgB,CAC/B,MAAM2zC,GAAqBD,EAAAA,EAAAA,IAAmBv1C,EAAQS,EAAQC,IAAa,GAC3EV,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQC,EAAU,eAAgB80C,EAAmB5vC,MAAK,CAACuhB,EAAGC,IAAMA,EAAID,IAC9G,EACAvjB,EAAAA,EAAAA,IAAU5D,GAEV,KACF,CAEA,IAAK,6BAA8B,CACjC,MAAM,OAAES,EAAM,QAAEiS,EAAO,QAAEjN,GAAY2mB,EAErCpsB,EAASg0C,GAA2Bh0C,EAAQgB,EAASyE,GAErD,MAAM4tC,GAAiB3+B,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQiS,GAEzD1S,GAAS+0C,EAAAA,EAAAA,IAAmB/0C,EAAQS,EAAQ,CAACiS,IAGzCjN,EAAQ2tC,cACVpzC,GAASy1C,EAAAA,EAAAA,IAA4Bz1C,EAAQS,EAAQ,CAACiS,KAGxD1S,GAAS+gB,EAAAA,EAAAA,IAAkB/gB,EAAQS,EAAQgF,EAAQ7D,GAAI,IAClDyxC,KACA5tC,EACHsI,gBAAiB2E,IAGnB,MAAMugC,GAAav+B,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQgF,EAAQ7D,IAC7D5B,EAASs0C,GAAsBt0C,EAAQS,EAAQwyC,GAE/C,MAAMyC,GAAS5B,EAAAA,EAAAA,IAAsB9zC,EAAQyF,GAE7CqC,OAAOmR,OAAOjZ,EAAOkZ,SAASxN,SAAQgR,IAAmB,IAAhB9a,GAAIrB,GAAOmc,EAClD,MAAQjc,OAAQq3B,EAAep3B,SAAUq3B,IAAoBp3B,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACrGu3B,IAAkBr3B,IAChBi1C,GAAQttC,YAAY1H,UAAYmB,EAAAA,MAAoBk2B,GAI1D/2B,EAAQ20C,oBAAoB,CAAEloC,MAAOhI,EAAQ7D,GAAIrB,SAAQ,IAEvDm1C,GAAQttC,aACVpI,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQi1C,EAAOttC,WAAW1H,SAAU,aAAc,IACjFg1C,EAAOttC,WACVE,cAAe7C,EAAQ7D,GACvBwkB,uBAAwB3gB,EAAQ7D,OAIpCgC,EAAAA,EAAAA,IAAU5D,GAEV,KACF,CAEA,IAAK,sCAAuC,CAC1C,MAAM,OAAES,EAAM,QAAEiS,EAAO,QAAEjN,GAAY2mB,EAC/BvE,GAAe0tB,EAAAA,EAAAA,IAAmBv1C,EAAQS,EAAQoB,EAAAA,KAAmB,GAC3E7B,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQoB,EAAAA,GAAgB,eAAgB,IAAIgmB,EAAcpiB,EAAQ7D,KAEtG,MAAMlB,GAAWgnB,EAAAA,EAAAA,IAA0B1nB,EAAQyF,GACnD,GAAI/E,IAAamB,EAAAA,GAAgB,CAC/B,MAAM2zC,GAAqBD,EAAAA,EAAAA,IAAmBv1C,EAAQS,EAAQC,IAAa,GAC3EV,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQC,EAAU,eAAgB,IAAI80C,EAAoB/vC,EAAQ7D,IACxG,CAEA,MAAMyxC,GAAiBvrB,EAAAA,EAAAA,IAAuB9nB,EAAQS,EAAQiS,GAE9D1S,GAASy1C,EAAAA,EAAAA,IAA4Bz1C,EAAQS,EAAQ,CAACiS,IACtD1S,GAAS4zC,EAAAA,EAAAA,IAAuB5zC,EAAQS,EAAQgF,EAAQ7D,GAAI,IACvDyxC,KACA5tC,EACHsI,gBAAiB2E,KAGnB9O,EAAAA,EAAAA,IAAU5D,GACV,KACF,CAEA,IAAK,kBAAmB,CACtB,MAAM,OAAES,EAAM,SAAE+jB,EAAQ,WAAExf,GAAeonB,EAEnC7mB,GAAWqwC,EAAAA,EAAAA,KAAWtwC,EAAAA,EAAAA,IAAmBtF,EAAQS,GAASuE,GAC1D6wC,EAA4C,CAChD,CAACh0C,EAAAA,IAAiBmD,GAEpB8C,OAAOmR,OAAO1T,GAAUmG,SAASjG,IAC/B,MAAM/E,GAAWgnB,EAAAA,EAAAA,IAA0B1nB,EAAQyF,GAInD,GAHAzF,GAAS+gB,EAAAA,EAAAA,IAAkB/gB,EAAQS,EAAQgF,EAAQ7D,GAAI,CACrD4iB,aAEE9jB,IAAamB,EAAAA,GAAgB,OACjC,MAAMi0C,EAAyBD,EAAgBn1C,IAAa,GAC5Do1C,EAAuB1vC,KAAKX,EAAQ7D,IACpCi0C,EAAgBn1C,GAAYo1C,CAAsB,IAGpDhuC,OAAO8f,QAAQiuB,GAAiBnqC,SAAQyR,IAAqB,IAAnBzc,EAAUuJ,GAAIkT,EACtD,MAAMmH,GAAYC,EAAAA,EAAAA,IAAgBvkB,EAAQS,EAAQoB,EAAAA,KAAmB,GAC/Dk0C,EAAevxB,GACjBtO,EAAAA,EAAAA,IAAOoO,EAAU/G,OAAOtT,IAAMrE,MAAK,CAACuhB,EAAGC,IAAMA,EAAID,IACjD7C,EAAUtgB,QAAQpC,IAAQqI,EAAIQ,SAAS7I,KAC3C5B,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQyH,OAAOxH,GAAW,YAAaq1C,EAAa,KAE1FnyC,EAAAA,EAAAA,IAAU5D,GAEV,KACF,CAEA,IAAK,mBAAoB,CACvB,MAAM,OACJS,EAAM,SAAEC,EAAQ,WAAE0H,EAAU,eAAE6rC,GAC5B7nB,EAEE4pB,GAAoB3tC,EAAAA,EAAAA,IAAiBrI,EAAQS,EAAQC,GACrDu1C,EAAgB,IACjBD,KACA5tC,GAGL,IAAK6tC,EAAcv1C,SACjB,OAGFV,GAASmmB,EAAAA,EAAAA,IAAiBnmB,EAAQS,EAAQC,EAAUu1C,GAEhDhC,IACFj0C,GAASiH,EAAAA,EAAAA,IAAmBjH,EAAQS,EAAQC,EAAU,iBAAkBuzC,IAG1E,MAAMlxC,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAMhC,GALIsC,GAAME,SAAWmF,EAAWge,yBAA2B4vB,GAAmB5vB,wBAC5EplB,EAAQ63B,cAAc,CAAEp4B,SAAQ4V,QAAS3V,IAIvC0H,EAAWirB,eAAiB3yB,IAAaqC,GAAME,QAAS,CAC1D,MAAMmjB,EAAyBrjB,GAAMqjB,uBAC/B8vB,EAAiCD,EAAc7vB,wBAA0BA,EAC3EA,GAA0B8vB,IAC5Bl2C,GAASmmB,EAAAA,EAAAA,IAAiBnmB,EAAQS,EAAQC,EAAU,CAClD0lB,uBAAwB1Y,KAAKC,IAAIuoC,EAAgC9vB,KAGvE,EAEAxiB,EAAAA,EAAAA,IAAU5D,GAEV,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAQ4B,GAAInB,GAAW2rB,EACjB+pB,GAAe7wC,EAAAA,EAAAA,IAAmBtF,EAAQS,GAE5C01C,KAAiBhZ,EAAAA,EAAAA,IAAS18B,KAC5BT,GAAS+0C,EAAAA,EAAAA,IAAmB/0C,EAAQS,EAAQqH,OAAOC,KAAKouC,GAAc3wC,IAAI0C,UAC1EtE,EAAAA,EAAAA,IAAU5D,GACVgB,EAAQo1C,aAAa,CAAE31C,SAAQqQ,OAAO,EAAMvQ,OAAOC,EAAAA,EAAAA,SAGrD,KACF,CAEA,IAAK,iBAAkB,CACrB,MAAM,IAAEyJ,EAAG,OAAExJ,GAAW2rB,EAExBsoB,GAAe10C,EAAQS,EAAQwJ,EAAKjJ,GACpC,KACF,CAEA,IAAK,0BAA2B,CAC9B,MAAM,IAAEiJ,EAAG,OAAExJ,GAAW2rB,GA6jB9B,SACE3rB,EAA4BwJ,EAAejJ,EAAgChB,GAEtES,IAILwJ,EAAIyB,SAAS9J,IACX5B,GAAS4zC,EAAAA,EAAAA,IAAuB5zC,EAAQS,EAAQmB,EAAI,CAClDuf,YAAY,GACZ,KAGJvd,EAAAA,EAAAA,IAAU5D,GAEVsJ,YAAW,KACTtJ,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASy1C,EAAAA,EAAAA,IAA4Bz1C,EAAQS,EAAQwJ,GACrD,MAAMosC,GAAoBhxC,EAAAA,EAAAA,IAA4BrF,EAAQS,GAC9DT,GAASiH,EAAAA,EAAAA,IACPjH,EAAQS,EAAQoB,EAAAA,GAAgB,eAAgBiG,OAAOC,KAAKsuC,GAAqB,CAAC,GAAG7wC,IAAI0C,UAE3FtE,EAAAA,EAAAA,IAAU5D,EAAO,GAChB4yC,IACL,CAnlBM0D,CAAwB71C,EAAQwJ,EAAKjJ,EAAShB,GAC9C,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAM,OAAES,GAAW2rB,EACbhnB,EAAepF,EAAOuF,SAASgG,SAAS9K,GAY9C,GAXIA,IAAWwM,EAAAA,MACbjN,EAAS,IACJA,EACH+M,qBAAsB/M,EAAO+M,qBAAqBvH,KAAKiN,IAAY,IAC9DA,EACH2K,WAAW,QAGfxZ,EAAAA,EAAAA,IAAU5D,IAGRoF,EAAc,CAChB,MAAM6E,EAAMnC,OAAOC,KAAK3C,EAAaoY,MAAMhY,IAAI0C,QAE/CwsC,GADA10C,GAASuJ,EAAAA,EAAAA,MACc9I,EAAQwJ,EAAKjJ,EACtC,MACEA,EAAQmvC,kBAAkB,CAAE1vC,WAG9BT,GAASuJ,EAAAA,EAAAA,MACTvJ,GAASu2C,EAAAA,EAAAA,IAAwBv2C,EAAQS,IACzCmD,EAAAA,EAAAA,IAAU5D,GAEV,KACF,CAEA,IAAK,0BAA2B,CAC9B,MAAM,IAAEiK,EAAG,cAAE2mC,GAAkBxkB,EAE/BniB,EAAIyB,SAAS9J,IACX,MAAMnB,GAASqwC,EAAAA,EAAAA,IAAsB9wC,EAAQ4B,GACzCnB,IACFT,GAAS+gB,EAAAA,EAAAA,IAAkB/gB,EAAQS,EAAQmB,EAAIgvC,GACjD,KAGFhtC,EAAAA,EAAAA,IAAU5D,GAEV,KACF,CAEA,IAAK,wBAAyB,CAC5B,MAAM,UAAE6wC,EAAS,IAAE5mC,EAAG,cAAE2mC,GAAkBxkB,EAE1CniB,EAAIyB,SAAS9J,IACX5B,GAAS+gB,EAAAA,EAAAA,IAAkB/gB,EAAQ6wC,EAAWjvC,EAAIgvC,EAAc,KAGlEhtC,EAAAA,EAAAA,IAAU5D,GAEV,KACF,CAEA,IAAK,oBAAqB,CACxB,MAAM,OAAEw2C,EAAM,WAAEC,GAAerqB,EAEzB3mB,GAAUixC,EAAAA,EAAAA,IAA0B12C,EAAQw2C,GAElD,GAAI/wC,GAAS2H,QAAQqZ,KAAM,CACzB,MAAMkwB,EAAalxC,EAAQ2H,QAAQqZ,KAAKjX,QACxC,IAAImzB,EAAagU,EACbF,EAAWjnC,SAASA,UACjBmnC,EAAWnnC,SAAYinC,EAAWjnC,QAAQonC,MAEpCD,EAAWnnC,UACpBmzB,EAAa,IACR8T,EAAWjnC,QACdA,QAASinC,EAAWjnC,QAAQA,QAAQhK,KAAKO,IAAM,IAC1CA,EACH8wC,SAAUF,EAAWnnC,QAAS7D,MAAM4/B,GAAMA,EAAE7kB,SAAW3gB,EAAO2gB,UAASmwB,aAEzED,WAAO/1C,IART8hC,EAAa8T,EAAWjnC,SAY5B,MAAMsnC,EAAc,IAAKrxC,EAAQ2H,QAAQqZ,QAASgwB,EAAYjnC,QAASmzB,GAEvE3iC,GAAS+gB,EAAAA,EAAAA,IACP/gB,EACAyF,EAAQhF,OACRgF,EAAQ7D,GACR,CACEwL,QAAS,IACJ3H,EAAQ2H,QACXqZ,KAAMqwB,MAIZlzC,EAAAA,EAAAA,IAAU5D,EACZ,CACA,KACF,CAEA,IAAK,wBAAyB,CAC5B,MAAM,OAAEw2C,EAAM,OAAE5mC,EAAM,QAAE4W,GAAY4F,EAC9B3mB,GAAUixC,EAAAA,EAAAA,IAA0B12C,EAAQw2C,GAClD,IAAK/wC,IAAYA,EAAQ2H,QAAQqZ,OAAShhB,EAAQ2H,QAAQqZ,KAAKjX,QAC7D,MAGF,MAAM,KAAEiX,GAAShhB,EAAQ2H,SAEnB,eAAE2pC,EAAc,YAAEC,EAAW,QAAExnC,GAAYiX,EAAKjX,QAChDynC,EAAoBF,EAAiB,IAAIA,GAAkB,GAC3DG,EAAiBF,EAAcA,EAAc,EAAI,EACjDrU,EAAanzB,EAAU,IAAIA,GAAW,GAE5CynC,EAAkB7wC,KAAKwJ,GAEvB4W,EAAQ9a,SAASgb,IACf,MAAMywB,EAAoBxU,EAAW5vB,WAAWhN,GAAWA,EAAO2gB,SAAWA,IACvE0wB,EAAezU,EAAWwU,GAC1BE,EAA+BD,EAAe,IAAKA,GAAiB,CAAE1wB,SAAQ4wB,YAAa,GAEjGD,EAAcC,aAAe,EACzB1nC,IAAW5P,EAAO+X,gBACpBs/B,EAAcR,UAAW,GAGvBM,EACFxU,EAAWwU,GAAqBE,EAEhC1U,EAAWv8B,KAAKixC,EAClB,IAGFr3C,GAAS+gB,EAAAA,EAAAA,IACP/gB,EACAyF,EAAQhF,OACRgF,EAAQ7D,GACR,CACEwL,QAAS,IACJ3H,EAAQ2H,QACXqZ,KAAM,IACDA,EACHjX,QAAS,IACJiX,EAAKjX,QACRunC,eAAgBE,EAChBD,YAAaE,EACb1nC,QAASmzB,QAMnB/+B,EAAAA,EAAAA,IAAU5D,GAEV,KACF,CAEA,IAAK,4BAA6B,CAChC,MAAM,QAAEyF,GAAY2mB,GAEhBmrB,EAAAA,EAAAA,IAAyBv3C,IAC3BgB,EAAQuM,0BAA0B,CAAE9H,YAGtC,KACF,CAEA,IAAK,yBAA0B,CAC7B,MAAM,OAAEhF,EAAM,GAAEmB,EAAE,UAAEspC,GAAc9e,EAC5B3mB,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQmB,GAC5CmB,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQosB,EAAO3rB,QAEvC,IAAKsC,IAAS0C,EAAS,OAEvBzF,EAAS6yC,GAAgB7yC,EAAQS,EAAQmB,EAAIspC,EAAWnoC,EAAM0C,EAAQ6H,WAAY7H,IAClF7B,EAAAA,EAAAA,IAAU5D,GACV,KACF,CAEA,IAAK,6BAA8B,CACjC,MAAM,OACJS,EAAM,GAAEmB,EAAE,MAAE41C,EAAK,QAAEC,GACjBrrB,EACE3mB,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQmB,GAGlD,KAFaoB,EAAAA,EAAAA,IAAWhD,EAAQosB,EAAO3rB,UAEzBgF,EAAS,OAEvB,GAAIgyC,EAAS,CACX,IAAKhyC,EAAQ2H,QAAQgzB,QAAS,OAC9BpgC,GAAS+gB,EAAAA,EAAAA,IAAkB/gB,EAAQS,EAAQmB,EAAI,CAC7CwL,QAAS,IACJ3H,EAAQ2H,QACXgzB,QAAS,IACJ36B,EAAQ2H,QAAQgzB,QACnBsX,cAAeD,OAIrB7zC,EAAAA,EAAAA,IAAU5D,EACZ,MAAWw3C,IACTx3C,GAAS+gB,EAAAA,EAAAA,IAAkB/gB,EAAQS,EAAQmB,EAAI,CAC7CwL,QAAS,IACJoqC,MAGP5zC,EAAAA,EAAAA,IAAU5D,IAGZ,KACF,CAEA,IAAK,yBAA0B,CAC7B,MAAM,gBAAEioB,EAAe,KAAEnkB,EAAI,UAAEsnB,GAAcgB,EAE7CpsB,EAAS,IACJA,EACH23C,eAAgB,IACX33C,EAAO23C,eACV,CAAC1vB,GAAkB,IACbjoB,EAAO23C,eAAe1vB,IAAoB,CAAC,EAC/CA,kBACAnkB,OACAsnB,gBAINxnB,EAAAA,EAAAA,IAAU5D,GACV,KACF,CAEA,IAAK,0BAA2B,CAC9B,MAAM,OAAES,EAAM,QAAEiS,EAAO,MAAE0E,GAAUgV,EAE/BhV,EAAMkS,MAAM,2BACdxhB,OAAOmR,OAAOjZ,EAAOkZ,SAASxN,SAAQ2R,IAAmB,IAAhBzb,GAAIrB,GAAO8c,EAClDrc,EAAQ8pB,oCAAoC,CAAErqB,SAAQF,SAAQ,IAIlEP,GAAS+gB,EAAAA,EAAAA,IAAkB/gB,EAAQS,EAAQiS,EAAS,CAAEklC,aAAc,+BACpEh0C,EAAAA,EAAAA,IAAU5D,GACV,KACF,CAEA,IAAK,4BAA6B,CAChC,MAAM,OACJS,EAAM,WAAEuE,EAAU,eAAE+lB,EAAc,aAAE8sB,GAClCzrB,EAEJpsB,GAAS83C,EAAAA,EAAAA,IAA0B93C,EAAQS,EAAQuE,EAAY+lB,EAAgB8sB,IAE/Ej0C,EAAAA,EAAAA,IAAU5D,GACV,KACF,EAAC,IChpBL,MAEM+3C,IAA8BlrB,EAAAA,EAAAA,KASpC,WAEE,IAAI7sB,GAASuJ,EAAAA,EAAAA,MAEbvJ,GAAS07B,EAAAA,EAAAA,IAAoB17B,EAAQ,IAChCA,EAAOgd,MAAM2e,gBACbqc,MAELp0C,EAAAA,EAAAA,IAAU5D,GAEVg4C,GAAuB,CAAC,CAC1B,GAtB+B,KAE0D,GAEzF,IAAIA,GAAsD,CAAC,GAoB3Dj3C,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASorB,KAC9C,OAAQA,EAAO,UACb,IAAK,gBACH,OAAO6rB,EAAAA,EAAAA,IAAcj4C,EAAQosB,EAAOxqB,IAGtC,IAAK,aAqBH,OApBAkG,OAAOmR,OAAOjZ,EAAOkZ,SAASxN,SAAQtL,IAAmB,IAAhBwB,GAAIrB,GAAOH,EAC9CgsB,EAAOxqB,KAAO5B,EAAO+X,eAAiBqU,EAAO5I,KAAK6M,aAAcrJ,EAAAA,EAAAA,IAA2BhnB,KAEzFosB,EAAO5I,KAAK6M,WAAWrvB,EAAQk3C,iBAAiB,CAAE7S,WAAW,EAAM9kC,UAGvEP,EAAS,IACJA,EACH63C,aAAc,CACZtsC,SAAU,CAAC,IAGjB,IAGFvL,GAAS28B,EAAAA,EAAAA,IAAW38B,EAAQosB,EAAOxqB,GAAIwqB,EAAO5I,MAC1C4I,EAAO9B,WACTtqB,GAASm4C,EAAAA,EAAAA,IAAmBn4C,EAAQosB,EAAOxqB,GAAIwqB,EAAO9B,WAGjDtqB,EAGT,IAAK,0BACHgB,EAAQo3C,aAAa,CAAExoC,OAAQwc,EAAOxqB,KACtC,MAGF,IAAK,wBACH,OAAO+6B,EAAAA,EAAAA,IAAW38B,EAAQosB,EAAOxc,OAAQ,CAAE2tB,YAAanR,EAAOmR,cAGjE,IAAK,mBAGH,OA5DwB3tB,EA2DHwc,EAAOxc,OA3DYyoC,EA2DJjsB,EAAO9S,OA1D/C0+B,GAAqBpoC,GAAUyoC,OAC/BN,KA6DE,IAAK,qBAAsB,CACzB,MAAM,GAAEn2C,EAAE,SAAE0oB,GAAa8B,EAEzB,OAAO+rB,EAAAA,EAAAA,IAAmBn4C,EAAQ4B,EAAI0oB,EACxC,CAEA,IAAK,sBAAuB,CAC1B,MAAM,MAAE3V,EAAK,OAAEqsB,GAAW5U,EAEpBksB,GAAqB/tB,EAAAA,EAAAA,IAAmBvqB,EAAQ2U,GACtD,IAAK2jC,GAAoBC,QACvB,OAGF,OAAOJ,EAAAA,EAAAA,IAAmBn4C,EAAQ2U,EAAO,CACvC4jC,QAAS,IACJD,EAAmBC,QACtBC,WAAYxX,IAGlB,EAnFJ,IAA8BpxB,EAAgByoC,CAsF5B,KClGlBt3C,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASorB,KAC9C,GACO,qBADCA,EAAO,SAEX,OAAOkB,EAAAA,EAAAA,IAAiBttB,EAAQosB,EAAOxqB,GAAIwqB,EAAOc,WAItC,KCHlBnsB,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASorB,KAC9C,OAAQA,EAAO,UACb,IAAK,oBACH,OAAIA,EAAOoX,WACFiV,EAAAA,EAAAA,IAAkBz4C,EAAQosB,EAAOxqB,KAEjCqgC,EAAAA,EAAAA,IAAqBjiC,EAAQosB,EAAOxqB,IAG/C,IAAK,yBACH5B,EAAS,IACJA,EACH87B,YAAa,CACX/H,QAAS,MAGbnwB,EAAAA,EAAAA,IAAU5D,GACV,MAEF,IAAK,eACHgB,EAAQitC,aACR,MAEF,IAAK,yBACHjtC,EAAQ03C,uBACR,MAEF,IAAK,uBACH13C,EAAQ8rB,qBACR,MAEF,IAAK,wBACH9rB,EAAQ23C,sBACR,MAEF,IAAK,4BACH33C,EAAQ43C,0BACR,MAEF,IAAK,4BAA6B,CAChC,MAAMC,EAAWzsB,EAAO/Z,cAAgBrS,EAAOwS,aAAaF,MAAMC,OAASvS,EAAO8R,SAASQ,MAAMC,OACjG,IAAKsmC,EAAU,OAAO74C,EACtB,MAAM84C,EAAW,CAAC1sB,EAAOxqB,MAAOi3C,EAAS70C,QAAQpC,GAAOA,IAAOwqB,EAAOxqB,MACtEZ,EAAQ+3C,mBAAmB,CAAE3mC,MAAO0mC,EAAUzmC,cAAe+Z,EAAO/Z,gBACpE,KACF,CAEA,IAAK,oBACHrR,EAAQg4C,kBACR,MAEF,IAAK,yBAA0B,CAE7B,MAAM5mC,EAAQga,EAAOha,MAAMpO,QAAQi1C,GAAUzxC,QAAQxH,EAAO8R,SAASyc,SAAS0qB,MAE9Ej4C,EAAQ+3C,mBAAmB,CAAE3mC,QAAOC,cAAe+Z,EAAO/Z,gBAC1D,KACF,CAEA,IAAK,kBACHrR,EAAQk4C,gBACR,MAEF,IAAK,gBACHl5C,EAAS,IACJA,EACH6X,SAAU,IACL7X,EAAO6X,SACVshC,QAAS,IACJn5C,EAAO6X,SAASshC,QACnB,CAAC/sB,EAAOgtB,KAAMhtB,EAAOitB,UAI3Bz1C,EAAAA,EAAAA,IAAU5D,GACV,MAEF,IAAK,kCACH8H,OAAOmR,OAAOjZ,EAAOkZ,SAASxN,SAAQtL,IAAmB,IAAhBwB,GAAIrB,GAAOH,EAClDJ,GAASs5C,EAAAA,EAAAA,IAAqBt5C,EAAQosB,EAAO9X,IAAK/T,GAClDP,GAASsgC,EAAAA,EAAAA,IAAetgC,EAAQugC,EAAAA,GAAAA,eAA4BhgC,EAAM,KAEpEqD,EAAAA,EAAAA,IAAU5D,GACV,MAEF,IAAK,0BACH8H,OAAOmR,OAAOjZ,EAAOkZ,SAASxN,SAASvJ,IACjCA,EAASwhC,QAAQR,UAAY/W,EAAO+W,UACtCniC,EAAQuH,gBAAgB,CAAErB,eAAWrG,EAAWN,MAAO4B,EAASP,KAChEZ,EAAQmjC,YAAY,CAAE5jC,MAAO4B,EAASP,KACxC,IAKU,KCjGlBb,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASorB,KAC9C,OAAQA,EAAO,UACb,IAAK,uBACH,OAAOmtB,EAAAA,EAAAA,IAAqBv5C,EAAQosB,EAAOotB,SAAUptB,EAAOhI,SAAUgI,EAAOqtB,oBAG/E,IAAK,yBAA0B,CAC7B,MAAM,OACJh5C,EAAM,QAAEmI,EAAO,SAAEwb,EAAQ,mBAAEq1B,GACzBrtB,EACSpsB,EAAO8O,MAAM0O,KAAK/c,KAG7BT,GAAS4jB,EAAAA,EAAAA,IAAW5jB,EAAQS,EAAQ,CAAEmI,aAGxC5I,GAAS05C,EAAAA,EAAAA,IAAmB15C,EAAQS,EAAQ,CAAEmI,UAASwb,WAAUq1B,wBACjE71C,EAAAA,EAAAA,IAAU5D,GACV,KACF,CAEA,IAAK,8BAA+B,CAClC,MAAM,OACJS,EAAM,QAAE4V,EAAO,QAAEzN,GACfwjB,EAEJpsB,GAASsmB,EAAAA,EAAAA,IAAYtmB,EAAQS,EAAQ4V,EAAS,CAAEzN,aAEhDhF,EAAAA,EAAAA,IAAU5D,GACV,KACF,EAGc,KCrClBe,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASorB,KAC9C,OAAQA,EAAO,UACb,IAAK,2BACH,MAAO,IACFpsB,EACH25C,cAAe,IACV35C,EAAO25C,cACVv/B,WAAW,EACXorB,uBAAwBpZ,EAAOjsB,SAKrC,IAAK,mBACH,MAAO,IACFH,EACH25C,cAAe,IACV35C,EAAO25C,cACVviC,MAAOgV,EAAO3mB,UAMN,I,6BCblB1E,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASorB,KAC9C,OAAQA,EAAO,UACb,IAAK,kBAAmB,CACtB,GAAoC,cAAhCA,EAAOwtB,KAAKpgB,gBACd,OAAIx5B,EAAO65C,WAAWC,uBAChB,mBAAoB94C,GAASA,EAAQ+4C,eAAe,CAAEC,cAAc,EAAMz5C,OAAOC,EAAAA,EAAAA,UAG9Ey5C,EAAAA,GAAAA,IAAgBj6C,EAAQosB,EAAOwtB,KAAKh4C,IAI/C,MAAMs4C,GAAYC,EAAAA,GAAAA,IAAgBn6C,EAAQosB,EAAOwtB,KAAKh4C,IAChDnB,EAASy5C,GAAWz5C,OAO1B,OANIA,IACFT,GAAS4jB,EAAAA,EAAAA,IAAW5jB,EAAQS,EAAQ,CAClC25C,eAAiBF,EAAUG,kBAAoB,GAAK7yC,QAAQ0yC,EAAUI,cAAcn6C,YAIjFo6C,EAAAA,GAAAA,IACLv6C,EACAosB,EAAOwtB,KAAKh4C,IACZyf,EAAAA,EAAAA,IAAK+K,EAAOwtB,KAAM,CAAC,yBACnB/4C,EACAurB,EAAOwtB,KAAKS,kBAEhB,CACA,IAAK,wBAOH,OANar3C,EAAAA,EAAAA,IAAWhD,EAAQosB,EAAO3rB,UAErCT,GAAS0oB,EAAAA,EAAAA,IAAmB1oB,EAAQosB,EAAO3rB,OAAQ,CACjD+5C,YAAapuB,EAAOwtB,KAAKh4C,MAGtB5B,EAET,IAAK,8BAA+B,CAClC,MAAM,YAAEw6C,EAAW,aAAEF,EAAY,WAAEzzB,GAAeuF,GAC5C,cAAErU,GAAkB/X,EAG1BA,GAASuJ,EAAAA,EAAAA,MACT+wC,EAAa5uC,SAAS+uC,IAChBA,EAAY74C,KACd5B,GAAS06C,EAAAA,GAAAA,IACP16C,EAAQw6C,EAAaC,EAAY74C,GAAI64C,EAAajzC,QAAQqf,IAAe9O,IAAkB0iC,EAAY74C,IAE3G,IAEEilB,IACF7mB,GAASu6C,EAAAA,GAAAA,IAAgBv6C,EAAQw6C,EAAa,CAC5C3zB,gBAIJ,MAAMqzB,GAAYC,EAAAA,GAAAA,IAAgBn6C,EAAQw6C,GACpC/5C,EAASy5C,GAAWz5C,OAM1B,OALIA,IACFT,GAAS4jB,EAAAA,EAAAA,IAAW5jB,EAAQS,EAAQ,CAClC25C,eAAiBF,EAAUG,kBAAoB,GAAK7yC,QAAQ0yC,EAAUI,cAAcn6C,WAGjFH,CACT,CACA,IAAK,kBAAmB,CACtB,IAAK26C,EAAAA,GAAqB,OAE1B,MAAM,UACJC,EAAS,cACT7iC,GACE/X,GAEE,KAAE45C,GAASxtB,EAEjB,GAAIwuB,EACF,MAAmB,cAAfhB,EAAKiB,OACP75C,EAAQ85C,mBAAmB,CAAEC,MAAO,QAChC,WAAY/5C,GAASA,EAAQg6C,OAAO,CAAEz6C,OAAOC,EAAAA,EAAAA,QAE1C,IACFR,KACC45C,EAAKqB,YAAc,CAAEC,gBAAiBtB,UAI9C,EAKF,GAFmBA,GAAMzkB,UAAYpd,GAEH,cAAf6hC,EAAKiB,MAgBtB,OAfAr6B,EAAAA,EAAAA,KAAU,KACRxgB,GAASuJ,EAAAA,EAAAA,OACT4xC,EAAAA,GAAAA,IAAgB,CACdvB,OACAp2B,MAAM43B,EAAAA,GAAAA,IAAoBp7C,IAC1B,KAGJq7C,EAAAA,EAAAA,OACKC,EAAAA,EAAAA,IAAmCt7C,EAAQgB,EAAS44C,EAAK2B,SAAS/6C,EAAAA,EAAAA,OACvER,EAAS,IACJA,EACH46C,UAAWhB,IAGNr3C,EAAAA,EAAAA,GAAevC,EAAQ,CAC5Bw7C,oBAAoB,IACnBh7C,EAAAA,EAAAA,MAEP,EAGc,I,gBCtHlBO,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASorB,KAEvC,gCADCA,EAAO,UAEXtkB,OAAOmR,OAAOjZ,EAAOkZ,SAASxN,SAAQtL,IAAmB,IAAhBwB,GAAIrB,GAAOH,EAClD,MAAM,aAAE8/B,IAAiB5+B,EAAAA,EAAAA,IAAetB,EAAQO,GAAOgZ,QAEvD,GAAI2mB,GAAgB,WAAYA,GAAgB,cAAeA,EAAc,CAC3E,MAAMz6B,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQkgC,EAAaz/B,OAAQy/B,EAAah5B,WAE5E,GAAIzB,GAAWA,EAAQ2H,QAAQgzB,QAAS,CACtC,MAAM,OAAE4J,EAAM,SAAEF,EAAQ,MAAEr5B,GAAUhL,EAAQ2H,QAAQgzB,QAEpDp/B,EAAQqL,iBAAiB,CACvB9L,QACAkF,QAASN,EAAAA,GAAuB,kBAAmB,EACjDs2C,EAAAA,GAAAA,GAAezR,EAAQF,EAAU3kC,EAAAA,KAAgCsgC,MACjEh1B,KAGN,CACF,CAKKirC,EAAAA,KACH17C,GAASyZ,EAAAA,EAAAA,IAAazZ,EAAQO,IAG5B6rB,EAAOgY,MAAQlE,GAAgB,SAAUA,GAAgBA,EAAakE,OAAShY,EAAOgY,OAI1FpkC,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BuZ,QAAS,KACJjY,EAAAA,EAAAA,IAAetB,EAAQO,GAAOgZ,QACjCD,OAAQ,SAET/Y,GAAM,GAKC,I,qFC/CH,SAASo7C,GAAgBC,GACtC,MAAMC,GAAeC,EAAAA,GAAAA,GAAgBF,IAErCG,EAAAA,EAAAA,KAAU,KAAMhiC,EAAAA,EAAAA,IAAe8hC,IAAe,CAACA,GACjD,C,gBCPA,MAAMG,GAAe9rC,SAAS+rC,cAAc,yBACtCC,GAAyBF,IAAcG,aAAa,YAAc,GAkCxE,SAASC,GAAazqC,GACpBA,EAAE0qC,gBACJ,C,wFCjCA,MAQA,IAAeC,EAAAA,EAAAA,KAR6BC,IAC1C,MAAM,OAAEj6C,GAAWi6C,EACbC,GAAkBC,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,mBAAoBp6C,GAG3E,OAAOk6C,EAAkBG,EAAAA,GAAAA,cAACH,EAAoBD,QAAY17C,CAAS,I,uCCArE,MAmBA,IAAey7C,EAAAA,EAAAA,KAnBqBl8C,IAAuB,IAAtB,cAAEw8C,GAAex8C,GACpDy8C,EAAAA,GAAAA,MACA,MAAMC,GAA2BnlC,EAAAA,EAAAA,MAQjC,IANAokC,EAAAA,EAAAA,KAAU,KACJa,IACFG,EAAAA,GAAAA,GAAeD,EACjB,GACC,CAACF,EAAeE,KAEfF,GAAkBE,EAItB,OACEH,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,wBAAuB0sB,EAAAA,GAAAA,IAAqBF,GAAgC,I,yFCtBxF,IAAKG,GAAgB,SAAhBA,GAAgB,OAAhBA,EAAAA,EAAgB,yCAAhBA,EAAAA,EAAgB,qBAAhBA,EAAAA,EAAgB,mBAAhBA,CAAgB,MAYb,SAASC,GACtBh4C,EACAs0B,EACAvC,EACAkmB,EACA1mC,EACA2mC,GAEA,IAAI9jC,EAUAhV,EAWAR,EAWJ,OA3BEwV,EC5BW,WACb,MAAO+jC,EAAUC,IAAeC,EAAAA,EAAAA,IAASh6C,OAAOi6C,UAAUC,QAgB1D,OAdA1B,EAAAA,EAAAA,KAAU,KACR,SAAS2B,IACPJ,EAAY/5C,OAAOi6C,UAAUC,OAC/B,CAKA,OAHAl6C,OAAOo6C,iBAAiB,SAAUD,GAClCn6C,OAAOo6C,iBAAiB,UAAWD,GAE5B,KACLn6C,OAAOq6C,oBAAoB,UAAWF,GACtCn6C,OAAOq6C,oBAAoB,SAAUF,EAAa,CACnD,GACA,IAEIL,CACT,CDM0BQ,IACoB,8BAApBrkB,EAEbvC,EACAgmB,GAAiBa,QAEjBb,GAAiBc,OAJjBd,GAAiBe,kBAS1B15C,EADEgV,IAAW2jC,GAAiBc,QAAUX,EAC7B,OACFD,EACE,eACF1mC,EACE,YAEA,UAIT6C,IAAW2jC,GAAiBe,kBAC9Bl6C,EAAOoB,EAAK,qBACHoU,IAAW2jC,GAAiBa,UACrCh6C,EAAOoB,EAAK,aAGG,iBAAbZ,IACFR,EAAOA,EAAMm6C,cAAc3tC,QAAQ,OAAQ,KAGtC,CACL4tC,iBAAkB5kC,EAClB6kC,yBAA0B75C,EAC1B85C,qBAAsBt6C,EAE1B,C,0HE5CA,MA0BA,IAAew4C,EAAAA,EAAAA,KA1B+Bl8C,IAIxC,IAJyC,iBAC7C89C,EAAgB,qBAChBE,EAAoB,QACpBC,GACDj+C,EACC,MAAM8E,GAAOo5C,EAAAA,GAAAA,KAEb,OACE3B,EAAAA,GAAAA,cAAA,OAAK/6C,GAAG,0BAA0B28C,IAAKr5C,EAAKs5C,MAAQ,WAAQ39C,EAAWw9C,QAASA,GAC9E1B,EAAAA,GAAAA,cAAC8B,GAAAA,EAAO,CAACC,MAAM,UACf/B,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,cACbqsB,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CAACC,UAAWV,EAAkB7O,KAAK,aAC3C+O,IAGLzB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL3mC,OAAK,EACL4mC,KAAK,OACLJ,MAAM,qBAEN/B,EAAAA,GAAAA,cAAA,QAAMrsB,UAAU,qBAEd,I,sCCvCV,SAAyD,uBCmEzD,IAAegsB,EAAAA,EAAAA,KA9CyBl8C,IAIlC,IAJmC,SACvCirC,EAAQ,SACR0T,EAAQ,UACRzuB,GACDlwB,EACC,MAAM4+C,GAAcC,EAAAA,EAAAA,IAAsB5T,EAASn5B,YAE7CgtC,GAAmBC,EAAAA,GAAAA,GAAUJ,OAAyBl+C,EAAdm+C,GAExCI,GAAkBC,EAAAA,EAAAA,KAAQ,IACzBC,EAAAA,GACEj/C,MAAM2e,KAAK,CAAE7e,OAbF,IAa2BqF,KAAI,IAqCrD,WACE,MAAMilC,GAAK,GAAqB,GAAhB/8B,KAAKob,WAAkBpb,KAAKob,SAAW,GAAM,GAAK,GAC5DujB,EAAI,GAAqB,GAAhB3+B,KAAKob,SAEpB,MAAQ,eAAc2hB,MAAM4B,EAAI,MAAM5B,KAAK4B,GAC7C,CA1C2DkT,KADjB,IAErC,IAEH,GAAKL,GAAqBH,EAI1B,OACEpC,EAAAA,GAAAA,cAAA,OAAKrsB,WAAWkvB,EAAAA,GAAAA,GDxCG,uBCwCyBlvB,IACzC8uB,EAAM55C,KAAKi6C,IACV,MAAMC,EAAS,wBAAuBD,OACtC,OAAIV,EAEApC,EAAAA,GAAAA,cAACgD,GAAAA,EAAW,CACVztC,WAAYm5B,EAASn5B,WACrBoe,UAAWsvB,GACXF,MAAOA,EACPG,qBAAmB,IAMvBlD,EAAAA,GAAAA,cAAA,OACEmD,IAAKZ,EACLa,IAAI,GACJzvB,UAAWsvB,GACXF,MAAOA,GACP,IAGF,IC/CV,IAAepD,EAAAA,EAAAA,KAR8BC,IAC3C,MAAM,OAAEj6C,GAAWi6C,EACbyD,GAAmBvD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqBp6C,GAG7E,OAAO09C,EAAmBrD,EAAAA,GAAAA,cAACqD,EAAqBzD,QAAY17C,CAAS,ICiFvE,IAAey7C,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAAYjgD,IAC9B,MAAM,cAAE+X,GAAkB/X,EACpBkgD,EAAcnoC,GAAgB0L,EAAAA,EAAAA,IAAWzjB,EAAQ+X,QAAiBlX,EAExE,MAAO,CACL08B,YAAa2iB,GAAa3iB,YAC3B,GANiB0iB,EApEiB7/C,IAAqB,IAApB,YAAEm9B,GAAan9B,EACnD,MAAM,eAAE+/C,EAAc,gBAAEC,IAAoBtnC,EAAAA,EAAAA,MAGtCunC,GAAYC,EAAAA,EAAAA,IAA0B,OACrCC,EAAkBC,EAAsBC,IAA0BC,EAAAA,GAAAA,IAAQ,IAC1EC,EAAeC,EAAYC,IAAcH,EAAAA,GAAAA,IAAQ,IACjDI,EAAoBC,EAAkBC,IAAqBN,EAAAA,GAAAA,IAAQ,IACpE,SAAEO,IAAaC,EAAAA,EAAAA,MAEfC,EAAQ5jB,GAAa6jB,MAA4B,IAApB7jB,EAAY6jB,MAAe10C,KAAKC,MAAgC,KAAxB00C,EAAAA,EAAAA,WAA+BxgD,GAC1GygD,EAAAA,GAAAA,GAAWlB,EAAiBe,IAE5BI,EAAAA,GAAAA,IAAsB3zC,IAAuB,IAArB4zC,GAAgB5zC,EAClC2yC,GAAoBhjB,GAAeikB,GAAmBjkB,EAAYrrB,aAAesvC,EAAgBtvC,aACnG0uC,IACAH,IACF,GACC,CAACljB,EAAagjB,EAAkBK,EAAYH,IAE/C,MAAMgB,GAAuBC,EAAAA,EAAAA,KAAa9vC,IACxC4uC,IACAL,EAAe,CAAE5iB,YAAa3rB,GAAU,GACvC,CAAC4uC,EAAsBL,KAE1BmB,EAAAA,GAAAA,GAAWT,EAAYF,EA5BE,UA4BmC9/C,GAE5D,MAAM8gD,GAAyBD,EAAAA,EAAAA,KAAY,KACzCX,GAAkB,GACjB,CAACA,IAEJ,OACEpE,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,iBACZ9oB,QAAQm5C,GAAiBpjB,IACxBof,EAAAA,GAAAA,cAACiF,GAAiB,CAChBvW,SAAU9N,EACVwhB,UAAQ,EACRzuB,UAAU,wBAGdqsB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL3mC,OAAK,EACL2pC,IAAKxB,EACLyB,QAASb,EACTnC,KAAK,UACLJ,MAAM,cACNpuB,UAAU,eACV+tB,QAASsD,GAERpkB,EACCof,EAAAA,GAAAA,cAACgD,GAAAA,EAAW,CACVvG,IAAK7b,EAAYrrB,WACjBA,WAAYqrB,EAAYrrB,WACxB4sC,KAvDc,GAwDdiD,UAAWC,EAAAA,MAEXrF,EAAAA,GAAAA,cAACsF,GAAAA,EAAW,OAElBtF,EAAAA,GAAAA,cAACqD,GAAgB,CACfkC,gBAAiB7B,EACjB/9C,OAAQw+C,EACRqB,oBAAqBV,EACrBW,QAASpB,IAEP,KC1FV,IAAgB,KAAO,uBAAuB,OAAS,uBAAuB,IAAM,uBAAuB,IAAM,uBAAuB,IAAM,uBAAuB,OAAS,wBCkB9K,IAAe1E,EAAAA,EAAAA,KATf,SAAel8C,GAAsB,IAArB,MAAE4oC,GAAiB5oC,EACjC,OACEu8C,EAAAA,GAAAA,cAAA,OAAKrsB,WAAWkvB,EAAAA,GAAAA,GAAeI,GAAAA,KAAa,UAAW,kBACrDjD,EAAAA,GAAAA,cAAA,KAAGrsB,WAAWkvB,EAAAA,GAAAA,GAAeI,GAAAA,OAAeA,GAAO5W,MACnD2T,EAAAA,GAAAA,cAAA,KAAGrsB,WAAWkvB,EAAAA,GAAAA,GAAeI,GAAAA,OAAeA,GAAO5W,MAGzD,ICsbA,IAAesT,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KACjBjgD,IACC,MAAMmC,GAAWb,EAAAA,EAAAA,IAAetB,IAE9BkB,MAAOmhD,EAAW,eAAExzC,EAAc,OAAEpO,EAAM,KAAEyM,GAC1C/K,EAASqM,cACP,cACJuJ,EAAa,gBAAEyhB,EAAe,UAAEvC,EAAS,gBAAE1gB,GACzCvW,GACE,4BAAEsiD,EAA2B,eAAEC,GAAmBviD,EAAO6X,SAASC,MAExE,MAAO,CACLuqC,cACAjoC,YAAWvL,GAAiBrH,QAAQqH,EAAeC,OAASD,EAAetJ,UAC3EwS,gBACAyqC,mBAAoB/hD,EACpBgiD,WAAYv1C,EACZs0B,OAAOkhB,EAAAA,EAAAA,IAAY1iD,GACnBuiD,iBACA/oB,kBACAvC,YACA0rB,kBAAmBn7C,SAAQ7G,EAAAA,EAAAA,IAAyBX,IACpDsiD,8BACAv7B,sBAAsBC,EAAAA,EAAAA,IAA2BhnB,GACjD4iD,eAAgBp7C,QAAQxH,EAAO8O,MAAMsiC,QAAQtD,QAC7C9zB,YAAaxS,QAAQxH,EAAOqY,SAAS2B,aACrC6oC,WAAYr7C,QAAQrF,EAAS0gD,YAC7BtsC,kBACAusC,iBAAkB9iD,EAAO+iD,eAC1B,GA7Be9C,EA5W8B7/C,IA4B5C,IA5B6C,iBACjD4iD,EAAgB,QAChB51C,EAAO,eACP61C,EAAc,cACdC,EAAa,gBACbC,EAAe,iBACfC,EAAgB,iBAChBC,EAAgB,iBAChBC,EAAgB,QAChBC,EAAO,YACPlB,EAAW,UACXjoC,EAAS,qBACT2M,EAAoB,qBACpBy8B,EAAoB,cACpBzrC,EAAa,mBACbyqC,EAAkB,WAClBC,EAAU,MACVjhB,EAAK,eACL+gB,EAAc,gBACd/oB,EAAe,UACfvC,EAAS,kBACT0rB,EAAiB,4BACjBL,EAA2B,eAC3BM,EAAc,YACd5oC,EAAW,iBACX8oC,EAAgB,WAChBD,EAAU,gBACVtsC,GACDnW,EACC,MAAM,SACJyD,EAAQ,oBACR4/C,EAAmB,iBACnBC,EAAgB,sBAChBC,EAAqB,mBACrBC,EAAkB,WAClBC,EAAU,0BACVC,EAAyB,iBACzBC,EAAgB,QAChBlkB,EAAO,0BACPmkB,IACElrC,EAAAA,EAAAA,MAEE5T,GAAOo5C,EAAAA,GAAAA,MACP,SAAE2C,IAAaC,EAAAA,EAAAA,MACf+C,EAAU72C,IAAY82C,EAAAA,GAAAA,SAGtBC,GAAqB9E,EAAAA,EAAAA,KAAQ,IAC1BoD,GACH2B,EAAAA,GAAAA,IAAmB,IAAI13C,KAAkB,IAAb+1C,SAC5B5hD,GACH,CAAC4hD,IAEE4B,GAA2BxH,EAAAA,GAAAA,MAAoC7L,EAAAA,MAAqBsT,YAAc,GAElG,iBAAEpG,EAAgB,qBAAEE,EAAoB,yBAAED,GAA6BjB,GAC3Eh4C,EAAMs0B,EAAiBvC,EAAW0rB,EAAmBL,GAA8BM,GAG/E2B,GAAyB7C,EAAAA,EAAAA,KAAa/vC,IAC1CA,EAAE0qC,iBACF1qC,EAAE6yC,kBACExqC,EACF6pC,IAEAC,EAA0B,CAAE5yC,OAAQuzC,EAAAA,GAAAA,kBACtC,GACC,CAACzqC,KAEJ0qC,EAAAA,GAAAA,GAAW5B,EAAmB,CAC5B,eAAgByB,EAChB,cAAeA,EACf,eAAgBA,KACZI,EAAAA,IAAU,CAAE,QAASJ,SACvB1jD,GAEJ,MAAM+jD,GAAoBrhD,OAAO46B,SAASrU,WAAa+6B,EAAAA,KAAuBC,EAAAA,IAExEC,IAA8D1F,EAAAA,EAAAA,KAAQ,IACnEzxC,IAAA,IAAC,UAAEo3C,EAAS,OAAE1iD,GAAQsL,EAAA,OAC3B+uC,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL3mC,OAAK,EACL4pC,OAAQmC,IAAYhD,EACpBnC,KAAK,UACLJ,MAAM,cACNpuB,UAAWhuB,EAAS,SAAW,GAE/B+7C,QAAS4F,EAAUe,EAAY,IAAMzB,IACrC0B,UAAWhB,EAAU/+C,EAAK,qBAAuB,uBAEjDy3C,EAAAA,GAAAA,cAAA,OAAKrsB,WAAWkvB,EAAAA,GAAAA,GACd,sBACCyE,GAAW,aACZT,GAAwB,kBAGnB,GAEV,CAACS,EAAShD,EAAU/7C,EAAMq+C,EAASC,IAEhC0B,IAAoBxD,EAAAA,EAAAA,KAAY,KAC/BW,GACHa,EAAc,GAChB,GACC,CAACb,EAAaa,IAEXiC,IAAyBzD,EAAAA,EAAAA,KAAY,KACzCgC,EAAiB,CAAEpB,6BAA8BA,GAA8B,GAC9E,CAACA,EAA6BoB,IAE3B0B,IAAoB1D,EAAAA,EAAAA,KAAY,KACpC79C,EAAS,CAAEjC,GAAImW,EAAehW,sBAAsB,GAAO,GAC1D,CAACgW,EAAelU,IAEbwhD,IAAuB3D,EAAAA,EAAAA,KAAa/vC,IACxCA,EAAE6yC,kBAGFd,EAAiB,CAAEliB,MAFQ,UAAVA,EAAoB,OAAS,UAG9CkiB,EAAiB,CAAE4B,sBAAsB,GAAQ,GAChD,CAAC5B,EAAkBliB,IAEhB+jB,IAA6B7D,EAAAA,EAAAA,KAAa/vC,IAC9CA,EAAE6yC,kBAEF,IAAIgB,EAAWjD,EAAiB,EAC5BiD,EAAWC,EAAAA,MACbD,EAAWE,EAAAA,KAEb,MAAMC,EAAsBH,IAAaE,EAAAA,IACrCE,EAAAA,GACCJ,IAAaC,EAAAA,IAAsBI,EAAAA,GAAgCC,EAAAA,GAExEpC,EAAiB,CAAEnB,eAAgBiD,IACnCxB,EAA0B2B,EAAoB,GAC7C,CAACpD,EAAgBmB,IAEdqC,IAAuBrE,EAAAA,EAAAA,KAAY,KACvCn+C,OAAOC,KAAKwiD,EAAAA,IAAoB,SAAU,WAAW,GACpD,IAEGC,IAAqBvE,EAAAA,EAAAA,KAAY,KCpOvCwE,aAAaC,QAJe,aAIgB5rC,KAAKC,UDqOxB,OACvB4rC,EAAAA,GAAAA,MACArC,GAAkB,GACjB,CAACA,IAEEsC,IAAqB3E,EAAAA,EAAAA,KAAY,KACrCkC,EAAmB,CAAEj2B,SAAUzoB,EAAK,0BAA2B,GAC9D,CAACA,EAAM0+C,IAEJ0C,IAAuB5E,EAAAA,EAAAA,KAAY,KACvC7hB,EAAQ,CAAEvrB,IAAKiyC,EAAAA,KAAe,GAC7B,CAAC1mB,IAEE2mB,IAAmB9E,EAAAA,EAAAA,KAAY,KACnCmC,GAAY,GACX,CAACA,IAEE4C,GACJj/C,QAAQg7C,IACLp1C,IAAY82C,EAAAA,GAAAA,cACZ92C,IAAY82C,EAAAA,GAAAA,UAGjBnI,EAAAA,EAAAA,KAAU,IAAO0K,IAAkBC,EAAAA,GAAAA,IAAsB,IAAMnD,WAAa1iD,GAAY,CAAC4lD,GAAiBlD,IAE1G,MAAMoD,GAAyBv5C,IAAY82C,EAAAA,GAAAA,SACvCh/C,EAAK,iBACLA,EAAK,UAEH0hD,GAAgBC,EAAAA,IAAW,GAAEh6C,EAAAA,oBAAwCqK,EAAAA,IAAQ4vC,SAAej6C,EAAAA,IAC5Fk6C,GAAsBxE,IAAmBmD,EAAAA,IAC1CnD,IAAmBkD,EAAAA,IAAsB,MAAQ,MAClD,OAGE,uCACJuB,GAAsC,gCACtCC,KACEC,EAAAA,GAAAA,GAAsClE,GAEpCmE,IAAY9H,EAAAA,EAAAA,KAAQ,IACxB1C,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACyK,GAAAA,EAAQ,CACPC,KAAK,iBACLhJ,QAAS+G,IAERlgD,EAAK,kBAEPqR,EAAgBC,UACfmmC,EAAAA,GAAAA,cAACyK,GAAAA,EAAQ,CACPC,KAAK,UACLhJ,QAASiF,GAET3G,EAAAA,GAAAA,cAAA,QAAMrsB,UAAU,kBAAkBprB,EAAK,kBACtCm/C,EAA2B,GAC1B1H,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,eAAe+zB,IAIpC1H,EAAAA,GAAAA,cAACyK,GAAAA,EAAQ,CACPC,KAAK,OACLhJ,QAASgF,GAERn+C,EAAK,aAERy3C,EAAAA,GAAAA,cAACyK,GAAAA,EAAQ,CACPC,KAAK,WACLhJ,QAAS+E,GAERl+C,EAAK,aAERy3C,EAAAA,GAAAA,cAACyK,GAAAA,EAAQ,CACPC,KAAK,WACLhJ,QAASgH,IAET1I,EAAAA,GAAAA,cAAA,QAAMrsB,UAAU,kBAAkBprB,EAAK,wBACvCy3C,EAAAA,GAAAA,cAAC2K,GAAAA,EAAQ,CACP1lD,GAAG,WACH2lD,MAAOriD,EAAe,SAAVs8B,EAAmB,mCAAqC,mCACpEgmB,QAAmB,SAAVhmB,EACTimB,aAAW,KAGf9K,EAAAA,GAAAA,cAACyK,GAAAA,EAAQ,CACPC,KAAK,aACLhJ,QAASkH,IAET5I,EAAAA,GAAAA,cAAA,QAAMrsB,UAAU,6BAA6BprB,EAAK,yBAAyB+4C,eAC3EtB,EAAAA,GAAAA,cAAC+K,GAAM,CAAC1e,MAAO+d,MAEjBpK,EAAAA,GAAAA,cAACyK,GAAAA,EAAQ,CACPC,KAAK,OACLhJ,QAASgI,IAERnhD,EAAK,qBAERy3C,EAAAA,GAAAA,cAACyK,GAAAA,EAAQ,CACPC,KAAK,MACLhJ,QAASiI,IACV,cAGAO,EAAAA,KACClK,EAAAA,GAAAA,cAACyK,GAAAA,EAAQ,CACPC,KAAK,cACLhJ,QAAS0H,IACV,kBAIFnB,IACCjI,EAAAA,GAAAA,cAACyK,GAAAA,EAAQ,CACPC,KAAK,IACLM,YAAU,EACVt3C,KAlQe,8BAmQfguC,QAAS4H,IACV,uBAIFpD,GACClG,EAAAA,GAAAA,cAACyK,GAAAA,EAAQ,CACPC,KAAK,UACLhJ,SAASuJ,EAAAA,GAAAA,MACV,iBAKJ,CACDb,GAAqB1C,EAA0BxB,EAAY0C,GAA4Be,GAAsBphD,EAC7G6gD,GAAsBV,GAAsBgB,GAAoBjB,GAAmBa,GACnF3C,EAAkBD,EAAkBD,EAAkB5hB,EAAOojB,GAAmBruC,IAGlF,OACEomC,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,kBACbqsB,EAAAA,GAAAA,cAAA,OAAK/6C,GAAG,iBAAiB0uB,UAAU,eAChCprB,EAAKs5C,OAAS7B,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,uBAC9BqsB,EAAAA,GAAAA,cAACkL,GAAAA,EAAY,CACXC,QAAS/C,GACTgD,OAAS,GAAEC,EAAAA,OAAYpB,KACvBt2B,WAAWkvB,EAAAA,GAAAA,GACTt6C,EAAKs5C,OAAS,MACdwE,GAAoB99C,EAAKs5C,OAAS,gBAClCwI,GAAuCx2B,SAAWtrB,EAAKs5C,OAAS,sBAElEyJ,UAAWjF,GAAoB99C,EAAKs5C,MAAQ,QAAU,OACtD0J,gBAAiBhjD,EAAKs5C,MAAQyI,QAAkCpmD,GAE/DsmD,IAEHxK,EAAAA,GAAAA,cAACwL,GAAAA,EAAW,CACVC,QAAQ,wBACRC,yBAAyB,aACzB/3B,WAAWkvB,EAAAA,GAAAA,GACRgD,GAAsBC,EAAc,wBAAqB5hD,EAC1DmiD,GAAoB,uBAEtBha,MAAOma,OAAkBtiD,EAAaoiD,GAAkBZ,EACxDiG,QAAS7B,GACTrsC,UAAWA,GAA0C,cAA7B+jC,EACxBoK,aAA2C,cAA7BpK,EAA2C,cAAWt9C,EACpE2nD,uBAAqD,cAA7BrK,GAAsD,UAAV3c,EAAoB,aAAU3gC,EAClG4nD,YAAa9B,GACb+B,aAAa,MACbC,SAAUnhD,QAAQg7C,GAAsBC,GACxCmG,SAAU1F,EACVK,QAASA,EACTsF,QAAS3D,GACT4D,eAA6C,cAA7B3K,EAA2CgH,QAAyBtkD,GAEnFsjD,GACCxH,EAAAA,GAAAA,cAACoM,GAAAA,EAAkB,CACjB1B,KAAK,WACL52C,MAAO0zC,EACPwE,UAAQ,EACRlyC,YAAajP,QAAQg7C,GACrBlyB,UAAU,cACV+tB,QAASoF,EACTuF,SArRmB,CAAE97C,UAAMrM,KAwR9B2hD,GACC7F,EAAAA,GAAAA,cAACoM,GAAAA,EAAkB,CACjBE,aAAczG,EACdnE,QAASsF,EACTgF,UAAQ,EACRK,SA5RmB,CAAEpnD,QAAIf,MAgS9BkmB,GAAwB41B,EAAAA,GAAAA,cAACuM,GAAY,MACrClvC,GACC2iC,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL3mC,OAAK,EACL4pC,QAASb,EACTnC,KAAK,UACLJ,MAAM,cACNuG,UAAY,GAAE//C,EAAK,8DACnBm5C,QAASmI,GACTl2B,WAAWkvB,EAAAA,GAAAA,IAAgBz4B,GAAwB,kBAEnD41B,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,oBAGjBqsB,EAAAA,GAAAA,cAACwM,GAAAA,EAAc,CACb7mD,OAAqC,YAA7B67C,EACRiL,UAAQ,EACR94B,UAAU,4BAEVqsB,EAAAA,GAAAA,cAAC0M,GAAuB,CACtBnL,iBAAkBA,EAClBE,qBAAsBA,EACtBC,QAAS8G,OAIX,K,oDEhZV,MA0QA,IAAe7I,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KACjBjgD,IACC,MACE+kB,aACEvH,KAAM+zB,EACNltC,WAAYilD,EACZh0B,QAASi0B,GAEXz6C,OACEsiC,SAAS,SACPoY,IAEH,cACDzxC,EAAa,aACbuhB,EAAY,gBACZ/iB,GACEvW,GACE,4BAAEypD,EAA2B,iBAAEjY,IAAqBlwC,EAAAA,EAAAA,IAAetB,GAEzE,MAAO,CACLuxC,kBACAgY,oBACAD,mBACA9X,mBACAz5B,gBACAuhB,eACAmwB,8BACAC,iBAAkBliD,QAAQgiD,GAAUrpD,QACpCwpD,YAAYz5B,EAAAA,GAAAA,GAAmBlwB,EAAQ,iBACvC4pD,kBAAkB15B,EAAAA,GAAAA,GAAmBlwB,EAAQ,mBAC7CuW,kBACD,GA/Be0pC,EAvQ2B7/C,IAiBzC,IAjB0C,gBAC9CypD,EAAe,uBACfC,EAAsB,0BACtBC,EAAyB,gBACzBxY,EAAe,iBACf+X,EAAgB,iBAChB9X,EAAgB,cAChBz5B,EAAa,iBACbiyC,EAAgB,aAChB1wB,EAAY,4BACZmwB,EAA2B,WAC3BE,EAAU,qBACVM,EAAoB,kBACpBV,EAAiB,iBACjBK,EAAgB,iBAChBF,EAAgB,gBAChBnzC,GACDnW,EACC,MAAM,gBACJ8pD,EAAe,oBACfC,EAAmB,SACnBtmD,EAAQ,yBACRumD,EAAwB,0BACxBC,EAAyB,mBACzBC,EAAkB,sBAClBx1B,IACEhc,EAAAA,EAAAA,MAGEyxC,GAAgBjK,EAAAA,EAAAA,IAAuB,MAEvCp7C,GAAOo5C,EAAAA,GAAAA,MAEbvC,EAAAA,EAAAA,KAAU,KACJziB,GACF4wB,GACF,GACC,CAAC5wB,EAAc4wB,IAElB,MAAMM,GAAgCnL,EAAAA,EAAAA,KAAQ,KACrC,CACLz9C,GAAI6oD,EAAAA,IACJh6C,MAAO64C,IAAmB,KAAOmB,EAAAA,IAAgBvlD,EAAK,uBAAyBA,EAAK,kBACpF+f,gBAAiBxjB,EAAAA,EACjBipD,gBAAiBjpD,EAAAA,KAElB,CAAC6nD,EAAkBpkD,IAEhBylD,GAAmBtL,EAAAA,EAAAA,KAAQ,IACxBiK,EACHA,EAAiB9jD,KAAK5D,GAClBA,IAAO6oD,EAAAA,IACFD,EAGFjZ,EAAgB3vC,IAAO,CAAC,IAC9BoC,OAAOwD,cACR3G,GACH,CAAC0wC,EAAiBiZ,EAAgBlB,IAE/BsB,EAAsBD,GAAkB53C,WAAWiS,GAAWA,EAAOpjB,KAAO6oD,EAAAA,MAC5EI,EAAqBD,IAAwBpZ,EAC7CsZ,EAhEmB,IAgEsBtZ,EAEzCuZ,GAAqBlO,EAAAA,GAAAA,MACrBmO,GAAa3L,EAAAA,EAAAA,KAAQ,KACzB,IAAKsL,IAAqBA,EAAiBxqD,OACzC,OAGF,MAAMH,GAASuJ,EAAAA,EAAAA,MAEf,OAAOohD,EAAiBnlD,KAAI,CAACwf,EAAQpG,KACnC,MAAM,GAAEhd,EAAE,MAAE6O,GAAUuU,EAChBwe,EAAY5hC,IAAO6oD,EAAAA,KAAiB7rC,EAAI+qC,EAAa,EAGrDsB,EAAiB,GAwCvB,OA1CuBC,EAAAA,EAAAA,IAAqBlrD,EAAQ4B,IAKlDqpD,EAAe7kD,KAAK,CAClBqK,MAAOvL,EAAK,6BACZmiD,KAAM,OACN8D,QAASA,KAEH5B,EAAkB3nD,IAAKzB,QAAUypD,EACnC90B,EAAsB,CACpBjf,MAAO,oBAGTu0C,EAAyB,CACvBrZ,SAAUnvC,GAEd,IAKFA,IAAO6oD,EAAAA,MACTQ,EAAe7kD,KAAK,CAClBqK,MAAOvL,EAAK,cACZmiD,KAAM,OACN8D,QAASA,KACPb,EAAmB,CAAEvZ,SAAUnvC,GAAK,IAIxCqpD,EAAe7kD,KAAK,CAClBqK,MAAOvL,EAAK,oBACZmiD,KAAM,SACN+D,aAAa,EACbD,QAASA,KACPd,EAA0B,CAAEtZ,SAAUnvC,GAAK,KAK1C,CACLA,KACA6O,QACA46C,WAAYN,EAAmBnpD,IAAK0iD,WACpCgH,cAAe9jD,QAAQujD,EAAmBnpD,IAAK2pD,oBAC/C/nB,YACAynB,eAAgBA,GAAgB9qD,OAAS8qD,OAAiBpqD,EAC3D,GACD,GACD,CAAC8pD,EAAkBI,EAAoB7lD,EAAMykD,EAAYJ,EAAmBK,IAEzE4B,GAAkB9J,EAAAA,EAAAA,KAAa/iC,IACnCwrC,EAAoB,CAAE3Y,iBAAkB7yB,GAAS,CAAEjU,uBAAuB,GAAO,GAChF,CAACy/C,KAGJpO,EAAAA,EAAAA,KAAU,KACHiP,GAAY7qD,QAIbqxC,GAAoBwZ,EAAW7qD,QACjCgqD,EAAoB,CAAE3Y,iBA7ID,GA8IvB,GACC,CAACA,EAAkBwZ,EAAYb,KAElCpO,EAAAA,EAAAA,KAAU,KACR,GAAKzvC,EAAAA,IAAiB0+C,GAAY7qD,SAAU6pD,EAI5C,OAAOyB,EAAAA,GAAAA,IAAclB,EAAc/5B,QAAU,CAC3Ck7B,wBAAyB,aACzBC,QAAUA,CAACh6C,EAAGhH,IACRA,IAAcihD,GAAAA,GAAAA,MAChBzB,EACE,CAAE3Y,iBAAkB9jC,KAAKm9B,IAAI2G,EAAmB,EAAGwZ,EAAW7qD,OAAS,IACvE,CAAEuK,uBAAuB,KAEpB,GACEC,IAAcihD,GAAAA,GAAAA,QACvBzB,EAAoB,CAAE3Y,iBAAkB9jC,KAAKC,IAAI,EAAG6jC,EAAmB,IAAM,CAAE9mC,uBAAuB,KAC/F,IAKX,GACD,CAAC8mC,EAAkBwZ,EAAYhB,EAAkBG,IAEpD,MAAM0B,GAAwBvL,EAAAA,EAAAA,MAC9BuL,EAAsBr7B,SAAWs6B,GACjC/O,EAAAA,EAAAA,KAAU,IAAO8P,EAAsBr7B,SAAUk2B,EAAAA,GAAAA,IAAsB,KACjEmF,EAAsBr7B,SACxB25B,EAAoB,CAAE3Y,iBA7KD,GA8KvB,SACG3wC,GAAY,CAAC2wC,EAAkB2Y,KAEpC2B,EAAAA,GAAAA,GAAe,CACb76C,UAAW65C,EACXiB,OAAQA,IAAM5B,EAAoB,CAAE3Y,iBAnLb,GAmLqD,CAAE9mC,uBAAuB,OAGvGqxC,EAAAA,EAAAA,KAAU,KACR,MAAMiQ,EAAiBr6C,IACrB,GAAIA,EAAEs6C,SAAWt6C,EAAEu6C,UAAYv6C,EAAE8zB,KAAK0mB,WAAW,UAAYnB,EAAY,CACvE,MAAO,CAAEoB,GAASz6C,EAAE8zB,KAAKnc,MAAM,cAAgB,GAC/C,IAAK8iC,EAAO,OAEZ,GA7LsB,MA6LlBA,EAEF,YADAvoD,EAAS,CAAEjC,GAAImW,EAAehW,sBAAsB,IAItD,MAAMijB,EAAS9c,OAAOkkD,GAAS,EAC/B,GAAIpnC,EAASgmC,EAAW7qD,OAAS,EAAG,OAEpCgqD,EAAoB,CAAE3Y,iBAAkBxsB,GAAU,CAAEta,uBAAuB,IAC3EiH,EAAE0qC,gBACJ,GAKF,OAFAnsC,SAASytC,iBAAiB,UAAWqO,GAAe,GAE7C,KACL97C,SAAS0tC,oBAAoB,UAAWoO,GAAe,EAAK,CAC7D,GACA,CAACj0C,EAAeizC,EAAYnnD,EAAUsmD,IAEzC,MACEkC,aAAcC,EAAuB,qBAAEC,IACrCC,EAAAA,GAAAA,IAAmBlD,OAAkBzoD,GAAW,GAEpD,SAAS4rD,EAAiBx7C,GACxB,MAAMy7C,EAAe5kD,OAAOmR,OAAOs4B,GAChC5lC,MAAKiC,IAAA,IAAC,GAAEhM,GAAIgM,EAAA,OAAKhM,IAAOopD,EAAYxZ,GAAkB5vC,EAAE,IACrD+qD,EAAWD,IAAiB7B,EAElC,OACElO,EAAAA,GAAAA,cAACiQ,GAAAA,EAAQ,CACPC,WAAYF,EAAW,SAAW,MAClC5b,SAAU4b,EAAWD,EAAa9qD,QAAKf,EACvCoQ,SAAUA,EACV+4C,iBAAkBA,EAClB1wB,aAAcA,EACduwB,gBAAiBA,EACjBC,uBAAwBA,EACxBC,0BAA2BA,EAC3B+C,kBAAmBpD,IAAqBnzC,EAAgBC,SACxDD,gBAAiBA,GAGvB,CAEA,MAAMw2C,EAAsB/B,GAAcA,EAAW7qD,OAAS,EAE9D,OACEw8C,EAAAA,GAAAA,cAAA,OACErsB,WAAWkvB,EAAAA,GAAAA,GACT,cACAuN,GAAuB9C,GAAwB,6BAGhD8C,EACCpQ,EAAAA,GAAAA,cAACqQ,GAAAA,EAAO,CACNC,2BAA2B,cAC3BC,KAAMlC,EACNmC,UAAW3b,EACX4b,YAAa5B,EACb6B,YAAU,IAEVf,EACF3P,EAAAA,GAAAA,cAAA,OAAKrsB,WAAWkvB,EAAAA,GAAAA,GAAe,mBAAoB+M,UACjD1rD,EACJ87C,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CACTkD,IAAK0I,EACLlb,KAAMoa,EAA8B,OAASvkD,EAAKs5C,MAAQ,oBAAsB,iBAChFI,UAAWpN,EACX8b,YAAaP,EAAsB/B,EAAW7qD,YAASU,GAEtD4rD,GAEC,K,gBCjTV,MAOA,IAAenQ,EAAAA,EAAAA,KAPwBC,IACrC,MAAMgR,GAAa9Q,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAGlD,OAAO6Q,EAAa5Q,EAAAA,GAAAA,cAAC4Q,EAAehR,GAAYI,EAAAA,GAAAA,cAAC6Q,GAAAA,EAAO,KAAG,ICG7D,IAAelR,EAAAA,EAAAA,KAPyBC,IACtC,MAAMkR,GAAchR,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAGnD,OAAO+Q,EAAc9Q,EAAAA,GAAAA,cAAC8Q,EAAgBlR,GAAYI,EAAAA,GAAAA,cAAC6Q,GAAAA,EAAO,KAAG,I,gBCS/D,MAgEA,IAAelR,EAAAA,EAAAA,KAhEqBl8C,IAK9B,IAL+B,QACnCstD,EAAO,iBACPC,EAAgB,aAChBC,EAAY,WACZC,GACDztD,EACC,MAAO0tD,EAAYC,IAAiBxQ,EAAAA,EAAAA,KAAS,IAE7CxB,EAAAA,EAAAA,KAAU,KACH2R,GACHK,GAAc,EAChB,GACC,CAACL,IAEJ,MAAMxoD,GAAOo5C,EAAAA,GAAAA,KAEP0P,GAAexO,EAAAA,GAAAA,GACnB,gBACAkO,GAAW,WACXI,GAAc,gBAGVG,GAAmBvM,EAAAA,EAAAA,KAAY,KACnCqM,GAAeD,EAAW,GACzB,CAACA,IAEEI,GAAcxM,EAAAA,EAAAA,KAAY,KAC9BqM,GAAc,EAAM,GACnB,IAEG5G,GAAY9H,EAAAA,EAAAA,KAAQ,IACxB1C,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACyK,GAAAA,EAAQ,CAACC,KAAK,UAAUhJ,QAASuP,GAAe1oD,EAAK,eACtDy3C,EAAAA,GAAAA,cAACyK,GAAAA,EAAQ,CAACC,KAAK,QAAQhJ,QAASwP,GAAa3oD,EAAK,aAClDy3C,EAAAA,GAAAA,cAACyK,GAAAA,EAAQ,CAACC,KAAK,OAAOhJ,QAASsP,GAAmBzoD,EAAK,sBAExD,CAACA,EAAM0oD,EAAcC,EAAYF,IAEpC,OACEhR,EAAAA,GAAAA,cAAA,OAAKrsB,UAAW09B,EAAczP,IAAKr5C,EAAKs5C,MAAQ,WAAQ39C,GACtD87C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL3mC,OAAK,EACLwmC,MAAM,UACNpuB,UAAWw9B,EAAa,SAAW,GACnCzP,QAAS4P,EACThJ,UAAW//C,EAAK4oD,EAAa,QAAU,mBACvCK,UAAW,GAEXxR,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,8BACbqsB,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,qBAEfqsB,EAAAA,GAAAA,cAACyR,GAAAA,EAAI,CACH9rD,OAAQwrD,EACR7F,UAAW/iD,EAAKs5C,MAAQ,OAAS,QACjC6P,UAAU,SACVC,WAAS,EACTlM,QAAS8L,GAER/G,GAEC,I,gBCrCV,MAAMoH,GAA0BzmD,OAAOC,KAAKm8C,EAAAA,IAAmB/jD,OAAS,EAGxE,IAAIquD,GAEJ,MAyLA,IAAelS,EAAAA,EAAAA,KAzLgBl8C,IAezB,IAf0B,QAC9BgN,EAAO,YACPi1C,EAAW,WACXI,EAAU,gBACVU,EAAe,eACfF,EAAc,qBACdO,EAAoB,gBACpBqG,EAAe,kBACf7yC,EAAiB,iBACjBgzC,EAAgB,cAChB9G,EAAa,gBACbuL,EAAe,uBACf3E,EAAsB,QACtBvG,EAAO,cACPmL,GACDtuD,EACC,MAAM,gBAAEgD,IAAoB0V,EAAAA,EAAAA,OACrB61C,EAAsBC,IAA2BrR,EAAAA,EAAAA,IAASjxC,EAAAA,KAE3D,uBACJuiD,EAAsB,6BAAEC,EAA4B,+BACpDC,EAA8B,mBAAEC,IAC9BC,EAAAA,GAAAA,GAAoBjF,GAClBkF,EAAuBlF,GAAoB58C,IAAY82C,EAAAA,GAAAA,SACvDiL,EAAsBD,GAAwBF,GAGlD3C,aAAc+C,EACd7C,qBAAsB8C,IACpB7C,EAAAA,GAAAA,GAAkBx1C,GAEhBs4C,GAAgBhP,EAAAA,EAAAA,KAAO,GAEvBiP,GAAmB7N,EAAAA,EAAAA,KAAY,KAC/Bt0C,IAAY82C,EAAAA,GAAAA,WAGhBoL,EAAc9+B,SAAU,EACxBo+B,GAAwB,GAAK,GAC5B,CAACxhD,IAEEoiD,GAAmB9N,EAAAA,EAAAA,KAAY,KACnC4N,EAAc9+B,SAAU,EAEpBg+B,KACFnkD,aAAamkD,IACbA,QAAe3tD,GAGjB2tD,GAAejrD,OAAO+F,YAAW,KAC1BgmD,EAAc9+B,SACjBo+B,GAAwB,EAC1B,GAxDwB,IAyDD,GACxB,IAEGa,GAAuB/N,EAAAA,EAAAA,KAAY,KACvC+M,EAAgBvK,EAAAA,GAAAA,SAA2B,GAC1C,CAACuK,IAEEiB,GAAuBhO,EAAAA,EAAAA,KAAY,KACvC+M,EAAgBvK,EAAAA,GAAAA,SAA2B,GAC1C,CAACuK,IAEEkB,GAAuBjO,EAAAA,EAAAA,KAAY,KACvC+M,EAAgBvK,EAAAA,GAAAA,UAChB9gD,GAAiB,GAChB,CAACA,EAAiBqrD,IAEfmB,GAAoBlO,EAAAA,EAAAA,KAAY,KACpCn+C,OAAO46B,SAAS0xB,QAAQ,GACvB,IAEGC,GAAyBpO,EAAAA,EAAAA,KAAY,KACzC+M,EAAgBvK,EAAAA,GAAAA,gBAAkC,GACjD,CAACuK,IAEEsB,GAAuBrO,EAAAA,EAAAA,KAAY,KACvC+M,EAAgBvK,EAAAA,GAAAA,cAAgC,GAC/C,CAACuK,KAEJ1S,EAAAA,EAAAA,KAAU,KACR,IAAIiU,EASJ,OARI5iD,IAAY82C,EAAAA,GAAAA,SACd8L,EAAmBzsD,OAAO+F,YAAW,KACnCslD,GAAwB,EAAM,GAzFR,MA2FfU,EAAc9+B,SAAWlkB,EAAAA,KAClCsiD,GAAwB,GAGnB,KACDoB,IACF3lD,aAAa2lD,GACbA,OAAmBnvD,EACrB,CACD,GACA,CAACuM,IAEJ,MAAMlI,GAAOo5C,EAAAA,GAAAA,KAEb,OACE3B,EAAAA,GAAAA,cAAA,OACE/6C,GAAG,kBACHquD,aAAe3jD,EAAAA,QAAkCzL,EAAnB0uD,EAC9BW,aAAe5jD,EAAAA,QAAkCzL,EAAnB2uD,GAE9B7S,EAAAA,GAAAA,cAACwT,GAAc,CACbnN,iBAAkBmM,EAClB/hD,QAASA,EACT61C,eAAgBA,EAChBC,cAAeA,EACfE,iBAAkBqM,EAClBpM,iBAAkBqM,EAClBpM,iBAAkBqM,EAClBpM,QAASA,EACTC,qBAAsBA,EACtBL,gBAAiBA,IAEnBxG,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CACTtP,KAAMmU,EAAuB,OAAS,WACtC8J,YAAaiB,GACb3P,UAAWxxC,EACXgjD,eAAa,EACbC,oBAAqBnM,EAAAA,GAAAA,SACrBoM,YAAU,EACVC,iBAAkBrM,EAAAA,GAAAA,WAEhBjzC,IACA,OAAQ7D,GACN,KAAK82C,EAAAA,GAAAA,SACH,OACEvH,EAAAA,GAAAA,cAAC6T,GAAW,CACVvG,qBAAsBkF,EACtBrF,uBAAwBA,EACxBC,0BAA2B0E,EAC3B5E,gBAAiBA,EACjBG,iBAAkBmF,IAGxB,KAAKjL,EAAAA,GAAAA,aACH,OACEvH,EAAAA,GAAAA,cAAC4Q,GAAU,CACTlL,YAAaA,EACbI,WAAYA,EACZxxC,SAAUA,EACVsyC,QAASA,IAGf,KAAKW,EAAAA,GAAAA,SACH,OAAOvH,EAAAA,GAAAA,cAAC8Q,GAAW,CAACzpD,OAAQi/C,EAAgBhyC,SAAUA,EAAUsyC,QAASA,IAC3E,QACE,OAAiB,IAIxB6L,GACCzS,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL4R,OAAK,EACLC,MAAI,EACJpgC,WAAWkvB,EAAAA,GAAAA,GAAe,aAAc6P,GACxChR,QAASuR,GAER1qD,EAAK,wBAGT2pD,GACClS,EAAAA,GAAAA,cAACgU,GAAAA,EAAU,CACTruD,OAAQ0nD,EACRxzC,UAAW04C,EACXR,cAAeA,EACfkC,qBAAsB7B,EACtB8B,oBAAqB/B,IAGzBnS,EAAAA,GAAAA,cAACmU,GAAa,CACZpD,QAASiB,EACThB,iBAAkB+B,EAClB9B,aAAckC,EACdjC,WAAYkC,IAEV,ICtNV,IAAezT,EAAAA,EAAAA,KAPsBC,IACnC,MAAMwU,GAAWtU,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,YAGhD,OAAOqU,EAAWpU,EAAAA,GAAAA,cAACoU,EAAaxU,GAAYI,EAAAA,GAAAA,cAAC6Q,GAAAA,EAAO,KAAG,ICGzD,IAAelR,EAAAA,EAAAA,KAPqBC,IAClC,MAAMyU,GAAUvU,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,WAG/C,OAAOsU,EAAUrU,EAAAA,GAAAA,cAACqU,EAAYzU,GAAYI,EAAAA,GAAAA,cAAC6Q,GAAAA,EAAO,KAAG,ICEvD,IAAelR,EAAAA,EAAAA,KAP2BC,IACxC,MAAM0U,GAAgBxU,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAGrD,OAAOuU,EAAgBtU,EAAAA,GAAAA,cAACsU,EAAkB1U,GAAYI,EAAAA,GAAAA,cAAC6Q,GAAAA,EAAO,KAAG,ICaxC,IAoBtB0D,GAAW,SAAXA,GAAW,OAAXA,EAAAA,EAAW,eAAXA,EAAAA,EAAW,uBAAXA,EAAAA,EAAW,uBAAXA,EAAAA,EAAW,uBAAXA,EAAAA,EAAW,2BAAXA,CAAW,EAAXA,IAAW,IAWhB,MAAMC,GAAerpD,OAAOC,KAAKmpD,IAAa/wD,OAAS,EA8cvD,IAAem8C,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KACjBjgD,IACC,MAAMmC,GAAWb,EAAAA,EAAAA,IAAetB,IAE9BwO,cAAc,MACZtN,EAAK,KACLgM,GACD,4BACDu8C,EAA2B,iBAC3BjY,EAAgB,mBAChB4f,EAAkB,kBAClBC,GACElvD,GACE,gBACJ4O,EAAe,cACfgH,EACAM,UAAU,YACR2B,GACD,kBACDhD,EAAiB,gBACjBT,GACEvW,EAEEuY,GAAczM,EAAAA,EAAAA,IAAkB9L,GAKtC,MAAO,CACLqiD,YAAanhD,EACbuhD,WAAYv1C,EACZokD,wBAA8C,IAArB9f,EACzBiY,8BACA14C,kBACAgH,gBACAiC,cACAo3C,qBACAC,oBACAE,WAdiB/pD,QAAQ+Q,GAAa3W,IAetCoV,oBACAgzC,kBAfuBwH,EAAAA,EAAAA,IAAuBxxD,GAgB9CmD,iBAfuBhB,EAASgB,iBAgBhCggD,gBAAiBhhD,EAASqM,aAAaO,UACvCwH,kBACD,GA5Ce0pC,EA3ce7/C,IAgB7B,IAhB8B,YAClCiiD,EAAW,WACXI,EAAU,wBACV6O,EAAuB,4BACvB7H,EAA2B,gBAC3B14C,EAAe,cACfgH,EAAa,YACbiC,EAAW,mBACXo3C,EAAkB,kBAClBC,EAAiB,WACjBE,EAAU,kBACVv6C,EAAiB,iBACjBgzC,EAAgB,iBAChB7mD,EAAgB,gBAChBggD,EAAe,gBACf5sC,GACDnW,EACC,MAAM,qBACJqxD,EAAoB,uBACpBC,EAAsB,sBACtB/N,EAAqB,kBACrBgO,EAAiB,oBACjBlO,EAAmB,iBACnBmO,EAAgB,gBAChBC,EAAe,mBACfC,EAAkB,qBAClBC,EAAoB,SACpBluD,EAAQ,0BACRigD,IACEhrC,EAAAA,EAAAA,MAGEk5C,GAAY1R,EAAAA,EAAAA,IAAuB,OAClClzC,EAAS6kD,IAAc1U,EAAAA,EAAAA,IAA4B2G,EAAAA,GAAAA,WACnDgO,EAAgBC,IAAqB5U,EAAAA,EAAAA,IAASkH,EAAAA,GAAAA,OAC9CxB,EAAgBmP,IAAqB7U,EAAAA,EAAAA,IAAiB,KACtD8U,EAAcxI,IAAmByI,EAAAA,GAAAA,OAGjCC,EAAeC,IAAoBjV,EAAAA,EAAAA,IAAiB,GAE3D,IAAIkV,EAA2BvB,GAAYwB,KAC3C,OAAQtlD,GACN,KAAK82C,EAAAA,GAAAA,SACHuO,EAAcvB,GAAYyB,SAC1B,MACF,KAAKzO,EAAAA,GAAAA,SACHuO,EAAcvB,GAAYH,SAC1B,MACF,KAAK7M,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,gBACHuO,EAAcvB,GAAY0B,WAC1B,MACF,KAAK1O,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,cACHuO,EAAcvB,GAAY2B,SAI9B,MAAMC,GAAcpR,EAAAA,EAAAA,KAAaqR,IAC/B,SAASC,IACPf,EAAW/N,EAAAA,GAAAA,UACXiO,EAAkB1N,EAAAA,GAAAA,MAClB2N,EAAkB,IAClBV,EAAuB,CAAE3iD,WAAW,IACpC4iD,IACAroD,YAAW,KACTmoD,EAAqB,CAAEvwD,MAAO,KAC9BuiD,EAAoB,CAAEv2C,UAAMrM,IAC5B8iD,EAAsB,CAAE/hD,QAAIf,IAC5B6wD,EAAuB,CAAE3iD,WAAW,IACpCyjD,EAAiB9lD,KAAKC,MAAM,GAzEF,IA2E9B,CAEA,IAA8B,IAA1BomD,EAKJ,GAAI3lD,IAAY82C,EAAAA,GAAAA,cAKhB,GAAI92C,IAAY82C,EAAAA,GAAAA,gBAAhB,CAKA,GAAI92C,IAAY82C,EAAAA,GAAAA,cAAiC,CAC/C,MAAM+O,EAAoB/iD,SAASgjD,eAAe,2BAC9CD,GACFA,EAAkB/0B,MAEtB,CAEA,GAAI9wB,IAAY82C,EAAAA,GAAAA,SACd,OAAQgO,GACN,KAAKzN,EAAAA,GAAAA,YACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,YACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,YACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,SACL,KAAKA,EAAAA,GAAAA,SACL,KAAKA,EAAAA,GAAAA,aAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,MAGpB,KAAKA,EAAAA,GAAAA,sBAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,SAEpB,KAAKA,EAAAA,GAAAA,2BAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,uBAGpB,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,wBAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,SAGpB,KAAKA,EAAAA,GAAAA,oBAEH,YADA0N,EAAkBn4C,EAAcyqC,EAAAA,GAAAA,gBAAkCA,EAAAA,GAAAA,kBAGpE,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,gBAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,iBAGpB,KAAKA,EAAAA,GAAAA,2BAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,qBAGpB,KAAKA,EAAAA,GAAAA,0BAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,+BAGpB,KAAKA,EAAAA,GAAAA,8BAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,2BAGpB,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,iCAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,oBAEpB,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,iBAEpB,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,kCAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,qBAEpB,KAAKA,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,+BAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,kBAEpB,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,iBAEpB,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,mBAEpB,KAAKA,EAAAA,GAAAA,oCACL,KAAKA,EAAAA,GAAAA,mCAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,sBAEpB,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,mBAEpB,KAAKA,EAAAA,GAAAA,iBAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,eAEpB,KAAKA,EAAAA,GAAAA,wBAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,kBAEpB,KAAKA,EAAAA,GAAAA,qBAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,yBAEpB,KAAKA,EAAAA,GAAAA,sBAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,sBAEpB,KAAKA,EAAAA,GAAAA,0BAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,uBAEpB,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,kCAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,cAEpB,KAAKA,EAAAA,GAAAA,uBAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,4BAEpB,KAAKA,EAAAA,GAAAA,2BAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,wBAEpB,KAAKA,EAAAA,GAAAA,wBAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,4BAEpB,KAAKA,EAAAA,GAAAA,mBAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,mCAEpB,KAAKA,EAAAA,GAAAA,uBAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,oBAGpB,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,SAGpB,KAAKA,EAAAA,GAAAA,aAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,mBAGpB,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,iCAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,+BAGpB,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,yBAGH,OAFAwN,EAAW/N,EAAAA,GAAAA,eACXiO,EAAkB1N,EAAAA,GAAAA,MAGpB,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,YAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,UAGpB,KAAKA,EAAAA,GAAAA,eAEH,YADA0N,EAAkB1N,EAAAA,GAAAA,UAOpBr3C,IAAY82C,EAAAA,GAAAA,UAA8BoN,EAC5CW,EAAW/N,EAAAA,GAAAA,cAKb8O,GAnLA,MAFEf,EAAW/N,EAAAA,GAAAA,sBALX+N,EAAW/N,EAAAA,GAAAA,oBALX8O,GA+LS,GACV,CACD5lD,EAASkkD,EAAyBI,EAAwBC,EAAmBF,EAC7EhO,EAAqBE,EAAuBuO,EAAgBl4C,IAGxDm5C,GAAoBzR,EAAAA,EAAAA,KAAaxgD,IACjCkM,IAAY82C,EAAAA,GAAAA,UAKhB+N,EAAW/N,EAAAA,GAAAA,cAEPhjD,IAAUmhD,GACZoP,EAAqB,CAAEvwD,WAPvBkxD,EAAkBlxD,EAQpB,GACC,CAACkM,EAASi1C,EAAaoP,IAEpB2B,GAAoB1R,EAAAA,EAAAA,KAAY,KACpCuQ,EAAW/N,EAAAA,GAAAA,cACXuN,EAAqB,CAAEvwD,MAAO,KAC9ByiD,EAAsB,CAAE/hD,GAAIuB,GAAmB,GAC9C,CAACA,EAAkBwgD,EAAuB8N,KAE7C1V,EAAAA,EAAAA,KACE,IAAO3uC,IAAY82C,EAAAA,GAAAA,UAA+BoN,IAA4BC,IAAevH,GACzFtD,EAAAA,GAAAA,IAAsB,IAAMoM,WAC5BjyD,GACJ,CAACywD,EAAyBlkD,EAAS0lD,EAAavB,EAAYvH,IAG9D,MAAMqJ,GAAqB3R,EAAAA,EAAAA,KAAa/vC,IAClCvE,IAAY82C,EAAAA,GAAAA,eAIhBvyC,EAAE0qC,iBACF4V,EAAW/N,EAAAA,GAAAA,cAA+B,GACzC,CAAC92C,IAEEkmD,GAA4B5R,EAAAA,EAAAA,KAAa/vC,IAC7CA,EAAE0qC,iBACFx4C,EAAS,CAAEjC,GAAImW,EAAehW,sBAAsB,GAAO,GAC1D,CAACgW,EAAelU,IAEb0vD,GAAsB7R,EAAAA,EAAAA,KAAa/vC,IACvCA,EAAE0qC,iBACF4V,EAAW/N,EAAAA,GAAAA,SAA2B,GACrC,IAEGsP,GAAuB9R,EAAAA,EAAAA,KAAa/vC,IACxCA,EAAE0qC,iBACF4V,EAAW/N,EAAAA,GAAAA,SAA2B,GACrC,KAEHQ,EAAAA,GAAAA,GAAW,CACT,cAAe2O,EACf,cAAeC,KACX3O,EAAAA,IAAU,CACZ,QAAS2O,EACT,QAASC,MAEPE,EAAAA,IAAa9O,EAAAA,IAAU,CAAE,QAAS6O,MAGxCzX,EAAAA,EAAAA,KAAU,KACR8V,IAEIK,IAAmBzN,EAAAA,GAAAA,SACrBmN,GACF,GACC,CAACC,EAAiBD,EAAkBM,KAEvCwB,EAAAA,GAAAA,IAAc,UACe7yD,IAAvBuwD,IACFa,EAAW/N,EAAAA,GAAAA,UACXiO,EAAkBf,GAClBtN,EAA0B,CAAE5yC,YAAQrQ,KAGlCwwD,GACFxH,EAAgBwH,EAClB,GACC,CAACxH,EAAiBwH,EAAmBD,EAAoBtN,IAE5D,MAAM,WACJ6P,EAAU,YAAEC,EAAW,cAAEC,GCvZtB,SACLC,EACAC,EACAxQ,EACAyQ,EACAC,GAEA,MAAOhjD,EAAUijD,EAAcC,IAAkBzT,EAAAA,GAAAA,MAC1C0T,EAAeC,IAAoB9W,EAAAA,EAAAA,IAAiB,IACpD+W,EAAqBC,IAA0BhX,EAAAA,EAAAA,IAAiB,GAEjEiX,GAAkB9S,EAAAA,EAAAA,KAAarsC,IACnC,IAAKy+C,EAAWtjC,QACd,OAGF,MAAMikC,EAAUp/C,EAAS,GAAEA,MAAY,GACvCy+C,EAAWtjC,QAAQkvB,MAAMrqC,MAAQo/C,EAC7BR,GACFH,EAAWtjC,QAAQkvB,MAAMgV,YAAYT,EAAiBQ,EACxD,GACC,CAACR,EAAiBH,IAUrB,SAASD,IACP3jD,SAAS23B,KAAK8sB,UAAUC,OAAO,mBACjC,CA8CA,OAxDAC,EAAAA,EAAAA,KAAgB,KACTf,EAAWtjC,SAAYwjC,GAI5BQ,EAAgBR,EAAa,GAC5B,CAACC,EAAiBH,EAAYE,EAAcQ,KAsB/CzY,EAAAA,EAAAA,KAAU,KACR,IAAK9qC,EAAU,OAEf,MAAM6jD,EAAmBnjD,IACvB,MAAMojD,EAAWrnD,KAAKsnD,KAAKV,EAAsB3iD,EAAEsjD,QAAUb,GAC7DI,EAAgBO,EAAS,EAG3B,SAASG,IACPC,IACApB,EAASD,EAAWtjC,QAAS4kC,YAC/B,CAEA,SAASD,IACPtB,IACA3jD,SAAS0tC,oBAAoB,YAAakX,GAAiB,GAC3D5kD,SAAS0tC,oBAAoB,UAAWsX,GAAU,GAClDhlD,SAAS0tC,oBAAoB,OAAQsX,GAAU,GAC/Cf,GACF,CAMA,OAJAjkD,SAASytC,iBAAiB,YAAamX,GAAiB,GACxD5kD,SAASytC,iBAAiB,UAAWuX,GAAU,GAC/ChlD,SAASytC,iBAAiB,OAAQuX,GAAU,GAErCC,CAAO,GACb,CAACb,EAAqBF,EAAeN,EAAYC,EAAU9iD,EAAUkjD,EAAgBK,IAEjF,CAAEb,WA5CT,SAAoBhiD,GAClBA,EAAE0qC,iBAEFnsC,SAAS23B,KAAK8sB,UAAUxoC,IAAI,oBAE5BkoC,EAAiB1iD,EAAEsjD,SACnBV,EAAuBT,EAAWtjC,QAAS4kC,aAC3ClB,GACF,EAoCqBN,YAlCrB,SAAqBjiD,GACnBA,EAAE0qC,iBACFmY,OAAgB3zD,GAChB0iD,GACF,EA8BkCsQ,gBACpC,CDwUMwB,CAAUrD,GAAYh/C,GAAM8+C,EAAmB,CACjD/gD,gBAAiBiC,KACf++C,EAAsBhhD,EAAiB,uBAErCukD,GAA6B5T,EAAAA,EAAAA,KAAaxwC,IAC9C+gD,EAAW/N,EAAAA,GAAAA,UACXiO,EAAkBjhD,EAAO,GACxB,IAEH,SAASqkD,GAActkD,GACrB,OAAQwhD,GACN,KAAKvB,GAAYyB,SACf,OACEhW,EAAAA,GAAAA,cAACsU,GAAa,CACZhgD,SAAUA,EACVsyC,QAASuP,EACTpE,cAAe0E,EACfvJ,gBAAiBA,EACjBC,uBAAwBwL,EACxBvL,0BAA2BkI,EAC3BjI,iBAAkBA,EAClBzzC,gBAAiBA,IAGvB,KAAK26C,GAAYH,SACf,OACEpU,EAAAA,GAAAA,cAACoU,GAAQ,CACP9/C,SAAUA,EACVukD,cAAetD,EACfG,aAAcA,EACdxI,gBAAiBA,EACjB4L,eAAgBH,EAChB/R,QAASuP,EACTtP,qBAAsBiG,IAG5B,KAAKyH,GAAY0B,WACf,OACEjW,EAAAA,GAAAA,cAACqU,GAAO,CACN5X,IAAKmZ,EACLthD,SAAUA,EACVykD,WAAS,EACTtoD,QAASA,EACTqhD,gBAAiBwD,EACjB1O,QAASuP,IAGf,KAAK5B,GAAY2B,SACf,OACElW,EAAAA,GAAAA,cAACqU,GAAO,CACN5X,IAAKmZ,EACLthD,SAAUA,EACV7D,QAASA,EACTqhD,gBAAiBwD,EACjB1O,QAASuP,IAGf,QACE,OACEnW,EAAAA,GAAAA,cAACgZ,GAAQ,CACPvoD,QAASA,EACT+1C,gBAAiBA,EACjBd,YAAaA,EACbI,WAAYA,EACZQ,eAAgBA,EAChB4G,gBAAiBA,EACjB4E,gBAAiBwD,EACjB/O,cAAeiQ,EACfrJ,uBAAwBwL,EACxB/R,QAASuP,EACTtP,qBAAsBiG,EACtBzyC,kBAAmBA,EACnBgzC,iBAAkBA,EAClB0E,cAAe0E,IAIzB,CAEA,OACEzW,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CACTkD,IAAKmQ,EACL3iB,KAAMoa,EAA8B,OAASmM,EAAAA,GAC7CtI,YAAa6D,GACbvS,UAAW6T,EACXrC,eAAa,EACbC,oBAAqBa,GAAYwB,KACjCpC,YAAU,EACVC,iBAAkBW,GAAYwB,KAC9B9wD,GAAG,aACHi0D,cACElZ,EAAAA,GAAAA,cAAA,OACErsB,UAAU,gBACVwlC,YAAanC,EACboC,UAAWlC,EACXmC,cAAepC,KAIlB2B,GACU,K,iQEjgBjB,UAAgB,wBAAwB,uBAAuB,oBAAsB,uBAAuB,kCAAkC,uBAAuB,4BAA8B,uBAAuB,gCAAgC,uBAAuB,2BAA6B,uBAAuB,6BAA6B,uBAAuB,wBAA0B,wBC2LnZ,SAASU,GAASxrB,EAAW4B,EAAWh3B,EAAeC,EAAgB4gD,GACrE,MAAQ,IAAGzrB,KAAK4B,EAAI6pB,KAAUA,KAAUA,eACtC7gD,OAAWC,EAAS,EAAI4gD,KAAUA,KAAUA,YAAiB7gD,MACjE,CAoCA,UAAeinC,EAAAA,EAAAA,KAhN+Bl8C,IAExC,IAFyC,MAC7C4lB,EAAK,MAAErH,GACRve,EAEC,MAAM+1D,GAAe7V,EAAAA,EAAAA,IAAuB,MAEtC8V,GAAe/W,EAAAA,EAAAA,KAAQ,IAmF/B,SAAyBr5B,EAAerH,GACtC,MAAM03C,EAAerwC,EAAQrH,EAAQ,EAC/B23C,EAmBR,SAAsBtwC,GACpB,IAAIswC,EAAY,EAahB,OAZc,IAAVtwC,EACFswC,EAAY,GACO,IAAVtwC,EACTswC,EAAY,GACO,IAAVtwC,EACTswC,EAAY,IACO,IAAVtwC,GAEAA,EAAQ,KADjBswC,EAAY,KAKPA,CACT,CAlCoBC,CAAavwC,GACzBwwC,EAmCR,SAAuBxwC,EAAerH,GACpC,IAAI23C,EAAY,GAahB,OAZc,IAAVtwC,EACFswC,EAAY,GACO,IAAVtwC,EACTswC,EAAY,GACO,IAAVtwC,EACTswC,EAAsB,IAAV33C,EAAc,GAAK,IACZ,IAAVqH,GAEAA,EAAQ,KADjBswC,EAAY,KAKPA,CACT,CAlDqBG,CAAczwC,EAAOqwC,GAClCK,EAmDR,SAAwB1wC,EAAeswC,GACrC,OAAOtwC,GAAS,EAAI,GAAKswC,EAAYtwC,EAAQ,GAAKA,EAAQ,EAC5D,CArDsB2wC,CAAe3wC,EAAOswC,GAEpCM,EAAc,WAAU5wC,IACxB6wC,EAoDR,SAAqBj1D,EAAY00D,EAAmBtwC,GAGlD,IAAI8wC,EAAI,GACR,GAAc,IAAV9wC,EACF8wC,EAAIb,GAAS,EAAG,EAAG,EAAGK,EAJT,GAKTL,GAAS,EAAG,GAAI,EAAGK,EAAY,EALtB,GAMTL,GAAS,EAAG,GAAI,EAAGK,EANV,QAQb,IAAK,IAAI13C,EAAI,EAAGA,EAAIoH,EAAOpH,IACzBk4C,GAAKb,GAAS,GAAIK,EAAY,GAAK13C,EAAG,EAAG03C,EAT9B,GAaf,MACG,iBAAgB10D,uBACJk1D,wBAGjB,CAvEmBC,CAAYH,EAAYN,EAAWtwC,GAE9CgxC,EA4ER,SAA2Br4C,EAAe23C,EAAmBtwC,GAC3D,OAAc,IAAVA,EACK,EACY,IAAVA,EACQ,IAAVrH,EAAc,EAAI23C,EAAY,EAGzB,IAAVtwC,EACY,IAAVrH,EACK,EACY,IAAVA,EACF,GAGF,IAEC23C,EAAY,GAAK33C,CAE7B,CA9FyBs4C,CAAkBZ,EAAcC,EAAWtwC,GAC5DkxC,EA+FR,SAA4Bv4C,EAAeqH,EAAeswC,EAAmBI,GAC3E,OAAI1wC,GAAS,GAITrH,GAAS,EAHJ,EAKEA,GAASqH,EAAQ,EACnB0wC,EAAc,IAGfJ,EAAY,GAAK,GAAK33C,EAAQ,IAAM23C,EAAY,EAC1D,CA3G0Ba,CAAmBd,EAAcrwC,EAAOswC,EAAWI,GAC3E,MAAO,CACLF,aACAK,WACAG,iBACAE,kBACAR,cACAE,aAEJ,CArGWQ,CAAgBpxC,EAAOrH,IAC7B,CAACqH,EAAOrH,IAyCX,IAvCAk2C,EAAAA,EAAAA,KAAgB,KACd,IAAKsB,EAAa3lC,QAChB,OAGF,MAAM,YACJkmC,EAAW,gBACXQ,EAAe,WACfV,EAAU,eACVQ,EAAc,WACdJ,EAAU,SACVC,GACET,EAEEiB,EAAalB,EAAa3lC,QAAQ8mC,kBACxC,GAAInB,GAAc3lC,QAAS,CACzB,MAAM+mC,EAAiBpB,EAAa3lC,SAC9B,MAAEkvB,GAAU6X,EAClB7X,EAAMpqC,OAAU,GAAEohD,MAClBhX,EAAM8X,UAAa,eAAcN,OACjCxX,EAAMmX,SAAY,SAAQD,MAC1B,MAAMa,EAAMF,EAAetb,cAAc,OACnCyb,EAAMH,EAAetb,cAAc,OACnC0b,EAAOJ,EAAetb,cAAc,QACrCwb,GACCJ,IACFA,EAAWO,UAAa,oCAAmCf,mBAG3Dc,IACFA,EAAKC,UAAYf,GAEfa,IACFA,EAAIhY,MAAMpqC,OAAU,GAAEkhD,MACtBkB,EAAIhY,MAAM8X,UAAa,cAAaR,OAExC,IACC,CAACZ,IAEU,IAAVpwC,EACF,OACE22B,EAAAA,GAAAA,cAAA,OAAKrsB,UAAWsvB,GAAAA,qBACdjD,EAAAA,GAAAA,cAAA,OACErsB,UAAWsvB,GAAAA,4BACXiC,IAAKsU,KAMb,MAAM,YACJO,EAAW,gBAAEQ,EAAe,WAAEV,EAAU,eAAEQ,EAAc,WAAEJ,GACxDR,EAEJ,OACEzZ,EAAAA,GAAAA,cAAA,OAAKrsB,WAAWkvB,EAAAA,GAAAA,GACdI,GAAAA,oBACA55B,EArEoB,GAqES45B,GAAAA,0BAG7BjD,EAAAA,GAAAA,cAAA,OACErsB,UAAWsvB,GAAAA,2BACXiC,IAAKsU,EACLzW,MACG,oBAAmBkX,uCACVF,+BAAyCQ,SAGrDva,EAAAA,GAAAA,cAAA,aACAA,EAAAA,GAAAA,cAAA,OACErsB,UAAWsvB,GAAAA,wBACXF,MAAQ,aAAY8W,uBAAgCQ,2BAC1BE,UAG1B,I,wCCvGV,SAAyK,uBAAzK,GAAoN,uBC+LpN,IAAe5a,EAAAA,EAAAA,KAhJ2Bl8C,IAGpC,IAHqC,QACzCqF,EAAO,MAAEugB,EAAK,MAAErH,EAAK,YAAEk5C,EAAW,UAAEvnC,EAAS,eAAEwnC,EAAc,QAAEzZ,EAAO,iBAAE0Z,EAAgB,UACxF39C,EAAS,YAAE49C,GACZ53D,EACC,MAAM,qBAAE63D,IAAyBn/C,EAAAA,EAAAA,MAC3B5T,GAAOo5C,EAAAA,GAAAA,KAEP4Z,GAAiBC,EAAAA,GAAAA,GAAa1yD,GAC9B2yD,GAAejZ,EAAAA,GAAAA,IAASkZ,EAAAA,EAAAA,IAAoB5yD,EAAS,cACrD6yD,GAAYC,EAAAA,EAAAA,IAAoB9yD,GAEhC+yD,GADkBC,EAAAA,GAAAA,GAAkB,CAACr+C,GAxBnB,MAyBoBA,GAErCs+C,EAAmBC,EAAiBC,IAAoBlY,EAAAA,GAAAA,KAEzDmY,GAAqBnX,EAAAA,EAAAA,KAAY,KACrCkX,IAEId,GACFA,EAAeryD,EAAQ7D,GACzB,GACC,CAACg3D,EAAkBd,EAAgBryD,EAAQ7D,KAExCk3D,GAAeC,EAAAA,EAAAA,IAA6BtzD,GAE5CuzD,GAA0BtX,EAAAA,EAAAA,KAAY,KACtCoX,GACFb,EAAqB,CAAE/wD,UAAWzB,EAAQ7D,GAAIo/B,OAAQ83B,GACxD,GACC,CAACb,EAAsBa,EAAcrzD,EAAQ7D,MAEzCq3D,EAAcC,EAAkBC,IAAsBzY,EAAAA,GAAAA,MAEvD,YAAE0Y,EAAW,gBAAEC,IAAoBC,EAAAA,GAAAA,GAAajb,GAgBtD,OACE1B,EAAAA,GAAAA,cAAA,OAAKrsB,WAAWkvB,EAAAA,GAAAA,GACd,6BDlGiB,uBCkG0BwY,GAAe,aAAc1nC,KAGtEtK,EAAQ,GAAKwyC,IACb7b,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL3mC,OAAK,EACL4mC,KAAK,UACLJ,MAAM,cACNuG,UAAW//C,EAAK,gCAChBm5C,QAAUma,OAAsC33D,EAAnBk3D,GAE5B39C,GACCuiC,EAAAA,GAAAA,cAAC8B,GAAAA,EAAO,CACNC,MAAM,OACNpuB,WAAWkvB,EAAAA,GAAAA,GDhH2G,uBCiHpGI,IAAqB4Y,GAAoB5Y,MAI/DjD,EAAAA,GAAAA,cAAA,KACErsB,WAAWkvB,EAAAA,GAAAA,GACT,OAAQ,gBAAiBI,GAAoB4Y,GAAoB5Y,OAKxEkY,GACCnb,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL3mC,OAAK,EACL4mC,KAAK,UACLJ,MAAM,cACNuG,UAAW//C,EAAK,0BAChBm5C,QAASsa,GAEThc,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,qBAGjBqsB,EAAAA,GAAAA,cAAC4c,GAAAA,EAAa,CACZj3D,OAAQo2D,EACRtW,QAASwW,EACT90D,KAAK,wCACL01D,aAAa,QACbC,eAAgBZ,IAElBlc,EAAAA,GAAAA,cAAA,OACErsB,WAAWkvB,EAAAA,GAAAA,GD/I2C,uBC+INyZ,GD/I+N,wBCgJ/Q5a,QAAS+a,EACTtD,YAAauD,EACb9a,IAAKr5C,EAAKs5C,MAAQ,WAAQ39C,GAE1B87C,EAAAA,GAAAA,cAAC+c,GAAuB,CACtB1zC,MAAOA,EACPrH,MAAOA,IAETg+B,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CAACC,UAAWn5C,EAAQ7D,GAAIytC,KAAK,gBAAgB/e,UDxJ4b,wBCkF1f,SAAyBqpC,EAAuBnmB,EAAkBomB,GAChE,MAAM,MAAEvkD,EAAK,OAAEC,IAAWukD,EAAAA,GAAAA,MACpBC,EAAStmB,GAAWmmB,EAE1B,OACEhd,EAAAA,GAAAA,cAAA,OAAKrsB,UDvFshB,wBCwFxhBqpC,IAAiBC,GACbjd,EAAAA,GAAAA,cAAA,OAAKrsB,UDzFyjB,uBCyFrhBwvB,IAAKga,EAAQzkD,MAAOA,EAAOC,OAAQA,EAAQyqC,IAAI,KAC5F4Z,GACIhd,EAAAA,GAAAA,cAACod,GAAAA,EAAY,CAACJ,aAAcG,EAAQE,UAAWxyD,QAAQoyD,GAAUvkD,MAAOA,EAAOC,OAAQA,IAGlG,CA2DS2kD,CACC/B,EACAE,EACAE,IAGJ3b,EAAAA,GAAAA,cAAA,OAAKrsB,WAAWkvB,EAAAA,GAAAA,GD/J2E,uBC+JxC0Y,GD/J8S,yBCgK/Vvb,EAAAA,GAAAA,cAAA,OAAKrsB,UDhKyX,uBCgKhWiuB,IAAI,SAC9BsZ,GACAlb,EAAAA,GAAAA,cAACud,GAAAA,EAAe,CAACp2D,KAAO,GAAEoB,EAAK,oBAAoByZ,EAAQ,EAAK,KAAGqH,EAAQrH,GAAU,OAGtFk5C,IAAesC,EAAAA,GAAAA,GAAWtC,IAE7Blb,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CAACC,UAAWn5C,EAAQ7D,GAAIytC,KAAK,oBAAoB/e,UDvKgQ,wBCwK1TqsB,EAAAA,GAAAA,cAAA,KAAG4B,IAAI,OAAOjuB,UDxK+Y,wBCyK3ZqsB,EAAAA,GAAAA,cAACyd,GAAAA,EAAc,CAACl1D,KAAMA,EAAMO,QAASA,EAAS40D,QAAS7yD,QAAQ0wD,QAIrEvb,EAAAA,GAAAA,cAAC2d,GAAAA,EAAY,MACZxB,GACCnc,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLC,KAAK,OACLxuB,UDjLmc,uBCkLnc+tB,QAAS2a,EACTuB,uBAAqB,EACrBtK,aAAe3jD,EAAAA,QAAkCzL,EAAnBq4D,EAC9BhJ,aAAe5jD,EAAAA,QAAoCzL,EAArBs4D,GAE7BL,EAAah1D,OAIhB,I,oDC1LV,MAAM02D,GAAiB,IAEhB,SAASC,GAAWC,EAAsBC,GAAkE,IAAnDC,EAAkB16D,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,YACnF,MAAMoU,EAAMomD,aAAiBG,KAAOjxC,IAAIkxC,gBAAgBJ,GAASA,EAC3DK,EAAM,IAAIC,MAChB,OAAO,IAAIhtC,SAASitC,IAClBF,EAAIG,OAAS,KACXC,GAAMJ,EAAKA,EAAI1lD,MAAQslD,EAAOI,EAAIzlD,OAASqlD,EAAOC,GAC/ChkD,MAAMwkD,IACL,IAAKA,EAAM,MAAM,IAAIC,MAAM,wBAC3B,OAAOzxC,IAAIkxC,gBAAgBM,EAAK,IAEjCxkD,KAAKqkD,GACLK,SAAQ,KACHZ,aAAiBG,MACnBjxC,IAAI2xC,gBAAgBjnD,EACtB,GACA,EAENymD,EAAIjb,IAAMxrC,CAAG,GAEjB,CAyBA4F,eAAeihD,GACbJ,EAAuB1lD,EAAeC,GAChB,IADgCslD,EAAkB16D,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,YAG3E,KAAI,sBAAuBqD,QA6BzB,OAAOi4D,GAAaT,EAAK1lD,EAAOC,OAAQzU,EAAW+5D,GA5BnD,IACE,MAAMa,QAAel4D,OAAOm4D,kBAAkBX,EAC5C,CAAEY,YAAatmD,EAAOumD,aAActmD,EAAQumD,cAAe,SAC7D,GAAIJ,EAAOnmD,SAAWA,GAAUmmD,EAAOpmD,QAAUA,EAC/C,MAAM,IAAIgmD,MAAM,sCAElB,MAAMS,QAAqBC,EAAAA,GAAAA,IAAgBhB,EAAIjb,KACzCkc,GAAYC,EAAAA,GAAAA,IAAaH,GAAgBtB,GAAiB,OAAS,OACzE,aAAa,IAAIxsC,SAASkuC,IACxB,MAAMC,EAASjsD,SAASksD,cAAc,UACtCD,EAAO9mD,MAAQomD,EAAOpmD,MACtB8mD,EAAO7mD,OAASmmD,EAAOnmD,OACvB,MAAM+mD,EAAQF,EAAOG,WAAW,MAChCD,EAAME,UAAYP,EAClBK,EAAMG,SAAS,EAAG,EAAGL,EAAO9mD,MAAO8mD,EAAO7mD,QAC1C,MAAMmnD,EAAMN,EAAOG,WAAW,kBAC1BG,EACFA,EAAIC,wBAAwBjB,GAE5BY,EAAMM,UAAUlB,EAAQ,EAAG,GAE7BU,EAAOS,OAAOV,EAAKtB,EAAW,GAElC,CAAE,MAAOjpD,GAEP,OAAO6pD,GAAaT,EAAK1lD,EAAOC,OAAQzU,EAAW+5D,EACrD,CAIJ,CAEA1gD,eAAeshD,GACbT,EAAuB1lD,EAAeC,GAChB,IADgC2zB,EAAY/oC,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,GAAK06D,EAAkB16D,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,YAE/F,MAAMi8D,EAASjsD,SAASksD,cAAc,UAChCK,EAAMN,EAAOG,WAAW,MACxBO,EAAK3sD,SAASksD,cAAc,UAC5BU,EAAOD,EAAGP,WAAW,MAK3B,GAHAH,EAAO9mD,MAAQA,EACf8mD,EAAO7mD,OAASA,EAEZylD,EAAI1lD,MAAQ4zB,EAAO5zB,EAAO,CAC5B,MAAM0nD,EAAM,EAAI9zB,EAChB,IAAI+zB,EAAM,CACR3nD,MAAO3H,KAAKI,MAAMitD,EAAI1lD,MAAQ4zB,GAC9B3zB,OAAQ5H,KAAKI,MAAMitD,EAAIzlD,OAAS2zB,IAQlC,IALA4zB,EAAGxnD,MAAQ2nD,EAAI3nD,MACfwnD,EAAGvnD,OAAS0nD,EAAI1nD,OAEhBwnD,EAAKH,UAAU5B,EAAK,EAAG,EAAGiC,EAAI3nD,MAAO2nD,EAAI1nD,QAElC0nD,EAAI3nD,MAAQ4zB,EAAO5zB,GACxB2nD,EAAM,CACJ3nD,MAAO3H,KAAKI,MAAMkvD,EAAI3nD,MAAQ4zB,GAC9B3zB,OAAQ5H,KAAKI,MAAMkvD,EAAI1nD,OAAS2zB,IAElC6zB,EAAKH,UAAUE,EAAI,EAAG,EAAGG,EAAI3nD,MAAQ0nD,EAAKC,EAAI1nD,OAASynD,EAAK,EAAG,EAAGC,EAAI3nD,MAAO2nD,EAAI1nD,QAGnFmnD,EAAIE,UAAUE,EAAI,EAAG,EAAGG,EAAI3nD,MAAO2nD,EAAI1nD,OAAQ,EAAG,EAAG6mD,EAAO9mD,MAAO8mD,EAAO7mD,OAC5E,MACEmnD,EAAIE,UAAU5B,EAAK,EAAG,EAAGoB,EAAO9mD,MAAO8mD,EAAO7mD,QAGhD,MAAMwmD,QAAqBC,EAAAA,GAAAA,IAAgBhB,EAAIjb,KACzCkc,GAAYC,EAAAA,GAAAA,IAAaH,GAAgBtB,GAAiB,OAAS,OAIzE,OAHAiC,EAAIF,UAAYP,EAChBS,EAAIQ,yBAA2B,mBAC/BR,EAAID,SAAS,EAAG,EAAGL,EAAO9mD,MAAO8mD,EAAO7mD,QACjC,IAAI0Y,SAASitC,IAClBkB,EAAOS,OAAO3B,EAASL,EAAW,GAEtC,C,6EC9GMsC,GAAkB,CAAE7nD,MAAO,IAAKC,OAAQ,KACxC6nD,GAAe,I,4BCgCrB,MAAMC,GAAyC,CAC7C,GAAK,IACL,IAAM,GACN,EAAG,EACH,IAAK,IACL,EAAG,KAECC,GAAuBv1D,OAAOC,KAAKq1D,IAAgBx3D,OAAOJ,IAAI0C,QA2SpE,IAAe+3C,EAAAA,EAAAA,KACb,CAACjgD,EAAMmd,KAA8B,IAA5B,QAAE1X,GAAS0X,EAClB,MAAMjX,GAASC,EAAAA,EAAAA,IAAanG,EAAQyF,GAC9B1C,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQyF,EAAQhF,SAClC,OACJiI,EAAM,aAAEC,EAAY,QAAEC,EAAO,qBAAEG,IAC7BzH,EAAAA,EAAAA,IAAetB,GAAQ6I,YAE3B,MAAO,CACL3C,SACAnD,OACA2F,SACAC,eACAI,uBACAH,UACD,GAfL,EAtS+CxI,IAUzC,IAV0C,QAC9CqF,EAAO,UACP6qB,EAAS,KACTgtC,EAAI,OACJp3D,EAAM,KACNnD,EAAI,OACJ2F,EAAM,aACNC,EAAY,qBACZI,EAAoB,QACpBH,GACDxI,EACC,MAAM,qBACJm9D,EAAoB,2BACpBC,EAA0B,oBAC1BC,EAAmB,aACnBj1D,EAAY,iBACZ4wB,IACEtgB,EAAAA,EAAAA,MAGE+oC,GAAMvB,EAAAA,EAAAA,IAAuB,MAC7Bp7C,GAAOo5C,EAAAA,GAAAA,MACP,SAAE2C,IAAaC,EAAAA,EAAAA,OACf,MAAEwc,EAAK,MAAEzxC,EAAK,MAAEqnB,IAAUC,EAAAA,EAAAA,IAAkB9tC,GAC5Ck4D,EAAUn2D,QAAQykB,GAASqnB,GAC3BsqB,EAA6BD,IAAYD,GAAOG,UAAY,GAAKC,EAAAA,IACjEC,EAAa73D,GAASG,EAAAA,EAAAA,IAAenB,EAAMgB,QAAUrF,EACrDm9D,EAAYlyB,GAAAA,IAA0BusB,EAAAA,EAAAA,IAAoB5yD,EAAS,WACnEw4D,EDrEwBC,EAC9Bz4D,EAAqBS,EAA4BnD,KAEjD,MAAMmC,GAAOo5C,EAAAA,GAAAA,MAEP,MAAEof,EAAK,MAAEzxC,IAAUsnB,EAAAA,EAAAA,IAAkB9tC,GACrCgL,EAAQitD,EAASA,EAAMjtD,OAASitD,EAAMS,SAAYlyC,EAAQ,gBAAkB,GAC5EmyC,EAASV,GAAOW,WAAcn4D,IAAUG,EAAAA,EAAAA,IAAenB,EAAMgB,GAC7Do4D,EAASv7D,IAAQyV,EAAAA,EAAAA,GAAatT,EAAMnC,IAAU,WAE9Cw7D,EAAkBb,IAASc,EAAAA,EAAAA,IAAiBd,KAAUrF,EAAAA,EAAAA,IAAoB5yD,EAAS,aACnF21B,EAAal1B,IAAUu4D,EAAAA,EAAAA,IAAkBv4D,EAAQ,OACjD6L,EAAQ2rD,GAASa,GAAoBtyC,GAASmP,EAC9Coc,GAAQ2H,EAAAA,GAAAA,GAASptC,GAEjB+sC,GAAOO,EAAAA,EAAAA,KAAQ,IA2BvB,SAAsBqe,EAAkBzxC,EAAkB3X,GACxD,IAAKA,EAAK,OAAO4oD,GACjB,GAAIQ,EAAO,CACT,IAAKA,EAAMgB,gBAAgBv+D,OAAQ,OACnC,MAAMw+D,EAAYjB,EAAMgB,eAAe/yD,MAAMmzC,GAAuB,MAAdA,EAAKh9C,OAC3D,OAAO68D,GAAajB,EAAMgB,eAAe,EAC3C,CAEA,OAAIzyC,EACK2yC,GAAAA,QADT,CAKF,CAvCWC,CAAanB,EAAOzxC,EAAOurB,IACjC,CAACkmB,EAAOlmB,EAAOvrB,KACVlmB,OAAQuO,IAAQwqD,EAAAA,GAAAA,IAAS,IAanC,SAAyBxqD,EAAcwqC,GACrC,IAAKxqC,EAAK,OAAO0Z,QAAQitC,QAAQ8D,IACjC,IAAKjgB,EAAM,OD/BN,SACL4b,EAAsBrlD,EAAeC,GACpB,IADoCslD,EAAkB16D,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,YAE1E,MAAMoU,EAAMomD,aAAiBG,KAAOjxC,IAAIkxC,gBAAgBJ,GAASA,EAC3DK,EAAM,IAAIC,MAChB,OAAO,IAAIhtC,SAASitC,IAClBF,EAAIG,OAAS,KACXC,GAAMJ,EAAK1lD,EAAOC,EAAQslD,GACvBhkD,MAAMwkD,IACL,IAAKA,EAAM,MAAM,IAAIC,MAAM,wBAC3B,OAAOzxC,IAAIkxC,gBAAgBM,EAAK,IAEjCxkD,KAAKqkD,GACLK,SAAQ,KACHZ,aAAiBG,MACnBjxC,IAAI2xC,gBAAgBjnD,EACtB,GACA,EAENymD,EAAIjb,IAAMxrC,CAAG,GAEjB,CCUoB0qD,CAAY1qD,EAAK6oD,GAAcA,IACjD,MAAMtyB,EAAMn9B,KAAKm9B,IAAIiU,EAAKzpC,MAAOypC,EAAKxpC,QACtC,OAAIu1B,EAAMsyB,GAED1C,GAAWnmD,EADJ6oD,GAAetyB,GAGxB7c,QAAQitC,QAAQ3mD,EACzB,CArBI2qD,CAAgBznB,EAAOsH,IACtB,CAACtH,EAAOsH,GAAOigB,IAClB,OAAO1f,EAAAA,EAAAA,KAAQ,KACN6f,EAAAA,GAAAA,IAAmB,CACxBzuD,QACA2tD,SACAE,QACAa,QAAS,CAAC,CAAErf,IAAKxrC,OAElB,CAACgqD,EAAOF,EAAQ3tD,EAAO6D,GAAK,ECyCT4pD,CAAwBz4D,EAASS,EAAQnD,IAEzD,UACJq8D,EAAS,KACTC,EAAI,UACJC,EAAS,iBACTC,EAAgB,qBAChBC,EAAoB,QACpBx8C,EAAO,OACPy8C,EAAM,UACNC,EAAS,YACTC,EAAW,gBACXC,IACEC,EAAAA,GAAAA,IACFC,EAAAA,GAAAA,IAAYr6D,IACZs6D,EAAAA,EAAAA,IAAiBt6D,GACjBk4D,EAAU,QAAU,QACpBK,OACAn9D,EACAo9D,OACAp9D,GACA,OACAA,OACAA,GACAmsC,EAAAA,EAAAA,IAAevnC,IACf,IAGI,kBACJu6D,EAAiB,wBACjBC,EAAuB,kBAAEC,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBxe,GAErBuX,GAAc1X,EAAAA,EAAAA,KAAY,KAC9Bl5C,EAAa,CAAE/H,OAAQgF,EAAQhF,OAAQyG,UAAWzB,EAAQ7D,IAAK,GAC9D,CAAC4G,EAAc/C,EAAQhF,OAAQgF,EAAQ7D,KAEpCssD,GAAcxM,EAAAA,EAAAA,KAAY,KAC1B4d,GACFF,IAEFhmC,KACAknC,EAAAA,GAAAA,MACAjB,GAAM,GACL,CAACjmC,EAAkBkmC,EAAWF,EAAWC,IAEtCkB,GAAqB7e,EAAAA,EAAAA,KAAa1Y,IACtCu0B,EAAqB,CAAE70D,OAAQsgC,EAAQ,MAEvC02B,EAAU12B,EAAQ,IAAI,GACrB,CAACu0B,EAAsBmC,IAEpBc,GAAoB9e,EAAAA,EAAAA,KAAY,KAChCp1C,EAAAA,KAAiB4T,EAAAA,KACrBy/C,IACAlC,EAAoB,CAAE70D,SAAUA,IAAU,GACzC,CAACA,EAAS60D,EAAqBkC,IAE5Bc,GAAqB/e,EAAAA,EAAAA,KAAY,SAACgf,GACtC,MAAMC,EAAOvD,GAAesD,GACtBE,EA5FoB,IA4FHF,MAFwCxgE,UAAAC,OAAA,QAAAU,IAAAX,UAAA,KAAAA,UAAA,IAG/Ds9D,EAA2B,CAAE70D,aAAcg4D,EAAM53D,qBAAsB63D,IACvEhB,EAAgBgB,EAAiBD,EA9FP,EA+F5B,GAAG,CAACnD,EAA4BoC,IAE1BiB,GAAsBnf,EAAAA,EAAAA,KAAY,KACtCye,IACA,MAAMW,EAAU54D,OAAOJ,OAAO8f,QAAQw1C,IAAgBzxD,MAAKiC,IAAA,IAAE,CAAE+yD,GAAK/yD,EAAA,OAAK+yD,IAASh4D,CAAY,MAAI,KAnGxE,EAqGpBo4D,GAAeh4D,EAErB03D,EACEM,GAxGwB,IAwGTD,EAvGc,EAuGmDA,EAChFC,EACD,GACA,CAACZ,EAAwBp3D,EAAsBJ,EAAc83D,IAE1DO,GAAqBtf,EAAAA,EAAAA,KAAY,KACrC,MAAMuf,EAAcn5D,OAAO8f,QAAQw1C,IAAgBzxD,MAAK+Q,IAAA,IAAE,CAAEikD,GAAKjkD,EAAA,OAAKikD,IAASh4D,CAAY,MAAI,IA9GrE,EAgHpB7E,EAAQ,GAhHY,IAgHV6E,EA/Ge,EA+GuDs4D,KACtF,OACEtkB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,oBACZ0vC,GAAqBrjB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,oBAAoB+tB,QAAS8hB,IAElExjB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL3mC,OAAK,EACLoY,WAAWkvB,EAAAA,GAAAA,GACT,kBAAmBz2C,GAAwB,UAAWi3D,GAAqB,UAE7EthB,MAAM,cACNI,KAAK,UACLmG,UAAU,gBACVnD,QAASb,EACTgP,aAAciQ,EACd7hB,QAASwiB,EACT/K,YAAamK,EACbiB,cAAehB,GAEfvjB,EAAAA,GAAAA,cAAA,QAAMrsB,WAAWkvB,EAAAA,GAAAA,GACf,wBACgB,IAAhB17C,EAAK3D,QAAgB,QACL,IAAhB2D,EAAK3D,QAAgB,SAGpB2D,IAGD,GAEP,CACDm8D,EAAyBC,EAAmBC,EAAwBU,EAAqBb,EACzF/e,EAAUl4C,EAAsBJ,IAG5Bw4D,IAAa9hB,EAAAA,EAAAA,KAAQ,IACV,IAAX32C,GAAgBE,EAAgB,aAChCF,EAAS,GAAY,gBACrBA,EAAS,GAAY,gBAClB,iBACN,CAACA,EAAQE,IAEZ,IAAI00D,EAIJ,OACE3gB,EAAAA,GAAAA,cAAA,OAAKrsB,WAAWkvB,EAAAA,GAAAA,GAAe,cAAelvB,GAAYiuB,IAAKr5C,EAAKs5C,MAAQ,WAAQ39C,EAAWghD,IAAKA,GAClGlF,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,sBAAsB+tB,QAAS+a,GAC3CsE,EA+FT,SAAqBA,GACnB,MAAM,MAAEjtD,EAAK,UAAE4tD,EAAS,SAAEF,GAAaT,EAEvC,OACE/gB,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,QAAQiuB,IAAI,SAAQ4b,EAAAA,GAAAA,GAAW1pD,GAAS0tD,IACtDE,GACC1hB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,WAAWiuB,IAAI,SAAQ4b,EAAAA,GAAAA,GAAWkE,IAIzD,CA1GiB+C,CAAY1D,GA4G7B,SAAqB2D,EAAkBtD,GACrC,OACEphB,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,QAAQiuB,IAAI,QAAQwf,IAAc5D,EAAAA,GAAAA,GAAW4D,IAC5DphB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,WAAWiuB,IAAI,QAAQ8iB,GAG5C,CAnHsCC,CAAYp8D,EAAK,eAAgB64D,GAC/DphB,EAAAA,GAAAA,cAAC2d,GAAAA,EAAY,OAGf3d,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL3mC,OAAK,EACL4pC,QAASb,EACTvC,MAAM,cACNI,KAAK,UACLxuB,UAAU,gBACVixC,SAAUv+C,IACVq7B,QAASmhB,EACTva,UAAU,kBAEVtI,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,6BAEfqsB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL3mC,OAAK,EACL4pC,QAASb,EACTvC,MAAM,cACNI,KAAK,UACLxuB,WAAWkvB,EAAAA,GAAAA,GAAe,cAAe,gBAAiB8f,EAAY,QAAU,QAChFjhB,QAAS+gB,EACTna,UAAWqa,EAAY,cAAgB,cAEvC3iB,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,mBACbqsB,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,qBAEfqsB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL3mC,OAAK,EACL4pC,QAASb,EACTvC,MAAM,cACNI,KAAK,UACLxuB,UAAU,gBACVixC,SAAU9B,IACVphB,QAASkhB,EACTta,UAAU,cAEVtI,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,yBAGfqsB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,yBACbqsB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL3mC,OAAK,EACLoY,UAAU,8BACVouB,MAAM,cACNI,KAAK,UACLmG,UAAU,SACV5G,QAASmiB,EACT1e,QAASb,GAETtE,EAAAA,GAAAA,cAAA,KAAGrsB,WAAWkvB,EAAAA,GAAAA,GAAe,OAAQ2hB,QAGrCjhD,EAAAA,IACAy8B,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,yBACbqsB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,yBACfqsB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,iBACbqsB,EAAAA,GAAAA,cAAC6kB,GAAAA,EAAW,CAACC,MAAI,EAACz4B,MAAOpgC,EAAU,EAAa,IAATF,EAAckgD,SAAU2X,OAMtE3C,GACCjhB,EAAAA,GAAAA,cAACkL,GAAAA,EAAY,CACX6Z,UAAW1B,EACX/X,UAAU,QACVoG,UAAU,MACV/9B,UAAU,qBACVw3B,QAASkZ,EACT5e,QAAS+d,EACTwB,OAAQvB,EACRwB,qBAAsBzB,GAErB9C,GAAqB73D,KAAKm7D,GA0CrC,SACEA,EAAckB,EAAqBxjB,EACnCt1C,GAEA,MAAM+4D,EAAcD,IAAgBzE,GAAeuD,IAAS53D,GA1RhC,IA2RtB43D,IAAmC53D,EACzC,OACE4zC,EAAAA,GAAAA,cAACyK,GAAAA,EAAQ,CACPhO,IAAKunB,EAELtiB,QAASA,IAAMA,EAAQsiB,GACvBtZ,KAAMya,EAAa,aAAUjhE,EAC7BkhE,WAAaD,OAAuDjhE,EAA1C87C,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,2BAEtCqwC,EAAK,IAGZ,CA1DmBqB,CAA2BrB,EAAMh4D,EAAc83D,EAAoB13D,MAKhF4zC,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL3mC,OAAK,EACLoY,UAAU,eACVouB,MAAM,cACNI,KAAK,UACLT,QAAS6P,EACTjJ,UAAU,gBAEVtI,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,qBAEX,I,2BCzRV,MAgJA,IAAegsB,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAACjgD,EAAM4N,KAAA,IAAE,OAAEnN,GAAQmN,EAAA,MAAkB,CACnCmK,cAAe/X,EAAO+X,cACtBhV,MAAMC,EAAAA,EAAAA,IAAWhD,EAAQS,GACzB+iB,MAAM2Z,EAAAA,EAAAA,IAAS18B,IAAUgjB,EAAAA,EAAAA,IAAWzjB,EAAQS,QAAUI,EACvD,GALiBo/C,EAhJ+B7/C,IAE7C,IAF8C,OAClDK,EAAM,UAAE6vB,EAAS,KAAEvtB,EAAI,KAAEygB,EAAI,SAAE3L,EAAQ,cAAEE,GAC1C3X,EACC,MAAM,qBACJ6hE,EAAoB,aACpBC,EAAY,WACZC,EAAU,WACVC,EAAU,aACVC,EAAY,eACZC,EAAc,cACdC,EAAa,mBACbC,EAAkB,oBAClBC,IACE3pD,EAAAA,EAAAA,MAEE5T,GAAOo5C,EAAAA,GAAAA,MACNokB,EAAsBC,EAAoBC,IAAuBliB,EAAAA,GAAAA,MACjEmiB,EAAkBC,IAAuBvlB,EAAAA,EAAAA,KAAkB,IAC3DwlB,EAAkBC,IAAuBzlB,EAAAA,EAAAA,KAAkB,IAC5D,WAAE/yB,GAAeznB,GAAQ,CAAC,GAC1B,eACJkgE,EAAc,cAAEC,EAAa,cAAEC,EAAa,gBAAEC,GAC5CvrD,GAAY,CAAC,EACXwrD,EAAetgE,IAAQugE,EAAAA,EAAAA,IAAiBvgE,GAExCwgE,GAAmB7hB,EAAAA,EAAAA,KAAY,KACnCugB,EAAqB,CAAEryD,OAAQnP,IAC3BwiE,GACFT,EAAmB,CAAE5gE,GAAInB,GAC3B,GACC,CAACwhE,EAAsBgB,EAAgBT,EAAoB/hE,IAExD+iE,GAAqB9hB,EAAAA,EAAAA,KAAY,KACrCkhB,IACAV,EAAa,CAAEuB,UAAWhjE,EAAQ+pB,WAAYA,IAC1C04C,GAAiBL,GACnBV,EAAW,CAAE1hE,WAEXsiE,GACFX,EAAW,CAAE3hE,UACf,GACC,CACD+pB,EAAY03C,EAAcU,EAAqBR,EAAYD,EAAYe,EAAeH,EACtFF,EAAkBpiE,IAGdijE,GAAyBhiB,EAAAA,EAAAA,KAAY,KACzC+gB,EAAoB,CAAEhiE,UAAS,GAC9B,CAACA,EAAQgiE,IAENkB,GAAuBjiB,EAAAA,EAAAA,KAAY,KACvCkhB,IACAT,EAAW,CAAE1hE,WACT4iE,GACFf,EAAe,CAAE7hE,SAAQmP,OAAQmI,IACjCwqD,EAAc,CAAE9hE,SAAQgkB,oBAAoB,KAE5C49C,EAAa,CAAE5hE,UACjB,GACC,CACDA,EAAQmiE,EAAqB7qD,EAAeuqD,EAAgBC,EAAec,EAAchB,EAAcF,IAGzG,GAAKtqD,EAIL,OACE8kC,EAAAA,GAAAA,cAAA,OAAKrsB,WAAWkvB,EAAAA,GAAAA,GAAe,kBAAmBlvB,GAAYiuB,IAAKr5C,EAAKs5C,MAAQ,WAAQ39C,GACrFsiE,GACCxmB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL+kB,QAAM,EACNnT,OAAK,EACL3R,KAAK,OACLxuB,UAAU,0BACV+tB,QAASklB,GAERr+D,EAAK,wBAGTk+D,GACCzmB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLH,MAAM,SACNklB,QAAM,EACNnT,OAAK,EACL3R,KAAK,OACLxuB,UAAU,0BACV+tB,QAASskB,GAERz9D,EAAK,0BAGTg+D,IAAkBE,GACjBzmB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLH,MAAM,SACNklB,QAAM,EACNnT,OAAK,EACL3R,KAAK,OACLxuB,UAAU,0BACV+tB,QAASskB,GAERz9D,EAAK,8BAGVy3C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL3mC,OAAK,EACL4pC,QAAM,EACNhD,KAAK,OACLJ,MAAM,cACNL,QAASqlB,EACTze,UAAW//C,EAAK,UAEhBy3C,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,qBAEfqsB,EAAAA,GAAAA,cAAC4c,GAAAA,EAAa,CACZj3D,OAAQogE,EACRtgB,QAASwgB,EACTnyD,MAAOvL,EAAK,iBAAkBse,GAAOuT,EAAAA,EAAAA,IAAuBvT,IAAQhL,EAAAA,EAAAA,GAAatT,EAAMnC,IACvFe,KAAM0f,EACFte,EAAK,mCAAmCylB,EAAAA,EAAAA,IAAgBnH,IACxDte,EAAK,mCACT2+D,sBAAoB,EACpBrK,aAAct0D,EAAK,SACnBu0D,eAAgBj2C,EAAOggD,EAAqBG,GAE3CngD,GACCm5B,EAAAA,GAAAA,cAACmnB,GAAAA,EAAQ,CACPvc,MAAOriD,EAAK,kBACZsiD,QAASub,EACTgB,QAASf,IAGZx/C,GAAQ0/C,GACPvmB,EAAAA,GAAAA,cAACmnB,GAAAA,EAAQ,CACPvc,MAAOriD,EAAK,cACZsiD,QAASqb,EACTkB,QAASjB,KAIX,KCiTV,IAAexmB,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAACjgD,EAAM4N,KAEW,IAFT,OACPnN,EAAM,SAAEC,EAAQ,gBAAEuE,EAAe,SAAEg8C,GACpCrzC,EACC,MAAM,kBACJyD,EAAiB,4BAAEo4C,EAA2B,YAAE5gD,EAAW,aAAEyI,IAC3DhQ,EAAAA,EAAAA,IAAetB,IACb,aAAEs5B,GAAiBt5B,EACnB+C,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,IAExBA,OAAQy4B,EAAahyB,UAAWiyB,GAAmBtwB,EACrDm7D,EAAe9qC,GAAeC,GAChCzkB,EAAAA,EAAAA,IAAkB1U,EAAQk5B,EAAaC,QACvCt4B,EAEJ,IAAI4rB,EACJ,GAAwB,WAApBxnB,EAA8B,CAChC,MAAMqf,GAAYC,EAAAA,EAAAA,IAAgBvkB,EAAQS,EAAQC,GAClD+rB,EAAgBnI,GAAWnkB,MAC7B,MAAO,GAAwB,cAApB8E,EAAiC,CAC1C,MAAM4iB,GAAe0tB,EAAAA,EAAAA,IAAmBv1C,EAAQS,EAAQC,GACxD+rB,EAAgB5E,GAAc1nB,MAChC,MAAO,GAAwB,WAApB8E,GAAgCvE,IAAamB,EAAAA,GAAgB,CACtE,MAAMuG,GAAaC,EAAAA,EAAAA,IAAiBrI,EAAQS,EAAQC,GACpD+rB,EAAgBrkB,GAAYqkB,eAAiB,CAC/C,CAEA,MAAMw3C,EAAmC,WAApBh/D,GAAgCvE,IAAamB,EAAAA,GAC5DqiE,EAAgBnhE,IAAQohE,EAAAA,EAAAA,IAAoBnkE,EAAQ+C,GACpDqhE,EAAgB58D,QAAQ08D,IAAiBG,EAAAA,EAAAA,IAAoBrkE,EAAQS,IACrE6jE,EAAcJ,IAAkBE,GAAiB58D,SAAQ+8D,EAAAA,EAAAA,IAA0BvkE,EAAQS,IAC3F+jE,EAAeh9D,QACnBzE,IAASkhE,GAAgBlhE,EAAKE,YAAawhE,EAAAA,EAAAA,IAAc1hE,KAAS2hE,EAAAA,EAAAA,IAAiB3hE,KAAUA,EAAKmtC,aAE9Fy0B,EAAwBn9D,QAAQzE,GAAMmtC,aAAentC,EAAK6hE,eAG1D/pB,EAAoB,CACxBxK,cAHmBE,EAAAA,EAAAA,IAAkBvwC,EAAQS,EAAQC,EAAU,gBAI/D2Q,oBACAwzD,oBAAoB37D,EAAAA,EAAAA,IAAyBlJ,EAAQihD,GACrD6jB,oBAAoBC,EAAAA,EAAAA,IAAqB/kE,GACzCgkE,eACAjhE,OACA0pB,gBACAu4C,gBAAgBC,EAAAA,EAAAA,IAAqBjlE,EAAQS,GAC7C64B,eACAmwB,8BACAyb,qBAAsBx3D,KAAKC,IAAI,EAAG2D,EAAanR,OAAS,GACxDq5B,gBAAiBx5B,EAAOw5B,gBACxBvC,UAAWj3B,EAAOi3B,UAClBkuC,kBAAmBb,GAAeF,GAAiBI,GAAgBG,GAG/DxuB,GAAe7wC,EAAAA,EAAAA,IAAmBtF,EAAQS,GAChD,GAAwB,WAApBwE,IAAiCkxC,EACnC,OAAO0E,EAGT,GAAIn6C,IAAamB,EAAAA,KAAmBkB,GAAME,QAAS,CACjD,MAAMmiE,GAAkBhlD,EAAAA,EAAAA,IAAyBpgB,EAAQS,EAAQC,GAC3D+E,EAAU2/D,GAAkB1wD,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQ2kE,QAAmBvkE,EACjFwkE,EAAmB5/D,GAAU6/D,EAAAA,EAAAA,IAAsBtlE,EAAQyF,QAAW5E,EACtEuH,GAAaC,EAAAA,EAAAA,IAAiBrI,EAAQS,EAAQC,GAEpD,MAAO,IACFm6C,EACH0qB,iBAAkBH,EAClBjvB,eACAqvB,UAAU,EACVH,mBACAI,WAAYj+D,QAAQY,GAAY2f,iBAEpC,CAEA,MAAMw9C,GAAmBhhD,EAAAA,EAAAA,IAAgBvkB,EAAQS,EAAQC,GACzD,GAAI6kE,GAAkBplE,OAAQ,CAC5B,MAAMulE,EAAqBvvB,EAAaovB,EAAiB,KACnD,SACJC,GACGE,IAAsBhgE,EAAAA,EAAAA,IAA4B1F,EAAQ0lE,EAAoBhlE,IAAc,CAAC,EAElG,MAAO,IACFm6C,EACH0qB,mBACApvB,eACAqvB,WAEJ,CAEA,OAAO3qB,CAAK,GA1FIoF,EAjX4B7/C,IA4B1C,IA5B2C,OAC/CK,EAAM,SACNC,EAAQ,gBACRuE,EAAe,QACf0gE,EAAO,SACP1kB,EAAQ,iBACRskB,EAAgB,aAChBpvB,EAAY,SACZqvB,EAAQ,iBACRH,EAAgB,aAChBh1B,EAAY,mBACZy0B,EAAkB,kBAClBzzD,EAAiB,mBACjBwzD,EAAkB,aAClBb,EAAY,KACZjhE,EAAI,cACJ0pB,EAAa,WACbg5C,EAAU,eACVT,EAAc,aACd1rC,EAAY,kBACZ6rC,EAAiB,4BACjB1b,EAA2B,qBAC3Byb,EAAoB,gBACpB1rC,EAAe,UACfvC,EAAS,wBACT2uC,EAAuB,mBACvBC,EAAkB,qBAClBC,GACD1lE,EACC,MAAM,iBACJmhC,EAAgB,WAChBwkC,EAAU,aACVv9D,EAAY,SACZ3E,EAAQ,iBACRmiE,EAAgB,mBAChBC,EAAkB,iBAClBC,EAAgB,sBAChBxjE,IACEoW,EAAAA,EAAAA,MAEE5T,GAAOo5C,EAAAA,GAAAA,KACP6nB,GAAqB7lB,EAAAA,EAAAA,KAAO,IAC5B,SAAE8lB,IAAallB,EAAAA,EAAAA,MAGfmlB,GADuBC,EAAAA,GAAAA,GAAgBV,GACI,GAAEnlE,KAAUC,MAAe,EACtE6lE,GAAqBD,EAAAA,GAAAA,GAAgBT,GACrCT,EAAkB/kE,MAAMmmE,QAAQjB,GAAoBA,EAAiBc,GAAsBd,EAC3FkB,EAAgBtwB,GAAgBivB,EAAkBjvB,EAAaivB,QAAmBvkE,EAClF6lE,EAAsBrmE,MAAMmmE,QAAQjB,GACtCA,EAAiBplE,OAAUolE,EAAmB,OAAI1kE,EAChD8lE,EAAkB5jE,IAAQyV,EAAAA,EAAAA,GAAatT,EAAMnC,GAAM5C,OACnDymE,EAAkBvB,GAAmBh/D,EAAAA,EAAAA,IAAenB,EAAMmgE,QAAoBxkE,GAC9E,SAAEgX,GAAa9U,GAAQ,CAAC,EACxBE,GAAUF,GAAME,SAEtB84C,EAAAA,EAAAA,KAAU,KACJziB,GAAgBqsC,IAAYjlE,IAAamB,EAAAA,IAAkBoB,KAC7DgjE,EAAmB,CAAExlE,SAAQC,YAC/B,GACC,CAACD,EAAQwlE,EAAoB3sC,EAAc54B,EAAUilE,EAAS1iE,MAEjE4jE,EAAAA,GAAAA,GAAiBpmE,EAAQ2kE,EAAiBqB,GAE1C,MAAQpxD,MAAOq1B,KAAgBo8B,EAAAA,GAAAA,KAEzBC,GAAuBr8B,IAAeI,EAAAA,IACtCk8B,GAAwBZ,GAAY/0D,EAGpC41D,IAAe3mB,EAAAA,EAAAA,IAAuB,MACtC4mB,IAAqB5mB,EAAAA,EAAAA,KAAgB,IAEnC8Y,YAAa+N,GAAmB9N,gBAAiB+N,KAA0B9N,EAAAA,GAAAA,IAAa,KAC9F/3B,EAAiB,CAAE3/B,GAAInB,EAAQC,YAAW,IAGtCm4D,IAAqBnX,EAAAA,EAAAA,KAAax6C,IACtC6+D,EAAW,CAAE7+D,YAAWgd,SAAS,GAAO,GACvC,CAAC6hD,IAEEsB,IAA2B3lB,EAAAA,EAAAA,KAAa/vC,IAC5C,MAAMzK,EAAYyK,EAAEu6C,UAAY7rD,MAAMmmE,QAAQjB,GAC1CA,GAAiB+B,EAAAA,GAAAA,GAAc/B,EAAiBplE,OAAQolE,EAAiBhhE,QAAQ6gE,GAAoB,IACrGA,EAEAU,EAAqB5+D,IACvBsB,EAAa,CACX/H,SAAQC,WAAUwG,YAAWjF,mBAAmB,GAEpD,GACC,CAACsjE,EAAkBH,EAAiBU,EAAsBrlE,EAAQC,IAE/D6mE,IAAuB7lB,EAAAA,EAAAA,KAAY,KACvC79C,EAAS,CAAEjC,GAAInB,EAAQC,WAAUoB,KAAM,UAAW,GACjD,CAAC+B,EAAUpD,EAAQC,IAEhB8mE,IAAsB9lB,EAAAA,EAAAA,KAAY,KACtCp4C,YAAW,KACT68D,EAAmB31C,SAAU,CAAI,GAvIL,IAwID,GAC5B,IAEGi3C,IAAkB/lB,EAAAA,EAAAA,KAAa/vC,IACnC,GAAKw0D,EAAmB31C,QAAxB,CAIA,GADA21C,EAAmB31C,SAAU,EACzBywB,EAAU,CACZ,MAAMymB,EAAex3D,SAAS+rC,cAA8B0rB,EAAAA,KAC5DD,GAAcxpC,MAChB,CAEA,GAAI4mC,EAGF,OAFApiE,SACA8kE,KAIF,GAAwB,WAApBviE,GAAyD,IAAzBigE,EAUlC,OATKkB,GAAYY,IACfr1D,EAAE6yC,kBACF3gD,EAAS,CAAEjC,QAAIf,GAAa,CAAE6J,uBAAuB,KAErDw7D,SAGFsB,KAKFxB,IACAwB,IA7BuC,CA6BlB,GACpB,CACDvmB,EAAU6jB,EAAoB7/D,EAAiBigE,EAAsBsC,GAAqBpB,EAC1FY,KAGIY,GACJl9B,IAAeI,EAAAA,KACZJ,GAAcm9B,EAAAA,KAEjBn9B,GAAco9B,EAAAA,KACXp9B,GAAcI,EAAAA,OACZ67B,GAAmBA,EAAkB,IAEtCoB,GAA6BH,IACjCl9B,GAAcE,EAAAA,KACXF,GAAcs9B,EAAAA,IAGbC,GAAkBzgE,QAAQqQ,GAAUsrD,eAAiBtrD,GAAUurD,iBAAmBvrD,GAAUqrD,gBAEhG7W,aAAc6b,GACd3b,qBAAsB4b,KACpB3b,EAAAA,GAAAA,GAAkByb,IAChBG,IAAwBC,EAAAA,GAAAA,GAAiBJ,GAAkBpwD,OAAWhX,GAAW,IAGrFwrD,aAAcic,GACd/b,qBAAsBgc,KACpB/b,EAAAA,GAAAA,GAAkBhlD,QAAQw8D,IAExBwE,IAAwBH,EAAAA,GAAAA,GAAiBrE,GAAc,IAG3D3X,aAAcoc,GACdlc,qBAAsBmc,KACpBlc,EAAAA,GAAAA,GAAkBhlD,QAAQi/D,QAAgB5lE,GAAW,GAEnD8nE,IAAyBN,EAAAA,GAAAA,GAAiB5B,GAAe,GACzDmC,IAA+BP,EAAAA,GAAAA,GAAiB3B,GAAqB,GACrEmC,IAAoBR,EAAAA,GAAAA,GAAiB7C,GAAU,GAC/CsD,IAA8BT,EAAAA,GAAAA,GAAiBzB,GAE/CmC,IAAoBC,EAAAA,GAAAA,GAAY9D,GAChC7U,QACkBxvD,IAAtBkoE,IAAmCA,GAAoB7D,EAAuB6D,QAAoBloE,EAG9FooE,GAAkBR,IAA6BE,IAC/CL,IAA2BE,IAGjC3T,EAAAA,EAAAA,KAAgB,KACd,MAAMqU,EAAcjC,GAAaz2C,QACjC,GAAK04C,EAIL,OAAKnB,IAA+BkB,QAMhCpE,GAAsB+C,IACpBV,GAAmB12C,UACrB04C,EAAYvU,UAAUxoC,IAAI,gBAAiB,YAC3C+6C,GAAmB12C,SAAU,GAI/BlnB,YAAW,MACT6/D,EAAAA,EAAAA,KAAgB,KACdD,EAAYvU,UAAUC,OAAO,WAAW,GACxC,GApPiB,OAuPrBsU,EAAYvU,UAAUC,OAAO,iBAC7BsS,GAAmB12C,SAAU,KAnB7B04C,EAAYvU,UAAUC,OAAO,gBAAiB,iBAC9CsS,GAAmB12C,SAAU,GAmB/B,GACC,CAACu3C,GAA4BkB,GAAgBrB,GAA6B/C,IAE7E,MAAM,qBAAEzmB,IAAyBlB,GAAoBh4C,EAAMs0B,EAAiBvC,GAAW,GAmEvF,SAASmyC,KAA6D,IAA5CC,EAAOnpE,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GAAUopE,EAAiBppE,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GAC1D,OACEy8C,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,eACbqsB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL3mC,OAAK,EACL4mC,KAAK,UACLJ,MAAM,cACNL,QAASopB,GACTxiB,UAAW//C,EAAKmkE,EAAU,QAAU,SAEpC1sB,EAAAA,GAAAA,cAAA,OAAKrsB,WAAWkvB,EAAAA,GAAAA,GAAe,uBAAwB6pB,GAAW,iBAEnEC,GAAqB3sB,EAAAA,GAAAA,cAAC4sB,GAAa,MAG1C,CAEA,MAAMC,GAAwBhiE,QAAQ8gE,IAA2BE,IAC3DiB,GAA4BD,KAC3BvoB,GAAYkkB,GAAqBz6B,GAAcg/B,EAAAA,IAEtD,OACE/sB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,eAAeuxB,IAAKolB,IACjCtqB,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CACTtP,KAAMoa,EAA8B,OAAS,YAC7C7K,UAAWsmB,EACX9U,eAAa,EACbC,oBAAqBA,IA3FD,WAApBprD,GACEvE,IAAamB,EAAAA,KAAkBkB,GAAME,QAMzC05C,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACGysB,KACDzsB,EAAAA,GAAAA,cAAA,eACqB97C,IAAlB4rB,EACqB,WAApBxnB,EACEC,EAAKugE,EAAa,gBAAkB,UAAWh5C,EAAe,KACxC,WAApBxnB,EAAgCC,EAAK,sBAAuBunB,EAAe,KACrD,cAApBxnB,EACA+/D,EAAiB9/D,EAAK,aAAeA,EAAK,WAAYunB,EAAe,UACnE5rB,EACNqE,EAAK,aAQby3C,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,MACIoqB,IAAwB7B,EAAuB,IAAMkE,GAAiBpC,IAAuB,GAC/FrqB,EAAAA,GAAAA,cAAA,OACErsB,UAAU,oBACV+tB,QAAS8oB,GACTrR,YAAasR,KAEZjqC,EAAAA,EAAAA,IAAS18B,GACRk8C,EAAAA,GAAAA,cAACgtB,GAAAA,EAAe,CACdvwB,IAAK34C,EACLmP,OAAQnP,EACR4vC,aAAcA,EACd/2B,OAAQ8kC,GACRwrB,SAAUpiE,QAAQ42C,IAClByrB,cAAY,EACZC,iBAAe,EACfC,oBAAkB,EAClBC,gBAvSY,GAwSZC,OAAK,IAGPttB,EAAAA,GAAAA,cAACutB,GAAAA,EAAa,CACZ9wB,IAAK34C,EACLA,OAAQA,EACRC,SAAUA,EACV2vC,aAAcA,EACd/2B,OAAQ8kC,GACRwrB,SAAUpiE,QAAQ42C,IAClB0rB,gBAAiBppE,IAAamB,EAAAA,GAC9BgoE,aAAcnpE,IAAamB,EAAAA,GAC3BkoE,oBAAkB,EAClBE,OAAK,OAwCZvpE,IAAamB,EAAAA,KAAmBkB,GAAME,SACrC05C,EAAAA,GAAAA,cAACwtB,GAAAA,EAAgB,CACfC,gBACG3B,IAA6BjhE,QAAQmhE,KAClCL,IAA2B9gE,QAAQghE,IAEzC/nE,OAAQA,IAIXgoE,IAA6BE,IAC5BhsB,EAAAA,GAAAA,cAAC0tB,GAAmB,CAClBjxB,IAAK34C,EACLgF,QAASkjE,GACT3iD,MAAO4iD,IAAgC,EACvCjqD,MAAO0nD,EACPxO,YAAaiR,GACbx4C,UAAWo4C,GACX5Q,eAAgB+Q,GAAoBhQ,QAAqBh4D,EACzDw9C,QAASgpB,GACTtP,iBAAkBwP,GAClBntD,eAAkCvZ,IAAvB0lE,EACXvO,YAAayR,KAIhBvB,IACCvrB,EAAAA,GAAAA,cAAC2tB,GAAe,CACdlxB,IAAK34C,EACLA,OAAQA,EACRoX,SAAUuwD,GACV93C,UAAW63C,KAIfxrB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,gBACZk5C,IACC7sB,EAAAA,GAAAA,cAAC4tB,GAAW,CACVnxB,KAAKoxB,EAAAA,EAAAA,IAAchC,IACnB/iE,QAAS+iE,GACTl4C,UAAWi4C,KAGf5rB,EAAAA,GAAAA,cAAC8tB,GAAAA,EAAa,CACZhqE,OAAQA,EACRC,SAAUA,EACVuE,gBAAiBA,EACjBg8C,SAAUA,EACVypB,kBAAmBlB,MAGnB,KCjdJmB,GAAyB,IAQxB,SAASC,GAAQC,GACtB,MAAO,YAAaA,CACtB,CAEO,SAASC,GAAcvlE,EAAwB6uC,GACpD,IAMI22B,EANAC,EAAkC,GAClCC,EAAmB,CACrBC,aAAc3lE,EAAS,GAAG2H,KAC1Bi+D,UAAUC,EAAAA,GAAAA,IAAiC,IAAnB7lE,EAAS,GAAG2H,MACpCm+D,aAAc,CAACL,IAIjB,MAAMM,EAAiC,CAACL,GAiExC,OA/DA1lE,EAASmG,SAAQ,CAACjG,EAASkZ,KACrBlZ,EAAQ2nC,UACL29B,GAOHA,EAAaxlE,SAASa,KAAKX,GACvBA,EAAQ2H,QAAQtJ,OAClBinE,EAAaQ,YAAc9lE,IAR7BslE,EAAe,CACbS,QAAS/lE,EAAQoE,UACjBtE,SAAU,CAACE,GACX8lE,YAAa9lE,GASjBulE,EAAmB5kE,KAAKX,GAG1B,MAAMgmE,EAAclmE,EAASoZ,EAAQ,GASrC,IANEosD,GACKU,GAAgBA,EAAY5hE,WAAa4hE,EAAY5hE,YAAckhE,EAAaS,UAErFR,EAAmB5kE,KAAK2kE,GACxBA,OAAelqE,GAEb4qE,EAAa,CACf,MAAMC,GAAyBN,EAAAA,GAAAA,IAAiC,IAAnBK,EAAYv+D,MACrD+9D,EAAiBE,WAAaO,GAChCT,EAAmB,CACjBC,aAAcO,EAAYv+D,KAC1Bi+D,SAAUO,EACVL,aAAc,IAEhBC,EAAWllE,KAAK6kE,GAEhBD,EAAqB,GACrBC,EAAiBI,aAAajlE,KAAK4kE,KAEnCS,EAAY7pE,KAAOwyC,GAChB3uC,EAAQoP,WAAa42D,EAAY52D,UACjCpP,EAAQ6H,aAAem+D,EAAYn+D,aACnCq+D,EAAAA,EAAAA,IAAgBlmE,KAChBkmE,EAAAA,EAAAA,IAAgBF,IAEjBhmE,EAAQmmE,aAAeH,EAAYG,cAEjCnmE,EAAQmmE,YAAYC,eAAiBJ,EAAYG,YAAYC,cAC1DpmE,EAAQmmE,YAAY9gE,aAAe2gE,EAAYG,YAAY9gE,YAC3DrF,EAAQmmE,YAAYE,iBAAmBL,EAAYG,YAAYE,iBAGnErmE,EAAQsmE,eACRN,EAAYM,eACXN,EAAYv+D,KAAOzH,EAAQyH,KAAQy9D,MAEvCK,EAAqB,GACrBC,EAAiBI,aAAajlE,KAAK4kE,GAEvC,KAGKM,CACT,C,gECzFA,MAAMU,GAAW,IACXC,GAAa,GACbC,GAAwB,G,+ECY9B,MCRMC,GAAkCzuC,EAAAA,GAAa,IAAO,ICD/C0uC,GAAgC,GAAKjiC,GAAAA,GACrCkiC,GAA4B,GAAKliC,GAAAA,GACxCmiC,GAAyC,GAAKniC,GAAAA,GAC9CoiC,GAAkB,EAAIpiC,GAAAA,GACfqiC,GAAmB,EAAIriC,GAAAA,GAC9BsiC,GAAwB,GAEvB,SAASC,GAAiBC,EAAmBC,GAClD,OAAOD,EACFC,EAAmBN,GAAyCD,GAC5DO,EAAmBR,GAAgCG,EAC1D,CAEO,SAASM,GACdpnE,EAAqBqnE,EAAuBC,EAAqB9rB,GAEjE,MAAM+rB,GAAQC,EAAAA,EAAAA,IAAaxnE,GACrBk0B,GAAQuzC,EAAAA,EAAAA,IAAgBznE,KAAY0nE,EAAAA,EAAAA,IAAuB1nE,GAC3D6tC,GAAQ85B,EAAAA,EAAAA,IAAgB3nE,GAExB4nE,EAAiB7lE,SAAQ2lE,EAAAA,EAAAA,IAAuB1nE,IAChD6nE,EAAiB9lE,SAAQ+lE,EAAAA,EAAAA,IAAuB9nE,KAChD,MAAE4P,EAAK,OAAEC,GAAWqkB,GACtB6zC,EAAAA,GAAAA,IAA+B7zC,EAAOqzC,EAAOF,EAAaO,EAAgBN,EAAW9rB,IACrFwsB,EAAAA,GAAAA,IAAyBn6B,EAAQ05B,EAAOF,EAAaQ,EAAgBP,EAAW9rB,GAG9EysB,EAAgBhB,GADNllE,SAAQ8tC,EAAAA,EAAAA,IAAe7vC,KAGvC,IAAIkoE,EAAgB,EAChBt4D,EAAQq4D,GAAiBA,EAAgBr4D,EAAQo3D,KACnDkB,EAAgBD,EAAgBr4D,GAE9BC,EAASq4D,EAAgBnB,IAAoBA,GAAmBl3D,EAASq4D,EAAgBlB,KAC3FkB,EAAgBnB,GAAmBl3D,GAGrC,MAAMs4D,EAAalgE,KAAKwK,MAAM7C,EAAQs4D,GAChCE,EAAcngE,KAAKwK,MAAM5C,EAASq4D,GAExC,MAAO,CACLt4D,MAAOu4D,EACPt4D,OAAQu4D,EACRC,QAASF,EAAaF,GAAiBG,EAAcrB,GAEzD,CC5CO,MAAMuB,GAAgB,CAC3BC,KAAM,EACNC,IAAK,EACLC,MAAO,EACPC,OAAQ,EACRC,KAAM,GAiDR,SAASC,GAAWC,EAAgBC,GAClC,OAAOD,EAAKtoE,QAAO,CAACwoE,EAAaC,IAASD,EAAcC,GAAMF,EAChE,CAQA,SAASG,GAAuBC,GAC9B,MAAM/uB,EAAwB,CAAEvqC,MAAO,EAAGC,OAAQ,GAalD,OAZAq5D,EAAOjjE,SAAQtL,IAGT,IAHU,WACdwuE,EAAU,MACVC,GACDzuE,EACKyuE,EAAQd,GAAcG,QACxBtuB,EAAOvqC,MAAQu5D,EAAWv5D,MAAQu5D,EAAWnkC,GAE3CokC,EAAQd,GAAcI,SACxBvuB,EAAOtqC,OAASs5D,EAAWt5D,OAASs5D,EAAWviC,EACjD,IAGKuT,CACT,CAEO,SAASkvB,GACd9B,EACAF,EACAC,EACAzO,EACArd,GAEA,MACM8tB,EArDR,SAAmBxpE,EAAwB07C,GACzC,OAAO17C,EAASC,KACbC,IACC,MAAMmpE,EAAa/B,GAAyBpnE,OAAS5E,OAAWA,EAAWogD,GAE3E,OAAO2tB,EAAWv5D,MAAQu5D,EAAWt5D,MAAM,GAGjD,CA6CiB05D,CAAU1Q,EAAM/4D,SAAU07C,GACnCguB,EA5CR,SAAwBF,GACtB,OAAOA,EAAOvpE,KAAKm1D,GAAWA,EAAQ,IAAM,IAAOA,EAAQ,GAAM,IAAM,MAAOj0D,KAAK,GACrF,CA0CsBwoE,CAAeH,GAC7BI,EAzCR,SAAyBJ,GACvB,OAAOA,EAAO/oE,QAAO,CAACD,EAAQ40D,IAAUA,EAAQ50D,GAAQ,GAAKgpE,EAAO5uE,MACtE,CAuCuBivE,CAAgBL,GAC/BM,EAAaN,EAAO5uE,OACpBmvE,EAAYP,EAAOvhC,MAAMmtB,GAAUA,EAAQ,IAC3C4U,GAAWC,EAAAA,GAAAA,IAAkBxC,EAAOF,GAAa,EAAOC,EAAW9rB,IAAa6rB,EAAc,IAAM,GAAK3iC,GAAAA,GAG/G,IAAIwkC,EAEJ,MAAMtvD,EAAS,CACb0vD,SACAE,cACAE,eACAI,WACAE,SAAU,IACVC,UAVgBH,EAWhBI,QAlBc,GA+BhB,OATEhB,EADEU,GAAc,GAAKC,EAgBzB,SAAkC1hE,GAOhB,IANhBmhE,OAAQa,EAAc,aACtBT,EAAY,SACZI,EAAQ,SACRE,EAAQ,QACRE,EAAO,UACPD,EAAa,EAAIH,EAAY,GACf3hE,EACd,MAAMmhE,EA3ER,SAAoBA,EAAkBI,GACpC,OAAOJ,EAAOvpE,KAAKm1D,GACTwU,EAAe,KAAMU,EAAAA,GAAAA,IAAMlV,EAAO,EAAG,OAAQkV,EAAAA,GAAAA,IAAMlV,EAAO,MAAQ,IAE9E,CAuEiBmV,CAAWF,EAAgBT,GACpCnpD,EAAQ4pD,EAAezvE,OACvB4F,EAAS,IAAI1F,MAAM2lB,GACnB+pD,EAAuB,GASvBC,EAAeC,IACnB,MAAMC,EAAoB,GAC1B,IAAI3gE,EAAS,EACb0gE,EAAWvkE,SAASykE,IAClBD,EAAQ9pE,KAXQgqE,EAAC7gE,EAAgB8gE,KACnC,MACMC,EAAMjC,GADUU,EAAOjiE,MAAMyC,EAAQA,EAAS8gE,GACd,GAEtC,OAAQd,GAAYc,EAAe,GAAKV,GAAWW,CAAG,EAOvCF,CAAY7gE,EAAQ4gE,IACjC5gE,GAAU4gE,CAAY,IAGxBJ,EAAS3pE,KAAK,CACZ6pE,aACAC,WACA,EAGJ,IAAK,IAAIK,EAAQ,EAAGA,IAAUvqD,IAASuqD,EAAO,CAC5C,MAAMC,EAASxqD,EAAQuqD,EACnBA,GAAS,GAAKC,GAAU,GAC1BR,EAAY,CAACO,EAAOC,GAExB,CAEA,IAAK,IAAID,EAAQ,EAAGA,IAAUvqD,EAAQ,IAAKuqD,EACzC,IAAK,IAAIC,EAAS,EAAGA,IAAWxqD,EAAQuqD,IAASC,EAAQ,CACvD,MAAMC,EAAQzqD,EAAQuqD,EAAQC,EAC1BD,GAAS,GAAKC,IAAWrB,EAAe,IAAO,EAAI,IAAMsB,GAAS,GACpET,EAAY,CAACO,EAAOC,EAAQC,GAEhC,CAGF,IAAK,IAAIF,EAAQ,EAAGA,IAAUvqD,EAAQ,IAAKuqD,EACzC,IAAK,IAAIC,EAAS,EAAGA,IAAWxqD,EAAQuqD,IAASC,EAC/C,IAAK,IAAIC,EAAQ,EAAGA,IAAUzqD,EAAQuqD,EAAQC,IAAUC,EAAO,CAC7D,MAAMC,EAAS1qD,EAAQuqD,EAAQC,EAASC,EACpCF,GAAS,GAAKC,GAAU,GAAKC,GAAS,GAAKC,GAAU,GACvDV,EAAY,CAACO,EAAOC,EAAQC,EAAOC,GAEvC,CAIJ,IAAIC,EACAC,EAAc,EAClB,IAAK,IAAIhyD,EAAI,EAAGA,EAAImxD,EAAS5vE,OAAQye,IAAK,CACxC,MAAM,QACJsxD,EAAO,WACPD,GACEF,EAASnxD,GACPiyD,EAAYZ,EAAW9vE,OACvB2wE,EAAczC,GAAW6B,EAAS,GAAKP,GAAWkB,EAAY,GAE9DE,EADgBrjE,KAAKm9B,OAAOqlC,GACLT,EAAW,IAAM,EACxCuB,EAAO,MACX,IAAK,IAAIC,EAAO,EAAGA,IAASJ,IAAaI,EACvC,GAAIhB,EAAWgB,EAAO,GAAKhB,EAAWgB,GACpC,OAAO,IAIX,OAAO,CACR,EARY,GASPC,EAAOxjE,KAAKyjE,IAAIL,EAAcpB,GAAaqB,EAAOC,IAEnDL,GAAkBO,EAAON,KAC5BD,EAAiBZ,EAASnxD,GAC1BgyD,EAAcM,EAElB,CAEA,MAAME,EAAgBT,EAAgBV,WAChCoB,EAAiBV,EAAgBT,QACjCoB,EAAWF,EAAcjxE,OAC/B,IAAIwe,EAAQ,EACR0tB,EAAI,EACR,IAAK,IAAIklC,EAAM,EAAGA,IAAQD,IAAYC,EAAK,CACzC,MAAMC,EAAWJ,EAAcG,GACzBE,EAAaJ,EAAeE,GAC5Bj8D,EAAS5H,KAAKwK,MAAMu5D,GAC1B,IAAIhnC,EAAI,EAER,IAAK,IAAIinC,EAAM,EAAGA,IAAQF,IAAYE,EAAK,CACzC,MAAM7C,EAAQd,GAAcC,MACf,IAARuD,EAAYxD,GAAcE,IAAMF,GAAcC,OAC9CuD,IAAQD,EAAW,EAAIvD,GAAcI,OAASJ,GAAcC,OACpD,IAAR0D,EAAY3D,GAAcK,KAAOL,GAAcC,OAC/C0D,IAAQF,EAAW,EAAIzD,GAAcG,MAAQH,GAAcC,MAC1DrT,EAAQoU,EAAOpwD,GACftJ,EAAQq8D,IAAQF,EAAW,EAAIjC,EAAW9kC,EAAI/8B,KAAKwK,MAAMyiD,EAAQ8W,GACvE1rE,EAAO4Y,GAAS,CACdiwD,WAAY,CACVnkC,IACA4B,IACAh3B,QACAC,UAEFu5D,SAEFpkC,GAAKp1B,EAAQs6D,IACXhxD,CACJ,CACA0tB,GAAK/2B,EAASq6D,CAChB,CAEA,OAAO5pE,CACT,CA3Ia4rE,CAA0BtyD,GACX,IAAfgwD,EA4Ib,SAAmBhwD,GACjB,MAAM,OACJ0vD,EAAM,YACNE,EAAW,aACXE,GACE9vD,EACJ,MAAuB,OAAhB4vD,GAAwBE,EAAe,KAAOJ,EAAO,GAAKA,EAAO,GAAK,GAO/E,SAA4B1vD,GAC1B,MAAM,OACJ0vD,EAAM,SACNQ,EAAQ,QACRI,EAAO,UACPD,GACErwD,EACE/J,EAAS5H,KAAKwK,MAAMxK,KAAKm9B,IAAI0kC,EAAWR,EAAO,GAAIrhE,KAAKm9B,IAAI0kC,EAAWR,EAAO,IAAKW,EAAYC,GAAW,KAEhH,MAAO,CAAC,CACNf,WAAY,CACVnkC,EAAG,EACH4B,EAAG,EACHh3B,MAAOk6D,EACPj6D,UAEFu5D,MAAOd,GAAcK,KAAOL,GAAcE,IAAMF,GAAcG,OAC7D,CACDU,WAAY,CACVnkC,EAAG,EACH4B,EAAG/2B,EAASq6D,EACZt6D,MAAOk6D,EACPj6D,UAEFu5D,MAAOd,GAAcK,KAAOL,GAAcI,OAASJ,GAAcG,OAErE,CAhCM0D,CAAmBvyD,GACH,OAAhB4vD,GAAwC,OAAhBA,EAiC9B,SAAiC5vD,GAC/B,MAAM,OACJ0vD,EAAM,SACNQ,EAAQ,QACRI,EAAO,UACPD,GACErwD,EACEhK,GAASk6D,EAAWI,GAAW,EAC/Br6D,EAAS5H,KAAKwK,MAAMxK,KAAKm9B,IAAIx1B,EAAQ05D,EAAO,GAAIrhE,KAAKm9B,IAAIx1B,EAAQ05D,EAAO,GAAIW,KAClF,MAAO,CAAC,CACNd,WAAY,CACVnkC,EAAG,EACH4B,EAAG,EACHh3B,QACAC,UAEFu5D,MAAOd,GAAcE,IAAMF,GAAcK,KAAOL,GAAcI,QAC7D,CACDS,WAAY,CACVnkC,EAAGp1B,EAAQs6D,EACXtjC,EAAG,EACHh3B,QACAC,UAEFu5D,MAAOd,GAAcE,IAAMF,GAAcG,MAAQH,GAAcI,QAEnE,CA1DQ0D,CAAwBxyD,GA4DhC,SAA4BA,GAC1B,MAAM,OACJ0vD,EAAM,SACNU,EAAQ,SACRF,EAAQ,QACRI,EAAO,UACPD,GACErwD,EACEyyD,EAAepkE,KAAKwK,MAAM,IAAMu3D,GAChCsC,EAAcrkE,KAAKm9B,IACvBn9B,KAAKwK,MACHxK,KAAKC,IACH,IAAO4hE,EAAWI,IACjBJ,EAAWI,GAAWZ,EAAO,IAAM,EAAIA,EAAO,GAAK,EAAIA,EAAO,MAGnEQ,EAAWI,EAAUmC,GAEjBE,EAAazC,EAAWwC,EAAcpC,EACtCr6D,EAAS5H,KAAKm9B,IAAI6kC,EAAWhiE,KAAKwK,MAAMxK,KAAKm9B,IAAImnC,EAAajD,EAAO,GAAIgD,EAAchD,EAAO,MAEpG,MAAO,CAAC,CACNH,WAAY,CACVnkC,EAAG,EACH4B,EAAG,EACHh3B,MAAO28D,EACP18D,UAEFu5D,MAAOd,GAAcE,IAAMF,GAAcK,KAAOL,GAAcI,QAC7D,CACDS,WAAY,CACVnkC,EAAGunC,EAAarC,EAChBtjC,EAAG,EACHh3B,MAAO08D,EACPz8D,UAEFu5D,MAAOd,GAAcE,IAAMF,GAAcG,MAAQH,GAAcI,QAEnE,CAjGQ8D,CAAmB5yD,EAC3B,CAtJa6yD,CAAU7yD,GACK,IAAfgwD,EAuPb,SAAqBhwD,GACnB,MAAM,YAAE4vD,GAAgB5vD,EAExB,MAA0B,MAAnB4vD,EAAY,GAKrB,SAAiC5vD,GAC/B,MAAM,UACJqwD,EAAS,QACTC,EAAO,OACPZ,EAAM,SACNQ,EAAQ,SACRE,GACEpwD,EACE8yD,EAAczC,EACd0C,EAAc1kE,KAAKwK,MACvBxK,KAAKm9B,KACF6kC,EAAYC,GAAW,EACvBZ,EAAO,IAAMQ,EAAWI,IAAaZ,EAAO,GAAKA,EAAO,MAGvDsD,EAAeF,EAAcC,EAAczC,EAC3C2C,EAAa5kE,KAAKC,IACtB8hE,EACA/hE,KAAKwK,MACHxK,KAAKm9B,KACF0kC,EAAWI,GAAW,EACvBjiE,KAAKm9B,IACHunC,EAAcrD,EAAO,GACrBsD,EAAetD,EAAO,OAKxBwD,EAAY7kE,KAAKm9B,IAAIn9B,KAAKwK,MAAMi6D,EAAcpD,EAAO,IAAKQ,EAAWI,EAAU2C,GAErF,MAAO,CAAC,CACN1D,WAAY,CACVnkC,EAAG,EACH4B,EAAG,EACHh3B,MAAOk9D,EACPj9D,OAAQ68D,GAEVtD,MAAOd,GAAcE,IAAMF,GAAcK,KAAOL,GAAcI,QAC7D,CACDS,WAAY,CACVnkC,EAAG8nC,EAAY5C,EACftjC,EAAG,EACHh3B,MAAOi9D,EACPh9D,OAAQ+8D,GAEVxD,MAAOd,GAAcE,IAAMF,GAAcG,OACxC,CACDU,WAAY,CACVnkC,EAAG8nC,EAAY5C,EACftjC,EAAGgmC,EAAe1C,EAClBt6D,MAAOi9D,EACPh9D,OAAQ88D,GAEVvD,MAAOd,GAAcI,OAASJ,GAAcG,OAEhD,CA3DMsE,CAAwBnzD,GA6D9B,SAAgCA,GAC9B,MAAM,SACJkwD,EAAQ,OACRR,EAAM,UACNW,EAAS,QACTC,GACEtwD,EACE2yD,EAAazC,EACb4C,EAAczkE,KAAKwK,MAAMxK,KAAKm9B,IAAImnC,EAAajD,EAAO,GAAI,KAAQW,EAAYC,KAC9EoC,GAAexC,EAAWI,GAAW,EACrC0C,EAAe3kE,KAAKm9B,IACxB6kC,EAAYyC,EAAcxC,EAC1BjiE,KAAKwK,MAAMxK,KAAKm9B,IACdknC,EAAchD,EAAO,GACrBgD,EAAchD,EAAO,MAGnB0D,EAAaT,EAAaD,EAAcpC,EAE9C,MAAO,CAAC,CACNf,WAAY,CACVnkC,EAAG,EACH4B,EAAG,EACHh3B,MAAO28D,EACP18D,OAAQ68D,GAEVtD,MAAOd,GAAcK,KAAOL,GAAcE,IAAMF,GAAcG,OAC7D,CACDU,WAAY,CACVnkC,EAAG,EACH4B,EAAG8lC,EAAcxC,EACjBt6D,MAAO08D,EACPz8D,OAAQ+8D,GAEVxD,MAAOd,GAAcI,OAASJ,GAAcK,MAC3C,CACDQ,WAAY,CACVnkC,EAAGsnC,EAAcpC,EACjBtjC,EAAG8lC,EAAcxC,EACjBt6D,MAAOo9D,EACPn9D,OAAQ+8D,GAEVxD,MAAOd,GAAcI,OAASJ,GAAcG,OAEhD,CAxGMwE,CAAuBrzD,EAC7B,CA5PaszD,CAAYtzD,GAqWzB,SAAoBA,GAClB,MAAM,YAAE4vD,GAAgB5vD,EAExB,MAA0B,MAAnB4vD,EAAY,GAKrB,SAA8BvyD,GAMZ,IANa,SAC7B6yD,EAAQ,OACRR,EAAM,QACNY,EAAO,UACPD,EAAS,SACTD,GACc/yD,EACd,MAAMk2D,EAAIrD,EACJsD,EAAKnlE,KAAKwK,MAAMxK,KAAKm9B,IAAI+nC,EAAI7D,EAAO,GAAI,KAAQW,EAAYC,KAC5DmD,EAAIplE,KAAKwK,OAAOq3D,EAAW,EAAII,IAAYZ,EAAO,GAAKA,EAAO,GAAKA,EAAO,KAC1EgE,EAAKrlE,KAAKC,IAAI8hE,EAAU/hE,KAAKwK,MAAMxK,KAAKm9B,IAAI,IAAO0kC,EAAW,EAAII,GAAUmD,EAAI/D,EAAO,MACvFiE,EAAKtlE,KAAKwK,MAAMxK,KAAKC,IAAID,KAAKC,IAAI8hE,EAAU,KAAQF,EAAW,EAAII,IAAWmD,EAAI/D,EAAO,KACzFkE,EAAKL,EAAIG,EAAKC,EAAK,EAAIrD,EACvBuD,EAAKxlE,KAAKm9B,IAAI6kC,EAAYmD,EAAKlD,EAASmD,GAE9C,MAAO,CAAC,CACNlE,WAAY,CACVnkC,EAAG,EACH4B,EAAG,EACHh3B,MAAOu9D,EACPt9D,OAAQu9D,GAEVhE,MAAOd,GAAcK,KAAOL,GAAcE,IAAMF,GAAcG,OAC7D,CACDU,WAAY,CACVnkC,EAAG,EACH4B,EAAGwmC,EAAKlD,EACRt6D,MAAO09D,EACPz9D,OAAQ49D,GAEVrE,MAAOd,GAAcI,OAASJ,GAAcK,MAC3C,CACDQ,WAAY,CACVnkC,EAAGsoC,EAAKpD,EACRtjC,EAAGwmC,EAAKlD,EACRt6D,MAAO49D,EACP39D,OAAQ49D,GAEVrE,MAAOd,GAAcI,QACpB,CACDS,WAAY,CACVnkC,EAAGsoC,EAAKpD,EAAUsD,EAAKtD,EACvBtjC,EAAGwmC,EAAKlD,EACRt6D,MAAO29D,EACP19D,OAAQ49D,GAEVrE,MAAOd,GAAcG,MAAQH,GAAcI,QAE/C,CApDMgF,CAAsB9zD,GAsD5B,SAA+BlC,GAMb,IANc,UAC9BuyD,EAAS,OACTX,EAAM,SACNQ,EAAQ,QACRI,EAAO,SACPF,GACctyD,EACd,MAAM21D,EAAIpD,EACJqD,EAAKrlE,KAAKwK,MAAMxK,KAAKm9B,IAAIioC,EAAI/D,EAAO,GAAI,IAAOQ,EAAWI,KAC1DiD,EAAIllE,KAAKwK,OAAOw3D,EAAY,EAAIC,IAAY,EAAIZ,EAAO,GAAK,EAAIA,EAAO,GAAK,EAAIA,EAAO,KACvF8D,EAAKnlE,KAAKwK,MAAM06D,EAAI7D,EAAO,IAC3BmE,EAAKxlE,KAAKwK,MAAM06D,EAAI7D,EAAO,IAC3BqE,EAAKN,EAAID,EAAKK,EAAK,EAAIvD,EACvBsD,EAAKvlE,KAAKC,IAAI8hE,EAAU/hE,KAAKm9B,IAAI0kC,EAAWwD,EAAKpD,EAASiD,IAEhE,MAAO,CAAC,CACNhE,WAAY,CACVnkC,EAAG,EACH4B,EAAG,EACHh3B,MAAO09D,EACPz9D,OAAQw9D,GAEVjE,MAAOd,GAAcE,IAAMF,GAAcK,KAAOL,GAAcI,QAC7D,CACDS,WAAY,CACVnkC,EAAGsoC,EAAKpD,EACRtjC,EAAG,EACHh3B,MAAO49D,EACP39D,OAAQu9D,GAEVhE,MAAOd,GAAcE,IAAMF,GAAcG,OACxC,CACDU,WAAY,CACVnkC,EAAGsoC,EAAKpD,EACRtjC,EAAGwmC,EAAKlD,EACRt6D,MAAO49D,EACP39D,OAAQ49D,GAEVrE,MAAOd,GAAcG,OACpB,CACDU,WAAY,CACVnkC,EAAGsoC,EAAKpD,EACRtjC,EAAGwmC,EAAKK,EAAK,EAAIvD,EACjBt6D,MAAO49D,EACP39D,OAAQ89D,GAEVvE,MAAOd,GAAcI,OAASJ,GAAcG,OAEhD,CArGMmF,CAAuBh0D,EAC7B,CAzWai0D,CAAWj0D,GAGf,CACLsvD,SACA4E,eAAgB7E,GAAuBC,GAE3C,C,4BC/HA,MAAM6E,GAAsB,IACtBC,GAAyB,IACzBC,GAAe,GAEN,SAASC,GACtB7f,EACA5sD,EACAzG,EACAmzE,EACAC,EACAC,EACA9pE,EACA+pE,GAEA,MAAMC,GAAiB1zB,EAAAA,EAAAA,KAAQyzB,IAE/Blf,EAAAA,EAAAA,KAAgB,KACd,MAAMof,EAAcD,EAAexjD,QAGnC,GAFAwjD,EAAexjD,SAAU,EAErBojD,GAAa9f,EAAWtjC,QAAS,CACnC,MAAM0jD,EAAoBpgB,EAAWtjC,QAAQ2jD,QAAwB,gBAE/DC,EAAaN,EAEbO,EAAOA,KAAMC,EAAAA,GAAAA,IACjBJ,EACApgB,EAAWtjC,QACX4jD,EAAa,MAAQ,cACrBV,QACmB7yE,IAAnBgzE,EAAgCO,EAAaZ,GAAsBC,QAA0B5yE,EAC7FgzE,OACAhzE,EACAmJ,GACA,GAGEiqE,GAEFM,EAAAA,EAAAA,IAAoBF,IAEpBG,EAAAA,EAAAA,KAAe,MACbrL,EAAAA,EAAAA,IAAgBkL,IAAQ,GAG9B,IACC,CACDvgB,EAAYrzD,EAAQmzE,EAAWC,EAAgBC,EAAkB9pE,GAErE,C,0BC1CA,MAAMyqE,GAAiC,IACjCC,GAA2B,IAC3BC,GAAkC,IAClCC,GAA4B,EAAIzqC,GAAAA,GAChC0qC,GAA6B3sE,OAAOiiC,GAAAA,IACpC2qC,GAAgC,+BAEvB,SAASC,GACtBC,EACA7e,EACAjvD,EACA0jE,EACAqK,EACAC,EACAC,EACAjU,EACAjB,EACAx/D,EACA20E,EACAC,EACArI,EACAsI,GAEA,MAAM,gBAAE/sE,EAAe,oBAAEgtE,IAAwBz8D,EAAAA,EAAAA,OAE1C08D,EAAwBC,EAA0BC,IAA8Bh1B,EAAAA,GAAAA,MAChFi1B,EAAUC,EAAYC,IAAgBn1B,EAAAA,GAAAA,KACvCo1B,GAAsBx1B,EAAAA,EAAAA,MAOtBwU,GAAkBihB,EAAAA,GAAAA,IAAsBpkE,IAC5C,MAAMqkE,EAAyBX,EAAiB7kD,QAChD,IAAKwlD,EAAwB,OAE7B,MAAM,QAAE/gB,EAAO,QAAEghB,GAAYtkE,GAE3B84B,EAAGyrC,EAAgB7gE,MAAO8gE,EAAoB9pC,EAAG+pC,EAAgB9gE,OAAQ+gE,GACvEL,EAAuBM,wBACrB7rC,EAAIyrC,EAAiBC,EAAqB,EAC1C9pC,EAAI+pC,EAAiBC,EAAsB,EAE3CE,EAAa7oE,KAAKyjE,IAAI1mC,EAAIwqB,GAAW2f,GACrC4B,EAAa9oE,KAAKyjE,IAAI9kC,EAAI4pC,GAAWpB,GACvC0B,GAAcC,EAChBf,IAEAC,GACF,GACC,CAACL,GAAmBb,EAAAA,IA0HvB,OA5CAz4B,EAAAA,EAAAA,KAAU,KACR,IAAKzvC,EAAAA,IAAgB2oE,IAAmBC,GAAYE,EAClD,OAGF,IAAIqB,EACJ,OAAOhrB,EAAAA,GAAAA,IAAc0K,EAAa3lC,QAAU,CAC1Ck7B,wBAAyB,eACzBgrB,wBAAyB,gBACzB/qB,QAAUA,CAACh6C,EAAGhH,IACRA,IAAcihD,GAAAA,GAAAA,OACX6qB,IACHA,EAAY/pE,KAAKC,OAGnBipE,KAEO,GAKXe,UAAWA,KACJF,GAAcvB,IAInB3sE,EAAgB,CAAErB,cAElBoC,WAAWusE,EAAcnoE,KAAKC,IAAI,EAAG+mE,IAA4BhoE,KAAKC,MAAQ8pE,KAC9EA,OAAY51E,EAAS,GAEvB,GACD,CACDs1D,EAAc8e,EAAgB/tE,EAAWqB,EAAiBqtE,EAAYC,EAAcX,EAAUE,IAUzF,CACL/b,gBAAkB4b,OAAmCp0E,EAlJvD,SAAyB8Q,IACvBilE,EAAAA,GAAAA,GAAwBjlE,GACxBsuD,EAAwBtuD,EAC1B,EAgJEynD,YA1FF,SAAqBznD,GACnB,GAAIsjE,EACFD,EAAcrjE,QAIhB,GAAKrF,EAAAA,GAEL,OAAIwpE,EAAoBtlD,SACtBhZ,cAAcs+D,EAAoBtlD,SAClCslD,EAAoBtlD,aAAU3vB,OAhBhC00E,EAAoB,CAClB90E,SACAyG,oBAmBF4uE,EAAoBtlD,QAAUlnB,YAAW,KACvCwsE,EAAoBtlD,aAAU3vB,EAxClC,SAAmB8Q,GACjB,GAAI+rB,EAAAA,GAAY,CACd,MAAMm5C,EAASllE,EAAEklE,OACjB,IAAKA,EAAOliB,UAAUmiB,SAAS,kBAAoBD,EAAOliB,UAAUmiB,SAAS,WAC3E,OAGEnsC,GAAAA,EAAAA,uBACFrhC,YAAW,KACT43D,EAAcvvD,EAAE,GACf8iE,IAEHvT,EAAcvvD,EAElB,CACF,CA0BIolE,CAAUplE,EAAE,GACXgjE,IACL,EAwEEzU,kBAAoB+U,EAAsCE,EAAc6B,GAAAA,OAAYn2E,EAtEtF,SAA2B8Q,GACzB,GAAI+rB,EAAAA,GAAY,CACd,GAAK/rB,EAAEklE,OAAuBI,QAAQ,YAAc7B,EAClD,OAGFzjE,EAAE0qC,iBACF24B,GACF,MACE9T,EAAcvvD,EAElB,EA4DEulE,kBAAoBjC,OAA8Cp0E,EA1DpE,YACMyL,EAAAA,IAAiB4oE,GAErB3sE,EAAgB,CAAErB,aACpB,EAuDEiwE,yBAA2B7qE,EAAAA,QAAiCzL,EArD9D,SAAyB8Q,GACvBA,EAAE6yC,iBACJ,EAoDEsQ,kBACAsiB,wBA/HF,SAAiCzlE,GAC/BA,EAAE6yC,kBACF+wB,EAAoB,CAClB90E,SACAyG,aAEJ,EA0HEsoD,iBAfF,SAA0B79C,IAGxB6iE,EAAAA,EAAAA,IAAekB,GACXJ,GAyBR,SAAuC3jE,GACrC,MAAM0lE,EAAmBC,GAA8B3lE,EAAE4lE,eACrDF,GACFA,EAAiBG,gBAAgB1C,GAErC,CA9BgC2C,CAA8B9lE,EAC5D,EAWEgkE,WACAH,yBACAkC,iCAEJ,CAEA,SAASA,GAA8B/lE,GACrC,MAAM0lE,EAAmBC,GAA8B3lE,EAAE4lE,eACrDF,GACFA,EAAiBM,aAAa7C,GAA+B,GAEjE,CASA,SAASwC,GAA8BM,GACrC,IAAIpnD,EAA0BonD,EAE9B,GACEpnD,EAAUA,EAAQqnD,yBACXrnD,IAAYA,EAAQmkC,UAAUmiB,SAAS,2BAEhD,OAAOtmD,CACT,C,ubC5NA,MAEMsnD,GAAoB,GAG1B,IAAIC,GACJ,MAAMC,GAAyB,ICZhB,MAObp6C,cAAcq6C,GAAA,uBAAAA,GAAA,sBAAAA,GAAA,uBACZj6C,KAAKk6C,QAAU,IAAIlqD,SAAQ,CAACitC,EAASkd,KACnCn6C,KAAKm6C,OAASA,EACdn6C,KAAKi9B,QAAUA,CAAO,GAE1B,GDEF3xD,YAEA,WACOyuE,KACHA,IAASK,EAAAA,GAAAA,GACP,IAAIC,OAAO,IAAIzuD,IAAI,qBAErBouD,GAAuB/c,UAE3B,GAjB0B,K,4BEC1B,MAQA,IAAe3e,EAAAA,EAAAA,KARkCC,IAC/C,MAAM,OAAEj6C,GAAWi6C,EACb+7B,GAAuB77B,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,wBAAyBp6C,GAGrF,OAAOg2E,EAAuB37B,EAAAA,GAAAA,cAAC27B,EAAyB/7B,QAAY17C,CAAS,I,4BCY/E,MAmGA,IAAey7C,EAAAA,EAAAA,KAnGoCl8C,IAG7C,IAH8C,QAClDqF,EAAO,cACP8vD,GACDn1D,EACC,MAAM,gBACJm4E,EAAe,mBAAEC,EAAkB,iBAAEnsE,IACnCyM,EAAAA,EAAAA,OAEE,WAAExL,GAAe7H,EAEjBP,GAAOo5C,EAAAA,GAAAA,MACNm6B,EAAeC,IAAoBn7B,EAAAA,EAAAA,OACnCo7B,EAAkBC,EAAgBC,IAAmBn4B,EAAAA,GAAAA,IAAQ,GAC9Do4B,GAAoB35B,EAAAA,GAAAA,IAASkZ,EAAAA,EAAAA,IAAoB5yD,EAAS,SAC1D81C,EAAU91C,EAAQ2H,QAAQ6H,OAAQ0kB,OAAO4hB,QAEzCw9B,GAAyBr3B,EAAAA,EAAAA,KAAY,KACzCr1C,EAAiB,CACfoE,MAAOvL,EAAK,wBACZO,QAASP,EAAK,mBACd+P,OAAQ,CACNA,OAAQ,4BACRhU,QAAS,CACPiQ,OAAQuzC,EAAAA,GAAAA,OAGZu0B,WAAY9zE,EAAK,SACjB,GACD,CAACA,EAAMmH,IAEJ4sE,GAA2Bv3B,EAAAA,EAAAA,KAAa/qB,IAC5C+hD,OAAiB73E,GACjB23E,EAAmB,CAAE7hD,SACrBoiD,GAAwB,GACvB,CAACA,EAAwBP,IAEtBU,GAAuBx3B,EAAAA,EAAAA,KAAY,KACvCg3B,OAAiB73E,EAAU,GAC1B,IAEGs4E,GAAiBz3B,EAAAA,EAAAA,KAAYxnC,UACjC2+D,IACAE,IAGA,MAAMp/C,EAAQl0B,EAAQ2H,QAAQ6H,OAAQ0kB,MAChC6Z,QAAgB1H,GAAAA,GAAmB,cAAanS,EAAM/3B,YAAamqC,EAAAA,GAAAA,SACnEqvB,QAAazkD,MAAM68B,GAAS58B,MAAM20B,GAAMA,EAAE6vB,SAChDod,EAAmB,CACjB7hD,KAAM,IAAIyiD,KAAK,CAAChe,GAAO,cACvB7f,SAAS,EACT89B,QAAS1/C,EAAM2/C,YAAY3tE,MAAMiI,QAAyB/S,IAAnB+S,EAAE2lE,gBAA6BA,cACtE,GACD,CAACV,EAAiBpzE,EAAQ2H,QAAQ6H,OAAQ8jE,EAAwBP,IAmBrE,OACE77B,EAAAA,GAAAA,cAAA,QAAMrsB,UAAU,kCAAkC69B,SAAU,EAAGqrB,KAAK,SAASn7B,QAlB7CnkC,WAC3B5M,GAAcwrE,EACbv9B,EACFq9B,IAEAF,QAAuB/hE,MAAMmiE,GAAmBliE,MAAM20B,GAAMA,EAAE6vB,UAGhEmd,EAAgB,CACd93E,OAAQgF,EAAQhF,OAChBiZ,QAASjU,EAAQ7D,GACjBlB,SAAUmB,EAAAA,GACV4G,OAAQgxE,EAAAA,GAAAA,iBAEZ,GAKE98B,EAAAA,GAAAA,cAAC+8B,GAAAA,EAAM,CACL//C,MAAOl0B,EAAQ2H,QAAQ6H,OAAQ0kB,MAC/BggD,kBAAgB,EAChBC,UAAWr+B,EACXuD,KAAK,UAEPnC,EAAAA,GAAAA,cAAA,YAAO4Y,KAEP5Y,EAAAA,GAAAA,cAAA,QAAMrsB,UAAU,yBAAyBprB,EAAKq2C,EAAU,kBAAoB,oBAC5EoB,EAAAA,GAAAA,cAACk9B,GAAAA,EAAS,CACRljD,KAAM8hD,EACNr2B,QAAS82B,EACTtwB,SAAUqwB,IAEZt8B,EAAAA,GAAAA,cAAC4c,GAAAA,EAAa,CACZj3D,OAAQq2E,EACRloE,MAAOvL,EAAK,kBACZu0D,eAAgB0f,EAChB/2B,QAASy2B,EACTiB,UAAWvkB,MAER,IC+IX,IAAejZ,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAACjgD,EAAM4N,KAAwC,IAAtC,QAAEnI,EAAO,SAAE/E,GAAUkN,EAC5B,MAAM,OACJnN,EAAM,SAAEoU,EAAQ,iBAAEoM,EAAgB,QAAE7T,GAClC3H,EAEEmK,EAASiF,GACT,cAAEklE,EAAa,aAAEC,GAAiB5sE,EAAQ6H,QAAU,CAAC,EACrDglE,EAAkBh5D,EAClBi5D,EAAgBD,GAClBvlE,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQw5E,QAClCp5E,EAEE+yE,IAAYlzE,IAAWy5E,EAAAA,EAAAA,IAAuBn6E,EAAQyF,EAAS/E,IAEnEiK,UAAWkpE,EACXrqE,YAAasqE,GACVF,IAAatyE,EAAAA,EAAAA,IAAetB,GAAQo6E,gBAAmB,CAAC,EAEvDr3E,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1B45E,EAASt3E,KAAS0hE,EAAAA,EAAAA,IAAc1hE,IAAS6M,IAAWnP,GACpD65E,GAAcD,GAAUzqE,GAAS6T,EAAAA,EAAAA,IAAWzjB,EAAQ4P,QAAU/O,EAC9D05E,EAAaF,EAASt3E,OAAOlC,EAC7B25E,EAAqBx6E,EAAOmvB,cAAcrd,WAAW,GAG3D,MAAO,CACLwoE,aACAC,aACAP,eACAD,gBACAG,gBACAtG,YACA4G,qBACAt0D,OAVYsuB,EAAAA,EAAAA,IAAuBx0C,EAAQyF,GAW3Cg1E,uBAAuBC,EAAAA,EAAAA,IAA4B16E,MAC/C4zE,GAAa,CACfC,iBACAC,oBAEH,GAxCe7zB,EA/L6B7/C,IAuB3C,IAvB4C,QAChDqF,EAAO,WACPk1E,EAAU,gBACVC,EAAkB,EAAC,YACnB7G,EAAW,aACX8G,EAAY,WACZP,EAAU,WACVC,EAAU,cACVR,EAAa,cACbG,EAAa,aACbF,EAAY,UACZpG,EAAS,eACTC,EAAc,iBACdC,EAAgB,mBAChB0G,EAAkB,cAClBM,EAAa,MACb50D,EAAK,qBACL60D,EAAoB,sBACpBN,EAAqB,8BACrBO,EAA6B,8BAC7BC,EAA6B,8BAC7BC,EAA6B,2BAC7BC,GACD/6E,EACC,MAAM,iBAAE83C,EAAgB,gBAAEkjC,IAAoBtiE,EAAAA,EAAAA,MAExC5T,GAAOo5C,EAAAA,GAAAA,KAGPuD,GAAMvB,EAAAA,EAAAA,IAAuB,OAEnC+6B,EAAAA,GAAAA,IAAex5B,EAAKm5B,IACpBnU,EAAAA,GAAAA,GAAiBphE,EAAQhF,OAAQgF,EAAQwb,iBAAkBi5D,GAC3DvG,GAAgB9xB,EAAKp8C,EAAQ7D,GAAI6D,EAAQhF,OAAQmzE,EAAWC,EAAgBC,EAAkBC,IAE9Fh4B,EAAAA,EAAAA,KAAU,KACR,GAAKt2C,EAAQ+e,SAEb,MAAO,KACL22D,IAA6B,CAAEG,0BAA2B,CAAC71E,EAAQ7D,IAAK25E,WAAW,GAAO,CAC3F,GACA,CAACJ,EAA4B11E,EAAQ+e,SAAU/e,EAAQ7D,KAE1D,MAAM45E,EAAwBZ,GAAmB,GAC1CltB,EAAS+tB,IAAa/6B,EAAAA,GAAAA,GAAQ86B,GAC/BnyC,EAAS7hC,QAAQ/B,EAAQ2H,QAAQ6H,QAAQnR,KAAKqoD,WAAW,eACzDuvB,EAAqD,wBAAjCj2E,EAAQ2H,QAAQ6H,QAAQnT,MAAkC2D,EAAQ2H,QAAQ6H,OAAQ0kB,OAE5GoiB,EAAAA,EAAAA,KAAU,KACJy/B,GAIJlyE,WAAWmyE,EAvDU,GAuDCb,EAAmC,GACxD,CAACA,EAAiBa,EAAWD,IAEhC,MAAMxhB,GAAY2hB,EAAAA,GAAAA,IAAkB95B,EAAKq5B,GAEnCU,GAAwBt7B,EAAAA,EAAAA,IAAO,MACnC,MAAMryC,EAAW8sE,GAAsBvqD,SAAW/qB,EAAQ7D,IAAMm5E,EAAqBvqD,QACrF,OAAO6Y,IAAW5jC,EAAQ6H,YAAcW,CACzC,EAHoC,KAKrC8tC,EAAAA,EAAAA,KAAU,KACJie,GAAa4hB,EAAsBprD,UACrCorD,EAAsBprD,SAAU,EAChC4qD,IACF,GACC,CAACphB,EAAWohB,IAEf,MAAM,qBAAE7uB,IAAyBC,EAAAA,GAAAA,GAAkBkB,OAAS7sD,EAAW26E,GAAuB,GAGxFK,GAAYtyE,EAAAA,EAAAA,MAAYyT,MAAMQ,KAC9Bs+D,GAAcz8B,EAAAA,EAAAA,KAAQ,IACnB06B,EACHA,EAAcv0E,KAAKoK,GAAWisE,IAAYjsE,KAAS5L,OAAOwD,cAC1D3G,GACH,CAACk5E,EAAe8B,IAEbtmB,GAAgB7T,EAAAA,EAAAA,KAAY,KACzBq6B,EAAAA,GAAAA,GACL72E,EACAO,EACA60E,EACAC,EACAuB,EACA5B,EACAF,EACA9zD,EACA,CAAEy0D,cACFM,EACAC,IAGJ,CACEP,EAAYz1E,EAAMO,EAASw1E,EAA+BC,EAA+BX,EACzFD,EAAYN,EAAcE,EAAe4B,EAAa51D,KAGlD,kBACJ85C,EAAiB,oBAAEgc,EAAmB,wBACtC/b,EAAuB,kBAAEC,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBxe,GACrBuzB,OAA6Cv0E,IAAxBm7E,EAkB3B,GADyBlB,GAAkD,0BAAjCr1E,EAAQ2H,QAAQ6H,QAAQnR,KAEhE,OAAO64C,EAAAA,GAAAA,cAAA,QAAMkF,IAAKA,IAGpB,GAAI84B,EACF,OAAOh+B,EAAAA,GAAAA,cAAA,QAAMkF,IAAKA,EAAKvxB,UAAU,2BAA2BilC,KAqB9D,MAAMjlC,GAAYkvB,EAAAA,GAAAA,GAChB,kCACAo0B,IAAcE,GAAoB,WACjCzqC,GAAUqyC,IAAsB,kBACjCtG,GAAsB,gBACtByF,GAAgB,gBACfxxC,IAAWqyC,GAAqB,aACjCnvB,GAGF,OACE5P,EAAAA,GAAAA,cAAA,OACEkF,IAAKA,EACLjgD,IAAIq6E,EAAAA,EAAAA,IAAiBx2E,EAAQ7D,IAC7B0uB,UAAWA,EACX,kBAAiB7qB,EAAQ7D,GACzB,iBAAgB6D,EAAQ+e,eAAY3jB,EACpCi1D,YA3DqBnkD,KACvBilE,EAAAA,GAAAA,GAAwBjlE,GACxBsuD,EAAwBtuD,EAAE,EA0DxBuvD,cAAehB,IAEbwb,GAAqB/+B,EAAAA,GAAAA,cAAA,QAAMrsB,UAAU,0BAA0BilC,KAChElsB,GArCDsT,EAAAA,GAAAA,cAAA,QAAMrsB,UAAU,sBAAsB69B,SAAU,EAAGqrB,KAAK,SAASn7B,QArBtC69B,KAC7BhkC,EAAiB,CACf7O,QAAQ,EACRD,WAAYkxC,GAAY14E,GACxB2nC,SAAUwwC,IAAgB,GAC1BzwC,aAAc7jC,EAAQ2H,QAAQ6H,QAAQ00B,QAAU,GAChD,GAgBEgT,EAAAA,GAAAA,cAACw/B,GAAAA,EAAuB,CACtB/iC,IAAK3zC,EAAQ7D,GACbgQ,QAAS4oE,EACT4B,KAAM3B,EACN4B,QAAM,EACNC,gBAAc,IAEhB3/B,EAAAA,GAAAA,cAAA,cAASz3C,EAAK,2BACdy3C,EAAAA,GAAAA,cAAA,YAAOz3C,EAAK,4BAA6BA,EAAK,SAAUO,EAAQ2H,QAAQ6H,QAAQ00B,OAAQ,OAExFgT,EAAAA,GAAAA,cAAA,QAAMrsB,UAAU,yBAAyBprB,EAAK,2BA2B/Cw2E,GACC/+B,EAAAA,GAAAA,cAAC4/B,GAA4B,CAC3B92E,QAASA,EACT8vD,cAAeA,IAGlBymB,GACCr/B,EAAAA,GAAAA,cAAC27B,GAAoB,CACnBh2E,OAAQ09D,EACRwc,OAAQR,EACRv2E,QAASA,EACTR,gBAAgB,SAChBm9C,QAAS+d,EACTtP,oBAAqBuP,IAGrB,KCjHV,GAjGsChgE,IAYhC,IAZiC,UACrCkwB,EAAS,QACT7qB,EAAO,OACPS,EAAM,MACNuK,EAAK,WACLgsE,EAAU,YACVtH,EAAW,aACXuH,EAAY,eACZC,EAAc,8BACd1B,EAA6B,8BAC7BC,EAA6B,QAC7B78B,GACDj+C,EAEC,MAAMyhD,GAAMvB,EAAAA,EAAAA,IAAuB,MAC7Bs8B,GAAiBjB,EAAAA,GAAAA,IAAkB95B,EAAKo5B,GAExC7iB,GAAejZ,EAAAA,GAAAA,GAAS15C,IAAW4yD,EAAAA,EAAAA,IAAoB5yD,EAAS,cAAem3E,GAC/E1kB,GAAiBC,EAAAA,GAAAA,GAAa1yD,GAC9Bo3E,EAAer1E,QAAQ/B,IAAWq3E,EAAAA,EAAAA,IAAqBr3E,IACvD6yD,EAAY9wD,QAAQ/B,IAAW8yD,EAAAA,EAAAA,IAAoB9yD,IAEnDP,GAAOo5C,EAAAA,GAAAA,KAEPy+B,EAAc72E,GAASG,EAAAA,EAAAA,IAAenB,EAAMgB,GAAUT,GAASmmE,aAAaE,gBAE5E,YAAE1S,EAAW,gBAAEC,IAAoBC,EAAAA,GAAAA,GAAajb,GAEtD,OACE1B,EAAAA,GAAAA,cAAA,OACEkF,IAAKA,EACLvxB,WAAWkvB,EAAAA,GAAAA,GACT,kBACAlvB,EACApqB,IAAWw2E,GAAiB,UAAQM,EAAAA,EAAAA,IAAgB92E,MAEtDm4C,QAAS54C,GAAW2zD,EACpBtD,YAAarwD,GAAW4zD,GAEvBnB,GA6BP,SACEyB,EACAnmB,EACAqpC,EACA1H,EACA7c,GAEA,MAAM,MAAEjjD,EAAK,OAAEC,IAAWukD,EAAAA,GAAAA,MAEpBC,EAAStmB,GAAWmmB,EAE1B,OACEhd,EAAAA,GAAAA,cAAA,OAAKrsB,WAAWkvB,EAAAA,GAAAA,GAAe,iBAAkBq9B,GAAgB,WAC7DvkB,GACA3b,EAAAA,GAAAA,cAAA,OACEmD,IAAKga,EACLzkD,MAAOA,EACPC,OAAQA,EACRyqC,IAAI,GACJzvB,UAAU,YACV2sD,WAAW,IAGftgC,EAAAA,GAAAA,cAACod,GAAAA,EAAY,CAACJ,aAAcG,EAAQE,UAAWxyD,QAAQ8wD,GAAYjjD,MAAOA,EAAOC,OAAQA,IACxF6/D,GAAex4B,EAAAA,GAAAA,cAAA,QAAMrsB,UAAU,cAGtC,CAxDyB2pC,CAAgB/B,EAAgBE,EAAcykB,EAAc1H,EAAa7c,GAC5F3b,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,gBACbqsB,EAAAA,GAAAA,cAAA,KAAG4B,IAAI,QACH94C,GAEEkmE,EAAAA,EAAAA,IAAgBlmE,GAClBk3C,EAAAA,GAAAA,cAACugC,GAAa,CACZz3E,QAASA,EACTk1E,YAAU,EACVM,8BAA+BA,EAC/BC,8BAA+BA,IAGjCv+B,EAAAA,GAAAA,cAACyd,GAAAA,EAAc,CACbl1D,KAAMA,EACNO,QAASA,EACT40D,QAAS7yD,QAAQ0wD,GACjB+iB,8BAA+BA,EAC/BC,8BAA+BA,IAdjCuB,GA7CC,KA+DL9/B,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,gBAAgBiuB,IAAI,SAAQ4b,EAAAA,GAAAA,GAAW4iB,GAAetsE,GA/DhE,OAiENksE,GAAkBhgC,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,iCAC5B,E,uCC1EV,MAmHA,IAAegsB,EAAAA,EAAAA,KAnHmBl8C,IAa5B,IAb6B,QACjCqF,EAAO,eACP03E,EAAc,UACdC,EAAS,mBACTC,EAAkB,kBAClB7wD,EAAiB,0BACjB8wD,EAAyB,UACzBC,EAAS,aACTC,EAAY,SACZh5D,EAAQ,QACR65B,EAAO,mBACPo/B,EAAkB,aAClBC,GACDt9E,EACC,MAAM,iBAAEiM,IAAqByM,EAAAA,EAAAA,MACvB5T,GAAOo5C,EAAAA,GAAAA,MACNq/B,EAAaC,IAAiBl9B,EAAAA,GAAAA,MAE/B,YAAE0Y,EAAW,gBAAEC,IAAoBC,EAAAA,GAAAA,GAAajb,GAEtD,SAASw/B,EAAoBlsE,GAC3BA,EAAE6yC,kBAEFn4C,EAAiB,CACf5G,QAASP,EAAK,iBAElB,CAOA,MAAMuL,GAAQ4uC,EAAAA,EAAAA,KAAQ,KACpB,IAAKs+B,EAAa,OAClB,MAAMG,GAAiBC,EAAAA,GAAAA,IAAsC,IAAft4E,EAAQyH,KAAahI,EAAKugC,UAAM5kC,EAAWqE,EAAK84E,YACxFC,EAAex4E,EAAQy4E,WACxBH,EAAAA,GAAAA,IAA2C,IAApBt4E,EAAQ04E,SAAkBj5E,EAAKugC,UAAM5kC,EAAWqE,EAAK84E,YAC3EI,EAAoB34E,EAAQmmE,cAC7BmS,EAAAA,GAAAA,IAAkD,IAA3Bt4E,EAAQmmE,YAAY1+D,KAAahI,EAAKugC,UAAM5kC,EAAWqE,EAAK84E,YAExF,IAAIl6E,EAAOg6E,EAUX,OATIG,IACFn6E,GAAQ,KACRA,GAAQoB,EAAK,mBAAmBoL,QAAQ,SAAU2tE,IAEhDG,IACFt6E,GAAQ,KACRA,GAAQoB,EAAK,sBAAsBoL,QAAQ,SAAU8tE,IAGhDt6E,CAAI,GAGV,CAAC65E,EAAaz4E,EAAMO,EAASP,EAAK84E,aAE/BK,GAAgB7+B,EAAAA,GAAAA,GACpB,cACA69B,GAAsB,mBACtB53E,EAAQmmE,aAAa0S,YAAc,eAGrC,OACE3hC,EAAAA,GAAAA,cAAA,QACErsB,UAAW+tD,EACX9/B,IAAKr5C,EAAKs5C,MAAQ,MAAQ,MAC1BH,QAAS+a,EACTtD,YAAauD,EACb,2BAECmkB,GACC7gC,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,wCAAwC+tB,QAASo/B,IAE/Dj2E,QAAQ/B,EAAQ4mB,QACfswB,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,QAAMrsB,UAAU,kBACb0sB,EAAAA,GAAAA,IAAqBv3C,EAAQ4mB,QAEhCswB,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,6BAGfitD,GAAa/1E,QAAQglB,GAAmBC,gBACxCkwB,EAAAA,GAAAA,cAAA,QAAM0B,QAtDZ,SAA0B1sC,GACxBA,EAAE6yC,kBACFk5B,GACF,EAmDuCptD,UAAU,2BACzCqsB,EAAAA,GAAAA,cAAA,QAAMrsB,UAAU,mBACdqsB,EAAAA,GAAAA,cAACud,GAAAA,EAAe,CAACp2D,MAAMk5C,EAAAA,GAAAA,IAAqBxwB,EAAmBC,kBAEjEkwB,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,4BAGhB9L,GACCm4B,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,4CAEd8sD,GACCzgC,EAAAA,GAAAA,cAAA,QAAMrsB,UAAU,sBAAqB6pC,EAAAA,GAAAA,GAAWijB,IAElDzgC,EAAAA,GAAAA,cAAA,QAAMrsB,UAAU,eAAe7f,MAAOA,EAAOw/C,aAAc2tB,GACxDn4E,EAAQmmE,aAAa0S,YACpB3hC,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,QAAMrsB,UAAU,mBAAmB+tB,QAASw/B,IACzCE,EAAAA,GAAAA,IAAkD,IAA3Bt4E,EAAQmmE,YAAY1+D,KAAahI,EAAKugC,MAAM,IAEtEkX,EAAAA,GAAAA,cAAA,QAAMrsB,UAAU,mBAAmB+tB,QAASw/B,GAAsB34E,EAAK,qBAG1EO,EAAQy4E,UAAa,GAAEh5E,EAAK,qBAC5Bq5E,EAAAA,GAAAA,IAAWr5E,EAAqB,IAAfO,EAAQyH,OAE3BiwE,GACCxgC,EAAAA,GAAAA,cAAC6hC,GAAAA,EAAqB,CAACllE,OAAQ6jE,IAEhCG,GAA6BA,IACzB,I,4BC3HX,MAqIA,GAvH8Bl9E,IAGxB,IAHyB,QAC7BqF,EAAO,oBAAEg5E,EAAmB,8BAAEvD,EAA6B,WAAEwD,EAAU,aAAEplD,EAAY,iBACrFqlD,EAAgB,WAAEC,EAAU,aAAEC,EAAY,aAAEC,GAC7C1+E,EACC,MAAM,iBAAEiM,EAAgB,eAAE0yE,IAAmBjmE,EAAAA,EAAAA,MAEvC5T,GAAOo5C,EAAAA,GAAAA,MACP,SAAE2C,IAAaC,EAAAA,EAAAA,MAGfW,GAAMvB,EAAAA,EAAAA,IAAuB,MAE7B1uC,EAAUnM,EAAQ2H,QAAQwE,SAC1B,eAAEqb,EAAc,QAAEsuB,EAAO,UAAEyjC,GAAcptE,EAEzCqtE,EAAYrtE,EAAQ8hC,yBAAsB7yC,GAC9Cw3D,EAAAA,EAAAA,IAAoB5yD,EAAS81C,IAAY2jC,EAAAA,GAAoB,YAAc,UAGvEC,GAAUxD,EAAAA,GAAAA,IAAkB95B,EAAK48B,GACjCW,GAAUzD,EAAAA,GAAAA,IAAkB95B,EAAKq5B,GACjCmE,EAAmB,UAASztE,EAAQhQ,YACpC09E,GAAgBngC,EAAAA,GAAAA,GACpBkgC,GACCF,IAAYH,EACbjzC,EAAAA,GAAAA,QACAzS,IAEKimD,EAAiBC,EAAoBC,IAAqB/+B,EAAAA,GAAAA,KAE3Dg/B,GAAoBh+B,EAAAA,EAAAA,KAAY,KACpC+9B,IACAX,KAAgB,GACf,CAACA,EAAcW,IAEZE,GAA2B3W,EAAAA,GAAAA,GAAY2V,IAE7C5iC,EAAAA,EAAAA,KAAU,KACJijC,GAAaJ,GAAcQ,IAAYT,GAAoBgB,KAC7DH,IACAX,MACF,GACC,CAACG,EAAWI,EAASP,EAAcF,EAAkBgB,EAA0BH,EAAoBZ,IAEtG,MAAMgB,GAAYl+B,EAAAA,EAAAA,KAAY,KAC5Bq9B,EAAe,CACb9xD,eAAgBrb,EAAQqb,gBACxB,GACD,CAAC8xD,EAAgBntE,IAEdwnD,GAAc1X,EAAAA,EAAAA,KAAY,KAC9B,GAAIs9B,EAAW,CACb,GAAIO,IAAoBX,EAWtB,YAVAvyE,EAAiB,CACf5G,QAASP,EAAK,yBACd+P,OAAQ,CACNA,OAAQ,iBACRhU,QAAS,CACPgsB,eAAgBrb,EAAQqb,iBAG5B+rD,WAAY9zE,EAAK,gBAGd,GAAI05E,EAGT,OAFAY,SACAX,KAGJ,CACAe,GAAW,GACV,CACDZ,EAAWO,EAAiBr6E,EAAM25E,EAAce,EAAWvzE,EAAkBmzE,EAC7E5tE,EAAQqb,eAAgB2xD,IAGpBiB,EAAkB,cAAe5yD,GACjC,MAAE5X,EAAK,OAAEC,IAAWwqE,EAAAA,GAAAA,IAAqBluE,EAASqvC,GAClD3wB,GAAYkvB,EAAAA,GAAAA,GAChB,sBACAqgC,GAAmB,WACnBb,IAAcv5E,EAAQ6H,YAAc,YAGtC,OACEqvC,EAAAA,GAAAA,cAAA,OACEkF,IAAKA,EACLvxB,UAAWA,EACXovB,MAAQ,UAASrqC,gBAAoBC,OACrC+oC,QAAUwhC,OAAgCh/E,EAAdu4D,GAE5Bzc,EAAAA,GAAAA,cAACojC,GAAAA,EAAW,CACV5pB,aAActU,EACdjwC,QAASA,EACTouE,cAAef,EACfgB,mBAAmB,aACnBnhC,KAAMzpC,EACNqpE,WAAYA,EACZwB,QAASf,EACTgB,QAASf,EACTv/B,qBAAmB,EACnBugC,YAAa9mD,IAEd0lD,GAAaJ,GAAcO,GAAWI,GACrC5iC,EAAAA,GAAAA,cAAC0jC,GAAAA,EAAe,CACdjnC,IAAKimC,EACL/uD,UAAU,iBACVgwD,OAAQhB,EACRxgC,KA1HqB,KA0HfzpC,EACN+mE,MAAI,EACJmE,eAAa,EACblE,QAAM,EACNmE,QAASd,IAGT,E,4BC9IV,MAAMe,GAAO,EAAIt2C,GAAAA,GACXu2C,GAAyB,IACzBC,GAAa,IACbC,GAAe,EAEN,SAASC,GACtBpgF,EACAyG,EACA45E,EACAn0C,EACAqgC,EACA1mE,EACAy6E,GAEA,MAAM,0BACJC,EAAyB,qBAAEC,EAAoB,6BAAEC,IAC/CpoE,EAAAA,EAAAA,MAGE+oC,GAAMvB,EAAAA,EAAAA,IAAuB,MAG7B6gC,GAAW7gC,EAAAA,EAAAA,IAAqC,MAEhD8gC,GAAiBjiC,EAAAA,GAAAA,GAAS2hC,EAAW,WAAUA,SAAYjgF,GAAYigF,GAEvEhiC,EAAOiiC,GAAiBN,GACxB/gC,GAAQ2hC,EAAAA,GAAAA,GAAY,UAASviC,MAAW,WAAUA,MAAUx4C,GAAS,mBAErEsmC,GAAe0T,EAAAA,EAAAA,SAA6Bz/C,GAC5CygF,GAAsBhhC,EAAAA,EAAAA,SAA2Bz/C,GACjD0gF,GAAuB7/B,EAAAA,EAAAA,KAAY,KACrBG,EAAIrxB,UAItBywD,EAAqB,CACnBxgF,OAAQA,EACRyG,UAAWA,EACXZ,MAAOA,EACPsmC,aAAcA,EAAapc,UAE7B8wD,EAAoB9wD,aAAU3vB,EAC9B+rC,EAAapc,aAAU3vB,EAAS,GAC/B,CAACogF,EAAsBxgF,EAAQyG,EAAWZ,IAEvC81E,GAAO16B,EAAAA,EAAAA,KAAY,KACvB,MAAMgc,EAAQyjB,EAAS3wD,QACnB4wD,IACE1jB,IACFA,EAAM/uC,QACN+uC,EAAM9I,UAERusB,EAAS3wD,QAAU,IAAIgxD,MACvBL,EAAS3wD,QAAQsvB,IAAMshC,GACvBK,EAAAA,GAAAA,GAASN,EAAS3wD,SAClB2wD,EAAS3wD,QAAQmtB,iBAAiB,SAAS,KACzCwjC,EAAS3wD,aAAU3vB,CAAS,GAC3B,CAAE6gF,MAAM,IACb,GACC,CAACN,IAEEhoB,GAAc1X,EAAAA,EAAAA,KAAY,KAC9B06B,IAEA,MAAMuF,EAAY9/B,EAAIrxB,QAEtB,KAAKlqB,GAAUq7E,GAAcz6E,GAAczG,GACzC,OAGF,MAAM,EAAEgqC,EAAC,EAAE4B,GAAMs1C,EAAUrL,wBAE3B0K,EAA0B,CACxB16E,MAAOA,EACPmkC,IACA4B,IACAC,UAAWwS,EACXvS,YAAaygC,IAGVpgC,EAAapc,UAChBoc,EAAapc,QAAU,GACvB8wD,EAAoB9wD,QAAUoxD,YAAYj1E,MAC1CrD,WAAWi4E,EAAsBb,KAGnC9zC,EAAapc,QAAQpqB,KAAKk7E,EAAoB9wD,SACzCoxD,YAAYj1E,MAAQ20E,EAAoB9wD,SAAWmwD,GACpDC,GAAa,GAChB,CAACngF,EAAQ6F,EAAO06E,EAA2BhU,EAAO9lE,EAAWk1E,EAAMmF,EAAsBziC,IAgC5F,OA7BA/C,EAAAA,EAAAA,KAAU,KACR,MAAM4lC,EAAY9/B,EAAIrxB,QAEjBmxD,GAAch1C,GAEnBA,EAAwBjhC,SAAQtL,IAI1B,IAJ2B,GAC/BwB,EAAE,UACF0qC,EACAplC,UAAW26E,GACZzhF,EACC,GAAIksC,GAAaplC,IAAc26E,EAC7B,OAGF,MAAM,EAAEp3C,EAAC,EAAE4B,GAAMs1C,EAAUrL,wBAE3B4K,EAA6B,CAC3Bt/E,KACAnB,OAAQA,EACRosC,SAAUvmC,EACVgmC,UAAWwS,EACXrU,IACA4B,IACAE,YAAaygC,IAEfoP,GAAM,GACN,GACD,CAACzvC,EAAyBlsC,EAAQ6F,EAAO0mE,EAAO9lE,EAAWk1E,EAAM8E,EAA8BpiC,IAE3F,CACL+C,MACA/C,OACAY,QACA0Z,cAEJ,CCrGA,MAwCA,IAAe9c,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAAqB,CAACjgD,EAAM4N,KAA6B,IAA3B,MAAEtH,EAAK,YAAEw7E,GAAal0E,EACtE,MAAO,CACLgE,SAASmwE,EAAAA,EAAAA,IAAoB/hF,EAAQsG,GACrC07E,OAAQF,GAAcG,EAAAA,EAAAA,IAA0BjiF,EAAQsG,QAASzF,EACjEigF,SAASoB,EAAAA,EAAAA,IAAyBliF,EAAQsG,GAC3C,GALiB25C,EAtC6B7/C,IAW3C,IAX4C,MAChD4sE,EAAK,oBACLyR,EAAmB,aACnBnlD,EAAY,iBACZ6oD,EAAgB,UAChBj7E,EAAS,OACTzG,EAAM,wBACNksC,EAAuB,QACvB/6B,EAAO,OACPowE,EAAM,QACNlB,GACD1gF,EACC,MAAM,IACJyhD,EAAG,KACH/C,EAAI,MACJY,EAAK,YACL0Z,GACEynB,GAAiBpgF,EAAQyG,EAAW45E,EAASn0C,EAAyBqgC,EAAOgV,GAAQ17E,OACnFs2E,GAAiBjB,EAAAA,GAAAA,IAAkB95B,EAAK48B,GAE9C,OACE9hC,EAAAA,GAAAA,cAACw/B,GAAAA,EAAuB,CACtBvqE,QAASA,EACTktC,KAAMA,EACNsjC,QA1BU,EA2BVlC,QAAStD,EACTyF,aAAcF,EACd7oD,aAAcA,EACd8iD,KAAMQ,EACNlyE,uBAAqB,EACrBm3C,IAAKA,EACLvxB,WAAWkvB,EAAAA,GAAAA,GAAe,4BAA6B5tC,GAAShQ,KAAO0gF,GAAAA,IAAmB,sBAC1F5iC,MAAOA,EACPrB,QAAS+a,GACT,KCGN,IAAe9c,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAAqB,CAACjgD,EAAM4N,KAAqC,IAAnC,cAAE20E,EAAa,YAAET,GAAal0E,EAC9E,MAAMgE,EAAU5R,EAAOwS,aAAagL,KAAK+kE,GAEzC,MAAO,CACL3wE,UACAowE,OAAQpwE,GAAStL,OAASw7E,GAAcG,EAAAA,EAAAA,IAA0BjiF,EAAQ4R,EAAQtL,YAASzF,EAC3FigF,QAASlvE,GAAStL,QAAS47E,EAAAA,EAAAA,IAAyBliF,EAAQ4R,EAAQtL,OACpE65E,SAASzF,EAAAA,EAAAA,IAA4B16E,GACtC,GARiBigD,EAtCmC7/C,IAWjD,IAXkD,MACtD4sE,EAAK,cACLuV,EAAa,UACbr7E,EAAS,OACTzG,EAAM,wBACNksC,EAAuB,QACvB/6B,EAAO,OACPowE,EAAM,QACNlB,EAAO,OACPX,EAAM,oBACN1B,GACDr+E,EACC,MAAM,IACJyhD,EAAG,KACH/C,EAAI,MACJY,EAAK,YACL0Z,GACEynB,GACFpgF,EAAQyG,EAAW45E,EAASn0C,EAAyBqgC,EAAOgV,GAAQ17E,OAAOk8E,EAAAA,GAAAA,IAAmB,IAGhG,OACE7lC,EAAAA,GAAAA,cAACgD,GAAAA,EAAW,CACVkC,IAAKA,EACL3vC,WAAYqwE,EACZjyD,WAAWkvB,EAAAA,GAAAA,GAAe,4BAA6B5tC,GAAShQ,KAAO0gF,GAAAA,IAAmB,sBAC1F5iC,MAAOA,EACPZ,KAAMA,EACN2jC,OAAK,EACLtC,OAAQA,EACRtgC,qBAAmB,EACnBn1C,uBAAqB,EACrBuwE,8BAA+BwD,EAC/BpgC,QAAS+a,GACT,KCzEAspB,GAA2B,CAC/BC,KAAM,CACJC,SAAU,mBACVC,SAAU,iBAEZC,MAAO,CACLF,SAAU,mBACVC,SAAU,qBAIC,SAASE,GACtBjjC,EAAaktB,EAAgBgW,EAAwBlhB,EAAsBtgC,GAE3E,OAAIsgC,EACK9zC,QAAQitC,QAAQynB,GAAyBlhD,GAAS,SAASwrC,EAAQ,WAAa,aAK3F9yD,eAAyC4lC,EAAaktB,GACpD,MAAMjS,EAAM,IAAIC,MAChBD,EAAIjb,IAAMA,EACVib,EAAIkoB,YAAc,YAEbloB,EAAI1lD,aACD,IAAI2Y,SAASitC,IACjBF,EAAIG,OAASD,CAAO,IAIxB,MAAMkB,EAASjsD,SAASksD,cAAc,UAChCK,EAAMN,EAAOG,WAAW,MAE9BH,EAAO9mD,MAAQ0lD,EAAI1lD,MACnB8mD,EAAO7mD,OAASylD,EAAIzlD,OAEpBmnD,EAAIE,UAAU5B,EAAK,EAAG,EAAGA,EAAI1lD,MAAO0lD,EAAIzlD,QAExC,MAAMm1B,EAAIuiC,EAAQjS,EAAI1lD,MAAQ,EAAI,EAC5Bg3B,EAAI0uB,EAAIzlD,OAAS,EAGvB,MAAQ,QADMjV,MAAM2e,KAAKy9C,EAAIymB,aAAaz4C,EAAG4B,EAAG,EAAG,GAAGt4B,MACjCrN,KAAK,OAC5B,CA3BSy8E,CAA0BrjC,EAAKktB,EACxC,C,4BCbe,SAASoW,GACtB39E,EACA23C,EACAimC,GAEA,MAAM,SAAEpiC,IAAaC,EAAAA,EAAAA,MAEfoiC,EAAUD,IAAaE,EAAAA,EAAAA,IAA4B99E,GAEzD,OAAO+9E,EAAAA,GAAAA,GACLF,EACA97E,QAAQ41C,GACR6D,IAAawiC,EAAAA,GAEjB,C,4BCuCA,MAuKA,GAvK4BrjF,IAoBtB,IApBuB,GAC3BwB,EAAE,QACF6D,EAAO,oBACPg5E,EAAmB,UACnB1R,EAAS,YACT2W,EAAW,eACXzO,EAAc,WACdnT,EAAU,eACV6hB,EAAc,YACdC,EAAW,KACX9kC,EAAO,SAAQ,WACf8vB,EAAU,YACV9B,EAAW,eACXwP,EAAc,qBACduH,EAAoB,cACpBC,EAAa,YACb3O,EAAW,MACX3zC,EAAK,QACL6c,EAAO,eACP0lC,GACD3jF,EAEC,MAAMyhD,GAAMvB,EAAAA,EAAAA,IAAuB,MAE7B3mB,GAASuzC,EAAAA,EAAAA,IAAgBznE,KAAY0nE,EAAAA,EAAAA,IAAuB1nE,GAC5Du+E,EAAerqD,EAAM6Z,QAErBopC,GAAiBjB,EAAAA,GAAAA,IAAkB95B,EAAK48B,IAExC,SAAEx9B,IAAaC,EAAAA,EAAAA,OACd+iC,EAAeC,IAAoB3mC,EAAAA,EAAAA,IAASmmC,GAC7CS,EAAaF,GAAiBrH,GAC9B,UACJ5e,EAAS,aAAEomB,IACTC,EAAAA,GAAAA,IAAyBhsB,EAAAA,EAAAA,IAAoB5yD,EAASq5C,IAAQqlC,GAC5DG,EAAgBN,GAAgBhmB,EAEhCumB,EAAwB/8E,QAAQo8E,IAC/BY,IAAajnC,EAAAA,EAAAA,KAAU+mC,GACxBG,EAAUj9E,QAAQ88E,GAClBI,EAAWtB,GAAwB39E,EAASg/E,GAC5CE,EAAuBvB,GAAwB39E,GAAU8+E,GACzDK,GAAkBC,EAAAA,GAAAA,IAAoBJ,GACtC9qB,GAAe4pB,EAAAA,EAAAA,IAA4B99E,IAE1Cq/E,EAAe,CAAGC,IAAerkC,EAAAA,GAAAA,GAAQ/mB,EAAM2+B,YAGpD8rB,aAAcY,IACZX,EAAAA,GAAAA,IACFhsB,EAAAA,EAAAA,IAAoB5yD,EAAS,aAAcq+E,GAAemB,EAAAA,EAAAA,IAAsBx/E,EAAS,cAGrF,YACJy/E,EAAW,eAAEC,EAAc,iBAAEC,IAC3BC,EAAAA,EAAAA,IACF5/E,EACAk+E,IAAmBG,EAAgBkB,EAAmBZ,GACtDD,IAAeG,GAEXgB,GAAiD,KAA/Btc,EAAAA,GAAAA,GAAYib,IAGlC53B,aAAck5B,EACdh5B,qBAAsBi5B,IACpBh5B,EAAAA,GAAAA,GAAkB24B,OAAgBtkF,EAAWykF,EAAiB,SAEhEj5B,aAAco5B,EACdl5B,qBAAsBm5B,IACpBl5B,EAAAA,GAAAA,IAAmB83B,IAAkBL,GAEnC7qB,IAAc1X,EAAAA,EAAAA,KAAY,KAC1BwjC,EACFnB,IAAiBt+E,GAId6+E,EAKDQ,EACFC,IAIF1mC,IAAU54C,EAAQ7D,IAThBsiF,GAAkByB,IAAeA,GASd,GACpB,CAACrB,EAAeS,EAAaD,EAAgBI,EAAaz/E,EAASs+E,EAAgB1lC,IAEhF2uB,IAAQC,EAAAA,EAAAA,IAAaxnE,IAC3BmgF,EAAAA,GAAAA,IAA4Bh4E,IAAgC,IAA9Bi4E,GAAyBj4E,EACrD,IAAKi2E,EAIH,YAHIgC,GACFhkC,EAAIrxB,QAAS2jD,QAAwB2R,EAAAA,KAA2BtO,gBAAgBuO,EAAAA,MAKpF,MAAMC,EAAYnkC,EAAIrxB,QAAS2jD,QAAwB2R,EAAAA,KACnDxB,EACFvB,GAAoBuB,EAAetX,GAAOiI,EAAgBnT,EAAYtgC,GAAO5qB,MAAMqvE,KACjF9c,EAAAA,EAAAA,KAAgB,KACd6c,EAAUtmC,MAAMgV,YAAY,gBAAiBuxB,GAC7CD,EAAUrO,aAAaoO,EAAAA,IAA2B,GAAG,GACrD,IAGJC,EAAUrxB,UAAUxoC,IAAI,qBAC1B,GACC,CAAC03D,EAAsBS,EAAetX,GAAOiI,EAAgBnT,EAAYtgC,IAE5E,MAAM,MAAEnsB,GAAK,OAAEC,GAAM,QAAEw4D,IAAYc,GAAc/B,GAAyBpnE,EAASqnE,EAAaC,EAAW9rB,GAErG3wB,IAAYkvB,EAAAA,GAAAA,GAChB,eACC0lC,IAAgB5I,GAAkB,cACnCxO,IAAW,cACXz4D,KAAUC,IAAU,eACpBA,GAASk3D,IAAoB,kBAGzB0Z,GAAkBtX,EAAc,WAAUv5D,eAAkBu5D,EAAWnkC,aAAamkC,EAAWviC,OAAS,GACxGqT,GAAiB,WAATZ,EAAqB,WAAUxpC,QAAY4wE,UAAoBrlF,EAE7E,OACE87C,EAAAA,GAAAA,cAAA,OACE/6C,GAAIA,EACJigD,IAAKA,EACLvxB,UAAWA,GACXovB,MAAOA,GACPrB,QAAS6mC,OAAcrkF,EAAYu4D,IAElCmrB,GAAyB5nC,EAAAA,GAAAA,cAAA,UAAQkF,IAAK8iC,EAAsBr0D,UAAU,yBACvEqsB,EAAAA,GAAAA,cAAA,OACEmD,IAAKwkC,EACLh0D,WAAWkvB,EAAAA,GAAAA,GAAe,aAAc+kC,GAAyB,mBACjExkC,IAAI,GACJL,MAAOkkC,EAAe,UAASA,WAAkB/iF,EACjDo8E,WAAY9H,IAEbqP,GACC7nC,EAAAA,GAAAA,cAAA,UAAQkF,IAAK6iC,EAAUp0D,WAAWkvB,EAAAA,GAAAA,GAAe,YAAaolC,KAE/DzP,GAAex4B,EAAAA,GAAAA,cAAA,QAAMrsB,UAAU,cAC/Bi1D,IAAwBE,GACvB9oC,EAAAA,GAAAA,cAAA,OAAKrsB,UAAY,iBAAgBk1D,KAC/B7oC,EAAAA,GAAAA,cAACwpC,GAAAA,EAAe,CAACxmE,SAAUylE,EAAkB/mC,QAAS6mC,EAAc9rB,QAAcv4D,KAGrF4kF,GACI9oC,EAAAA,GAAAA,cAAA,KAAGrsB,WAAWkvB,EAAAA,GAAAA,GAAe,OAAQ,gBAAiBkmC,KAC3D/oC,EAAAA,GAAAA,cAACod,GAAAA,EAAY,CACXC,UAAW8qB,EACXsB,eAAa,EACbzsB,aAAcA,EACdtkD,MAAOA,GACPC,OAAQA,GACRgb,UAAU,kBAEX60D,GACCxoC,EAAAA,GAAAA,cAAA,QAAMrsB,UAAU,6BAA6B5iB,KAAKwK,MAAyB,IAAnBktE,GAAwB,KAE9E,E,gBCxKV,MAmNA,GAnN4BhlF,IAiBtB,IAjBuB,GAC3BwB,EAAE,QACF6D,EAAO,8BACPw1E,EAA6B,8BAC7BC,EAA6B,UAC7BnO,EAAS,YACT2W,EAAW,YACX2C,EAAW,eACX1C,EAAc,YACdC,EAAW,aACXtqD,EAAY,WACZs1C,EAAU,YACV9B,EAAW,cACXgX,EAAa,YACb3O,EAAW,QACX92B,EAAO,eACP0lC,GACD3jF,EAEC,MAAMyhD,GAAMvB,EAAAA,EAAAA,IAAuB,MAE7BgmC,GAAWhmC,EAAAA,EAAAA,IAAyB,MAEpChN,GAAS85B,EAAAA,EAAAA,IAAgB3nE,KAAY8nE,EAAAA,EAAAA,IAAuB9nE,GAC5Du+E,EAAe1wC,EAAME,SAEpBsxC,EAAe,CAAGC,IAAerkC,EAAAA,GAAAA,GAAQpN,EAAMglB,WAEhDiuB,GAA2B5K,EAAAA,GAAAA,IAAkB95B,EAAKo5B,GAClDuL,GACJ7K,EAAAA,GAAAA,IAAkB95B,EAAKq5B,IACpBqL,EAECE,GAAoBnmC,EAAAA,EAAAA,IAAOimC,GAC7BC,IAA6BC,EAAkBj2D,UACjDi2D,EAAkBj2D,SAAU,GAG9B,MAAM,SAAEywB,IAAaC,EAAAA,EAAAA,OACd+iC,EAAeC,IAAoB3mC,EAAAA,EAAAA,IAASmmC,GAC7CS,EAAa38E,QAAQy8E,GAAiBsC,GAA4BjtD,IACjEotD,EAAeC,IAAoBppC,EAAAA,EAAAA,IAAS/1C,QAAQ6+E,IAAgBvB,IAErE9E,GAAgB3nB,EAAAA,EAAAA,IAAoB5yD,EAAS,WAC5CmhF,IAAwBrpC,EAAAA,EAAAA,IAAS/1C,QAAQw4E,GAAiBl0C,GAAAA,GAA0Bk0C,MACrF,UAAEhiB,EAAS,aAAEomB,IAAiBC,EAAAA,GAAAA,GAClCrE,GAAgBmE,GAAYc,EAAAA,EAAAA,IAAsBx/E,EAAS,UAAW6zB,GAElEgrD,EAAgBN,GAAgBhmB,GAC/B6oB,EAAeC,IAAmBpmC,EAAAA,GAAAA,KAEnCiZ,GAAe4pB,EAAAA,EAAAA,IAA4B99E,GAC3CshF,EAAWv/E,QAAQmyD,GACnB4qB,EAAwB/8E,QAAQo8E,GAEhCoD,GAAmB3uB,EAAAA,EAAAA,IAAoB5yD,EAAS,YAC/CwhF,IAAsB1pC,EAAAA,EAAAA,IAAS/1C,QAAQw/E,GAAoBl7C,GAAAA,GAA0Bk7C,KACtFE,EAAiBX,GAA4BjtD,EAC7Cqa,GAAiBwL,EAAAA,GAAAA,GAAS6nC,GAAmBE,OAAgBrmF,EAAWy4B,GACxE6tD,GAAoBtC,EAAAA,GAAAA,IAAoBkC,GAAYpzC,KAAoBkzC,GAExEpC,GAAWsC,GAAYpzC,GAAkBkzC,EACzCnC,EAAWtB,GAAwB39E,EAASg/E,GAC5CE,EAAuBvB,GAAwB39E,GAAU8+E,GACzDK,IAAkBC,EAAAA,GAAAA,IAAoBJ,GAEtC2C,GAAW9C,GAAiBmC,EAAkBj2D,SAE5C4zD,aAAcY,KAAqBX,EAAAA,GAAAA,IACzChsB,EAAAA,EAAAA,IAAoB5yD,EAAS,aAC5Bq+E,GACDmB,EAAAA,EAAAA,IAAsBx/E,EAAS,YAC/B6zB,IAGI,YAAE4rD,GAAW,eAAEC,GAAc,iBAAEC,KAAqBC,EAAAA,EAAAA,IACxD5/E,EACAk+E,IAAmBG,EAAgBkB,GAAmBZ,GACrDD,IAAe0C,IAAkBD,GAAyB9C,GAGvDwB,IAAiD,KAA/Btc,EAAAA,GAAAA,GAAYib,IAElC53B,aAAck5B,GACdh5B,qBAAsBi5B,KACpBh5B,EAAAA,GAAAA,GAAkB24B,QAAgBtkF,EAAWykF,KAE/C/4B,qBAAsB86B,KACpB76B,EAAAA,GAAAA,GAAkBhlD,SAASy8E,GAAiBK,KAAmBoC,IAAkBnB,MAE9E+B,GAAcC,KAAmBhqC,EAAAA,EAAAA,IAAiB,GACnDiqC,IAAmB9lC,EAAAA,EAAAA,KAAa/vC,IACpC41E,GAAgB75E,KAAKC,IAAI,EAAGgE,EAAE4lE,cAAckQ,YAAc,GAAG,GAC5D,IAEG5pB,GAAWyoB,EAAS91D,SAASqtC,UAAYvqB,EAAMuqB,UAAY,EAE3DmP,IAAQC,EAAAA,EAAAA,IAAaxnE,GACrB6nE,GAAiB9lE,SAAQ+lE,EAAAA,EAAAA,IAAuB9nE,KAChD,MACJ4P,GAAK,OAAEC,IACLs5D,IAAcnB,EAAAA,GAAAA,IAAyBn6B,EAAO05B,GAAOF,EAAaQ,GAAgBP,EAAW9rB,GAE3FmY,IAAc1X,EAAAA,EAAAA,KAAY,KAC1BwjC,GACFnB,IAAiBt+E,GAIfq+E,GACFhrE,EAAAA,EAAAA,MAAa4uE,2BAA2B,CAAEjiF,YAIvC6+E,GAKDA,IAAkBoC,GACpBC,GAAiB,GAGf7B,EACFC,IAIF1mC,IAAU54C,EAAQ7D,KAbhBsiF,GAAkByB,IAAeA,GAad,GACpB,CACDT,GAAapB,EAAeQ,EAAeoC,EAAe5B,EAAgBzmC,EAAS54C,EAASs+E,EAC5FgB,IAGIz0D,IAAYkvB,EAAAA,GAAAA,GAChB,oBACC0lC,IAAe,cAChB5vE,GAASk3D,IAAoB,kBAIzB9sB,GAAS,WAAUpqC,QADDs5D,EAAc,WAAUv5D,eAAkBu5D,EAAWnkC,aAAamkC,EAAWviC,OAAS,KAG9G,OACEsQ,EAAAA,GAAAA,cAAA,OACEkF,IAAKA,EACLjgD,GAAIA,EACJ0uB,UAAWA,GACXovB,MAAOA,GACPrB,QAAS6mC,QAAcrkF,EAAYu4D,IAElCmrB,GAAyB5nC,EAAAA,GAAAA,cAAA,UAAQkF,IAAK8iC,EAAsBr0D,UAAU,yBACtE82D,IACCzqC,EAAAA,GAAAA,cAACgrC,GAAAA,EAAc,CACb9lC,IAAKykC,EACLxmC,IAAKwkC,EACLh0D,WAAWkvB,EAAAA,GAAAA,GAAe,aAAc+kC,GAAyB,mBACjEnF,QAASsH,GAAiBF,EAC1BoB,OAAK,EACLC,MAAI,EACJC,aAAW,EACX7K,WAAY9H,EACZ4S,aAAcP,GACdQ,QAASlB,EACTpnC,MAAOkkC,EAAe,UAASA,WAAkB/iF,IAGrD87C,EAAAA,GAAAA,cAAA,OACEmD,IAAKnM,EACLrjB,WAAWkvB,EAAAA,GAAAA,GAAe,YAAa2nC,EAAmB5C,GAAyB,mBACnFxkC,IAAI,GACJL,MAAOkkC,EAAe,UAASA,YAAmB/iF,EAClDo8E,WAAY9H,IAEb4R,IAAaE,GACZtqC,EAAAA,GAAAA,cAAA,UACEkF,IAAK6iC,EACLp0D,WAAWkvB,EAAAA,GAAAA,GAAe,YAAaolC,MAG1CzP,GAAex4B,EAAAA,GAAAA,cAAA,QAAMrsB,UAAU,cAChCqsB,EAAAA,GAAAA,cAAA,KAAGrsB,WAAWkvB,EAAAA,GAAAA,GAAe,OAAQ,kBAAmB6nC,MACxD1qC,EAAAA,GAAAA,cAACod,GAAAA,EAAY,CACXC,UAAW8qB,EACXsB,eAAa,EACbzsB,aAAcA,EACdtkD,MAAOA,GACPC,OAAQA,GACRgb,UAAU,kBAEXi1D,IACC5oC,EAAAA,GAAAA,cAAA,OAAKrsB,WAAWkvB,EAAAA,GAAAA,GAAe,gBAAiBgmC,KAC9C7oC,EAAAA,GAAAA,cAACwpC,GAAAA,EAAe,CAACxmE,SAAUylE,GAAkB/mC,QAAS+a,OAGxD6qB,IAAkBK,GAClB3nC,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,uBAEd60D,GACCxoC,EAAAA,GAAAA,cAAA,QAAMrsB,UAAU,6BACZ40D,IAAepB,EAAkB,GAAEp2E,KAAKwK,MAAyB,IAAnBktE,OAA6B,OAG/EzoC,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,0BACZgjB,EAAM20C,MAAQ,OAAQC,EAAAA,GAAAA,IAAoBx6E,KAAKC,IAAIkwD,GAAWypB,GAAc,KAG7E,E,eC/OV,MAqCA,IAAernC,EAAAA,EAAAA,KACb,CAACjgD,EAAM4N,KAA8B,IAA5B,QAAEu6E,GAASv6E,EAClB,MAAQw6E,aAAeC,WAAYC,IAAoBtoF,EAGvD,MAAO,CACLwjB,MAHWC,EAAAA,EAAAA,IAAWzjB,EAAQmoF,EAAQv4E,QAItC04E,gBACD,GARL,EAnC2CloF,IAErC,IAFsC,QAC1C+nF,EAAO,KAAE3kE,EAAI,cAAE8kE,GAChBloF,EACC,MAAM,SAAEyD,IAAaiV,EAAAA,EAAAA,OAEf,UACJojB,EAAS,SACTD,EAAQ,YACRc,EAAW,OACXntB,GACEu4E,EACEI,EAbwB,MAaT34E,EAEfwpD,GAAc1X,EAAAA,EAAAA,KAAY,KAC9B79C,EAAS,CAAEjC,GAAIgO,GAAS,GACvB,CAAC/L,EAAU+L,IAEd,OACE+sC,EAAAA,GAAAA,cAAA,OACErsB,WAAWkvB,EAAAA,GAAAA,GAAe,UAAW+oC,GAAgB,eACrDlqC,QAASkqC,EAAenvB,OAAcv4D,GAEtC87C,EAAAA,GAAAA,cAAC+8B,GAAAA,EAAM,CACL56B,KAAK,QACLt7B,KAAMA,EACN1f,KAAMo4B,GAAaD,IAErB0gB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,gBACbqsB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,gBAAgB4L,EAAU,IAAED,GAC3C0gB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,kBAAiBk4D,EAAAA,GAAAA,IAA0BF,EAAevrD,KAEvE,I,oDC4CV,SAAS0rD,GAAcz/C,EAAe0/C,GACpC,OAAOA,EAAQ,GAAM1/C,EAAQ0/C,EAAS,KAAKC,UAAY,CACzD,CAEA,SAnFiCvoF,IAO3B,IAP4B,OAChCwoF,EAAM,YACNC,EAAW,YACX7xC,EAAW,eACX8xC,EAAc,eACdC,EAAc,cACdC,GACD5oF,EACC,MAAM2F,EAAS8iF,GAAeA,EAAYl9E,MAAM4/B,GAAMA,EAAE7kB,SAAWkiE,EAAOliE,SACpEuiE,EAA0C,IAA1BF,EAAe5oF,SAA2D,IAA3C4oF,EAAexkF,QAAQqkF,EAAOliE,QAC7EwiE,EAAYH,EAAe5oF,OAAS,GAAK8oF,GAAmBljF,GAAQ8wC,SACpEsyC,EAAgBpjF,EAAS0iF,GAAc1iF,EAAOuxC,YAAaN,GAAe,GAAK,GAC9EoyC,EAAcC,IAAmB9rC,EAAAA,EAAAA,IAASyrC,EAAgB,EAAIG,GAE/DG,GAAUhpC,EAAAA,EAAAA,IAAuB,MACjCipC,EAAYxjF,EAAS0iF,GAAc1iF,EAAOuxC,YAAawxC,GAAkB,GAAK,EAC9EU,EAA0BJ,IAAiBD,EA0BjD,IAxBAptC,EAAAA,EAAAA,KAAU,KACJitC,GACFK,EAAgBF,EAClB,GACC,CAACH,EAAeG,KAEnBt0B,EAAAA,EAAAA,KAAgB,KACd,MAAM40B,EAASH,EAAQ94D,QAEvB,GAAIi5D,GAAUT,EAAe,CAC3B,MAAMU,EAAQD,EAAOnyB,kBAEf5X,EAAQ8pC,EAA0B,GAAK,sDACxCE,EAMHA,EAAM/R,aAAa,QAASj4B,GAL5B+pC,EAAO7xB,UAAa,gFACiDlY,+EAMzE,IACC,CAAC8pC,EAAyBR,KAExBH,IAAgB9iF,EACnB,OAGF,MAAM4jF,EAAa,UAASJ,wBAAgCC,EAA0B,EAAI,KAE1F,OACE7sC,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,aAAaiuB,IAAI,OAC9B5B,EAAAA,GAAAA,cAAA,OAAKrsB,UAAY,sBAAsC,QAAlB64D,EAA0B,cAAgB,KAC5EA,EAAc,IACdD,GACCvsC,EAAAA,GAAAA,cAAA,QAAMrsB,WAAWkvB,EAAAA,GAAAA,GACf,sBACCypC,GAAiB,QAClBD,GAAiB,YAGjBrsC,EAAAA,GAAAA,cAAA,KAAGrsB,WAAWkvB,EAAAA,GAAAA,GAAe,OAAQypC,EAAgB,aAAe,kBAI1EtsC,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,qBACbqsB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,mBAAmBiuB,IAAI,SACnC4b,EAAAA,GAAAA,GAAWyuB,EAAO9kF,OAErB64C,EAAAA,GAAAA,cAAA,OAAKrsB,WAAWkvB,EAAAA,GAAAA,GAAe,qBAAsB0pC,IAAaD,GAAiB,UACjFtsC,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,qBAAqBuxB,IAAKynC,IACzC3sC,EAAAA,GAAAA,cAAA,OACErsB,UAAU,mBACVovB,MAAOiqC,MAIT,ECqQV,SAASnlC,GAAgB7yC,GACvBA,EAAE6yC,iBACJ,CAEA,UAAelI,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAACjgD,EAAM4N,KAAe,IAAb,KAAE6Y,GAAM7Y,EACf,MAAM,eAAEmpC,GAAmBtwB,EAAKjX,SACxBwN,OAASQ,KAAMq+D,IAAgB77E,EACvC,OAAK+2C,GAA4C,IAA1BA,EAAe52C,OAI/B,CACL42C,iBACA8kC,aALO,CAAC,CAMT,GAXe57B,EA3ToB7/C,IAMlC,IANmC,QACvCqF,EAAO,KACPghB,EAAI,eACJswB,EAAc,UACd8kC,EAAS,WACT+N,GACDxpF,EACC,MAAM,YAAE8gB,EAAW,gBAAE2oE,EAAe,gBAAEzO,IAAoBtiE,EAAAA,EAAAA,OAElDlX,GAAIsF,EAAS,OAAEzG,GAAWgF,GAC5B,QAAEqkF,EAAO,QAAEt6E,GAAYiX,GACtBsjE,EAAcC,IAAmBzsC,EAAAA,EAAAA,KAAkB,IACnD0sC,EAAeC,IAAoB3sC,EAAAA,EAAAA,IAAmB,KACtD4sC,EAAiBC,IAAsB7sC,EAAAA,EAAAA,KAAkB,IACzD8sC,EAAcC,IAAmB/sC,EAAAA,EAAAA,KAAkB,IACnDgtC,EAAaC,IAAkBjtC,EAAAA,EAAAA,KACnCusC,EAAQW,QAAUX,EAAQY,WAAaZ,EAAQY,UAAY,EACxDh9E,KAAKm9B,IAAIi/C,EAAQY,UAAYh9E,KAAKI,MAAMpB,KAAKC,MAAQ,MAAQ00C,EAAAA,EAAAA,MAAuByoC,EAAQS,aAC5F,GAGAI,GAAerqC,EAAAA,EAAAA,IAAuB,OACpC9wC,QAASq5E,EAAW,YAAE7xC,GAAgBxnC,EACxCo7E,EAAW/B,GAAeA,EAAYr7C,MAAMjC,GAAMA,EAAEsL,WACpDg0C,GAAWf,EAAQW,SAAWG,EAC9BE,GAAiBD,GAAWf,EAAQiB,UAAY7iF,OAAOsH,EAAQwnC,aAAe,EAC9Eg0C,EAAaH,GAAWf,EAAQmB,eAChCnC,EAAiBD,EAAcn7E,KAAKC,OAAOk7E,EAAYrjF,KAAK+lC,GAAMA,EAAE+L,eAAgBN,EACpF+xC,EAAiBF,EAAcA,EAAY7iF,QAAO,CAACklF,EAAmB3/C,KACtEA,EAAE4/C,WACJD,EAAQ9kF,KAAKmlC,EAAE7kB,QAGVwkE,IACN,IAAM,GACHA,EAAUpB,EAAQoB,QAAQ1lF,KAAK2hB,IAAC,CACpCogC,MAAOpgC,EAAErjB,KACTklC,MAAO7hB,EAAET,OACT0kE,OAAQ5jF,QAAQsiF,EAAQuB,MAAQvB,EAAQS,aAAeA,GAAe,QAGxExuC,EAAAA,EAAAA,KAAU,KACR,MAAMuvC,EAAS7kE,EAAKjX,QAAQA,SAAS7D,MAAM5F,GAAWA,EAAO8wC,WACzDkzC,GAAgBuB,IACdA,EAAOH,WACT/P,IAEF4O,GAAgB,GAClB,GACC,CAACD,EAActjE,EAAKjX,QAAQA,QAAS4rE,KAExCr/B,EAAAA,EAAAA,KAAU,KACJwuC,EAAc,GAChBjhF,YAAW,IAAMkhF,EAAeD,EAAc,IAAI,KAGpD,MAAMgB,EAAcZ,EAAan6D,QAEjC,GAAI+6D,EAAa,CACf,MAAMC,EAAgB,GAAQ99E,KAAK+9E,GAC7B/B,EAAQ6B,EAAYG,iBACpBC,EAAUJ,EAAYj0B,kBAK5B,GAJIizB,GAAe,GACjBgB,EAAY52B,UAAUxoC,IAAI,YAGvBu9D,GAAUiC,EASR,CACL,MAAMC,GAAqB9B,EAAQS,YAAeA,GAAeT,EAAQS,YAAgBiB,EACzFG,EAAQE,aAAc3D,EAAAA,GAAAA,IAAoBqC,GACzCb,EAAMpyB,kBAAiCqgB,aAAa,oBAAsB,IAAGiU,IAChF,MAZEL,EAAY3zB,UAAa,oBACjBswB,EAAAA,GAAAA,IAAoBqC,2LAGJiB,KAAiBA,qEAS7C,IACC,CAACjB,EAAaT,EAAQS,eAEzBxuC,EAAAA,EAAAA,KAAU,KACJ+tC,EAAQuB,OAASd,GAAe,GAAMK,IAAad,EAAQW,SAC7DvpE,EAAY,CAAEzgB,SAAQyG,aACxB,GACC,CAACzG,EAAQ8pF,EAAaK,EAAU1pE,EAAaha,EAAW4iF,EAAQW,OAAQX,EAAQuB,QAGnFtvC,EAAAA,EAAAA,KAAU,KACR,IAAI+vC,EAQJ,OANIhC,EAAQuB,OAASvB,EAAQW,QAAUX,EAAQS,aAAeT,EAAQS,YAAc,IAClFuB,EAAQvoF,OAAO+F,YAAW,KACxB4X,EAAY,CAAEzgB,SAAQyG,aAAY,GACX,IAAtB4iF,EAAQS,cAGN,KACDuB,GACFvoF,OAAO8G,aAAayhF,EACtB,CACD,GACA,CAACjB,EAASpqF,EAAQygB,EAAaha,EAAW4iF,EAAQS,YAAaT,EAAQW,OAAQX,EAAQuB,OAE1F,MAAMU,GAAe1sC,EAAAA,EAAAA,KAAQ,IACpBtI,EAAiBA,EAAe/wC,QAAO,CAACD,EAAmBnE,KAChE,MAAM4hB,EAAOq4D,EAAUj6E,GAKvB,OAJI4hB,GACFzd,EAAOK,KAAKod,GAGPzd,CAAM,GACZ,IAAM,IACR,CAAC81E,EAAW9kC,IAETi1C,GAAoBtqC,EAAAA,EAAAA,KACvBh7B,IACCwjE,EAAiB,CAACxjE,IAClBsjE,GAAgB,GAChBM,GAAgB,GAChBV,EAAW,CAACljE,GAAQ,GACnB,CAACkjE,IAGAqC,GAAuBvqC,EAAAA,EAAAA,KAC1Bl7B,IACC0jE,EAAiB1jE,EAAQ,GACxB,IAGC0lE,GAAkBxqC,EAAAA,EAAAA,KACtB,KACEsoC,GAAgB,GAChBM,GAAgB,GAChBV,EAAWK,EAAc,GACxB,CAACL,EAAYK,IAGZkC,GAAyBzqC,EAAAA,EAAAA,KAC7B,KACEmoC,EAAgB,CAAEppF,SAAQyG,aAAY,GACrC,CAACzG,EAAQyG,EAAW2iF,IAGnBuC,GAAqB1qC,EAAAA,EAAAA,KAAY,KACrC0oC,GAAmB,EAAK,GACvB,IAEGiC,GAAqB3qC,EAAAA,EAAAA,KAAY,KACrC0oC,GAAmB,GACnBE,GAAgB,EAAM,GACrB,KAGHvuC,EAAAA,EAAAA,KAAU,KACJsuC,GAAgBO,GAAYd,EAAQuB,MAAQ77E,EAAQA,SAAWiX,EAAKjX,QAAQ88E,WACxD98E,EAAQA,QAAQ7D,MAAM4/B,GAAMA,EAAEsL,UAAYtL,EAAE4/C,aAEhEf,GAAmB,GAEvB,GACC,CAACQ,EAAUP,EAAc76E,EAAQA,QAASs6E,EAAQuB,KAAM5kE,EAAKjX,QAAQ88E,WAExE,MAAMpnF,GAAOo5C,EAAAA,GAAAA,KA6Cb,OACE3B,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,OAAOiuB,IAAKr5C,EAAKs5C,MAAQ,OAAS,OAZ/C2rC,GAAmB1jE,EAAKjX,QAAQ88E,UAC9B3vC,EAAAA,GAAAA,cAAC4vC,GAAAA,EAAY,CACX9mF,SAAS+mF,EAAAA,GAAAA,GAAuB,CAAE1oF,KAAM2iB,EAAKjX,QAAQ88E,SAAUnqE,SAAUsE,EAAKjX,QAAQi9E,mBACtF5uB,SA7MgB,IA8MhB6uB,UAAWL,EACXM,YAhNoB,2BAyNxBhwC,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,kBAAiB6pC,EAAAA,GAAAA,GAAW2vB,EAAQ8C,SAAU,CAAC,QAAS,QACvEjwC,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,aACZprB,EAuET,SAA2B4kF,GAEzB,YAAgC,IAArBA,EAAQiB,SAlSR,IAsSPjB,EAAQW,OACH,eAGLX,EAAQuB,KACHvB,EAAQiB,SAAW,WAAa,oBAGlCjB,EAAQiB,SAAW,aAAe,eAC3C,CAtFc8B,CAAkB/C,IAhC1BiC,EAAa5rF,OAAS,GACpBw8C,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,sBACZy7D,EAAavmF,KAAKge,GACjBm5B,EAAAA,GAAAA,cAAC+8B,GAAAA,EAAM,CACLtgC,IAAK51B,EAAK5hB,GACVk9C,KAAK,QACLt7B,KAAMA,OA4BX+mE,EAAc,GAAKM,GAAWluC,EAAAA,GAAAA,cAAA,OAAKkF,IAAK8oC,EAAcr6D,UAAU,mBAChEw5D,EAAQuB,MAAQ5kE,EAAKjX,QAAQ88E,WAAazB,GACzCluC,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL3mC,OAAK,EACL4mC,KAAK,OACLJ,MAAM,cACNpuB,UAAU,iBACVixC,SAAU4oB,EACV9rC,QAAS+tC,EACTnnC,UAAU,iBAEVtI,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,qBAIlBu6D,GACCluC,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,eAAe+tB,QAASmG,IACpCwmC,EAEGruC,EAAAA,GAAAA,cAACmwC,GAAAA,EAAa,CACZtmE,QAAS0kE,EACTtiC,SAAUqjC,EACV1qB,SAAU97D,EAAQ2tC,aAAe22C,EACjCgD,eAAgBhD,EAAeE,OAAgBppF,EAC/CqX,OAAK,IAIPykC,EAAAA,GAAAA,cAACqwC,GAAAA,EAAU,CACT39C,KAAO,QAAOnoC,IACdsf,QAAS0kE,EACTtiC,SAAUojC,EACVzqB,SAAU97D,EAAQ2tC,aAAe22C,EACjCkD,cAAelD,EAAeE,EAAc,QAAKppF,MAKzDgqF,GACAluC,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,gBACZw5D,EAAQoB,QAAQ1lF,KA1FzB,SAA4BojF,GAC1B,OACEjsC,EAAAA,GAAAA,cAACuwC,GAAU,CACT9zC,IAAKwvC,EAAOliE,OACZsiE,cAAeqB,IAAiBQ,EAChCjC,OAAQA,EACRC,YAAaA,EACb7xC,YAAaA,EACb8xC,eAAgBA,EAChBC,eAAgBA,GAGtB,MAiFM+B,IAAkBE,GAClBruC,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,qBA0CvB,SAAgCprB,EAAcqH,EAA0ByZ,GACtE,OAAKA,EAIE9gB,EAAKqH,EAAS,SAAW,OAAQyZ,EAAO,KAHtC9gB,EAAKqH,EAAS,4BAA8B,kCAIvD,CAhD4C4gF,CAAuBjoF,EAAM4kF,EAAQuB,KAAM77E,EAAQwnC,cAExFg0C,GACCruC,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL+kB,QAAM,EACNrC,SAAmC,IAAzB0oB,EAAc9pF,OACxB2+C,KAAK,OACLT,QAAS6tC,GAERhnF,EAAK,oBAGT4lF,GACCnuC,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL+kB,QAAM,EACN9kB,KAAK,OACLT,QAAS8tC,GAERjnF,EAAK,oBAGN,K,4BC/SV,MAwJA,IAAeo3C,EAAAA,EAAAA,KAtIel8C,IAcxB,IAdyB,QAC7BqF,EAAO,oBACPg5E,EAAmB,UACnB1R,EAAS,YACT2W,EAAW,YACX2C,EAAW,UACX+G,EAAS,YACTtgB,EAAW,aACXxzC,EAAY,cACZwqD,GAAgB,EAAK,YACrB3O,EAAW,MACX3zC,EAAK,aACL6rD,EAAY,sBACZC,GACDltF,EACC,MAAM,iBAAEqpB,IAAqB3Q,EAAAA,EAAAA,MACvBy0E,GAAUC,EAAAA,EAAAA,IAAkB/nF,IAC5B,SAAEw7C,IAAaC,EAAAA,EAAAA,MAEfh8C,GAAOo5C,EAAAA,GAAAA,KAEPmvC,GAAmB/rC,EAAAA,EAAAA,KAAY,KACnC2rC,GAAe,GACd,CAACA,IAEEK,GAAyBhsC,EAAAA,EAAAA,KAAY,KACpC6rC,GACL9jE,EAAiB,CACfnV,IAAKi5E,EAAQj5E,KACb,GACD,CAACi5E,IAEJ,IAAKA,EACH,OAGF,MAAM,SACJI,EAAQ,IACRr5E,EAAG,WACHs5E,EAAU,MACVn9E,EAAK,YACL+U,EAAW,MACXmU,EAAK,MACL2Z,EAAK,KACLxxC,GACEyrF,EACEM,EAAsBT,OAAyCvsF,ECxFhE,SAA8BiB,GACnC,OAAQA,GACN,IAAK,2BACL,IAAK,6BACL,IAAK,wBACH,MAAO,+BACT,IAAK,mBACH,MAAO,0BACT,IAAK,eACH,MAAO,sBACT,IAAK,qBACH,MAAO,6BACT,IAAK,sBACH,MAAO,qCACT,IAAK,qBACL,IAAK,gBACH,MAAO,wBACT,IAAK,mBACH,MAAO,0BACT,IAAK,gBACH,MAAO,uBACT,IAAK,kBACH,MAAO,0BACT,IAAK,oBACH,MAAO,eACT,QACE,OAEN,CD4D0CgsF,CAAqBhsF,GACvDisF,GAAuBC,EAAAA,GAAAA,GAASxoE,EAjEhB,KAkEhByoE,EAAYzmF,QAAQumF,GAAwBt9E,GAASk9E,GAC3D,IAAIO,GAAgB,EACpB,GAAID,GAAaV,GAAS5zD,QAAU4zD,EAAQj6C,MAAO,CACjD,MAAM,MAAEj+B,EAAK,OAAEC,GAAWu3D,GAAyBpnE,OAAS5E,OAAWA,EAAWogD,GAClFitC,EAAgB74E,IAAUC,CAC5B,CACA,MAAM64E,GAAsBx0D,GAAS2Z,IAAU+5C,IAAiBa,EAE1D59D,GAAYkvB,EAAAA,GAAAA,GAChB,UACA4tC,GAAa,aACbc,GAAiB,qBAChBv0D,IAAU2Z,IAAU85C,GAAa,gBAClC95C,GAAS,cACR26C,GAAa,aACdJ,GAAsB,qBAgBxB,OACElxC,EAAAA,GAAAA,cAAA,OACErsB,UAAWA,EACX,gBAAeq9D,GAAYC,GAAY,GACvCrvC,IAAI,QAEJ5B,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,oBACZqJ,IAAU2Z,GACTqJ,EAAAA,GAAAA,cAACyxC,GAAK,CACJ3oF,QAASA,EACTg5E,oBAAqBA,EACrB1R,UAAWA,EACX2W,YAAaA,EACb5kC,KAAMovC,EAAgB,YAAc,SACpCphB,YAAaA,EACbwP,gBAAiB6R,EACjBrK,cAAeA,EACf3O,YAAaA,EACb3zC,MAAOA,EACP6c,QAAS8vC,EAAqBV,OAAmB5sF,EACjDkjF,eAAgBuJ,IAGnBW,GACCtxC,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,gBACbqsB,EAAAA,GAAAA,cAAC0xC,GAAAA,EAAQ,CAAC/9D,UAAU,YAAYhc,IAAKA,EAAKxQ,KAAM6pF,GAAYC,KAC1DR,GAAa38E,GACbksC,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,eAAc6pC,EAAAA,GAAAA,GAAW1pD,IAEvCs9E,GACCpxC,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,qBAAoB6pC,EAAAA,GAAAA,GAAW4zB,EAAsB,CAAC,QAAS,UAIhFX,GAAa95C,GACbqJ,EAAAA,GAAAA,cAAC2xC,GAAK,CACJ7oF,QAASA,EACTw1E,8BAA+BwD,EAC/B1R,UAAWA,EACX2W,YAAaA,EACb2C,YAAaA,EACb/sD,aAAcA,EACdwzC,YAAaA,EACbgX,cAAeA,EACf3O,YAAaA,EACb92B,QAAS8vC,EAAqBV,OAAmB5sF,EACjDkjF,eAAgBuJ,KAIrBO,IA/DsBU,EA+DkBV,EA7DzClxC,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLvuB,UAAU,wBACVwuB,KAAK,OACLJ,MAAM,uBACNL,QAASqvC,GAERxoF,EAAKqpF,MARZ,IAA2BA,CAgEnB,I,gBE/IV,MAsFA,IAAejyC,EAAAA,EAAAA,KAtFel8C,IAOxB,IAPyB,QAC7BqF,EAAO,qBACPo+E,EAAoB,eACpB5O,EAAc,WACdnT,EAAU,MACVtgC,EAAK,YACLoiD,GACDxjF,EAEC,MAAMyhD,GAAMvB,EAAAA,EAAAA,IAAuB,MAE7Bp7C,GAAOo5C,EAAAA,GAAAA,KACPle,GAAUouD,EAAAA,EAAAA,IAAkB/oF,IAE5B,MACJgL,EAAK,KACL3M,EAAI,OACJkmC,EAAM,SACNF,EAAQ,OACR2kD,EAAM,MACN90D,GACEyG,EAEEsuD,GAAWvvC,EAAAA,GAAAA,IAASwvC,EAAAA,EAAAA,IAAmBh1D,IACvC4qD,EAAwB/8E,QAAQo8E,GAChCe,EAAuBvB,GAAwB39E,GAAU8+E,EAAuBmK,GAmBtF,OAjBA9I,EAAAA,GAAAA,IAA4Bh4E,IAAgC,IAA9Bi4E,GAAyBj4E,EACrD,GAAKi2E,GAOL,GAAI6K,EAAU,CACZ,MAAM1I,EAAYnkC,EAAIrxB,QAAS2jD,QAAwB2R,EAAAA,KACvD/C,GAAoB2L,GAAU,EAAOzZ,EAAgBnT,EAAYtgC,GAAO5qB,MAAMqvE,IAC5ED,EAAUtmC,MAAMgV,YAAY,gBAAiBuxB,GAC7CD,EAAUrO,aAAaoO,EAAAA,IAA2B,GAAG,GAEzD,OAZMF,GACFhkC,EAAIrxB,QAAS2jD,QAAwB2R,EAAAA,KAA2BtO,gBAAgBuO,EAAAA,IAWpF,GACC,CAAClC,EAAsB6K,EAAUzZ,EAAgBnT,EAAYtgC,IAG9Dmb,EAAAA,GAAAA,cAAA,OACEkF,IAAKA,EACLvxB,UAAU,WAET7f,GACCksC,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,UAAS6pC,EAAAA,GAAAA,GAAW1pD,IAElC3M,GACC64C,EAAAA,GAAAA,cAAA,YAAMwd,EAAAA,GAAAA,GAAWr2D,EAAM,CAAC,QAAS,QAEnC64C,EAAAA,GAAAA,cAAA,OAAKrsB,UAAY,gBAAcqJ,EAAQ,YAAc,KAClDnyB,QAAQmyB,IACPgjB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,2BACZi0D,GAAyB5nC,EAAAA,GAAAA,cAAA,UAAQkF,IAAK8iC,EAAsBr0D,UAAU,yBACtEo+D,GACC/xC,EAAAA,GAAAA,cAAA,OACErsB,UAAU,gBACVwvB,IAAK4uC,EACL3uC,IAAI,GACJL,MAAOkkC,EAAe,UAASA,WAAkB/iF,EACjDoiF,YAAY,eAGdyL,GAAY/0D,GACZgjB,EAAAA,GAAAA,cAACiyC,GAAAA,EAAQ,CACPv5E,MAAOuuE,GAAejqD,EAAMi1C,YAAYv5D,MACxCC,OAAQqkB,EAAMi1C,YAAYt5D,OAC1Bu5E,kBAAgB,KAKxBlyC,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,qBACVmrB,EAAAA,GAAAA,GAAezR,EAAQF,EAAU5kC,EAAKugC,MACtCgpD,GAAU9xC,EAAAA,GAAAA,cAAA,YAAOz3C,EAAK,yBAGvB,IC/GV,IAAgB,KAAO,uBAAuB,SAAW,uBAAuB,IAAM,uBAAuB,QAAU,wBC+EvH,IAAeo3C,EAAAA,EAAAA,KAvD2Bl8C,IAGpC,IAHqC,QACzCqF,EAAO,aACP6zB,GACDl5B,EACC,MAAM,YAAEghC,EAAW,kBAAE0tD,IAAsBh2E,EAAAA,EAAAA,MACrC5T,GAAOo5C,EAAAA,GAAAA,KACPle,GAAUouD,EAAAA,EAAAA,IAAkB/oF,IAE5B,OAAEhF,EAAM,GAAEmB,GAAO6D,EAEjBspF,GAAuBrtC,EAAAA,EAAAA,KAAY,KACvCotC,EAAkB,CAAEruF,SAAQwJ,IAAK,CAACrI,IAAM,GACvC,CAACnB,EAAQmB,EAAIktF,KAEhBE,EAAAA,GAAAA,GAAYD,EAAsBz1D,EAhBX,SAgB6Cz4B,GAEpE,MAAM,OACJmpC,EAAM,SACNF,EAAQ,cACR4N,GACEtX,GAEE,MACJ/qB,EAAK,OAAEC,EAAM,UAAEm+B,EAAS,SAAEoqB,GACxBnmB,EAEE0hB,GAAc1X,EAAAA,EAAAA,KAAY,KAC9BtgB,EAAY,CACV3gC,SACAyG,UAAWtF,EACXkkC,iBAAiB,GACjB,GACD,CAACrlC,EAAQmB,EAAIw/B,IAEhB,OACEub,EAAAA,GAAAA,cAAA,OACErsB,WAAWkvB,EAAAA,GAAAA,GAAeI,GAAAA,KAAa,eACvCvB,QAAS+a,GAETzc,EAAAA,GAAAA,cAACod,GAAAA,EAAY,CACXJ,aAAclmB,GAAW6vC,QACzBjuE,MAAOA,EACPC,OAAQA,EACR0kD,WAAS,EACT1pC,UAAWsvB,GAAAA,UAEZp4C,QAAQq2D,IAAalhB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAWsvB,GAAAA,WAAkBsoC,EAAAA,GAAAA,IAAoBrqB,IAC5ElhB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAWsvB,GAAAA,KACdjD,EAAAA,GAAAA,cAAA,KAAGrsB,WAAWkvB,EAAAA,GAAAA,GAAe,OAAQ,YAAaI,GAAAA,QACjD16C,EAAK,qBAAqBu2C,EAAAA,GAAAA,GAAezR,EAAQF,KAEhD,ICzEJmlD,GAAe,IAAI9yE,IAAIrU,OAAO8f,QAAQ,CAC1C,mBAAoB,UACpB,eAAgB,UAChB,sBAAuB,UACvB,yBAA0B,UAC1B,eAAgB,UAChB,gBAAiB,UACjB,gBAAiB,UACjB,mBAAoB,UACpBsnE,mBAAoB,UACpBC,SAAU,UACVC,UAAW,UACXC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,UAAW,UACXC,eAAgB,UAChBC,MAAO,UACPC,OAAQ,UACRC,KAAM,aAGFC,GAAgB,CACpB,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,W,0CCepFC,GAAiB,KACjBC,GAAqB,CACzB16E,MAAO,IACPC,OAAQ,IACR06E,KAAM,GACN70B,MAAO,GAIH80B,GAAU,CAAEC,OAAQ,oyBAyP1B,IAAe5zC,EAAAA,EAAAA,KA9OgBl8C,IAOzB,IAP0B,QAC9BqF,EAAO,KACPggB,EAAI,aACJ6T,EAAY,eACZ27C,EAAc,WACdnT,EAAU,MACVtgC,GACDphC,EACC,MAAM,QAAEy/B,IAAY/mB,EAAAA,EAAAA,MAEd+oC,GAAMvB,EAAAA,EAAAA,IAAuB,MAE7BqqC,GAAerqC,EAAAA,EAAAA,IAAuB,MACtCp7C,GAAOo5C,EAAAA,GAAAA,KACP6xC,GAAcC,EAAAA,GAAAA,KAEdjyD,GAAWkyD,EAAAA,EAAAA,IAAmB5qF,IAC9B,KAAE3D,EAAI,IAAEwuF,GAAQnyD,EAEhBoyD,GAAapjF,EAAAA,EAAAA,MACbqjF,GAAYC,EAAAA,EAAAA,IAAiBhrF,EAAS8qF,GACtCG,EAA6B,YAAT5uF,GAAuB0uF,OAC7C3vF,EAD0D4E,EAAQyH,KAAOixB,EAASwyD,OAASJ,GAGxFK,EAAOC,IAAYtzC,EAAAA,EAAAA,IAAS+yC,GAE7BQ,EAA4B,UAAThvF,GAA8B,YAATA,IAAuB0uF,GAC/D,MACJn7E,EAAK,OAAEC,EAAM,KAAE06E,EAAI,MAAE70B,GACnB40B,GAEE9Q,EAAYz3E,QAAQ8xB,KAAiBy3D,EAAAA,EAAAA,IAAmBH,EAAOv7E,EAAOC,EAAQ06E,EAAM70B,GACpF/C,GAAejZ,EAAAA,GAAAA,GAAS8/B,GACxB+R,GAAmBhoB,EAAAA,GAAAA,GAAY5Q,GAC/B64B,EAAa74B,GAAgB44B,EAE7BE,EAAazrE,IAAQ0X,EAAAA,EAAAA,IAAS1X,EAAK7jB,IACnCuvF,EAAc1rE,GAAQyrE,EAAczrE,OAAkB5kB,EACtDuwF,EAAc3rE,IAASyrE,EAAczrE,OAAkB5kB,EAEvDmsE,GAAQC,EAAAA,EAAAA,IAAaxnE,GAErB4rF,GAAmBhyC,EAAAA,EAAAA,KAAQ,KAC/B,GAAa,YAATv9C,IAAuB8uF,EAAMU,eAC/B,OAAO,EAGT,MAAM,IAAEC,EAAG,eAAED,GAAmBV,EAChC,OAAOU,ED5EJ,SAA2BC,EAAavB,GAE7C,OAAQ,aAAetiF,KAAK8jF,IAAID,GAAO7jF,KAAK+9E,GAAK,MAAS,GAAKuE,CACjE,CCyE4ByB,CAAkBF,EAAKvB,EAAK,GACnD,CAACluF,EAAM8uF,EAAOZ,IAOX0B,GAAkBhwC,EAAAA,EAAAA,KAAa6pC,IACnC,GAAa,YAATzpF,EAAoB,OACxB,MACM0pF,EAAgBt1B,GAAaxoD,KAAK+9E,GAClC/B,EAAQ6B,EAAYG,iBACpBC,EAAUJ,EAAYj0B,kBAEtBq6B,EAAWlsF,EAAQyH,KAAOixB,EAASwyD,QAASxjF,EAAAA,EAAAA,MAC5Cy+E,GAAoB,EAAI+F,EAAWxzD,EAASwyD,QAAUnF,EACtD1nF,GAAO8tF,EAAAA,GAAAA,IAAqB1sF,EAAiB,IAAXysF,GAEnCjI,GAAUiC,GAUbA,EAAQE,YAAc/nF,EACtB4lF,EAAMpyB,kBAAmBqgB,aAAa,oBAAsB,IAAGiU,MAV/DL,EAAY3zB,UAAa,8CACY9zD,8LAGX0nF,KAAiBA,uCACfI,kCAM9B,GACC,CAAC9pF,EAAM2D,EAAQyH,KAAMixB,EAAUj5B,IA+IlC,OA7IA2vD,EAAAA,EAAAA,KAAgB,KACV81B,EAAan6D,SACfkhE,EAAgB/G,EAAan6D,QAC/B,GACC,CAACkhE,KAEJ9L,EAAAA,GAAAA,IAA4Bh4E,IAA4B,IAA1BikF,GAAqBjkF,EACjD,GAAIkjF,EACGe,GACHhwC,EAAIrxB,QAAS2jD,QAAwB2R,EAAAA,KAA2BtO,gBAAgBuO,EAAAA,UAKpF,GAAIkL,EAAY,CACd,MAAMjL,EAAYnkC,EAAIrxB,QAAS2jD,QAAwB2R,EAAAA,KACvD/C,GAAoBkO,EAAYjkB,EAAOiI,EAAgBnT,EAAYtgC,GAAO5qB,MAAMqvE,KAC9E9c,EAAAA,EAAAA,KAAgB,KACd6c,EAAUtmC,MAAMgV,YAAY,gBAAiBuxB,GAC7CD,EAAUrxB,UAAUxoC,IAAI,sBACxB65D,EAAUrO,aAAaoO,EAAAA,IAA2B,GAAG,GACrD,GAEN,IACC,CAAC+K,EAAkB9jB,EAAOiI,EAAgBnT,EAAYtgC,EAAOyvD,KAEhEl1C,EAAAA,EAAAA,KAAU,KAEJruC,KAAKyjE,IAAImf,EAAIiB,IAAMX,EAAMW,KAAOzB,IAAkBpiF,KAAKyjE,IAAImf,EAAIwB,KAAOlB,EAAMkB,MAAQhC,GAClFc,EAAMU,iBAAmBhB,EAAIgB,gBAC/BT,EAAS,IACJD,EACHU,eAAgBhB,EAAIgB,iBAK1BT,EAASP,EAAI,GACZ,CAACA,EAAKM,KAETtvC,EAAAA,GAAAA,IAAW,KACT6uC,GAAa,GACXK,OAA6C3vF,EAAP,KAAzB6vF,GAAoB,KAErC1B,EAAAA,GAAAA,IAAY,MACV7lB,EAAAA,EAAAA,KAAgB,KACd,MAAMoiB,EAAcZ,EAAan6D,QAC7B+6D,GACFmG,EAAgBnG,EAClB,GACA,GACDmF,EAAmB,SAAO7vF,GA2F3B87C,EAAAA,GAAAA,cAAA,OACEkF,IAAKA,EACLvxB,UAAU,mCACV+tB,QAhLgB+a,KAClB,MAAM9kD,EDpFH,SAAuBi9E,EAAaO,EAAc9B,GACvD,MAAQ,sCAAoBuB,KAAOO,MAASP,KAAOO,KAAQ9B,IAC7D,CCkFgB+B,CAAcnB,EAAMW,IAAKX,EAAMkB,KAAM9B,GACjDnwD,EAAQ,CAAEvrB,OAAM,GAgLdqoC,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,eAjEZ2gE,EAEHt0C,EAAAA,GAAAA,cAAA,OACErsB,UAAU,iBACVwvB,IAAKmxC,EACLlxC,IAAI,oBACJL,MAAQ,UAASqwC,GAAmB16E,oBAAoB06E,GAAmBz6E,cANvDqnC,EAAAA,GAAAA,cAACiyC,GAAAA,EAAQ,CAACv5E,MAAOA,EAAOC,OAAQA,IA2C1D,WACE,GAAK27E,EAEL,OACEt0C,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACGn1C,QAAQ6pF,KAAsBb,GAC7B7zC,EAAAA,GAAAA,cAAA,OACErsB,UAAU,oBACVovB,MAAQ,UAA4B,EAAnB2xC,gBAAsD,EAAnBA,QAxC9D,WACE,MAAMW,GAAexyC,EAAAA,GAAAA,GACnB,MACA19C,EACA0uF,GAAa,WAEf,GAAa,YAAT1uF,EACF,OACE66C,EAAAA,GAAAA,cAAA,OAAKrsB,UAAW0hE,EAAcC,wBAAyBhC,IACrDtzC,EAAAA,GAAAA,cAAC+8B,GAAAA,EAAM,CAAC32E,KAAMquF,EAAY5tE,KAAM2tE,EAAY7gE,UAAU,yBAChCzvB,IAArBs9B,EAAS+zD,SACRv1C,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,YAAYovB,MAAQ,gBAAevhB,EAAS+zD,gBAMnE,GAAa,UAATpwF,EAAkB,CACpB,MAAM48C,EDlNL,SAAuB58C,GAC5B,OAAKA,EACEmtF,GAAa9rE,IAAIrhB,IACnBmtF,GAAa9rE,IAAIrhB,EAAK8gB,MAAM,KAAK,KACjCitE,IAGiBsC,EAHYrwF,EAI3BqwF,EAAIvvE,MAAM,IAAI5c,QAAO,CAACosF,EAAUC,KAElCD,GAAY,GAAKA,EAAYC,EAAQC,WAAW,GAAM,GAAI,GANrBzC,GAAc1vF,SAHtC,UAMpB,IAAwBgyF,CAFxB,CC6MoBI,CAAcp0D,EAASq0D,WAC/BC,EDzNL,SAAyB3wF,GAC9B,OAAKA,EACG,0CAAyCA,WAD/B,EAEpB,CCsNsB4wF,CAAgBv0D,EAASq0D,WACzC,OACE71C,EAAAA,GAAAA,cAAA,OAAKrsB,UAAW0hE,EAAcC,wBAAyBhC,GAASvwC,MAAQ,gBAAehB,KACrF/B,EAAAA,GAAAA,cAAA,OAAKmD,IAAK2yC,EAASniE,UAAU,aAAayvB,IAAI,KAGpD,CAEA,OACEpD,EAAAA,GAAAA,cAAA,OAAKrsB,UAAW0hE,EAAclyC,IAAK6yC,GAAQ5yC,IAAI,IAEnD,CAaO6yC,GAGP,CAUOC,IAhGP,WACE,GAAK/B,EACL,MAAa,UAAThvF,EAEA66C,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,iBACbqsB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,uBACZ6N,EAAS1tB,OAEZksC,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,0BACZ6N,EAAS20D,UAKL,YAAThxF,EAEA66C,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,iBACbqsB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,uBAAuBprB,EAAK,uBAC3Cy3C,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,2BACZyiE,EAAAA,GAAAA,IAAkB7tF,EAAMqrF,EAAY9qF,EAAQ04E,YAE7CqS,GAAa7zC,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,gBAAgBuxB,IAAK8oC,UAPzD,CAYF,CAwEKqI,GACG,ICpNV,IAAe12C,EAAAA,EAAAA,KA1DYl8C,IAIrB,IAJsB,QAC1BqF,EAAO,iBACPwtF,EAAgB,aAChB35D,GACDl5B,EACC,MAAM,qBAAE63D,IAAyBn/C,EAAAA,EAAAA,MAC3Bo6E,EAAOztF,EAAQ2H,QAAQ8lF,MACvB,MACJziF,EAAK,YAAE+U,GACL0tE,EAEEC,EAAY3rF,QAAQ8xB,KAAiB85D,EAAAA,EAAAA,GAAwBF,GAC7DG,EAAY7rF,QAAQ8xB,KAAiBg6D,EAAAA,EAAAA,IAAwBJ,GAC7DK,GAAep0C,EAAAA,GAAAA,GAASg0C,GAAYF,GACpCO,GAAer0C,EAAAA,GAAAA,GAASk0C,GAAYJ,GAS1C,OACEt2C,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,QACbqsB,EAAAA,GAAAA,cAAA,OACErsB,UAAU,UACVovB,MAAQ,8BACRrB,QAZkBo1C,KACtBx7B,EAAqB,CACnB/wD,UAAWzB,EAAQ7D,GACnBo/B,OAAQv7B,EAAQsmE,cAAe,GAAG,IAClC,IAUIwnB,IAAiBC,GACjB72C,EAAAA,GAAAA,cAACiyC,GAAAA,EAAQ,CAACt+D,UAAU,6BAErBijE,GACC52C,EAAAA,GAAAA,cAAA,OACErsB,UAAU,kBACVwvB,IAAKyzC,EACLxzC,IAAKtvC,IAGR+iF,GACC72C,EAAAA,GAAAA,cAAA,SACErsB,UAAU,kBACVw3D,aAAW,EACXF,OAAK,EACL8L,yBAAuB,EACvBC,UAAQ,EACR9L,MAAI,EACJ/nC,IAAK0zC,KAIX72C,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,SAAS7f,KACtB6kC,EAAAA,EAAAA,IAAe7vC,IAAYk3C,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,eAAe9K,GACvD,ICpDK,SAASouE,GAAkBC,GAiDxC,OAAOv3C,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KACV,CAACjgD,EAAQ8zF,KACP,MAAM,QAAEruF,GAAYquF,EACpB,MAAO,CACL7e,gBAAgBlQ,EAAAA,EAAAA,IAAqB/kE,GACrC8hE,YAAYiyB,EAAAA,EAAAA,IAAwB/zF,EAAQyF,EAAQ7D,IACrD,GANOq+C,EAhDmD1D,IAC7D,MAAM,eACJ04B,EAAc,WACdnT,EAAU,QACVr8D,EAAO,WACPmpE,GACEryB,GACE,uBAAErwC,IAA2B4M,EAAAA,EAAAA,MAE7Bk7E,GAAsBtyC,EAAAA,EAAAA,KAAa/vC,IACvCA,EAAE6yC,kBACFt4C,EAAuB,CAAEhF,UAAWzB,EAAQ7D,GAAIqK,UAAW0F,GAAGu6C,UAAW,GACxE,CAAChgD,EAAwBzG,IAEtBwuF,GAAW50C,EAAAA,EAAAA,KAAQ,KACvB,MAAQuvB,WAAYslB,EAAI,QAAE71C,GAAY9B,EACtC,MAAO,IACFA,EACH04B,iBACAnT,aACA8M,WAAY,IACPslB,EACHzpD,EAAG,EACH4B,EAAG,GAELgS,QAAS42B,OAAiBp0E,EAAYw9C,EACvC,GACA,CAAC9B,EAAO04B,EAAgBnT,IAE3B,OACEnlB,EAAAA,GAAAA,cAAA,OACErsB,WAAWkvB,EAAAA,GAAAA,GAAe,4BAA6BsiB,GAAc,eACrEpiB,MAAOkvB,EAAc,SAAQA,EAAWnkC,aAAamkC,EAAWviC,OAAS,GACzEgS,QAAS42B,EAAiB+e,OAAsBnzF,GAE/Co0E,GACCt4B,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,0BACZwxC,GACCnlB,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,sBAKnBqsB,EAAAA,GAAAA,cAACk3C,EAAqBI,GAClB,IAaZ,CC5DA,MAAME,GAAkBP,GAAkBxF,IACpCgG,GAAkBR,GAAkBtF,IA2G1C,IAAeruC,EAAAA,EAAAA,KACb,CAACjgD,EAAM4N,KAA4B,IAA1B,MAAE0wD,GAAO1wD,EAChB,MAAM,OAAEnN,GAAW69D,EAAMiN,YACnB/pC,GAAQkhB,EAAAA,EAAAA,IAAY1iD,GACpBq0F,GAAoBC,EAAAA,EAAAA,IAAwBt0F,EAAQS,GAC1D,MAAO,CACL+gC,QACA+yD,YAAav0F,EAAO+f,YAAYC,iBAChCq0E,oBACD,GATL,EAxFyCj0F,IAYnC,IAZoC,MACxCk+D,EAAK,oBACLmgB,EAAmB,kBACnB+V,EAAiB,aACjBl7D,EAAY,MACZ0zC,EAAK,YACLmI,EAAW,YACXsf,EAAW,aACXpH,EAAY,YACZkH,EAAW,kBACXF,EAAiB,MACjB7yD,GACDphC,EACC,MAAM,qBAAEs0F,IAAyB57E,EAAAA,EAAAA,MAE3B67E,EAAar2B,EAAM/4D,SAASpF,OAE5By0F,GAAqBlzC,EAAAA,EAAAA,KAAaj8C,IACtCivF,EAAqB,CAAEj0F,OAAQgF,EAAQhF,OAAQyG,UAAWzB,EAAQ7D,IAAK,GACtE,CAAC8yF,KAyDIr/E,MAAOw/E,EAAgBv/E,OAAQw/E,GAAoBL,EAAYlhB,eAEvE,OACE52B,EAAAA,GAAAA,cAAA,OACErsB,UAAU,QACVovB,MAAQ,UAASm1C,gBAA6BC,QAE7Cx2B,EAAM/4D,SAASC,KA9DpB,SAA4BC,EAAqBkZ,GAC/C,MAAM,MAAEgb,EAAK,MAAE2Z,IAAUC,EAAAA,EAAAA,IAAkB9tC,GACrCsvF,EAAaR,GAAYnxE,EAAAA,EAAAA,IAAqB3d,IAC9Ck+E,EAAiBoR,GAAYp1E,UAC7B,WAAEivD,EAAU,MAAEC,GAAU4lB,EAAY9lB,OAAOhwD,GAG3C+kE,GAAcsR,EAAAA,EAAAA,KAAuBzrF,EAAAA,EAAAA,MAAa9D,GAClD4gF,GAAc4O,EAAAA,EAAAA,KAAuB1rF,EAAAA,EAAAA,MAAa9D,GAExD,GAAIk0B,EAAO,CACT,MAAMkqD,EAAuB2Q,IAE1BxnB,EAAQruD,IAAUg2E,EAAa,EAAIntF,QAAQqnE,EAAQd,GAAcK,MAAQS,EAAQd,GAAcI,SAGlG,OACExxB,EAAAA,GAAAA,cAACw3C,GAAe,CACdvyF,GAAK,gBAAcq6E,EAAAA,EAAAA,IAAiBx2E,EAAQ7D,MAC5C6D,QAASA,EACTw1E,8BAA+BwD,EAC/BiF,YAAaA,EACbG,qBAAsBA,EACtBF,eAAgBA,EAChB/U,WAAYA,EACZuG,YAAaA,EACb92B,QAASgvC,EACTtJ,eAAgB6Q,EAChB9Q,cAAeuQ,EAAkB5pF,SAAShF,EAAQ7D,IAClD4/B,MAAOA,GAGb,CAAO,GAAI8R,EACT,OACEqJ,EAAAA,GAAAA,cAACy3C,GAAe,CACdxyF,GAAK,gBAAcq6E,EAAAA,EAAAA,IAAiBx2E,EAAQ7D,MAC5C6D,QAASA,EACTw1E,8BAA+BwD,EAC/BiF,YAAaA,EACb2C,YAAaA,EACb1C,eAAgBA,EAChBrqD,aAAcA,EACds1C,WAAYA,EACZuG,YAAaA,EACb92B,QAASgvC,EACTtJ,eAAgB6Q,EAChB9Q,cAAeuQ,EAAkB5pF,SAAShF,EAAQ7D,IAClD4/B,MAAOA,GAMf,IAUQ,ICnFV,IAAI0zD,GAEJ,MAmMA,GAnMiC90F,IAM3B,IAN4B,QAChCqF,EAAO,oBACPg5E,EAAmB,YACnBiF,EAAW,aACXpqD,EAAY,cACZwqD,GACD1jF,EAEC,MAAMyhD,GAAMvB,EAAAA,EAAAA,IAAuB,MAE7B60C,GAAqB70C,EAAAA,EAAAA,IAAuB,MAE5C80C,GAAY90C,EAAAA,EAAAA,IAAyB,MAErChN,EAAQ7tC,EAAQ2H,QAAQkmC,MAExBspC,GAAiBjB,EAAAA,GAAAA,IAAkB95B,EAAK48B,IAEvCwF,EAAeC,IAAoB3mC,EAAAA,EAAAA,IAASmmC,GAC7CS,EAAa38E,QAAQy8E,GAAiBrH,GAAkBtjD,IACxD,UAAE0kC,EAAS,aAAEomB,IAAiBC,EAAAA,GAAAA,IAClChsB,EAAAA,EAAAA,IAAoB5yD,EAAS,WAC5B0+E,GACDc,EAAAA,EAAAA,IAAsBx/E,EAAS,UAC/B6zB,IAGM8qD,aAAcY,IAAqBX,EAAAA,GAAAA,IACzChsB,EAAAA,EAAAA,IAAoB5yD,EAAS,aAC5Bq+E,EACD/3C,EAAAA,GAAAA,QACAzS,IAGKutD,EAAeC,IAAmBpmC,EAAAA,GAAAA,KAEnC+jC,GADWj9E,SAAQ+7E,EAAAA,EAAAA,IAA4B99E,KACxBohF,EACvBnC,EAAWtB,GAAwB39E,EAASg/E,GAC5CG,GAAkBC,EAAAA,GAAAA,IAAoBJ,GAEtCU,EAAkBlB,IAAkB4C,GAAkB/C,EACtDwB,GAAiD,KAA/Btc,EAAAA,GAAAA,GAAYib,IAGlC53B,aAAcgpC,EACd9oC,qBAAsBi5B,IACpBh5B,EAAAA,GAAAA,GAAkB24B,OAAgBtkF,EAAWykF,IAE1C3H,EAAa2X,IAAkB/3C,EAAAA,EAAAA,KAAS,IAExCg4C,EAAaC,IAAeC,EAAAA,GAAAA,GAAU,GACvCC,GAAuBC,EAAAA,GAAAA,IAAmBJ,EAvDxB,KAyDxBx5C,EAAAA,EAAAA,KAAU,KACR,IAAK4hC,EACH,OAGF,MAAMiY,EAAWR,EAAU5kE,QAC3BglE,EAAYI,EAASnO,YAAcmO,EAAS/3B,SAAS,GACpD,CAAC23B,EAAa7X,EAAa+X,KAE9B7gC,EAAAA,EAAAA,KAAgB,KACd,IAAK8oB,EACH,OAGF,MAAMkY,EAAYC,GAAAA,GAA4B,EAExCtK,EAA0C,GAAzBqK,EADL,GACkCnoF,KAAK+9E,GACnDG,EAAmBJ,EAAgBkK,IAAyBlK,EAC5DuK,EAAoBZ,EAAmB3kE,QACvCk5D,EAAQqM,EAAkBz+B,kBAE3BoyB,EAUFA,EAAMpyB,kBAAiCqgB,aAAa,oBAAqBiU,EAAiB3jF,YAT3F8tF,EAAkBn+B,UAAa,yBACfk+B,GAAAA,iBAAwCA,GAAAA,iCACtCD,UAAkBA,SAAiBA,EATrC,kEAUeA,MAAcA,sCACnBrK,KAAiBA,sCAChBA,kCAK7B,GACC,CAAC7N,EAAa+X,IAEjB,MAAMM,EAAaxuF,QAAQw2D,GAAa4e,GAElCqZ,GAAcv0C,EAAAA,EAAAA,KAAY,KACzB0zC,EAAU5kE,UAIf8kE,GAAe,GACfE,EAAY,IACZ/T,EAAAA,GAAAA,GAAS2T,EAAU5kE,UAEnB24C,EAAAA,EAAAA,KAAgB,KACdgsB,EAAmB3kE,QAASonC,UAAY,EAAE,IAC1C,GACD,CAAC49B,IAEEU,GAAiBx0C,EAAAA,EAAAA,KAAY,KACjCwzC,OACAA,GAAee,CAAW,GACzB,CAACA,IAEE78B,GAAc1X,EAAAA,EAAAA,KAAY,KAC9B,IAAKsc,EAGH,YAFAkmB,GAAkByB,IAAeA,IAKnC,GAAI7B,EAEF,YADAhrE,EAAAA,EAAAA,MAAa4uE,2BAA2B,CAAEjiF,YAI5C,MAAMmwF,EAAWR,EAAU5kE,QACvBmtD,EACEiY,EAASO,SACX1U,EAAAA,GAAAA,GAASmU,IACTQ,EAAAA,GAAAA,OAEAR,EAASjnE,SAGXunE,IAEAN,EAASjnE,QACTinE,EAASnO,YAAc,GACvBhG,EAAAA,GAAAA,GAASmU,IACTQ,EAAAA,GAAAA,MAEAd,GAAe,GACjB,GACC,CAACY,EAAgBvY,EAAamG,EAAe9lB,EAAWv4D,IAErD+hF,GAAmB9lC,EAAAA,EAAAA,KAAa/vC,IACpC,MAAMikF,EAAWjkF,EAAE4lE,cAEnBie,EAAYI,EAASnO,YAAcmO,EAAS/3B,SAAS,GACpD,CAAC23B,IAEJ,OACE74C,EAAAA,GAAAA,cAAA,OACEkF,IAAKA,EACLvxB,UAAU,yBACV+tB,QAAS+a,GAER4E,GACCrhB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,iBACbqsB,EAAAA,GAAAA,cAACgrC,GAAAA,EAAc,CACbvI,QAAS4W,EACTn0C,IAAKuzC,EACLt1C,IAAKke,EACL1tC,UAAU,aACVjb,MAAOygF,GAAAA,GACPxgF,OAAQwgF,GAAAA,GACRnC,UAAQ,EACRD,yBAAuB,EACvB9L,OAAQjK,EACRkK,MAAOlK,EACPmK,aAAW,EACXtH,QAAS7C,EAAcsY,OAAcp1F,EACrCknF,aAAcpK,EAAc6J,OAAmB3mF,EAC/CmnF,QAASlB,KAIfnqC,EAAAA,GAAAA,cAAA,UACEkF,IAAK6iC,EACLp0D,WAAWkvB,EAAAA,GAAAA,GAAe,YAAaolC,GACvCllC,MAAQ,UAASo2C,GAAAA,iBAAwCA,GAAAA,SAE3Dn5C,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,WAAWuxB,IAAKszC,IAC9BE,GACC14C,EAAAA,GAAAA,cAAA,OAAKrsB,UAAY,iBAAgBk1D,KAC/B7oC,EAAAA,GAAAA,cAACwpC,GAAAA,EAAe,CAACxmE,SAAUmkE,EAAgBkB,EAAmBZ,MAGhEpmB,IAAcimB,GACdtnC,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,uBAEfqsB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,0BACZqtD,GAAcuK,EAAAA,GAAAA,IAAoBkN,EAAU5kE,QAASi3D,cAAeS,EAAAA,GAAAA,IAAoB50C,EAAMuqB,YAC5F8f,GAAeyX,EAAU5kE,QAAS2lE,SAAWx5C,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,qBAE3D,EC7KV,GAhDoClwB,IAA0B,IAAzB,QAAEqF,EAAO,QAAE44C,GAASj+C,EACvD,MAAM8E,GAAOo5C,EAAAA,GAAAA,KAyBb,OACE3B,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,iBACZ7qB,EAAQsmE,cAAevmE,KAAK+rE,GAC3B50B,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,OACZihD,EAAI/rE,KAAKw7B,GACR2b,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLC,KAAK,OACLgD,QAAM,EACNyf,SAA0B,gBAAhBvgC,EAAOl/B,KAEjBu8C,QAASA,IAAMA,EAAQ,CAAEn3C,UAAWzB,EAAQ7D,GAAIo/B,YAEhD2b,EAAAA,GAAAA,cAAA,QAAMrsB,UAAU,uBAAsB6pC,EAAAA,GAAAA,GAAWj1D,EAAK87B,EAAOl9B,QAnCrDk9B,KAClB,MAAM,KAAEl/B,GAASk/B,EACjB,OAAQl/B,GACN,IAAK,MACH,IAAKynB,EAAAA,IAAAA,KAAiByX,EAAO1sB,KAC3B,OAAOqoC,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,0BAEtB,MAEF,IAAK,UACH,OAAOqsB,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,0BACtB,IAAK,MACL,IAAK,UACH,OAAOqsB,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,mBACtB,IAAK,kBACH,OAAOqsB,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,2BACtB,IAAK,UACL,IAAK,gBACH,OAAOqsB,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,qBAER,EAgBL+lE,CAAWr1D,SAKhB,ECqCV,IAAesb,EAAAA,EAAAA,KA5EqBl8C,IAG9B,IAH+B,WACnCgI,EAAU,SACVm5D,GACDnhE,EACC,MAAM,aAAEk2F,IAAiBx9E,EAAAA,EAAAA,MAEnB5T,GAAOo5C,EAAAA,GAAAA,MACP,SACJ59C,EAAQ,OAAED,EAAM,cAAEgsB,EAAa,cAAEnkB,EAAa,uBAAE8d,EAAsB,iBAAEsG,EAAgB,gBAAE3E,GACxF3f,EAEEgxD,GAAc1X,EAAAA,EAAAA,KAAY,KAC9B40C,EAAa,CAAE10F,GAAInB,EAAQC,WAAUqnB,mBAAkB,GACtD,CAACuuE,EAAc71F,EAAQC,EAAUqnB,IAE9BwuE,GAAiBl3C,EAAAA,EAAAA,KAAQ,KAC7B,IAAK3yB,GAAkBvsB,OACrB,OAIF,MAAQ6c,OAASQ,KAAMq+D,GAAa/sE,OAAS0O,KAAMg5E,KAAgBjtF,EAAAA,EAAAA,MAEnE,OAAOmjB,EAAiBlnB,KAAKq8B,IACpB1E,EAAAA,EAAAA,IAAS0E,GAAUg6C,EAAUh6C,GAAU20D,EAAU30D,KACvD79B,OAAOwD,QAAQ,GACjB,CAACklB,IAEJ,QAAsB7rB,IAAlB4rB,EACF,OAoBF,MAAMgqE,EAAYjvF,QAAQ4e,GAA0B9d,GAAiB8d,EAAyB9d,GAExFouF,EAAejqE,EAAiBvnB,EAAK,WAAY,wBAAoBrE,EAAW4rB,GACnF7J,MAAM,KACNpd,KAAKyM,GACU,mBAANA,EAAyB0qC,EAAAA,GAAAA,cAACud,GAAAA,EAAe,CAACp2D,MAAMk5C,EAAAA,GAAAA,IAAqBvwB,KAAqBxa,SAElGpR,EAEJ,OACE87C,EAAAA,GAAAA,cAAA,OACE,YAAUK,EAAAA,GAAAA,IAAqBvwB,GAC/B6D,WAAWkvB,EAAAA,GAAAA,GAAe,gBAAiBi3C,GAAa,aAAcl1B,GAAY,YAClFhjB,IAAKr5C,EAAKs5C,MAAQ,MAAQ,MAC1BH,QAAS+a,GAETzc,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,iCACVimE,GAA4C,IAA1BA,EAAep2F,SAAiBw8C,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,uBAhClEimE,GAAkBA,EAAep2F,OAAS,GACxCw8C,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,kBAAkBiuB,IAAKr5C,EAAKs5C,MAAQ,MAAQ,OACxD+3C,EAAe/wF,KAAKge,GACnBm5B,EAAAA,GAAAA,cAAC+8B,GAAAA,EAAM,CACLtgC,IAAK51B,EAAK5hB,GACVk9C,KAAK,QACLt7B,MAAM2Z,EAAAA,EAAAA,IAAS3Z,EAAK5hB,IAAM4hB,OAAkB3iB,EAC5CkC,MAAOo6B,EAAAA,EAAAA,IAAS3Z,EAAK5hB,SAAwBf,EAAlB2iB,OA2BnCm5B,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,QAAQiuB,IAAI,QACxB9xB,EAAgBiqE,EAAexxF,EAAK,kBAEvCy3C,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,mBACT,I,4BC9FV,UAAgB,KAAO,uBAAuB,kBAAkB,uBAAuB,cAAgB,uBAAuB,gBAAgB,uBAAuB,aAAe,uBAAuB,OAAS,uBAAuB,UAAY,wBCmCjPqmE,GAAmB,IAAMxsD,GAAAA,GACzBysD,GAAc,IAAMzsD,GAAAA,GA2H1B,IAAemS,EAAAA,EAAAA,KAzH6Bl8C,IAOtC,IAPuC,SAC3CirC,EAAQ,eACRwrD,EAAc,gBACdp0F,EAAe,mBACf2pC,EAAkB,oBAClBqyC,EAAmB,YACnBqD,GACD1hF,EACC,MAAM,mBAAE02F,IAAuBh+E,EAAAA,EAAAA,MAGzB+oC,GAAMvB,EAAAA,EAAAA,IAAuB,MAE7B8I,EAAW,eAAgB/d,EAE3BO,GAAoByT,EAAAA,EAAAA,KAAQ,IAChCjT,GAAoBzgC,MAAM4/B,IAAMC,EAAAA,EAAAA,IAAeD,EAAEF,SAAUA,MAC1D,CAACe,EAAoBf,IAClB0rD,EAAenrD,GAAmBI,YAAYpqC,IAE9C,YAAEymB,IAAgB2uE,EAAAA,GAAAA,GAAe5tC,EAAW/d,EAASn5B,gBAAarR,GAElEo2F,GAAmB53C,EAAAA,EAAAA,KAAQ,KAC/B,IAAK+J,EAAU,OAAOxd,GAAmBC,iBAAiBjqC,GAE1D,IAAKymB,EAAa,OAClB,MAAM6uE,EAAa9qD,GAAoBzgC,MAAMwrF,GAAcA,EAAU9rD,SAASwB,WAAaxkB,EAAY/hB,SACnGulC,iBAAiBjqC,GACrB,OAAOs1F,CAAU,GAChB,CAACtrD,EAAmBQ,EAAoB/jB,EAAa+gC,IAElDguC,GAAW/3C,EAAAA,EAAAA,KAAQ,KACvB,GAAI43C,EACF,OAAOA,EAGT,IAAKJ,GAAgB/kF,SACnB,OAGF,MAAM,SAAEA,GAAa+kF,EAGrB,OAAO/kF,EAFapE,KAAKI,MAAMJ,KAAKob,SAAWhX,EAAS3R,SAE3ByB,EAAE,GAC9B,CAACq1F,EAAkBJ,IAEhBja,GAAiBjB,EAAAA,GAAAA,IAAkB95B,EAAK48B,GAExC4Y,EAAsBN,GAAiB,UAASA,IAChD1X,EAAkB+X,GAAa,UAASA,IAExCE,GAAsBn4C,EAAAA,GAAAA,GAASk4C,GAAsBN,GACrDQ,GAAkBp4C,EAAAA,GAAAA,GAASkgC,GAAkB+X,GAE7CI,GAAiBn4C,EAAAA,EAAAA,KAAQ,IAC7B58C,GAAiBkJ,MAAMmiC,IAAWtC,EAAAA,EAAAA,IAAesC,EAAOzC,SAAUA,MACjE,CAAC5oC,EAAiB4oC,IAEf2qD,EAAaxuF,QAAQs6E,GAAe0V,IAAmBpuC,GAAYkuC,IAAwBC,IAE/FlrC,aAAcorC,EACdlrC,qBAAsBmrC,IACpBlrC,EAAAA,GAAAA,GAAkBwpC,OAAYn1F,GAAW,EAAM,QAE7C82F,GAAcj2C,EAAAA,EAAAA,KAAY,KACzB81C,GAAgBtwF,WACrB4vF,EAAmB,CAAE5vF,UAAWswF,EAAetwF,UAAWmkC,YAAW,GACpE,CAACmsD,GAAgBtwF,UAAWmkC,EAAUyrD,KAElCc,EAAmBC,EAAqBC,IAAyBp3C,EAAAA,GAAAA,KAClEq3C,IAAsB3uC,GAAc4sC,GAAe4B,GAEnDtnE,GAAYkvB,EAAAA,GAAAA,GAChBI,GAAAA,KACA63C,GAAyB73C,GAAAA,UACzBwJ,GAAYxJ,GAAAA,eAGd,OACEjD,EAAAA,GAAAA,cAAA,OAAKrsB,UAAWA,EAAWuxB,IAAKA,GAC7Bk2C,GAAsBp7C,EAAAA,GAAAA,cAACq7C,GAAAA,EAAmB,CAAC3sD,SAAUA,EAAUe,mBAAoBA,IACnFgd,GACCzM,EAAAA,GAAAA,cAACgD,GAAAA,EAAW,CACVztC,WAAYm5B,EAASn5B,WACrBoe,UAAWsvB,GAAAA,YACXs7B,8BAA+BuD,IAGlCgZ,GACC96C,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAC0jC,GAAAA,EAAe,CACdjnC,IAAKg+C,EACL9mE,WAAWkvB,EAAAA,GAAAA,GAAeI,GAAAA,OAAe83C,GACzC54C,KAAM83C,GACNtW,OAAQiX,EACRnb,KAAMQ,EACNP,QAAM,EACN3xE,uBAAqB,EACrB81E,QAASmX,IAEVvuC,GACE6tC,GAAoBra,GAAkBjgC,EAAAA,GAAAA,cAACiF,GAAiB,CAACvW,SAAUA,IAEpEsR,EAAAA,GAAAA,cAAC0jC,GAAAA,EAAe,CACdjnC,IAAK29C,EACLzmE,WAAWkvB,EAAAA,GAAAA,GAAeI,GAAAA,aAAqB83C,GAC/C54C,KAAM63C,GACNrW,OAAQgX,EACRlb,KAAMQ,EACNP,QAAM,EACN3xE,uBAAqB,EACrButF,OAAQJ,EACRrX,QAASsX,KAKb,IC9DV,IAAex7C,EAAAA,EAAAA,KAhEVl8C,IASC,IATA,SACJirC,EAAQ,QACR5lC,EAAO,gBACPhD,EAAe,mBACf2pC,EAAkB,mBAClB8rD,EAAkB,YAClBpW,EAAW,eACX+U,EAAc,oBACdpY,GACDr+E,EACC,MAAM,eAAE6sC,IAAmBn0B,EAAAA,EAAAA,OACrB,gBAAE2yB,GAAoBhmC,EAAQylC,UAE9BitD,GAAiB94C,EAAAA,EAAAA,KAAQ,KAC7B,IAAK64C,IAAuBzsD,EAC1B,OAIF,MAAMowC,GAAYtyE,EAAAA,EAAAA,MAAYyT,MAAMQ,KAEpC,OAAOiuB,EACJznC,QAAQo0F,IAAmB5sD,EAAAA,EAAAA,IAAe4sD,EAAe/sD,SAAUA,EAASA,YAC5E7lC,KAAK4yF,GAAmBvc,EAAUuc,EAAexoF,UACjD5L,OAAOwD,QAAQ,GACjB,CAAC6jC,EAASA,SAAUI,EAAiBysD,IAElC9+B,GAAc1X,EAAAA,EAAAA,KAAY,KAC9BzU,EAAe,CACb5B,SAAUA,EAASA,SACnB5qC,OAAQgF,EAAQhF,OAChByG,UAAWzB,EAAQ7D,IACnB,GACD,CAAC6D,EAAS4lC,EAAU4B,IAEvB,OACE0P,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLvuB,WAAWkvB,EAAAA,GAAAA,IAAerU,EAAAA,EAAAA,IAAiBE,IAAa,UACxDyT,KAAK,OACLT,QAAS+a,GAETzc,EAAAA,GAAAA,cAAC07C,GAAqB,CACpB51F,gBAAiBA,EACjB4oC,SAAUA,EAASA,SACnBe,mBAAoBA,EACpByqD,eAAgBA,EAChBpY,oBAAqBA,EACrBqD,YAAaA,IAEdqW,GAAgBh4F,OACfw8C,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,WACZ6nE,EAAe3yF,KAAKge,GACnBm5B,EAAAA,GAAAA,cAAC+8B,GAAAA,EAAM,CACLtgC,IAAK51B,EAAK5hB,GACV4hB,KAAMA,EACNs7B,KAAK,aAITnC,EAAAA,GAAAA,cAACud,GAAAA,EAAe,CAACp2D,MAAMk5C,EAAAA,GAAAA,IAAqB3R,EAASrlB,OAAQsK,UAAU,YACpE,IClBb,IAAegsB,EAAAA,EAAAA,KA1CiBl8C,IAW1B,IAX2B,QAC/BqF,EAAO,UACP6yF,EAAS,SACT/oB,EAAQ,gBACR9sE,EAAe,mBACf2pC,EAAkB,aAClBmsD,EAAY,eACZ1B,EAAc,oBACdpY,EAAmB,iBACnB+Z,EAAgB,YAChB1W,GACD1hF,EACC,MAAM8E,GAAOo5C,EAAAA,GAAAA,KAEPhsB,GAAa+sB,EAAAA,EAAAA,KAAQ,IACzB55C,EAAQylC,UAAW17B,QAAQxJ,QAAO,CAACC,EAAKolC,IAAaplC,EAAMolC,EAASrlB,OAAO,IAC1E,CAACvgB,IAEJ,OACEk3C,EAAAA,GAAAA,cAAA,OACErsB,WAAWkvB,EAAAA,GAAAA,GAAe,YAAa84C,GAAa,cACpD54C,MAAO6vB,EAAY,cAAaA,WAAe1uE,EAC/C09C,IAAKr5C,EAAKs5C,MAAQ,MAAQ,OAEzB/4C,EAAQylC,UAAW17B,QAAQhK,KAAK6lC,GAC/BsR,EAAAA,GAAAA,cAAC87C,GAAc,CACbr/C,KAAKs/C,EAAAA,EAAAA,IAAqBrtD,EAASA,UACnCA,SAAUA,EACV5lC,QAASA,EACThD,gBAAiBA,EACjB2pC,mBAAoBA,EACpB8rD,mBAAoB5lE,GAjCH,IAiCwCkmE,EACzD3B,eAAgBA,EAChBpY,oBAAqBA,EACrBqD,YAAaA,MAGhByW,EACG,ICuBV,IAAej8C,EAAAA,EAAAA,KAtEwBl8C,IAIjC,IAJkC,UACtCw6C,EAAS,QACTn1C,EAAO,OACPhF,GACDL,EACC,MAAM,4BAAEu4F,IAAgC7/E,EAAAA,EAAAA,MAElC5T,GAAOo5C,EAAAA,GAAAA,MACP,WAAEhxC,EAAU,QAAEiuC,EAAO,OAAEh2B,GAAWq1B,EAClCg+C,EAAsB,WAAXrzE,EACXszE,EAAyB,SAAXtzE,IAAsBjY,EAEpCwrF,GAAap3C,EAAAA,EAAAA,KAAY,KAC7Bi3C,EAA4B,CAAEp9C,UAAS3rC,OAAQnP,GAAS,GACvD,CAACA,EAAQ86C,EAASo9C,IAEfI,GAAa15C,EAAAA,EAAAA,KAAQ,IACrB9D,EACEs9C,EAAoB,mCACpBD,EAAiBtrF,EAAa,iCAAmC,iCAE9DA,EAAa,2BAA6B,2BAE7CurF,EAAoB,8BACpBD,EAAiBtrF,EAAa,4BAA8B,4BAEzDA,EAAa,sBAAwB,uBAE7C,CAACurF,EAAaD,EAAUtrF,EAAYiuC,IAEjCsiB,GAAWxe,EAAAA,EAAAA,KAAQ,IAChBzE,EAAUijB,UAAWm7B,EAAAA,GAAAA,IAAmB9zF,EAAM01C,EAAUijB,eAAYh9D,GAC1E,CAACqE,EAAM01C,EAAUijB,WAEdo7B,GAAgB1a,EAAAA,GAAAA,IAAWr5E,EAAqB,IAAfO,EAAQyH,MAC/C,OACEyvC,EAAAA,GAAAA,cAAA,OAAKrsB,UCxDc,wBDyDjBqsB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLC,KAAK,UACLJ,MAAM,cACNxmC,OAAK,EACL4pC,QAAM,EACNzD,QAASy6C,EACTxoE,UC/D+C,uBDgE/CixC,UAAW5mB,EAAAA,GACXsK,UAAW//C,EAAKoI,EAAa,YAAc,aAE3CqvC,EAAAA,GAAAA,cAAA,KAAGrsB,WAAWkvB,EAAAA,GAAAA,GAAe,OAAQjE,EAAU,sBAAwB,iBAEzEoB,EAAAA,GAAAA,cAAA,OAAKrsB,UCrE0E,wBDsE7EqsB,EAAAA,GAAAA,cAAA,OAAKrsB,UCtEwG,wBDsE7EprB,EAAK6zF,IACrCp8C,EAAAA,GAAAA,cAAA,OAAKrsB,UCvEuO,wBDwE1OqsB,EAAAA,GAAAA,cAAA,KACErsB,WAAWkvB,EAAAA,GAAAA,GACT,OACA,mBC3EsI,uBD6EtIo5C,GC7EwM,wBD8EvMtrF,GC9EuK,0BDiF5KqvC,EAAAA,GAAAA,cAAA,QAAMrsB,UCjFsQ,wBDkFzQutC,EAAW34D,EAAK,0BAA2B,CAAC+zF,EAAep7B,IAAao7B,KAI3E,I,+EEhEV,MAAMC,GAAkB,MAAQ/uD,GAAAA,GAwBhC,IAAemS,EAAAA,EAAAA,KAtBiBl8C,IAI1B,IAJ2B,MAC/B8lB,EAAK,UACLoK,EAAS,QACT+tB,GACDj+C,EACC,MAAM8E,GAAOo5C,EAAAA,GAAAA,KACb,OACE3B,EAAAA,GAAAA,cAAA,OACErsB,WAAWkvB,EAAAA,GAAAA,GChCM,uBDgCsBlvB,GACvCovB,MAAQ,qCAAmCy5C,EAAAA,GAAAA,IAAyBjzE,GAAOkzE,cAC3E/6C,QAASA,GAERn4B,EACGy2B,EAAAA,GAAAA,cAAC08C,GAAAA,EAAS,CAACnzE,MAAOA,EAAO44B,KAAMo6C,KAC/Bv8C,EAAAA,GAAAA,cAAA,OAAKmD,IAAKw5C,GAAUv5C,IAAI,KAC3B75B,GAAOzV,OAAQ0pD,EAAAA,GAAAA,GAAWj0C,EAAMzV,OAASvL,EAAK,WAC9CghB,GAAOgjB,UAAYyT,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,mBACjCqsB,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,mBACT,IEsOJipE,GAAe,CAAErJ,OAAQ,kvBAEzBsJ,GAAmB,CAAEtJ,OAAQ,qvBAG7BuJ,GAAsB,KAAOtvD,GAAAA,GAC7BuvD,GAA4B,KAAOvvD,GAAAA,GAkiCzC,IAAemS,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAACjgD,EAAQ8zF,KACP,MAAM,eACJ1Z,EAAc,gBAAEv3E,EAAe,gBAAEJ,EAAe,wBAAEkqC,IAChDrrC,EAAAA,EAAAA,IAAetB,IACb,aAAEs5B,GAAiBt5B,GACnB,QACJyF,EAAO,MAAE64D,EAAK,eAAEq7B,EAAc,WAAEC,EAAU,SAAEl5F,EAAQ,gBAAEuE,EAAe,sBAAE40F,EAAqB,eAAEC,GAC5FhG,GACE,GACJlyF,EAAE,OAAEnB,EAAM,SAAEmU,EAAQ,cAAEmlF,EAAa,iBAAE94E,EAAgB,WAAE3T,EAAU,kBAAEkf,EAAiB,YAAEo/C,EAAW,gBACjG3jD,EAAe,SAAEzD,GACf/e,EAEE1C,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1BukE,GAAiBC,EAAAA,EAAAA,IAAqBjlE,EAAQS,GAC9Cu5F,GAAgBC,EAAAA,EAAAA,IAAqBx5F,GACrCi1D,EAAY3yD,IAAQ0hE,EAAAA,EAAAA,IAAc1hE,GAClC2rC,EAAU3rC,IAAQm3F,EAAAA,EAAAA,IAAYn3F,GAC9Bo3F,EAAgBp3F,GAAMmgC,UACtBk3D,GAAgBj9D,EAAAA,EAAAA,IAAS18B,QAA+CI,GAArC8tC,EAAAA,EAAAA,IAAmB3uC,EAAQS,GAE9D45F,EAAex3F,EAAgBmC,YAAcnC,EAAgBmC,WAAWyF,SAAS7I,GACjF04F,GAAmBt1B,IAAkBu1B,EAAAA,EAAAA,IAAsB90F,GAC3D+0F,EAAgBb,GAAkBC,GAAcU,EAChDp0F,GAASC,EAAAA,EAAAA,IAAanG,EAAQyF,GAC9Bg1F,GAAen1B,EAAAA,EAAAA,IAAsBtlE,EAAQyF,GAC7Cu9B,EAAYpuB,GAAW6O,EAAAA,EAAAA,IAAWzjB,EAAQ4U,QAAY/T,EACtD65F,EAAoBx0F,GAAQtE,IAAM8sC,EACpC0rD,GAAc5nD,mBAAmBtsC,GAAQtE,SACzCf,EAEE85F,EAAqBj6F,GAAW0f,EAAAA,EAAAA,IAAyBpgB,EAAQS,EAAQC,QAAYG,EACrF+5F,EAAcn1F,EAAQ7D,KAAO+4F,EAE7BE,EAAkB55E,IAAqB05E,EACvC35E,EAAeC,IAAqB45E,GACtCnmF,EAAAA,EAAAA,IAAkB1U,EAAQg6F,GAAiBD,EAAgBA,EAAgBt5F,EAAQwgB,QACnFpgB,EACEi6F,EAAqB95E,IAAgB+5E,EAAAA,EAAAA,IAAkB/6F,EAAQghB,EAAcxZ,QAAQokE,IACrFovB,EAA6D,gBAAvCh6E,GAAc5T,QAAQ6H,QAAQnT,KAEpD6hF,GAAiBsX,EAAAA,EAAAA,IAAqBj7F,EAAQyF,GAC9CmuE,EAAgC,WAApB3uE,IAChBq5D,EACIA,EAAM/4D,SAASioC,MAAMlmB,IAAM6yD,EAAAA,EAAAA,IAAuBn6E,EAAQsnB,EAAG5mB,MAC7Dy5E,EAAAA,EAAAA,IAAuBn6E,EAAQyF,EAAS/E,KAI5CiK,UAAWkpE,EAAgBrqE,YAAasqE,EAAgB,oBAAE9pE,GACvD4pE,GAAawG,GAAmB,CAAC,GAE9Bl5E,MAAOg6F,KAAc/mE,EAAAA,EAAAA,IAAwBn0B,IAAW,CAAC,EAE3Dm7F,IAAcC,EAAAA,EAAAA,IAA6B31F,GAC3C41F,GAAgBF,KAAepZ,EAAAA,EAAAA,IAAoB/hF,EAAQm7F,IAAeA,QAAct6F,EACxFy6F,IAAsBC,EAAAA,EAAAA,IAA4B91F,GAExD,IAAIq8D,GAEFA,GADExD,GAAO/4D,SACI+4D,EAAM/4D,SAASi2F,OAAM9+E,IAAA,IAAG9a,GAAIsF,GAAWwV,EAAA,OAAKq3E,EAAAA,EAAAA,IAAwB/zF,EAAQkH,EAAU,KAEtF6sF,EAAAA,EAAAA,IAAwB/zF,EAAQ4B,GAG/C,MAAM,SAAEszE,IAAkC,WAApBjwE,IAAgCS,EAAAA,EAAAA,IAA4B1F,EAAQyF,EAAS/E,IAAc,CAAC,EAC5GojF,IAAgB2X,EAAAA,EAAAA,IAAoBz7F,EAAQyF,GAC5Ci2F,GAA0BlvE,GAC5BnkB,EAAAA,EAAAA,IAAiBrI,EAAQwsB,EAAkB/rB,OAAQ+rB,EAAkB9rB,WAAa8rB,OAClF3rB,EAEEssC,GAAoB3lC,QAAQ/B,EAAQoE,aAAepE,EAAQ2nC,UAC3DC,GAA8BF,IAChCliC,EAAAA,EAAAA,IAA0BjL,EAAQS,EAAQgF,EAAQoE,WAAa,QAC/DhJ,EACE86F,GAAkBxuD,GACtB0sD,GAAwBnlF,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQ4sC,SAAgCxsC,EACxF4E,EAEEm2F,GAAoB74F,GAAMsrC,iBAAiB5jC,SAAShF,EAAQ7D,IAE5Di6F,GAAen7F,IAAamB,EAAAA,IAAkBkB,GAAME,SAAW62F,EAC/DgC,GAAeD,IAAgBrnD,EAAAA,EAAAA,IAAuBx0C,EAAQyF,IAAY1C,GAAM0V,SAASsjF,EAAAA,UAC3Fl7F,EAEEm7F,GAAax0F,SAAQ6oF,EAAAA,EAAAA,IAAmB5qF,IACxCw2F,IAAmBC,EAAAA,EAAAA,IAAuBl8F,EAAQS,GAClD07F,IAA+B7tF,EAAAA,EAAAA,IAAmCtO,EAAQS,EAAQgF,EAAQ7D,IAEhG,MAAO,CACL4/B,OAAOkhB,EAAAA,EAAAA,IAAY1iD,GACnBm6F,gBACAG,kBACAE,gBACAC,eACAz3D,YACA63D,gBAAiBA,GAAmBG,EACpCJ,cACA55E,eACA85E,qBACA3tD,qBACAgoC,aAAainB,EAAAA,EAAAA,IAAyBp8F,EAAQyF,GAC9C42F,iBAAiBC,EAAAA,EAAAA,IAAsBt8F,EAAQS,GAC/CmzE,YACAymB,eACAsB,mBACA32B,iBACAg1B,gBACAtkC,YACAhnB,UACAwmC,YACA57C,eACA4hE,aACAG,iBACAC,uBACArmB,gBAAgBlQ,EAAAA,EAAAA,IAAqB/kE,GACrC8hE,cACAy6B,gBACE/0F,QAAQ/B,EAAQoE,aACZpE,EAAQ2nC,YACTovD,EAAAA,EAAAA,IAA8Bx8F,EAAQS,EAAQgF,EAAQoE,WAE3DnJ,WACAojF,iBACA2Y,aAAkC,WAApBx3F,EACduf,WACAyuE,kBAAkB+B,EAAAA,EAAAA,IAAuBh1F,EAAQyF,GACjDi3F,kBAAkBzH,EAAAA,EAAAA,IAAuBj1F,EAAQyF,GACjDk3F,sBAAuB38F,EAAO6X,SAASC,MAAM6kF,sBAC7CC,oBAAoBC,EAAAA,EAAAA,IAAyB78F,GAC7CwsB,kBAAmBkvE,GACnBtvD,mBAAoBpsC,EAAOosC,mBAC3B4B,iBAAiBhB,EAAAA,EAAAA,IAAevnC,QAAW5E,GAAYksC,EAAAA,EAAAA,IAAsB/sC,EAAQS,GACrFgC,gBAAiBk5F,IAAmBl5F,EAAgBk5F,GAAgB/5F,IACpE+qC,0BACAivD,qBACAkB,oBAAoCj8F,IAApBonB,GAAiCjoB,EAAO23C,eAAe1vB,IAAkBmD,UACzF2xE,qBAAqCl8F,IAApBonB,EAAgCjoB,EAAO23C,eAAe1vB,IAAkBnkB,UAAOjD,EAChGwvB,WAAWrJ,EAAAA,EAAAA,IAA2BhnB,GACtC06F,oBACAoB,gBACAjF,eAAgB72F,EAAO6vB,oBACvBgsE,gBACAI,oBACAe,uBAAwBh9F,EAAO6X,SAASC,MAAMmlF,aAC9Cd,gCACAe,cAAe11F,QAAQ4yF,GAAc+C,cACrCC,qBAAqBxvD,EAAAA,EAAAA,IAA+B5tC,EAAQ,mBAC5Dq9F,oBAAoBzvD,EAAAA,EAAAA,IAA+B5tC,EAAQ,sBACtDw6F,GAAiBwB,KAAe,CAAE91F,aACnCoH,GAAc,CAAE6vE,gBAAgBmgB,EAAAA,EAAAA,IAAqBt9F,EAAQyF,EAA6B,cAApBR,OAC5C,iBAAnB0+E,GAA+B,CAAEA,qBACxC/P,GAAa,CACfC,iBACAC,mBACA9pE,uBAEH,GA9Jei2C,EA9hCuB7/C,IAkFrC,IAlFsC,QAC1CqF,EAAO,cACP00F,EAAa,6BACboD,EAA4B,8BAC5BtiB,EAA6B,8BAC7BC,EAA6B,MAC7B5c,EAAK,UACLyO,EAAS,WACT6sB,EAAU,eACVD,EAAc,WACd6D,EAAU,UACVjgB,EAAS,gBACT3C,EAAe,YACf7G,EAAW,eACX+lB,EAAc,UACdzpE,EAAS,cACTotE,EAAa,uBACbC,EAAsB,sBACtB7D,EAAqB,eACrBiD,EAAc,gBACdC,EAAe,aACfliB,EAAY,MACZr5C,EAAK,gBACL84D,EAAe,OACfp0F,EAAM,cACNs0F,EAAa,aACbC,EAAY,UACZz3D,EAAS,YACT43D,EAAW,gBACXC,EAAe,aACf75E,EAAY,mBACZ85E,EAAkB,eAClB3d,EAAc,eACdwG,EAAc,kBACdx2C,EAAiB,YACjBgoC,EAAW,gBACXknB,EAAe,UACfzoB,EAAS,eACTC,EAAc,iBACdC,EAAgB,oBAChB9pE,EAAmB,aACnBqwF,EAAY,eACZr1B,EAAc,cACdg1B,EAAa,UACbtkC,GAAS,QACThnB,GAAO,SACPwmC,GAAQ,aACR57C,GAAY,UACZ4hE,GAAS,cACTG,GAAa,oBACbC,GAAmB,eACnBzE,GAAc,cACdqG,GAAa,eACbjoB,GAAc,WACdnT,GAAU,gBACVy6B,GAAe,SACf77F,GAAQ,gBACRi7F,GAAe,mBACfvvD,GAAkB,gBAClB4B,GAAe,gBACfvrC,GAAe,wBACfkqC,GAAuB,gBACvB1nC,GAAe,aACfw3F,GAAY,SACZj4E,GAAQ,cACRs/D,GAAa,iBACbmP,GAAgB,iBAChByJ,GAAgB,mBAChBE,GAAkB,sBAClBD,GAAqB,kBACrBnwE,GAAiB,kBACjBovE,GAAiB,qBACjB7gB,GAAoB,kBACpB2f,GAAiB,aACjBoB,GAAY,aACZD,GAAY,iBACZI,GAAgB,uBAChBe,GAAsB,6BACtBb,GAA4B,oBAC5BiB,GAAmB,mBACnBC,GAAkB,2BAClBliB,IACD/6E,EACC,MAAM,uBACJ8L,GAAsB,qBACtB+rD,GAAoB,uBACpB7rD,GAAsB,sBACtBuxF,GAAqB,iBACrB/zF,KACEkP,EAAAA,EAAAA,MAGE+oC,IAAMvB,EAAAA,EAAAA,IAAuB,MAE7Bs9C,IAAkBt9C,EAAAA,EAAAA,IAAuB,MAEzC+0B,IAAmB/0B,EAAAA,EAAAA,IAAuB,MAE1Cu9C,IAAmBv9C,EAAAA,EAAAA,IAAO,GAE1Bp7C,IAAOo5C,EAAAA,GAAAA,MAENw/C,GAAuBC,KAA0BxgD,EAAAA,EAAAA,KAAS,IAC1DygD,GAAwBC,GAAoBC,KAAqBx9C,EAAAA,GAAAA,MAClE,SAAEO,KAAaC,EAAAA,EAAAA,OAErBm6B,EAAAA,GAAAA,IAAeuiB,GAAiBL,GAEhC,MAAM,kBACJv9B,GAAiB,oBACjBgc,GAAmB,wBACnB/b,GACAC,kBAAmBgB,GAAa,uBAChCf,GAAsB,sBACtBC,KACEC,EAAAA,GAAAA,GAAuBxe,GAAKv1C,EAAAA,IAAgB2oE,IAAgB,EAAMv3C,EAAAA,KAEtEqe,EAAAA,EAAAA,KAAU,KACJikB,IACF5zD,IACF,GACC,CAAC4zD,GAAmB5zD,KAEvB,MAAMovE,GAAwBZ,GAAmB,GAC1CltB,GAAS+tB,KAAa/6B,EAAAA,GAAAA,GAAQ86B,KACrCz/B,EAAAA,EAAAA,KAAU,KACJy/B,IAIJlyE,WAAWmyE,GAzIU,GAyICb,EAAmC,GACxD,CAACA,EAAiBa,GAAWD,KAEhC,MAAM,qBAAEjvB,KAAyBC,EAAAA,GAAAA,GAC/BkB,IAAWqmB,OACXlzE,EACA26E,KAA0BzH,GAC1B,IAIAnyE,GAAIsF,GAAS,OAAEzG,GAAM,YAAEmrE,GAAW,SAAEh3D,GAAQ,qBAAEsT,IAC5CziB,GAEJs2C,EAAAA,EAAAA,KAAU,KACR,IAAKv3B,GAAU,OACf,MAAM5iB,EAAK08D,EAAQA,EAAMiN,YAAY3pE,GAAKsF,GAE1C,MAAO,KACLi0E,GAA2B,CAAEG,0BAA2B,CAAC15E,GAAK25E,WAAW,GAAO,CACjF,GACA,CAACjd,EAAO95C,GAAUtd,GAAWi0E,KAEhC,MAAMx3D,IAAUqpB,EAAAA,EAAAA,IAAevnC,GACzBunE,IAAQC,EAAAA,EAAAA,IAAaxnE,GACrB2tC,GAAkC,cAApBnuC,IAAmCQ,EAAQ2tC,YACzD+qD,IAAWC,EAAAA,EAAAA,IAAe34F,KAAao1F,EACvCwD,GAAY72F,QAAQglB,KAA0C,WAApBvnB,GAC1Cq5F,IAAgBC,EAAAA,EAAAA,IAAsB94F,GACtC+4F,GAAmBF,KAAkBjD,IAAiBC,IACtDmD,GAAe9C,IAAiBzwD,aAAcwzD,EAAAA,EAAAA,IAAkB/C,GAAgBzwD,WAChF4hC,GACJlB,MACK5G,GAAkB5xB,MACnB4mD,IACApuB,GAAY+yB,sBACZL,GAEA1zB,GAAUpjE,QAAQ82D,IAAUA,EAAO/4D,SAASpF,OAAS,IACrDm+D,GAAO/4D,SAASioC,MAAMoxD,GAA4C,IAApC92F,OAAOC,KAAK62F,EAAIxxF,SAASjN,SACvD0+F,GAA4B1xD,IAAsBuwD,EAClDoB,GAA2B3xD,IAAsB0sD,EACjDzkB,QAA6Cv0E,IAAxBm7E,GACrB+iB,KACF3pB,IAAsBH,IAAkBolB,GACtCyE,IAEAE,GAAatpC,KAActiB,IAAe3tC,EAAQw5F,sBAAwB5C,EAC1E6C,GAAW13F,QAAQi1F,IACnB7wB,KACEA,GAAYuzB,eAAkBn6B,IAAmBgI,IAAUgtB,IAC5DpuB,GAAYwzB,eAGbC,GAAexD,IAAgBsC,GAE/BnpB,IAAgBtzB,EAAAA,EAAAA,KAAY,CAAC/vC,EAAkD9H,KACnFqC,GAAuB,CACrBhF,aACA2C,eACI8H,GAAGu6C,UAAY,CAAEjgD,WAAW,MAC5B2+D,IAAW,CAAE5+D,gBAAiBsyD,EAAO/4D,SAASC,KAAIoI,IAAA,IAAC,GAAEhM,GAAIgM,EAAA,OAAKhM,CAAE,MACpE,GACD,CAACsK,GAAwBhF,GAAW0jE,GAAStM,IAE1CghC,GAAgB9E,EAAgBt0F,OAASrF,EACzC0+F,GAAyB/3F,SAASs2F,KAA0B51E,IAAwB60E,IAGpFyC,GAD2B5zB,KAAgB5G,GAAkBg1B,IAAkBsF,IACvC7E,EAAe6E,GACvDG,GAAa7zB,GAAc6uB,EAAe6E,IAE1C,gBACJjmC,GAAe,YACfD,GAAW,kBACX8G,GAAiB,kBACjBgX,GAAiB,yBACjBC,GAAwB,gBACxBriB,GAAe,wBACfsiB,GAAuB,iBACvB5nB,GAAgB,SAChBmmB,GAAQ,uBACRH,GAAsB,8BACtBkC,IACE3C,GACFC,GACAnzB,GACA36C,GACA0jE,EACApjE,QAAQytE,IACRztE,QAAQ0tE,IACR1tE,QAAQ2tE,GACRjU,GACAjB,GACAx/D,GACA20E,GACAC,GACArI,EACA8xB,KAGI,kBACJY,GAAiB,kBACjBC,GAAiB,kBACjBC,GAAiB,iBACjBC,GAAgB,iBAChBpS,GAAgB,gBAChBqS,GAAe,sBACfC,GAAqB,gBACrBC,GAAe,uBACfC,GAAsB,iBACtBC,GAAgB,gBAChBC,GAAe,mBACfvL,GAAkB,eAClBwL,GAAc,mBACdC,GAAkB,cAClBC,GAAa,YACbC,GAAW,qBACXC,GAAoB,6BACpBC,GAA4B,qBAC5BC,ICzgBW,SACbx7F,EACA8vE,EACAvvE,EACAhF,EACAC,EACAysC,EACA2/B,EACA15B,EACA6mD,EACA37B,EACAkhC,EACAC,EACAz8D,EACA84D,GAEA,MAAM,SACJj4F,EAAQ,iBAAEwI,EAAgB,aAAE7D,EAAY,gBAAE+vE,EAAe,gBAAEooB,EAAe,iBAC1E13E,EAAgB,qBAAEyrE,EAAoB,aAAEkM,EAAY,gBAAEt1F,EAAe,uBAAEu1F,EAAsB,yBAC7FC,IACEhoF,EAAAA,EAAAA,OAGFlX,GAAIsF,EAAS,YAAE0kE,EAAW,iBAAE3qD,EAAgB,cAAE84E,EAAa,oBAAEv4E,EAAmB,UAAE3X,GAChFpE,EAEEi6F,GAAoBh+C,EAAAA,EAAAA,KAAY,KAC/B89C,GAIL37F,EAAS,CAAEjC,GAAI49F,EAAW59F,IAAK,GAC9B,CAAC49F,EAAY37F,IAEV87F,GAAoBj+C,EAAAA,EAAAA,KAAY,KAC/B+9C,EAMD3yB,GAAelB,GAAam1B,cAC9Bv4F,EAAa,CAAE/H,OAAQg/F,EAAW79F,GAAIsF,UAAW0kE,EAAYm1B,gBAE7Dl9F,EAAS,CAAEjC,GAAI69F,EAAW79F,KAR1ByK,EAAiB,CAAE5G,QAASP,EAAK,eASnC,GACC,CACD4nE,EAAatkE,EAAcojE,EAAa1mE,EAAMrB,EAAU47F,EAAYpzF,IAGhEuzF,GAAoBl+C,EAAAA,EAAAA,KAAY,KAC/B1e,GAILn/B,EAAS,CAAEjC,GAAIohC,EAAUphC,IAAK,GAC7B,CAACohC,EAAWn/B,IAETg8F,GAAmBn+C,EAAAA,EAAAA,KAAY,KACnCl5C,EAAa,CACX/H,OAAQw5F,GAAwBF,EAAgBA,EAAgBt5F,EAChEC,WACAwG,UAAW+Z,EACXlX,eAAgBkwF,GAAwBF,OAAgBl5F,EAAYqG,EACpEjF,mBAAmB,GACnB,GACD,CAACuG,EAAcyxF,EAAsBF,EAAet5F,EAAQC,EAAUugB,EAAkB/Z,IAErFumF,GAAmB/rC,EAAAA,EAAAA,KAAY,KACnC62B,EAAgB,CACd93E,SACAC,WACAgZ,QAASxS,EACTuB,OAAQ2qC,EAAcqmC,EAAAA,GAAAA,gBAAoCA,EAAAA,GAAAA,QAC1D,GACD,CAACh5E,EAAQC,EAAUwG,EAAWqxE,EAAiBnlC,IAE5C0sD,GAAkBp+C,EAAAA,EAAAA,KAAY,KAClCi/C,EAAgB,CAAElgG,SAAQyG,aAAY,GACrC,CAACzG,EAAQyG,EAAWy5F,IAEjBZ,GAAwBr+C,EAAAA,EAAAA,KAAas/C,IACzCzoB,EAAgB,CACd93E,SACAC,WACAgZ,QAASsnF,EACTv4F,OAAQ2qC,EAAcqmC,EAAAA,GAAAA,eAAmCA,EAAAA,GAAAA,OACzD,GACD,CAACh5E,EAAQC,EAAU63E,EAAiBnlC,IAEjC+sD,GAAkBz+C,EAAAA,EAAAA,KAAY,KAClCz4B,EAAiB,CAAEjkB,WAAY,CAACkC,IAAa,GAC5C,CAACA,EAAW+hB,IAET2rE,GAAqBlzC,EAAAA,EAAAA,KAAY,KACrCgzC,EAAqB,CAAEj0F,SAAQyG,aAAY,GAC1C,CAACwtF,EAAsBj0F,EAAQyG,IAE5Bk5F,GAAiB1+C,EAAAA,EAAAA,KAAal7B,IAClCo6E,EAAa,CAAEngG,SAAQyG,YAAWsf,WAAU,GAC3C,CAAC/lB,EAAQyG,EAAW05F,IAEjBP,GAAqB3+C,EAAAA,EAAAA,KAAY,KACrCp2C,EAAgB,CAAER,WAAYrK,EAAQoJ,aAAY,GACjD,CAACyB,EAAiB7K,EAAQoJ,IAEvBy2F,GAAgB5+C,EAAAA,EAAAA,KAAY,KAChC,GAAI4c,GAASA,EAAM/4D,SAAU,CAC3B,MAAMP,EAAas5D,EAAM/4D,SAASC,KAAIpF,IAAA,IAAC,GAAEwB,GAAIxB,EAAA,OAAKwB,CAAE,IACpD0J,EAAgB,CAAER,WAAYrK,EAAQuE,cACxC,MACEsG,EAAgB,CAAER,WAAYrK,EAAQuE,WAAY,CAACkC,IACrD,GACC,CAACo3D,EAAOhzD,EAAiB7K,EAAQyG,IAE9Bq5F,GAAc7+C,EAAAA,EAAAA,KAAY,KAC9Bl5C,EAAa,CACX/H,SAAQC,SAAUmB,EAAAA,GAAgBqF,aAClC,GACD,CAACsB,EAAc/H,EAAQyG,IAEpBs5F,GAAuB9+C,EAAAA,EAAAA,KAAY,KACnCvU,EACF3kC,EAAa,CACX/H,OAAQmrE,EAAa9gE,WAAajB,YAAWC,cAAerJ,EAAQyG,UAAW0kE,EAAawzB,gBAK5FnF,GAAwBF,EAC1B8G,EAAuB,CACrBpgG,OAAQs5F,EACRr5F,SAAU8gB,EACVta,UAAW0kE,EAAawzB,gBAG1B52F,EAAa,CACX/H,OAAQmrE,EAAa9gE,WAAa5D,UAAW0kE,EAAawzB,eAE9D,GACC,CACDjyD,EAAmB8sD,EAAsBF,EAAevxF,EAAcojE,EAAa/hE,EAAWpJ,EAC9FogG,EAAwBr/E,IAGpBy/E,GAAsBv/C,EAAAA,EAAAA,KAAa/vC,IACvCA,EAAE6yC,kBAEFwwB,EAAcrjE,EAAG9H,EAAU,GAC1B,CAACmrE,EAAenrE,IAwBnB,MAAO,CACL61F,oBACAC,oBACAC,oBACAC,mBACApS,mBACAqS,kBACAC,wBACAC,gBAAiBiB,EACjBhB,wBA/B6Bv+C,EAAAA,EAAAA,KAAa/vC,IAC1CA,EAAE6yC,kBAEFs8C,EAAyB,CAAErgG,SAAQmB,GAAIsF,GAAY,GAClD,CAACzG,EAAQyG,EAAW45F,IA4BrBZ,kBA1BuBx+C,EAAAA,EAAAA,KAAY,KACnC79C,EAAS,CACPjC,GAAI6D,EAAQhF,OACZC,SAAU+E,EAAQ7D,IAClB,GACD,CAAC6D,EAAQhF,OAAQgF,EAAQ7D,GAAIiC,IAsB9Bs8F,kBACAvL,qBACAwL,iBACAC,qBACAC,gBACAC,cACAC,uBACAC,6BAA8BQ,EAC9BP,sBA5B2Bh/C,EAAAA,EAAAA,KAAY,KAClCo6C,GACLtzF,EAAa,CACX/H,OAAQw5F,GAAwBF,EAAgBA,EAAgBt5F,EAChEC,SAAUo7F,EAAal6F,GACvBsF,aACA,GACD,CAACzG,EAAQ+H,EAAcyxF,EAAsB6B,EAAc50F,EAAW6yF,IAuB3E,CDwUMmH,CACFh8F,GACA8vE,GACAvvE,EACAhF,GACAC,GACAysC,EACA2/B,GACA15B,GACA4mD,EACA17B,EACAkhC,GACAC,GACAz8D,EACA84D,KAGF//C,EAAAA,EAAAA,KAAU,KACH8+B,GAID0kB,IAA0BxC,GAC5BnzF,IACF,GACC,CAACA,GAAkBixE,EAAckiB,EAAiBwC,KAErD,MAAM4B,IAAqB3hD,EAAAA,GAAAA,GACzB,4BACAs6C,GAAkB,iBAClB3kB,GAAe,eACfsoB,GAAiB,gBACjBC,GAA0B,0BAC1B7D,GAAyB,yBACzBhf,GAAgB,eAChB7N,IAAS,MACTxlE,QAAQ/B,EAAQ4mB,QAAU,YAC1B5mB,EAAQy4E,UAAY,aACpBigB,IAAY,YACZn+B,IAAqB,gBACrB4T,IAAcE,GAAoB,UAClCumB,GAAgB,gBAChB50F,EAAQ0b,YAAc,cACtBgsB,GAAqB,uBACrBy9B,IAAW,WACXnlE,EAAQirC,kBAAoB,qBAC5BoxB,IAAc,cACdmT,IAAkB,uBAClB2lB,IAAgBhB,GAAc,gBAC9BpyF,QAAQ/B,EAAQsmE,gBAAkB,qBAClC4J,IAAY,YACZppB,GACAwnB,GAAe,iBACdvsE,QAAQ/E,KAAoBu7F,KAA2B,wBAGpD,KACJl6F,GAAI,MAAE61B,GAAK,MAAE2Z,GAAK,MAAEoqB,GAAK,MAAEzxC,GAAK,SAAE/b,GAAQ,QAAE0B,GAAO,QAAEu2E,GAAO,KAAE1hE,GAAI,QAAE8mE,GAAO,QAAEntD,GAAO,SAAEjC,GAAQ,OAAElpB,GAAM,KAAEi+E,KACtG3/C,EAAAA,EAAAA,IAAkB9tC,GAEhB27F,GE5kBO,SAAyBt9F,GACtC,MAAOgtB,EAAUuwE,IAAe9jD,EAAAA,EAAAA,MAQhC,OANAmW,EAAAA,GAAAA,IAAc,KACR5vD,GzCeDoW,eAA8BpW,GAA6C,IAA/Bw9F,EAASphG,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG43E,GAG7D,OAFKC,UAAcC,GAAuBE,cACrBH,GAAQ14C,QAAQ,CAAEgQ,KAAM,iBAAkBkyD,KAAM,CAACz9F,EAAMw9F,IAE9E,CyClBME,CAAe19F,GAAM8S,KAAKyqF,EAC5B,GACC,CAACv9F,IAEGgtB,CACT,CFkkB2B2wE,CAAgBzE,GAAyBl5F,IAAMA,UAAOjD,IAEvEuqB,UAAWs2E,GAAoB,eAAEC,IGhlB5B,SACb1F,EACAx7F,EACAyG,EACA06F,GAEA,MAAM,kBAAEC,IAAsB/oF,EAAAA,EAAAA,MACxBgpF,EAAqBF,EACvB3F,GAAkB8F,WAAWH,KAAyB16F,QAAarG,GAEjE,UAAEuqB,EAAS,KAAEtnB,GAASg+F,GAAsB,CAAC,EAQnD,OANA/lD,EAAAA,EAAAA,KAAU,KACHj4C,GAASsnB,IAAaw2E,GACzBC,EAAkB,CAAEphG,SAAQuE,WAAY,CAACkC,GAAY6jB,eAAgB62E,GACvE,GACC,CAACnhG,EAAQqD,EAAMsnB,EAAWlkB,EAAW06F,EAAuBC,IAExD,CACLz2E,YACAu2E,eAAgB79F,EAEpB,CH0jB8Dk+F,CAC1D/F,GAAkBx7F,GAAQyG,GAAWi1F,IAGjC8F,IAAyBj5B,EAAAA,GAAAA,GAAY24B,IAAgB,GAErDO,GAAcR,GAAwBO,IAA0Bn+F,GAAQ69F,GACxEQ,GAAwBR,IAAkBM,IAE1C,UAAErnD,IAAc3lC,IAAU,CAAC,EAE3BmtF,IAAiC51E,IAAsB0wE,IAAiBxnC,IAAa/xC,MACrFm7E,IACmB,WAApB75F,KACCu4F,EACA6E,GAAoB71E,KAAsBsyE,IAAgD,WAApB75F,KACtEu4F,EACA8E,IAA2Bh2F,EAAAA,KAAiBsuC,KAAcq6B,IAAkBjnC,KAC5E8wD,GAEAyD,GInmBD,SACL98F,GA0BA,IAzBA,aACE45F,EAAY,cACZf,EAAa,cACbb,EAAa,YACb3wB,EAAW,UACXuxB,EAAS,gBACT/D,EAAe,YACfkI,EAAW,gBACXC,EAAe,aACfhE,EAAY,gBACZiE,EAAe,uBACfnD,GAaDr/F,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEL,MAAM,KACJ4D,EAAI,MAAE61B,EAAK,MAAE2Z,EAAK,MAAEoqB,EAAK,MAAEzxC,EAAK,SAAE/b,EAAQ,KAAEuW,EAAI,QAAE8mE,EAAO,QAAEpF,EAAO,SAAEhqD,EAAQ,QAAEiC,IAC5EmT,EAAAA,EAAAA,IAAkB9tC,GAEhBk9F,EAAa,CAACC,EAAAA,KACdC,EAAUlpE,GAAS2Z,GAASnV,GAAYiC,GAASsX,cACjDi1B,EAAU7oE,GAA2B,UAAnBq6B,GAAUr8B,MAAoB4gG,EAChDI,EAAoBD,IAAYl2B,EAChCo2B,EAAWv7F,QAAQ/B,EAAQmP,UA4FjC,OA1FKiuF,GAAWp9F,EAAQu9F,gBACtBL,EAAWv8F,KAAK,cACZX,EAAQu9F,gBAAkBC,EAAAA,KAC5BN,EAAWv8F,KAAM,cAAaX,EAAQu9F,mBAE/Br2B,GACTg2B,EAAWv8F,KAAK,QAGdq8F,GACFE,EAAWv8F,KAAK,qBAGdk4F,IACFqE,EAAWv8F,KAAK,gBACZktC,GAAO4vD,SACTP,EAAWv8F,KAAK,SAGdo8F,GACFG,EAAWv8F,KAAK,iBAGhBy8F,EACFF,EAAWv8F,KAAK,SACPs3D,EACTilC,EAAWv8F,KAAK,SACP6lB,GACT02E,EAAWv8F,KAAK,SACZm5F,GACFoD,EAAWv8F,KAAK,6BAET8J,EACTyyF,EAAWv8F,KAAK,YACP+hF,EACTwa,EAAWv8F,KAAK,WACPqgB,EACTk8E,EAAWv8F,KAAK,QACPmnF,IACToV,EAAWv8F,KAAK,aAEZmnF,EAAQ5zD,OAAS4zD,EAAQj6C,QAC3BqvD,EAAWv8F,KAAK,UAIhBg6B,IAAYA,EAAQsX,eACtBirD,EAAWv8F,KAAK,WAGd0mE,GACF61B,EAAWv8F,KAAK,gBAGdi5F,GACFsD,EAAWv8F,KAAK,iBAGdi4F,GACFsE,EAAWv8F,KAAK,eAGdq4F,GACFkE,EAAWv8F,KAAK,iBAGd28F,GACFJ,EAAWv8F,KAAK,cAGdk0F,GACFqI,EAAWv8F,KAAK,qBAGbk4F,IACHqE,EAAWv8F,KAAK,cAEZy8F,GAAWL,GACbG,EAAWv8F,KAAK,mBAGdi5F,GAAgBvyB,GAAei2B,IAAaD,GAAqBxI,IACnEqI,EAAWv8F,KAAK,wBAGdq3F,IAAkB9jE,GAAUwE,IAAawuC,IAAam2B,IACxDH,EAAWv8F,KAAK,iBAIbu8F,EAAWj8F,KAAK,IACzB,CJke2By8F,CAAsB19F,EAAS,CACtD45F,gBACAf,iBACAb,gBACA3wB,eACAuxB,UAAWA,KAAcb,EACzBlD,kBACAkI,YAAah2E,IAAqBA,GAAkBC,cAAgB,EACpEg2E,gBAAiBzD,IAAcE,GAC/BT,gBACAiE,gBAAoC,YAAnBvkE,IAAUr8B,QAAuB2uF,EAAAA,EAAAA,IAAiBhrF,GAAS0H,EAAAA,EAAAA,OAC5EoyF,4BAGI6D,GAAeb,GAAiB93F,SAAS,gBACzCkiE,IAAU02B,EAAAA,EAAAA,IAAe59F,GACzB69F,IAAY9gB,EAAAA,GAAAA,IAAmB/8E,EAAQu9F,gBAE7C,IAAIO,GAWAC,GATFD,GADE3oD,IAEOkkD,GADM,QAGNnyB,IAAY4gB,IAAYiR,GAGlB,aAFA,UAMbC,GACEH,KAAmB3kE,IAAS2Z,MAAWq5B,GACzC62B,GAAoB,UACX12B,IACTy2B,GAAe,aACfC,GAAoB,UAEpBA,GAAoB,SAGtBA,GAAoB,OAGtB,MAAMC,GAA+CnF,GAAgB,UAAY,cAEjFz3B,EAAAA,GAAAA,GACEmzB,GAAiBv0F,EAAQs0F,cAAgBt0F,EAAQs0F,cAAgBt5F,GACjE09F,GAAW14F,EAAQwb,sBAAmBpgB,EACtCmgB,EACAvb,EAAQ7D,IAGV+xE,GACE9xB,GAAK36C,EAAWzG,GAAQmzE,EAAWC,EAAgBC,EAAkB9pE,EAAqB+pE,GAG5F,MAAMqJ,GAAa1nB,IAAajwD,EAAQi+F,kBACjC52B,IAAelB,IAAa83B,sBAC9B7iG,GK9pBQ,SACbs1D,EACAinB,IAEAvoB,EAAAA,EAAAA,KAAgB,KACTuoB,IAEL7I,EAAAA,EAAAA,KAAoB,KAClB,MAAMl/D,EAAQ8gD,EAAa3lC,QAASyrB,cAA8B,uBAAuBmZ,YACzF,GAAK//C,EAEL,MAAO,KACL8gD,EAAa3lC,QAASkvB,MAAMgV,YAAY,2BAA6B,GAAEr/C,MAAU,CAClF,GACD,GACD,CAAC8gD,EAAcinB,GACpB,CL+oBEumB,CAAe9hD,GAAKu7B,IAEpB,MAAMwmB,GAAsBnG,EAEtBoG,IAAeniD,EAAAA,EAAAA,KAAaoiD,IAChC,MAAMC,EAAalG,GAAiBrtE,QAE9BwzE,EAAYF,EAAMG,YAAY3uF,OAGpC,GAFAuoF,GAAiBrtE,QAAUwzE,GAEvBE,EAAAA,GAAAA,QAAwBH,GAAcC,GAAaD,EAAY,OAEnE,MAAMpiB,EAAYmiB,EAAMjtB,OAAO1C,QAAwB,gBACvD,IAAKwN,EAAW,OAEhB,MAAMwiB,EAAaH,EAAYD,GACzB,aAAEK,EAAY,aAAEC,EAAY,UAAEC,GAAc3iB,EACtBj0E,KAAKwK,MAAMmsF,EAAeC,EAAYF,GACfD,GA7ZjB,GAgahCv6F,IACF,GACC,CAACA,KAEE26F,IAAkBxuB,EAAAA,GAAAA,GAAqB8tB,GAAc,CAACA,IAna1C,KAmasE,IAExFW,EAAAA,GAAAA,GAAkB3iD,GAAK0iD,IAAkBX,KAEzC7nD,EAAAA,EAAAA,KAAU,KACR,MAAM0oD,EAAe7G,GAAgBptE,QACjCorE,IAAqB6I,IAAgBC,EAAAA,GAAAA,GAAoBD,IAC3D9G,GAAsB,CAAE34F,WAAY,CAACkC,KACvC,GACC,CAAC00F,GAAmB10F,GAAWy2F,KAElC,IACIgH,GACAC,GACAC,GAHAnlD,GAAQ,GAIRolD,IAAiB,EACrB,MAAMrQ,IAAcp1C,EAAAA,EAAAA,KAAQ,IACnBurB,GACHkE,GAAqB9B,GAAOxlE,QAAQslE,IAActlE,QAAQulE,GAAYzO,EAAQrd,SAC9EpgD,GACH,CAAC+pE,GAASoC,GAAOF,GAAaC,EAAWzO,EAAOrd,KAE7C8jD,GAAej4B,GAAc,GAAK,EACxC,IAAKlC,KAAYjxC,IAAS2Z,IAASlT,IAASsX,eAAgB,CAC1D,IAAIriC,EACJ,GAAIskB,GACFtkB,EAAQw3D,GAAyBpnE,EAASqnE,GAAaC,EAAW9rB,IAAU5rC,WACvE,GAAIi+B,GAEPj+B,EADEi+B,GAAM4vD,QACApN,GAAAA,GAEAjpB,GAAyBpnE,EAASqnE,GAAaC,EAAW9rB,IAAU5rC,WAEzE,GAAI+qB,IAASsX,eAClBtX,GAAQsX,cAAcriC,OAAS+qB,GAAQsX,cAAcpiC,OACpD,CACD,MAAQD,MAAO2vF,EAAc1vF,OAAQ2vF,GAAkB7kE,GAAQsX,cAC/DriC,GAAQ6vF,EAAAA,GAAAA,IAAmC,CACzC7vF,MAAO2vF,EACP1vF,OAAQ2vF,EACRE,eAAgBn4B,GAChBF,eACAC,YACA9rB,cACC5rC,KACL,CAEIA,IACEA,GAAS+sF,GAAgCh2B,GAAgCC,MAC3Ew4B,GAAexvF,GAEjBsvF,GAAkBj3F,KAAKC,IAAI++D,GAAiBllE,QAAQ06F,IAAcE,IAAgC/sF,GAC9F+qB,IAASsX,eAAiBitD,GAAkBtvF,EA3dnB,KA4d3ByvF,IAAiB,GAGvB,MAAWrQ,KACTkQ,GAAkBj3F,KAAKC,IACrB++D,GAAiBllE,QAAQ06F,IAAcE,IAAgC3N,GAAYlhB,eAAel+D,OAEhGsvF,GAAkBlQ,GAAYlhB,eAAel+D,MAnelB,KAoe7ByvF,IAAiB,IAIrB,GAAIH,GACFjlD,GAAS,UAASilD,GAAkBI,OACpCH,GAAoBD,GAAkBjL,QACjC,GAAI9nF,KAAYytF,GAAc,CACnC,MAAM,MAAEhqF,IAAUyqE,EAAAA,GAAAA,IAAqBluE,GAASqvC,IAChDvB,GAAS,UAASrqC,EAAQ0vF,OAC1BH,GAAoBvvF,EAAQqkF,EAC9B,CAoBA,SAASjzF,GAAkB2+F,GACzB,OACEzoD,EAAAA,GAAAA,cAAC0oD,GAAAA,EAAW,CACV5/F,QAASA,EACTk8F,eAAgBxF,GAA+BgG,QAAwBthG,EACvEukG,eAAgBA,EAChB9B,UAAWA,GACXpI,UAAWA,GACX/lB,YAAaA,EACb8F,8BAA+BA,EAC/BC,8BAA+BA,EAC/BoqB,sBAAuBhH,IAG7B,CAEA,SAAShhB,KACP,GAAKtvC,GAEL,OACE2O,EAAAA,GAAAA,cAAA,OACErsB,WAAWkvB,EAAAA,GAAAA,GAAe,iBAAkBg2B,KAA2B/yE,IAAmB,WAC1F47C,QAAS+4B,GACTv1B,IAAKwzB,IAEL14B,EAAAA,GAAAA,cAACq7C,GAAAA,EAAmB,CAClB3sD,SAAU2C,GACV8Q,KAAM26C,GACNrtD,mBAAoBA,GACpBqyC,oBAAqBvD,IAI7B,CAEA,SAASqqB,KACP,MAAMC,EACJ7oD,EAAAA,GAAAA,cAAC8oD,GAAW,CACVhgG,QAASA,EACT+e,SAAUA,GACV+4D,UAAWA,EACX/wD,kBAAmBA,GACnB2wD,eAAgBA,EAChBC,UAAWA,GACXC,mBAA0C,WAAtBmmB,GACpBlmB,0BACEglB,IAAqD,YAA1BmB,GAAsCnmB,QAA4Bz8E,EAE/FurC,mBAAoBA,GACpBoxC,aAAch2E,QAAQ20F,GAA+BgG,QAAwBthG,GAC7Ew9C,QAAS2hD,GACTviB,mBAAoBwiB,GACpBviB,aAAcwiB,KAIlB,MAA0B,WAAtBsD,GACKgC,EAIP7oD,EAAAA,GAAAA,cAAC+oD,GAAS,CACRjjG,gBAAiBA,GACjBgD,QAASk2F,GACTpD,aAAciN,EACdp5D,mBAAoBA,GACpByqD,eAAgBA,GAChBpY,oBAAqBvD,EACrBsd,iBAAkB9iC,GAClBosB,YAAasb,IAGnB,CA4VA,MAAMuI,GAAgBj3D,IAAWo+B,GAAcrnE,EAAQi+F,qBAAkB7iG,EACnE+kG,IAAevmD,EAAAA,EAAAA,KAAQ,IAAM86C,GAAexuF,MAAMk6F,GAAMA,EAAE50F,YAAW,CAACkpF,IAE5E,OACEx9C,EAAAA,GAAAA,cAAA,OACEkF,IAAKA,GACLjgD,IAAIq6E,EAAAA,EAAAA,IAAiBx2E,EAAQ7D,IAC7B0uB,UAAW6wE,GACX,kBAAiBj6F,GACjB4uD,YAAauD,GACbhb,QAAS+a,GACT8H,cAAehB,GACflK,cAAekhB,GACfjnB,aAAc6uC,GAA2BpnB,QAAgC72E,EACzEilG,YAAaxD,GAA0BxtC,QAAkBj0D,EACzDqvD,aAAeoyC,IAA2BxD,GAA4BtvC,QAAmB3uD,GAEzF87C,EAAAA,GAAAA,cAAA,OACEkF,IAAK+7C,GACLttE,UAAU,gBACV,kBAAiBppB,GACjB,uBAAsBo3D,EAAQA,EAAM/4D,SAAS+4D,EAAM/4D,SAASpF,OAAS,GAAGyB,QAAKf,EAC7E,qBAAoBy9D,EAAQA,EAAMiN,YAAY3pE,QAAKf,EACnD,0BAAyB4E,EAAQirC,uBAAoB7vC,EACrD,2BAA0B+6F,SAAqB/6F,EAC/C,iBAAgB2jB,SAAY3jB,EAC5B,gCAA4CA,IAAlB4E,EAAQ4mB,SAElC8gB,GACAwP,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,0BACZwxC,IAAcnlB,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,sBAG/BupE,GACCl9C,EAAAA,GAAAA,cAAA,OACErsB,WAAWkvB,EAAAA,GAAAA,GAAe,sCAAuC+8C,IAAmB,eACpFl+C,QAASoiD,IAERlE,IACC5/C,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,sBAIlBspE,GAjeL,WACE,MAAMmM,EAAmBvG,KAAcriE,EAAAA,EAAAA,IAASqiE,GAAW59F,IACrDuvF,EAAcqO,IAAcuG,EAAoBvG,QAAwB3+F,EACxEuwF,EAAcoO,KAAeuG,EAAoBvG,QAAwB3+F,EACzEmlG,GAAexG,IAAc5zB,GAAeA,GAAYE,oBAAiBjrE,EAE/E,OACE87C,EAAAA,GAAAA,cAAC+8B,GAAAA,EAAM,CACL56B,KAAMmC,GAAW,eAAiB,QAClCz9B,KAAM2tE,EACNpuF,KAAMquF,EACNttF,KAAMkiG,EACN1sE,aAAcA,GACd+kB,QAAU8yC,GAAcC,EAAcsO,QAAoB7+F,GAGhE,CAidmBolG,GACftpD,EAAAA,GAAAA,cAAA,OACErsB,WAAWkvB,EAAAA,GAAAA,GAAe,0BAA2B+iD,GAAiB93F,SAAS,SAAW,oBAE1FkyC,EAAAA,GAAAA,cAAA,OACErsB,UAAWiyE,GACX7iD,MAAOA,GACPnB,IAAI,QAEHuuB,KAAgB+xB,IACfliD,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,iBACZprB,GAAK,oBACLygG,IAAiBhpD,EAAAA,GAAAA,cAAA,QAAMrsB,UAAU,cAAciuB,IAAI,QAAQonD,KAjZxE,WACE,MAAMr1E,GAAYkvB,EAAAA,GAAAA,GAChB,gBACAstB,IAAe,oBACfuyB,IAAgB,iBAChByF,IAAkB,oBAEdtQ,EAAoBiJ,IAAkB9wB,KAAYG,KAAgBu1B,GAClE6D,GAAmB1mD,EAAAA,GAAAA,GACvB,eACA,WACiB,YAAjB+jD,IAA8B,YAC9BpmB,GAAkB,sBAGpB,OACExgC,EAAAA,GAAAA,cAAA,OAAKrsB,UAAWA,EAAW0lC,cAAemhB,GAA0B54B,IAAI,QA+P5E,WAME,GAJuB+/C,KAAkB1pF,MACtC+kF,MAFWhgE,IAAS2Z,IAASnV,KAEA09D,KAAkB/uB,IAAel4D,IAAY0lF,IACvEuE,IAA+BV,IAAYG,GAG/C,OAGF,IAAIvhB,EACAopB,GACA1G,IAAgBnB,IAAiB1pF,GAM1Bg3D,IAAaE,iBACtBiR,EAAcnR,GAAYE,iBAN1BiR,GAAc12E,EAAAA,EAAAA,IAAenB,GAAMu6F,IAE9B3yB,IAAgBE,KACnBm5B,EAAe,UAAQnpB,EAAAA,EAAAA,IAAgByiB,QAK3C,MAAM2G,EAAoB3G,IAAc,gBAAiBA,IAAcA,GAAWliE,YAC5E8oE,EAAkB5G,IAAc,cAAeA,IAAcA,GAAWpvE,UAE9E,OACEssB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,gBAAgBiuB,IAAI,OAChCw+B,EACCpgC,EAAAA,GAAAA,cAAA,QACErsB,WAAWkvB,EAAAA,GAAAA,GAAe,iCAAkC2mD,GAC5D9nD,QAASshD,GACTphD,IAAI,QAEH4b,EAAAA,GAAAA,GAAW4iB,IACVjQ,IAAes5B,GACfzpD,EAAAA,GAAAA,cAACgD,GAAAA,EAAW,CACVztC,WAAYk0F,EAAkBl0F,WAC9B6vC,UAAWC,EAAAA,IACXi5B,8BAA+BA,EAC/BC,8BAA+BA,KAGjCpO,KAAgBs5B,GAAqBC,GAAmB1pD,EAAAA,GAAAA,cAACsF,GAAAA,EAAW,MACrEw9C,IAAY6G,UAAY3pD,EAAAA,GAAAA,cAAC4pD,GAAAA,EAAQ,CAACD,SAAU7G,GAAW6G,YAEvDtjE,OAEDniC,EAh5BC,IAi5BJmiC,GACC2Z,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,QAAMrsB,UAAU,OAAOprB,GAAK,WAC5By3C,EAAAA,GAAAA,cAAA,QACErsB,UAAU,cACV+tB,QAASuhD,KAERzlC,EAAAA,GAAAA,GAAY,IAAGn3B,EAAUE,UAAW,GAAGvV,cAI7Ci+C,IAAa+yB,oBACZhiD,EAAAA,GAAAA,cAAA,QAAMrsB,UAAU,cAAciuB,IAAI,QAAQr5C,GAAK,mBAC7CO,EAAQmmE,aAAa83B,iBAAmBh1D,IAAWo+B,GACrDnwB,EAAAA,GAAAA,cAAA,QAAMrsB,UAAU,cAAciuB,IAAI,QAAQ94C,EAAQmmE,aAAa83B,iBAC7Dj+F,EAAQi+F,iBAAmBh1D,KAAYo+B,GACzCnwB,EAAAA,GAAAA,cAAA,QAAMrsB,UAAU,cAAciuB,IAAI,QAAQ94C,EAAQi+F,iBAChDhJ,KAAsB5tB,GACxBnwB,EAAAA,GAAAA,cAAA,QAAMrsB,UAAU,cAAciuB,IAAI,QAC/Bm8C,GAAkB7iC,aAAe3yD,GAChCw1F,GAAkBroD,QAAU,uBAAyB,8BAGvDxxC,EAGV,CAvUO2lG,GACAnH,IACC1iD,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,qBACZurE,IACCl/C,EAAAA,GAAAA,cAAC8pD,GAAS,CACRvgF,MAAO41E,GACPz9C,QAASqiD,GACTpwE,UAAU,kBAGb6tE,IACCxhD,EAAAA,GAAAA,cAAC+pD,GAAe,CACdjhG,QAASub,EACT07D,aAAc1P,IAAStX,GACvByf,YAAaA,EACbjvE,OAAQ40F,EACR7f,8BAA+BA,EAC/BC,8BAA+BA,EAC/B78B,QAASwhD,MAKhBjuF,IACC+qC,EAAAA,GAAAA,cAACgqD,GAAO,CACNlhG,QAASA,EACTg5E,oBAAqBxD,EACrBC,8BAA+BA,EAC/BwD,WAAYke,GACZtjE,aAAcA,GACdqlD,iBACE/sE,GAAQotE,YACNjE,GAAqBvqD,SAAWtpB,IAAa6zE,GAAqBvqD,SAC/D7M,UACF9iB,EACL+9E,WAAYye,GACZxe,aAAcof,GACdnf,aAAcof,KAGjBM,IAAoBlD,IACnB3+C,EAAAA,GAAAA,cAACiqD,GAAmB,CAClBrkB,cAAe+Y,GACfxZ,YAAaub,KAAsBlgE,EAAAA,EAAAA,IAAS18B,IAC5CusE,MAAOA,GACPyR,oBAAqBxD,EACrB3hD,aAAcA,GACd6oD,iBAAkBx+D,GAClBzc,UAAWA,GACXzG,OAAQA,GACRksC,wBAAyBA,KAG5B6xD,IAAoBnD,IACnB1+C,EAAAA,GAAAA,cAACkqD,GAAa,CACZvgG,MAAO+0F,GACPvZ,YAAaub,KAAsBlgE,EAAAA,EAAAA,IAAS18B,IAC5CusE,MAAOA,GACPyR,oBAAqBxD,EACrB3hD,aAAcA,GACd6oD,iBAAkBx+D,GAClBzc,UAAWA,GACXzG,OAAQA,GACRksC,wBAAyBA,KAG5Bi+B,IACCjuB,EAAAA,GAAAA,cAACmqD,GAAK,CACJxoC,MAAOA,EACPm2B,YAAaA,GACbhW,oBAAqBxD,EACrBjO,MAAOA,GACPmI,YAAaA,EACbqf,kBAAmBA,EACnBl7D,aAAcA,GACd+zD,aAAc0S,KAGjBnlD,IACC+B,EAAAA,GAAAA,cAACoqD,GAAgB,CACfthG,QAASA,EACTm1C,UAAWA,GACXn6C,OAAQA,MAGVmqE,IAAWjxC,IACXgjB,EAAAA,GAAAA,cAACyxC,GAAK,CACJ3oF,QAASA,EACTg5E,oBAAqBxD,EACrBlO,UAAWA,EACX2W,YAAauP,GACbtP,eAAgBA,EAChBE,qBAAsB2Q,EACtB1Q,cAAeA,GACf3O,YAAaA,EACbrI,YAAaA,GACbtrC,MAAOA,EACPoiD,YAAaihB,GACbxmD,QAASovC,GACT1J,eAAgB6Q,MAGlBhqB,IAAWt3B,IAASA,GAAM4vD,SAC1BvmD,EAAAA,GAAAA,cAACqqD,GAAU,CACTvhG,QAASA,EACTg5E,oBAAqBxD,EACrByI,YAAauP,GACb35D,aAAcA,GACdwqD,cAAeA,MAGjBlZ,IAAWt3B,KAAUA,GAAM4vD,SAC3BvmD,EAAAA,GAAAA,cAAC2xC,GAAK,CACJ7oF,QAASA,EACTw1E,8BAA+BA,EAC/BC,8BAA+BA,EAC/B0I,YAAaihB,GACb93B,UAAWA,EACX2W,YAAauP,GACb5M,YAAaqW,GACb/Y,eAAgBA,EAChBrqD,aAAcA,GACdwqD,cAAeA,GACf3O,YAAaA,EACbrI,YAAaA,GACbzuB,QAASovC,GACT1J,eAAgB6Q,MAGlBl3B,IAASzxC,KACT0wB,EAAAA,GAAAA,cAAC6kC,GAAAA,GAAK,CACJhgD,MAAOA,EACP/7B,QAASA,EACTgD,OAAQw+F,EAAAA,GAAAA,OACRtjB,eAAgBA,EAChBrqD,aAAcA,GACd4tE,aAAc/5D,EACd20B,WAAYA,GACZiL,UAAWA,EACXo6B,OAAQrH,GACRsH,aAAan7E,IAAW+gD,KAAShI,OAAoCnkE,EAAlBs/F,GACnDpc,eAAgB6Q,GAChB9Q,cAAeA,GACfgZ,eAAgBA,EAChBgB,sBAAuBA,GACvBuJ,cAAe7/F,QAAQu1F,GACvB70E,qBAAsBA,GACtBtc,aAAcupE,EACdmyB,oBAAqBvJ,GACrBwJ,cAAel3E,IAGlBngB,IACCysC,EAAAA,GAAAA,cAAC6qD,GAAAA,EAAQ,CACP/hG,QAASA,EACTg5E,oBAAqBxD,EACrByI,YAAauP,GACb0J,sBAAuBA,GACvBhZ,eAAgBA,EAChBujB,aAAc/5D,EACd20B,WAAYA,GACZurB,aAAcI,GACd1J,eAAgB6Q,GAChB9Q,cAAeA,KAGlBqE,IACCxrC,EAAAA,GAAAA,cAAC8qD,GAAO,CAACtf,QAASA,KAEnB1hE,IACCk2B,EAAAA,GAAAA,cAAC+qD,GAAI,CAACjiG,QAASA,EAASghB,KAAMA,GAAMmjE,WAAYwW,KAEjDlN,IACCv2C,EAAAA,GAAAA,cAACgrD,GAAI,CACHliG,QAASA,EACTwtF,iBAAkBA,GAClB35D,aAAcA,KAGjB8G,IAASsX,eACRiF,EAAAA,GAAAA,cAACirD,GAAmB,CAClBniG,QAASA,EACT6zB,aAAcA,KAIjBimE,IACC5iD,EAAAA,GAAAA,cAAA,KACErsB,WAAWkvB,EAAAA,GAAAA,GACT,iBACCs+C,IAAyB51E,IAAwB,uBAEpDq2B,IAAI,QAEFr2B,GAAuBhjB,GAAK,qBAC5B43F,GAAkBC,EAAkBpgD,EAAAA,GAAAA,cAACkrD,GAAAA,EAAY,CAACz6F,QAAS2vF,IAAsBA,IAKrFyB,IAAoB7xB,IACpBhwB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAW41E,EAAkB3nD,IAAI,QACnC93C,KACAi7F,IACC/kD,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,yBACbqsB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,gBACZ7pB,IAAkB,KAIP,YAAjB88F,IAA8BgC,MAIlChY,IACC5wC,EAAAA,GAAAA,cAACmrD,GAAO,CACNriG,QAASA,EACTg5E,oBAAqBxD,EACrBlO,UAAWA,EACX2W,YAAauP,GACb5M,YAAaqW,GACb5vB,YAAaA,GACbxzC,aAAcA,GACdwqD,cAAeA,GACf3O,YAAaA,EACb3zC,MAAOA,EACP6rD,aAAcI,GACdH,sBAAuBsH,KAG1Bx0D,KAAYA,GAAQsX,eACnBiF,EAAAA,GAAAA,cAACorD,GAAO,CACNtiG,QAASA,EACTo+E,qBAAsB2Q,EACtBvf,eAAgBA,GAChBnT,WAAYA,GACZtgC,MAAOA,EACPoiD,YAAaihB,KAGhB1mE,IACCwe,EAAAA,GAAAA,cAACqrD,GAAQ,CACPviG,QAASA,EACT6zB,aAAcA,GACd27C,eAAgBA,GAChBnT,WAAYA,GACZtgC,MAAOA,EACP/b,KAAMvf,IAKhB,CAuISqvD,IACCupC,IAA6C,eAAjByE,IAAiCgC,KAC9DxG,IAAuBC,GACtBriD,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLvuB,UAAU,wBACVouB,MAAM,oBACNxmC,OAAK,EACL4mC,KAAK,OACLmG,UAAW//C,GAAK,2BAChBm5C,QAASw7C,EAAwBwG,GAAqBC,IAEtD3jD,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,4BAEbyuE,IAAuBG,GACzBviD,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLvuB,UAAU,wBACVouB,MAAM,oBACNxmC,OAAK,EACL4mC,KAAK,OACLmG,UAAU,gBACV5G,QAASo+C,GAAe8D,GAAcC,IAEtC7jD,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,gCAEbzvB,EACHwhG,IAAqB1lD,EAAAA,GAAAA,cAACsrD,GAAa,CAAC7/F,WAAYokB,GAAoB+0C,SAAUi8B,IAC9E4F,IACCzmD,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,eAAe2hE,wBAAyBjlB,GAAQusB,GAAeC,KAE/E8I,IAAqD,eAA1BmB,IAA0CnmB,MAEvE73E,EAAQsmE,eACPpvB,EAAAA,GAAAA,cAACurD,GAAa,CAACziG,QAASA,EAAS44C,QAAS4Z,KAErB,YAAtBurC,IACC7mD,EAAAA,GAAAA,cAAC+oD,GAAS,CACRjgG,QAASk2F,GACTrD,WAAS,EACT/oB,SAAUq1B,GACVniG,gBAAiBA,GACjB2pC,mBAAoBA,GACpByqD,eAAgBA,GAChBpY,oBAAqBvD,EACrBsd,iBAAkB9iC,GAClBosB,YAAasb,MAIlBphB,IACCr/B,EAAAA,GAAAA,cAAC27B,GAAoB,CACnBh2E,OAAQ09D,GACRwc,OAAQR,GACRv2E,QAASA,EACT64D,MAAOA,EACPsnC,aAAcA,IAAcj4E,SAC5B1oB,gBAAiBA,GACjBm9C,QAAS+d,GACTtP,oBAAqBuP,GACrB5zC,kBAAmBA,GACnB+wD,UAAWA,EACX6jB,iBAAkBA,KAGlB,KMtyCV,IAAe9kD,EAAAA,EAAAA,KAR2BC,IACxC,MAAM,OAAEj6C,GAAWi6C,EACb4rD,GAAgB1rD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAAkBp6C,GAGvE,OAAO6lG,EAAgBxrD,EAAAA,GAAAA,cAACwrD,EAAkB5rD,QAAY17C,CAAS,ICKjE,IAAey7C,EAAAA,EAAAA,KAVkDC,IAC/D,MAAM,OAAEj6C,GAAWi6C,EACb6rD,GAAuC3rD,EAAAA,GAAAA,GAC3CC,GAAAA,GAAAA,MAAe,wCAAyCp6C,GAI1D,OAAO8lG,EAAuCzrD,EAAAA,GAAAA,cAACyrD,EAAyC7rD,QAAY17C,CAAS,ICqJ/G,IAAey7C,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAACjgD,EAAM4N,KAA6B,IAA3B,OAAEnN,GAAQmN,EACjB,MAAMnI,GAAUojB,EAAAA,EAAAA,IAAuB7oB,EAAQS,IACvCA,OAAQqK,EAAU,MAAEu9F,GAAU5iG,GAAW,CAAC,EAElD,MAAO,CACLA,UACAk5B,IAAK7zB,GAAcu9F,GAAQ5kF,EAAAA,EAAAA,IAAWzjB,EAAQ8K,QAAcjK,EAC5DynG,SAAUD,GAASv9F,GAAa9H,EAAAA,EAAAA,IAAWhD,EAAQ8K,QAAcjK,EAClE,GATeo/C,EA5HgC7/C,IAM9C,IAN+C,OACnDK,EAAM,QACNgF,EAAO,aACP0wD,EAAY,IACZx3B,EAAG,QACH2pE,GACDloG,EACC,MAAM,qBACJmoG,EAAoB,SACpB1kG,EAAQ,iBACR2kG,EAAgB,SAChBC,EAAQ,aACRjgG,IACEsQ,EAAAA,EAAAA,MACE5T,GAAOo5C,EAAAA,GAAAA,KAEPuD,GAAMvB,EAAAA,EAAAA,IAAuB,MAE7BooD,GAAapoD,EAAAA,EAAAA,IAAuB,MACpCqoD,EAAgBnhG,QAAQ/B,IAE5BmjG,QAASnqB,IACPoqB,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS3yC,EACT4yC,WA1B6B,IA2B7BzH,UAAW,KAEP,kBACJthC,EAAiB,oBAAEgc,EAAmB,wBACtC/b,EAAuB,kBAAEC,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBxe,EAAKv1C,EAAAA,IAAc,EAAMoxB,EAAAA,KAC7CsrE,EAAqBC,EAAmBC,IAAsBxoD,EAAAA,GAAAA,IAAQ,IAE7E3E,EAAAA,EAAAA,KAAU,IACD4sD,EAAgBlqB,EAAoBiqB,EAAWl4E,SAAWqmD,IAC3DA,EAAO+F,gBACT2rB,EAAqB,CAAE9nG,UACzB,SACGI,GACJ,CAACJ,EAAQkoG,EAAelqB,EAAqB8pB,IAEhD,MAKMnvC,GAAc1X,EAAAA,EAAAA,KAAY,KACzBj8C,IACDA,EAAQ0jG,eACVX,EAAiB,CAAEz2F,KAAMtM,EAAQ0jG,iBACxB1jG,EAAQs7F,cACjBv4F,EAAa,CAAE/H,OAAQgF,EAAQhF,OAASyG,UAAWzB,EAAQs7F,iBAE3Dl9F,EAAS,CAAEjC,GAAI6D,EAAQhF,SAEnBgF,EAAQg+B,YACVglE,EAAS,CACP9zF,MAAOlP,EAAQhF,OACf8iC,MAAO99B,EAAQg+B,cAGrB,GACC,CAACj7B,EAAc/C,EAAS5B,EAAU2kG,EAAkBC,IAEvD,GAAKhjG,EAIL,OACEk3C,EAAAA,GAAAA,cAAA,OACEkF,IAAKA,EACLzI,IAAI,oBACJ9oB,UAAU,gCACVwlC,YAhCqBnkD,KACvBilE,EAAAA,GAAAA,GAAwBjlE,GACxBsuD,EAAwBtuD,EAAE,EA+BxBuvD,cAAehB,GAEfvjB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,kDAAkDiuB,IAAI,QACnE5B,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,gBAAgBiuB,IAAI,QACjC5B,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,gBAAgBiuB,IAAI,OAChC5f,IAAOw7B,EAAAA,GAAAA,IAAWxvC,EAAAA,EAAAA,IAAgBgU,IAAQ,IAC1C2pE,IAAWnuC,EAAAA,GAAAA,GAAW10D,EAAQ2jG,kBAAmB5wF,EAAAA,EAAAA,GAAatT,EAAMojG,IAAY,KAGnF3rD,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,yBAAyBiuB,IAAI,OAAOsD,IAAK6mD,GACtD/rD,EAAAA,GAAAA,cAAA,QAAMrsB,UAAU,qBAAqBiuB,IAAI,SACtCiuC,EAAAA,GAAAA,GAAuB,CACtB1oF,KAAM2B,EAAQ3B,KAAKA,KACnBqe,SAAU1c,EAAQ3B,KAAKqe,YAI3Bw6B,EAAAA,GAAAA,cAAA,QAAMrsB,UAAU,cAAciuB,IAAI,OAChC5B,EAAAA,GAAAA,cAAA,QAAMrsB,UAAU,qBACb7qB,EAAQ4jG,cAAgBnkG,EAAK,4BAA8BA,EAAK,uBAKvEy3C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CAACH,MAAM,YAAYI,KAAK,OAAOgD,QAAM,EAACzD,QAAS+a,EAAa9oC,UAAU,4BAC1EprB,EAAKO,EAAQ4iG,MACV,uBACC5iG,EAAQs7F,cAAgB,wBAA0B,+BAI5D/kB,GACCr/B,EAAAA,GAAAA,cAACyrD,GAAoC,CACnC9lG,OAAQ09D,EACRwc,OAAQR,EACRv2E,QAASA,EACT6jG,WAAYL,EACZ7mD,QAAS+d,EACTtP,oBAAqBuP,IAGzBzjB,EAAAA,GAAAA,cAACwrD,GAAa,CACZ7lG,OAAQ0mG,EACR5mD,QAAS8mD,IAEP,KCuIV,IAAe5sD,EAAAA,EAAAA,KA3O0Bl8C,IA0BnC,IA1BoC,qBACxC2mB,EAAoB,OACpBtmB,EAAM,SACNC,EAAQ,WACRsE,EAAU,cACVukG,EAAa,mBACbC,EAAkB,iBAClBC,EAAgB,SAChBx7F,EAAQ,WACRw3D,EAAU,UACVikC,EAAS,cACTC,EAAa,UACb58B,EAAS,aACT5W,EAAY,YACZyzC,EAAW,6BACXC,EAA4B,qBAC5B9uB,EAAoB,KACpBj5E,EAAI,QACJ6jE,EAAO,mBACPg1B,EAAkB,cAClBuC,EAAa,WACb4M,EAAU,sBACVtuB,EAAqB,YACrBuuB,EAAW,cACXC,EAAa,2BACb7uB,GACD/6E,EACC,MAAM,oBAAE6pG,IAAwBnxF,EAAAA,EAAAA,OAE1B,8BACJkiE,EAA6B,8BAC7BC,EAA6B,8BAC7BC,GrD7EW,SACbp5E,EACAq0D,EACA4kB,EACAI,EACA16E,GAEA,MAAM,oBACJk1C,EAAmB,iBAAEu0D,EAAgB,sBAAEvM,EAAqB,0BAC5DwM,IACErxF,EAAAA,EAAAA,OAEE,SAAEmoC,IAAaC,EAAAA,EAAAA,MACfkpD,EAAkCnpD,EAAW,IAAM,KAGvD2nD,QAAS5tB,EAA+BqvB,OAAQC,EAAkBC,SAAUC,IAC1E3B,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS3yC,EACTs0C,WAtBsC,MAuBpC7iF,IACF,GAAa,WAAT9lB,EACF,OAGF,IAAI2L,EAAQ,EACZ,MAAMi9F,EAAuB,GACvBC,EAAwB,GACxBC,EAAmC,GACnCtvB,EAAsC,GACtCuvB,EAAmC,GACzC,IAAIt+D,GAAa,EAEjB3kB,EAAQlc,SAASo4F,IACf,MAAM,eACJlnB,EAAc,OAAE/F,EAAM,mBAAEi0B,EAAkB,WAAEC,GAC1CjH,GAEE,QAAEkH,GAAYn0B,EACd3vE,EAAYgB,OAAO8iG,EAAQ1iG,eAAiB0iG,EAAQ9jG,WACpD+jG,EAAkD,SAA9BD,EAAQC,kBAC5BC,EAAcF,EAAQE,YAAchjG,OAAO8iG,EAAQE,kBAAerqG,EAEnE+7E,GAUD11E,EAAYuG,IACdA,EAAQvG,GAGN8jG,EAAQt6D,kBACVg6D,EAAWtkG,KAAKc,GAGd8jG,EAAQpP,mBACV+O,EAAYvkG,KAAKc,GAGf8jG,EAAQxmF,UACVomF,EAAuBxkG,KAAK8kG,GAAehkG,GAGzC+jG,GACFJ,EAAuBzkG,KAAK8kG,GAAehkG,IA1BvC8jG,EAAQxmF,WACNumF,GAAcD,EAAmBK,OAASJ,EAAW51F,MACvDo3B,GAAa,GAEf+uC,EAA0Bl1E,KAAK8kG,GAAehkG,GAuBlD,IAGE6zE,EAAqBvqD,SAAW/iB,GAASstE,EAAqBvqD,SAChEmlB,EAAoB,CAAEloC,UAGpBi9F,EAAWvqG,QACb+pG,EAAiB,CAAEllG,WAAY0lG,IAG7BC,EAAYxqG,QACdw9F,EAAsB,CAAE34F,WAAY2lG,KAGlCC,EAAuBzqG,QAAUm7E,EAA0Bn7E,SAC7Dg7E,EAA2B,CAAEyvB,yBAAwBtvB,4BAA2B/uC,eAG9Es+D,EAAuB1qG,QACzBgqG,EAA0B,CAAE1pG,SAAQwJ,IAAK4gG,GAC3C,KAGFO,EAAAA,GAAAA,GAAkBd,EAAkBE,GAEpC,MACE5B,QAAS3tB,IACP4tB,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS3yC,EACTs0C,WAAYt+B,GACZk/B,OAAQjB,KAGFxB,QAAS1tB,IAAkC2tB,EAAAA,GAAAA,IAAwB,CACzEC,QAAS3yC,EACTs0C,WAAYt+B,KAGd,MAAO,CACL6O,gCACAC,gCACAC,gCAEJ,CqDrCMowB,CAAoBxpG,EAAMq0D,EAAc4kB,EAAsBI,EAA4B16E,IAExF,oBACJ8qG,EAAmB,mBACnBC,EAAkB,cAClBC,GtDxEW,SACb3pG,EACAq0D,EACAnxD,EACAwkG,EACAC,EACAx7F,EACA87F,EACAC,EACArkC,GAEA,MAAM,qBAAE/6D,IAAyBkO,EAAAA,EAAAA,OAE1B4yF,EAAmBC,IAAoBtsD,EAAAA,EAAAA,KAC5C,IAAgB,WAATv9C,EAAoB,EACzB6O,EAAAA,EAAAA,KAAS,IAAM/F,EAAqB,CAAED,UAAWkS,EAAAA,GAAAA,aAAgC,KAAM,GAAM,IAC7FlM,EAAAA,EAAAA,KAAS,IAAM/F,EAAqB,CAAED,UAAWkS,EAAAA,GAAAA,YAA+B,KAAM,GAAM,IAC1F,IAEJ,CAACjS,EAAsB5F,IAInBumG,GAAsBjrD,EAAAA,EAAAA,IAAuB,MAE7CkrD,GAAqBlrD,EAAAA,EAAAA,IAAuB,MAE5CmrD,GAAgBnrD,EAAAA,EAAAA,IAAuB,MAE7C,SAASsrD,IACP,IAAKjmC,EAAS,OAEd,IAAK3gE,IAAeA,EAAW7E,OAG7B,OAFA4pG,GAAY,QACZC,GAAc,GAIhB,IAAKP,EAGH,OAFAM,GAAY,QACZC,GAAc,GAIhB,MAAMroB,EAAYxrB,EAAa3lC,QAC/B,IAAKmxD,EACH,OAGF,MAAM,aAAEyiB,EAAY,aAAEC,EAAY,UAAEC,GAAc3iB,EAC5CkqB,EAAen+F,KAAKwK,MAAMmsF,EAAeC,EAAYF,GAErD0H,EAAaD,GAxDC,EA0DC,IAAjBxH,IAEJ0F,EAAY97F,GAAY69F,IALHD,GAxDH,KA8DlB7B,GAAe8B,GACjB,CAEA,MACElD,QAASnqB,IACPoqB,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS3yC,EACTk1C,OAAQU,EAAAA,KACNnkF,IACF,IAAK+jF,IAAqBD,EACxB,OAKF,GAD4B1mG,EAAW,GAAKgnG,EAAAA,IAE1C,OAGF,MAAMC,EAAerkF,EAAQjc,MAAKvL,IAAA,IAAC,eAAEw8E,GAAgBx8E,EAAA,OAAKw8E,CAAc,IACxE,IAAKqvB,EACH,OAGF,MAAM,OAAEp1B,GAAWo1B,EAEM,sBAArBp1B,EAAOvmD,UACTo7E,IAC8B,qBAArB70B,EAAOvmD,WAChBq7E,GACF,KAGFtwB,EAAAA,GAAAA,IAAekwB,EAAqB9sB,IACpCpD,EAAAA,GAAAA,IAAemwB,EAAoB/sB,GAEnC,MACEmqB,QAASsD,EACT7B,OAAQ8B,EACR5B,SAAU6B,IACRvD,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS3yC,EACTk1C,OAAQgB,IACRC,kBAAmB93B,EAAAA,IAClBo3B,IAEHvwB,EAAAA,GAAAA,IAAeowB,EAAeS,GAE9B,MACEtD,QAAS2D,EACTlC,OAAQmC,EACRjC,SAAUkC,IACR5D,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS3yC,EACTk1C,OAnHoB,EAoHpBiB,kBAAmB93B,EAAAA,IAClBo3B,IAEHvwB,EAAAA,GAAAA,IAAeowB,EAAec,GAE9B,MAAMG,GAAuBC,EAAAA,GAAAA,GAAYf,IACzC7vD,EAAAA,EAAAA,KAAU,KACJ4pB,GACF+mC,EAAqBl8E,SACvB,GACC,CAACm1C,EAAS+mC,IAEb,MAAME,GAAgBlrD,EAAAA,EAAAA,KAAY,KAChCyqD,IACAK,IAEAljG,YAAW,KACTmjG,IACAL,GAAgB,GApIO,IAqID,GACvB,CAACD,EAAcK,EAAgBJ,EAAgBK,KAGlD/4C,EAAAA,GAAAA,GAAck5C,EAAe,CAACA,EAAe5nG,IAG7C,MAAM6nG,GAA8BC,EAAAA,GAAAA,IAAmBtD,EA7IvB,KAgJhC,OAFAuD,EAAAA,GAAAA,GAAgBH,EAAe,CAACA,EAAeC,IAExC,CAAEtB,sBAAqBC,qBAAoBC,gBACpD,CsDrEMuB,CACFlrG,EACAq0D,EACAnxD,EACAwkG,EACAC,EACAx7F,EACA87F,EACAC,EACArkC,GAGIzgE,GAAOo5C,EAAAA,GAAAA,KAEP2uD,EACJtwD,EAAAA,GAAAA,cAAA,OAAKrsB,WAAWkvB,EAAAA,GAAAA,GAxDS,iBAwD4B,wBAAyBpG,IAAI,mBAChFuD,EAAAA,GAAAA,cAAA,YAAOz3C,EAAK,oBAGVgoG,EAAwB1xB,EAAwB,EAAI+tB,EAAcvjG,QAAO,CAACC,EAAKknG,IAC5ElnG,EAAMknG,EAAa9hC,aAAa+hC,OAAOjtG,QAC7C,GACH,IAAIktG,EAAkB,EAEtB,MAAMC,GAAiBtkC,EAAAA,GAAAA,GAAYhkE,GAC7BuoG,EAAe/lG,QACnBxC,GAAcsoG,GAAkBtoG,EAAWA,EAAW7E,OAAS,KAAOmtG,EAAeA,EAAentG,OAAS,IAGzGmrE,EAAai+B,EAAc/jG,KAAI,CACnCgoG,EACAC,EACAC,KAEA,MAAMriC,EAAemiC,EAAUniC,aAAa7lE,KAAI,CAC9CmoG,EACAC,EACAC,KAEA,GACyB,IAAvBF,EAAYxtG,SACRyqE,GAAQ+iC,EAAY,MACrBhiC,EAAAA,EAAAA,IAAgBgiC,EAAY,MAC3BA,EAAY,GAAGvgG,QAAQ6H,QAAQ2lC,UACnC,CACA,MAAMn1C,EAAUkoG,EAAY,GACtB9yB,EACJ+yB,IAAqBC,EAAkB1tG,OAAS,GAC7CstG,IAAmBC,EAAgBvtG,OAAS,EAGjD,OAAOgK,EAAAA,EAAAA,IAAQ,CACb1E,EAAQ7D,KAAOioG,EAA6Br5E,SAAWy8E,EACvDtwD,EAAAA,GAAAA,cAACugC,GAAa,CACZ9jC,IAAK3zC,EAAQ7D,GACb6D,QAASA,EACT/E,SAAUA,EACVuE,gBAAiBnD,EACjBg5E,cAAetzE,QAAQ9G,GAAYA,IAAamB,EAAAA,IAChDm5E,8BAA+BA,EAC/BC,8BAA+BA,EAC/BC,8BAA+BA,EAC/BH,qBAAsBA,EACtBH,gBAAiBsyB,IAA0BG,EAC3Ct5B,YAAa8G,GAAgB0yB,EAC7B1yB,aAAcA,EACdM,2BAA4BA,KAGlC,CAEA,IAAI2yB,EAEJ,OAAOH,EAAYnoG,KAAI,CACrBqlE,EACAkjC,KAEA,MAAMtoG,EAAUmlE,GAAQC,GAAkBA,EAAeU,YAAcV,EACjEvM,EAAQsM,GAAQC,GAAkBA,OAAiBhqE,EACnDmsE,GAAQC,EAAAA,EAAAA,IAAaxnE,GACrBuoG,EAAiBpjC,GAAQC,GACzBY,EAAckiC,EAAYI,EAAe,GAE3CtoG,EAAQsI,iBAAmB67F,EAAYp5E,WAAYyrD,EAAAA,EAAAA,IAAiBx2E,EAAQsI,mBAC9E67F,EAAYp5E,SAAUyrD,EAAAA,EAAAA,IAAiBx2E,EAAQ7D,KAGjD,MAAMqsG,GAAmBD,GAAkBvoG,EAAQoE,UAAYpE,EAAQoE,eAAYhJ,EAC7EqtG,EAAsBziC,IAAgBb,GAAQa,GAAeA,EAAY5hE,eAAYhJ,EAErFyD,EAAW,CACfw1F,eAAiC,IAAjBiU,EAChBtQ,cAAesQ,IAAiBJ,EAAYxtG,OAAS,EACrDu9F,uBAAwBl2F,QAAQymG,GAAmBA,IAAoBH,GACvEjU,sBAAuBryF,QAAQymG,GAAmBA,IAAoBC,GACtErzB,aACEkzB,IAAiBJ,EAAYxtG,OAAS,GACnCytG,IAAqBC,EAAkB1tG,OAAS,GAChDstG,IAAmBC,EAAgBvtG,OAAS,GAInD2tG,EAAyBG,EAEzB,MAAME,GAAa/qF,EAAAA,EAAAA,IAAqB3d,GAElC2zC,GAAM7xB,EAAAA,EAAAA,IAA6B9hB,GAAY,GAAEA,EAAQyH,QAAQihG,IAAeA,EAEhF3Q,GAA+B,IAAlBN,IAA4ByM,EAEzCyE,EAAoB3oG,EAAQ7D,KAAO+4F,EAEzC,OAAOxwF,EAAAA,EAAAA,IAAQ,CACb1E,EAAQ7D,KAAOioG,EAA6Br5E,SAAWy8E,EACvDtwD,EAAAA,GAAAA,cAAC0xD,GAAO,CACNj1D,IAAKA,EACL3zC,QAASA,EACT83F,6BAA8BviB,EAC9BC,8BAA+BA,EAC/BC,8BAA+BA,EAC/B5c,MAAOA,EACPyO,UAAWA,EACX6sB,WAAYt1F,EAASm5F,eAAiBiM,IAAc18B,KAAWohC,IAAsB3oC,GACrFk0B,eAAgBr1F,EAASw1F,gBAAkB4P,IAAc18B,EACzDtsE,SAAUA,EACVuE,gBAAiBnD,EACjB07F,WAAYA,EACZjgB,WAAYigB,GAAc98F,IAAamB,EAAAA,GACvC+4E,gBAAiBsyB,IAA0BG,EAC3Ct5B,YAAazvE,EAASu2E,cAAgB0yB,EACtCzT,eAAgBx1F,EAASw1F,eACzB2D,cAAen5F,EAASm5F,cACxBC,uBAAwBp5F,EAASo5F,uBACjC7D,sBAAuBv1F,EAASu1F,sBAChChf,aAAcv2E,EAASu2E,aACvBE,qBAAsBA,EACtBI,2BAA4BA,IAE9B11E,EAAQ7D,KAAO+4F,GACbh+C,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,uBAAuB8oB,IAAI,sBACxCuD,EAAAA,GAAAA,cAAA,YAAOz3C,EAAK,wBAGhB,IACDkoG,MAAM,IAGX,OACEzwD,EAAAA,GAAAA,cAAA,OACErsB,UAAU,qBACV8oB,IAAKo0D,EAAUriC,SACfrV,YAAa8gB,GAAAA,EACb03B,eAAa,GAEb3xD,EAAAA,GAAAA,cAAA,OACErsB,WAAWkvB,EAAAA,GAAAA,GAAe,eAAgBsqD,GAAc,eACxD1wD,IAAI,cACJ0c,YAAa8gB,GAAAA,EACbv4B,QAAUyrD,OAA6EjpG,EAAhE,IAAMopG,EAAoB,CAAEz1F,WAAYg5F,EAAUriC,YAEzExuB,EAAAA,GAAAA,cAAA,QAAM4B,IAAI,QACPurD,GAAc0D,EAAUtiC,eAAiBqjC,EAAAA,KACxCrpG,EAAK,+BAEN4kG,GAAc0D,EAAUtiC,eAAiBqjC,EAAAA,KACxCrpG,EAAK,sBAAsBspG,EAAAA,GAAAA,IAAgBtpG,EAAMsoG,EAAUriC,cAAUtqE,GAAW,KAEhFipG,IAAc0E,EAAAA,GAAAA,IAAgBtpG,EAAMsoG,EAAUriC,YAGnDE,EAAa+hC,OACV,IAIV,OACEzwD,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,qBAAqBg+E,eAAa,GAC/C3xD,EAAAA,GAAAA,cAAA,OAAKkF,IAAK0pD,EAAqBnyD,IAAI,oBAAoB9oB,UAAU,sBAChEg7C,EAAW8hC,QACVrmF,GAAwB0iF,GACxB9sD,EAAAA,GAAAA,cAAC8xD,GAAgB,CAACr1D,IAAK34C,EAAQA,OAAQA,EAAQ01D,aAAcA,IAE/DxZ,EAAAA,GAAAA,cAAA,OACEkF,IAAK2pD,EACLpyD,IAAI,mBACJ9oB,UAAU,qBAEZqsB,EAAAA,GAAAA,cAAA,OACEkF,IAAK4pD,EACLryD,IAAI,cACJ9oB,UAAU,gBAER,I,gBCvQV,MAqEA,IAAegsB,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAACjgD,EAAM4N,KAA6B,IAA3B,OAAEgC,GAAQhC,EACjB,MAAM,SAAEkE,GAAa9R,EAAO8R,SAASkd,SAC/B0/E,GAAWC,EAAAA,EAAAA,IAAkB/+F,IAAU++F,EAAAA,EAAAA,IAAkB3uG,EAAO+X,eAChEnG,EAAUE,GAAU3R,OAAS2R,EAAS48F,EAAW58F,EAAS3R,aAAUU,EACpEkC,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQ4P,GAChC,OAAK7M,EAIE,CACL6O,UACAg9F,oBAAqB7rG,EAAKoF,aAAepF,EAAKoF,YAAYvG,KAAOmB,EAAKqjB,uBAClErjB,EAAKoF,YAAYvG,QACjBf,EACJ24B,gBAAiBx5B,EAAOw5B,iBARjB,CAAC,CAST,GAhBeymB,EAnE+B7/C,IAI7C,IAJ8C,QAClDwR,EAAO,gBACP4nB,EAAe,oBACfo1E,GACDxuG,EACC,MAAM,qBACJyuG,EAAoB,YACpBzvF,EAAW,oBACXu2B,IACE78B,EAAAA,EAAAA,MAEE5T,GAAOo5C,EAAAA,GAAAA,KAEP6X,GAAe7V,EAAAA,EAAAA,IAAuB,OAE1CsoD,QAASnqB,IACPoqB,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS3yC,EACT4yC,WApB6B,OAsB/BhtD,EAAAA,EAAAA,KAAU,KACJnqC,GAA+B,yBAApB4nB,GAIfq1E,GAAsB,GACrB,CAACr1E,EAAiBq1E,EAAsBj9F,KAE3CmqC,EAAAA,EAAAA,KAAU,KACgB,yBAApBviB,GAA8Co1E,GAChDj5D,EAAoB,CAAEloC,MAAOmhG,GAC/B,GACC,CAACp1E,EAAiBmc,EAAqBi5D,IAE1C,MAAME,GAAsBptD,EAAAA,EAAAA,KAAaqtD,IACvCA,EAAkB,IACbA,EACHr7D,qBAAqB,GAEvBt0B,EAAY,CAAExN,QAASm9F,GAAkB,GACxC,CAAC3vF,IAEJ,OACEu9B,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,kBAAkBuxB,IAAKsU,GACpCxZ,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,WACbqsB,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,QAAQiuB,IAAI,QAAQr5C,EAAK,kCACtCy3C,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,cAAciuB,IAAI,QAAQr5C,EAAK,8BAE5Cy3C,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,WACZ1e,GACC+qC,EAAAA,GAAAA,cAACqyD,GAAAA,EAAa,CACZp9F,QAASA,EACTysC,QAASywD,EACT9lD,SAAUp3C,EACV6sE,oBAAqBA,EACrB3/B,KAAM,IACNxuB,UAAU,QACV2+E,eAAa,EACbloF,sBAAoB,MAKxB,KC7EJmoF,GAAY,EAAI/kE,GAAAA,GA+FtB,IAAemS,EAAAA,EAAAA,KArFkBl8C,IAK3B,IAL4B,eAChC4kE,EAAc,KACdljE,EAAI,uBACJqtG,EAAsB,MACtBjpF,GACD9lB,EACC,MAAM8E,GAAOo5C,EAAAA,GAAAA,KAEb,MAAa,cAATx8C,EAqCN,SAAyBoD,GACvB,OACEy3C,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,SAAQqsB,EAAAA,GAAAA,cAAA,YAAOz3C,EAAK,uCAEvC,CAxCWkqG,CAAgBlqG,GAGrB8/D,EAuCN,SAA6B9/D,GAC3B,OACEy3C,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,cACbqsB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,WACbqsB,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,8CACbqsB,EAAAA,GAAAA,cAAA,MAAIrsB,UAAU,SAASprB,EAAK,wCAC5By3C,EAAAA,GAAAA,cAAA,MAAIrsB,UAAU,eACZqsB,EAAAA,GAAAA,cAAA,UAAKz3C,EAAK,+CACVy3C,EAAAA,GAAAA,cAAA,UAAKz3C,EAAK,+CACVy3C,EAAAA,GAAAA,cAAA,UAAKz3C,EAAK,+CACVy3C,EAAAA,GAAAA,cAAA,UAAKz3C,EAAK,iDAKpB,CArDWmqG,CAAoBnqG,GAGzBiqG,EAoDN,SAAqBjqG,GACnB,OACEy3C,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,cACbqsB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,UAAUiuB,IAAKr5C,EAAKs5C,MAAQ,WAAQ39C,GACjD87C,EAAAA,GAAAA,cAAA,MAAIrsB,UAAU,SAASprB,EAAK,yBAC5By3C,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,eAAeprB,EAAK,4BACjCy3C,EAAAA,GAAAA,cAAA,MAAIrsB,UAAU,mBACZqsB,EAAAA,GAAAA,cAAA,UAAKz3C,EAAK,yBACVy3C,EAAAA,GAAAA,cAAA,UAAKz3C,EAAK,yBACVy3C,EAAAA,GAAAA,cAAA,UAAKz3C,EAAK,yBACVy3C,EAAAA,GAAAA,cAAA,UAAKz3C,EAAK,2BAKpB,CAlEWoqG,CAAYpqG,GAGjBghB,EASN,SAAqBhhB,EAAcghB,GACjC,OACEy2B,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,cACbqsB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,WACbqsB,EAAAA,GAAAA,cAAC08C,GAAAA,EAAS,CACRnzE,MAAOA,EACP44B,KAAMowD,GACN5+E,UAAU,gCAEZqsB,EAAAA,GAAAA,cAAA,MAAIrsB,UAAU,SAASprB,EAAK,qCAC5By3C,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,kCAAiC6pC,EAAAA,GAAAA,GAAWj1D,EAAK,mCAAoC,CAAC,SAI3G,CAtBWqqG,CAAYrqG,EAAMghB,GAIzBy2B,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,SAAQqsB,EAAAA,GAAAA,cAAA,YAAOz3C,EAAK,eAA2B,ICkG5DsqG,IAAwB7+F,EAAAA,EAAAA,KAAU0L,GAAOA,KANvB,KAM8C,GAohBtE,IAAeigC,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAACjgD,EAAMmd,KAA6C,IAA3C,OAAE1c,EAAM,SAAEC,EAAQ,KAAEoB,GAAMqb,EACjC,MAAMpa,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAChC,IAAKsC,EACH,MAAO,CAAC,EAGV,MAAMiC,GAAayqG,EAAAA,EAAAA,IAAwBzvG,EAAQS,EAAQC,EAAUoB,GAC/Dq0C,EAAwB,cAATr0C,GACjBuD,EAAAA,EAAAA,IAA4BrF,EAAQS,IACpC6E,EAAAA,EAAAA,IAAmBtF,EAAQS,GACzBk6F,GAAqBv6E,EAAAA,EAAAA,IAAyBpgB,EAAQS,EAAQC,GAC9D0H,GAAaC,EAAAA,EAAAA,IAAiBrI,EAAQS,EAAQC,GAEpD,KACEA,IAAamB,EAAAA,IAAmBkB,GAAME,SACjCkzC,GAAgBwkD,GAAsBxkD,EAAawkD,IAExD,MAAO,CAAC,EAGV,MAAM,aAAEp6E,EAAY,kBAAEmvF,EAAiB,YAAEvnG,GAAgBpF,EACnD4sG,GAAajvF,EAAAA,EAAAA,IAAuB1gB,EAAQS,GAE5CmvG,EACJlvG,IAAamB,EAAAA,KACTmD,IAAejC,EAAK+iB,cAAgB6pF,GAAcxnG,IAAgBA,EAAY0B,UAG9EgmG,GAAU7tE,EAAAA,EAAAA,IAAchiC,EAAQS,GACtC,IACI83C,EADAu3D,GAAmB,EAEvB,IAAIvrC,EAAAA,EAAAA,IAA0BvkE,EAAQS,GAAS,CAC7C,MAAMsvG,GAAkBxlF,EAAAA,EAAAA,IAAmBvqB,EAAQ6vG,EAAQjuG,IACvDmuG,EACFx3D,EAAUw3D,EAAgBx3D,QAE1Bu3D,GAAmB,CAEvB,CAEA,MAAM5pF,EAAQnjB,EAAK0V,SAAS/X,GACtB05F,GAAgBj9D,EAAAA,EAAAA,IAAS18B,QAA+CI,GAArC8tC,EAAAA,EAAAA,IAAmB3uC,EAAQS,GAEpE,MAAO,CACLsmB,sBAAsBC,EAAAA,EAAAA,IAA2BhnB,GACjDgwG,cAAc,EACdzvF,eACAmvF,oBACA/F,eAAellC,EAAAA,EAAAA,IAAc1hE,GAC7BktG,aAAa/V,EAAAA,EAAAA,IAAYn3F,GACzBmtG,UAAWntG,EAAKmtG,UAChBlrC,gBAAgBC,EAAAA,EAAAA,IAAqBjlE,EAAQS,GAC7Cu5F,eAAeC,EAAAA,EAAAA,IAAqBx5F,GACpC4nG,MAAO7gG,QAAQqoG,GACf7qG,aACAmxC,eACAsvB,WAAYj+D,QAAQY,GAAY2f,iBAChCqsB,eAAevuB,EAAAA,EAAAA,IAAoB7lB,EAAQS,EAAQC,GACnD+oG,iBAA2B,WAAT3nG,IAAqB8F,EAAAA,EAAAA,IAAuB5H,EAAQS,EAAQC,GAC9EyvG,sBAAsBC,EAAAA,EAAAA,IAAqBpwG,EAAQS,EAAQC,GAC3DivG,aACA7qC,oBAAoBC,EAAAA,EAAAA,IAAqB/kE,GACzC8vG,mBACAv3D,UACAoiD,qBACAuC,cAAe9C,EAAe5yF,QAAQ4yF,EAAa+C,mBAAgBt8F,EACnEy4B,aAAct5B,EAAOs5B,aACrBpT,QACAmqF,4BAA4BziE,EAAAA,EAAAA,IAA+B5tC,EAAQ,4BACnEswG,2BAA4B7vG,IAAWwM,EAAAA,OACnC2iG,GAAiC,CAAEznG,eACxC,GAxEe83C,EAlhB2B7/C,IAwCzC,IAxC0C,OAC9CK,EAAM,SACNC,EAAQ,KACRoB,EAAI,SACJyuG,EAAQ,YACRxG,EAAW,cACXC,EAAa,qBACbjjF,EAAoB,aACpBipF,EAAY,cACZrG,EAAa,YACbsG,EAAW,QACXO,EAAO,QACP7qC,EAAO,eACPX,EAAc,cACdg1B,EAAa,UACbkW,EAAS,MACT7H,EAAK,WACLrjG,EAAU,aACVmxC,EAAY,cACZ/B,EAAa,WACbqxB,EAAU,iBACVgkC,EAAgB,qBAChB0G,EAAoB,aACpB5vF,EAAY,kBACZmvF,EAAiB,WACjBC,EAAU,mBACV7qC,EAAkB,YAClB38D,EAAW,iBACX2nG,EAAgB,QAChBv3D,EAAO,mBACPoiD,EAAkB,cAClBuC,EAAa,aACb5jE,EAAY,gBACZm3E,EAAe,cACfC,EAAa,MACbxqF,EAAK,0BACLmqF,EAAyB,2BACzBC,EAA0B,2BAC1Bn1B,EAA0B,2BAC1Bw1B,GACDvwG,EACC,MAAM,qBACJwK,EAAoB,gBAAEgmG,EAAe,sBAAEC,GAAqB,qBAAEC,GAAoB,kBAAEC,GAAiB,iBACrGvlF,KACE1S,EAAAA,EAAAA,MAGEq9C,IAAe7V,EAAAA,EAAAA,IAAuB,MAItC0wD,IAAkB1wD,EAAAA,EAAAA,IACZ,WAATx+C,IAAqBmvG,EAAAA,EAAAA,KAAmB1nG,EAAAA,EAAAA,MAAa9I,EAAQC,KAC3DwwG,EAAAA,EAAAA,KAAuB3nG,EAAAA,EAAAA,MAAa9I,EAAQC,IAC5C,GAGCkpG,IAActpD,EAAAA,EAAAA,MACd6wD,IAAe7wD,EAAAA,EAAAA,MACf8wD,IAAsB9wD,EAAAA,EAAAA,MACtBy6B,IAAuBz6B,EAAAA,EAAAA,MACvBupD,IAA+BvpD,EAAAA,EAAAA,MAC/B+wD,IAAoB/wD,EAAAA,EAAAA,MACpBgxD,IAA4BhxD,EAAAA,EAAAA,KAAO,GACnCixD,IAA6BjxD,EAAAA,EAAAA,IAAO94C,QAAQW,IAE5CqpG,IAAkBryD,EAAAA,GAAAA,GAAS5G,GAAS5e,OAAQ83E,EAAAA,EAAAA,IAAqBl5D,EAAQ5e,YAAS94B,GAClF6wG,IAAgBvyD,EAAAA,GAAAA,GAAS5G,GAASvoB,KAAMmc,EAAAA,EAAAA,IAAqBoM,EAAQvoB,UAAOnvB,GAC5E8wG,GAAoBp5D,GAAS5e,OAAQi4E,EAAAA,EAAAA,IAAuBr5D,EAAQ5e,OAAS4e,GAASvoB,KACxF6hF,EAAAA,EAAAA,IAAmBt5D,EAAQvoB,UAAOnvB,EAChCixG,GAAwBH,IAAqB,CACjDt8F,MAAOs8F,GAAkBt8F,MAAQ08F,EAAAA,GACjCz8F,OAAQq8F,GAAkBr8F,OAASy8F,EAAAA,IAG/Bx6E,GAAoB/vB,QAAQxC,IAElC0uD,EAAAA,GAAAA,IAAc,KAERn8B,KACF/W,EAAAA,EAAAA,KAAU,KACR+wF,GAA2B/gF,SAAU,CAAK,GAE9C,GACC,CAAC+G,MAGJm8B,EAAAA,GAAAA,IAAc,KACZqnB,GAAqBvqD,QAAU4jB,CAAa,GAC3C,CAACA,KAEJ2H,EAAAA,EAAAA,KAAU,MACHh1B,GAAwB4iF,GAAiBhkC,GAAWrsC,GACvDu3E,GAAsB,CAAEpwG,UAC1B,GACC,CAACsmB,EAAsBtmB,EAAQklE,EAASgkC,EAAerwE,EAAcu3E,MAGxEn9C,EAAAA,GAAAA,IAAc,KACRn8B,KACFsyE,GAA6Br5E,QAAUuqD,GAAqBvqD,QAC9D,GACC,CAAC+G,MAEJm8B,EAAAA,GAAAA,IAAc,KACZ29C,GAAkB7gF,QAAUm/E,CAAU,GACrC,CAACA,IC7PiCoB,MAUrCrsD,EAAAA,GAAAA,GAAW,CAAE,QATb,SAAoB/yC,GAClB,MAAM3M,GAAagtG,EAAAA,GAAAA,KAEfhtG,GAAcA,EAAW7E,OAAS,IACpCwR,EAAE0qC,iBACF00D,EAAkB,CAAE/rG,eAExB,GAEmC,EDqPnCitG,CAA8BlB,IAE9B,MAAMxH,IAAgBlqD,EAAAA,EAAAA,KAAQ,KAC5B,IAAKr6C,IAAemxC,EAClB,OAGF,MAAM/uC,GACJuzF,GACGwV,IAAyBxV,GACvB31F,EAAW,IAAMmrG,IAAyBnrG,EAAW,GAGxDA,EADA,CAAC21F,KAAuB31F,GAG5B,IAAKoC,EAAYjH,OACf,OAGF,MAAM+xG,EAAiB9qG,EAAY5B,KAAK5D,GAAOu0C,EAAav0C,KAAKoC,OAAOwD,SAGlE2qG,EAA2C,cAATrwG,GAAwBwuG,EAC5D,CAAC,OAAQ,MACT,CAAC,MAEL,OAAO4B,EAAe/xG,OAClB2qE,IAAcsnC,EAAAA,EAAAA,IAAQF,EAAgBC,GAAYtI,GAA6Br5E,cAC/E3vB,CAAS,GACZ,CAACmE,EAAYmxC,EAAcg6D,EAAsBxV,EAAoB74F,EAAMwuG,KAE9EthB,EAAAA,GAAAA,IAAY,KACV,IAAKhqF,IAAemxC,EAClB,OAEF,MAAMlsC,EAAMjF,EAAWhB,QAAQpC,GAAOu0C,EAAav0C,IAAKspC,YAEnDjhC,EAAI9J,QAET2wG,GAAqB,CAAErwG,SAAQwJ,OAAM,GAhKE,OAmKzC+kF,EAAAA,GAAAA,IAAY,KACV,IAAKhqF,IAAemxC,GAAgBz1C,IAAamB,EAAAA,GAC/C,OAEF,MAAMoI,EAAMjF,EAAWhB,QAAQpC,GAAOu0C,EAAav0C,IAAK4qB,mBAAmBi5C,iBAC1C5kE,IAA5Bs1C,EAAav0C,IAAKyqB,QAElBpiB,EAAI9J,QAETqrB,GAAiB,CAAE/qB,SAAQwJ,OAAM,GA3KK,MA8KxC,MAAMooG,IAAiBhzD,EAAAA,EAAAA,KAAQ,KAC7B,GAAa,WAATv9C,EAIJ,OAAO6O,EAAAA,EAAAA,KAAS,IAAM/F,EAAqB,CAAED,UAAWkS,EAAAA,GAAAA,UAA6B,KAAM,GAAM,EAAM,GAEtG,CAACjS,EAAsB5F,KAEpB,WAAEstG,GAAU,kBAAEC,I1DvTP,WAGb,MAAOD,EAAYE,IAAkB9xD,EAAAA,GAAAA,IAAQ,GAEvC+xD,GAAeC,EAAAA,GAAAA,GAAgB1mC,IAAU,GA8B/C,MAAO,CACLsmC,aACAC,mBA9BwB7wD,EAAAA,EAAAA,KAAY,CAACigC,EAA2B4uB,KAChEiC,IAEKtiG,SAAS23B,KAAK8sB,UAAUmiB,SAAS,2BACpC3N,EAAAA,EAAAA,KAAgB,KACdj5D,SAAS23B,KAAK8sB,UAAUxoC,IAAI,wBAAwB,IAIxDsmF,GAAa,KACX,MAAME,EAwBZ,SAAuBhxB,EAAwB4uB,GAC7C,MAAMqC,EAAcjxB,EAAUxxE,iBAAiC,gBACzD0iG,EAAelxB,EAAU2iB,UAE/B,OAAOjkG,MAAM2e,KAAK4zF,GAAajnG,MAAMwuB,IACnC,MAAM,UAAE24E,EAAS,aAAE1O,GAAiBjqE,EAC9BhlB,EAAM29F,EAAYD,EACxB,OAAQzO,GAAgBjvF,GAAOA,IAAQo7F,EAAWrkC,GAAwBD,GAAW,GAEzF,CAjC0B8mC,CAAcpxB,EAAW4uB,GACzCoC,IACFxpC,EAAAA,EAAAA,KAAgB,KACdwpC,EAAYh+C,UAAUxoC,IAAI,QAAQ,KAItCg9C,EAAAA,EAAAA,KAAgB,KACd,MAAM6pC,EAAe9iG,SAAS+rC,cAAc,UACxC+2D,GACFA,EAAar+C,UAAUC,OAAO,SAGhC1kD,SAAS23B,KAAK8sB,UAAUC,OAAO,wBAAwB,GACvD,GACF,GACD,CAAC49C,EAAgBC,IAMtB,C0DgR4CQ,GAEpCC,IAAexxD,EAAAA,EAAAA,KAAY,KAC/B,GAAI4vD,GAA0B9gF,QAE5B,YADA8gF,GAA0B9gF,SAAU,GAItC,MAAMmxD,EAAYxrB,GAAa3lC,QAC1BmxD,IAIA0vB,GAAkB7gF,SACrB+hF,GAAkB5wB,EAAW4uB,GAG/Bf,IAAsB,KACpB,MAAMxvG,GAASuJ,EAAAA,EAAAA,MACiBonG,OAAiCrvG,EAAAA,EAAAA,IAAetB,GAAQo6E,gBAAgB35E,QAEtG06E,EAA2B,CAAEg4B,aAAa,IAGvCxxB,EAAUyxB,gBAIfpC,GAAgBxgF,QAAUmxD,EAAU0iB,aAAe1iB,EAAU2iB,UAEhD,WAATxiG,GACF8uG,EAAgB,CAAEnwG,SAAQC,WAAUsG,aAAcgqG,GAAgBxgF,UACpE,IACA,GACD,CACD+hF,GAAmBhC,EAAUI,EAA4Bx1B,EAA4Br5E,EAAMrB,EAAQC,KAG9F8oG,GAAoB6J,IEjWd,SAA4Bl9C,EAAyCm9C,GAClF,MAAO9J,EAAoB+J,IAAsB9d,EAAAA,GAAAA,KAG3CoO,GAAeniD,EAAAA,EAAAA,KAAaoiD,IAChCyP,EAAmBzP,EAAMG,YAAY3uF,OAAO,GAC3C,CAACi+F,KACJ/O,EAAAA,GAAAA,GAAkBruC,EAAc0tC,IAEhC9nD,EAAAA,EAAAA,KAAU,KACR,MAAMy3D,EAAsBtrG,OAAOiuD,EAAa3lC,QAASw6E,QAAQyI,eAAiB,EAC5E3e,EAAkB0U,IAEpB1U,GAAmBA,EAAkB0e,GAAuBF,IAC9Dn9C,EAAa3lC,QAASw6E,QAAQyI,aAAeC,OAAO5e,GACtD,GACC,CAACwe,EAAmBn9C,EAAcqzC,IAErC,MAAMmK,GAAsBrzD,EAAAA,EAAAA,MAE5B,MAAO,CAACkpD,EAAoBmK,EAC9B,CF4UuDC,CAAmBz9C,GAAcq6C,IAAY1rC,IAGlG/oB,EAAAA,EAAAA,KAAU,KACR,IAAKs2D,KAAmBrC,GAAgBzvF,GAAgBovF,EACtD,OAKF,GAD2B3qG,GAAcA,EAAWA,EAAW7E,OAAS,GAAK6rG,EAAAA,IAE3E,OAGF,MAAMrqB,EAAYxrB,GAAa3lC,UAE1BxrB,GACHA,EAAW7E,OAAS2c,EAAAA,IAAqB,GACrC6kE,EAAUrqB,kBAAqCu8C,cAAgBlyB,EAAUyiB,eAE7EiO,IACF,GACC,CAACrC,EAAchrG,EAAYqtG,GAAgB1C,EAAYpvF,IAE1D,MAAMuzF,IAA4BnH,EAAAA,GAAAA,IAAY,KAC5C,IAAK3nG,IAAeosG,GAAoB5gF,QACtC,OAGF,MAAMujF,EAAwB3C,GAAoB5gF,QAC/CxsB,QAAQ4zE,GAAY5yE,EAAWyF,SAASvC,OAAO0vE,EAAQozB,QAAQ9jG,cAI5Ds1E,EAASu3B,EAAsB,IAAMA,EAAsB,GAC5Dv3B,IAILotB,GAAYp5E,QAAUgsD,EAAO56E,GAC7BuvG,GAAa3gF,QAAUgsD,EAAOlG,wBAAwBnhE,IAAG,KAG3Du+C,EAAAA,GAAAA,IACE,KAAMsgD,EAAAA,EAAAA,KAAa,IAAMF,GAA0BtjF,aAEnD,CAACxrB,EAAYykG,EAAkB8G,EAAUuD,MAE3C/3D,EAAAA,EAAAA,KACE,IAAM+3D,GAA0BtjF,WAEhC,CAACg5E,GAAoBsK,MAIvBluB,EAAAA,GAAAA,IAA4Bh4E,IAA4C,IAA1C0/F,EAAgB2G,GAAqBrmG,EAMjE,MAAMknF,EAAkB0U,KAClBmK,EAAsBN,GAAuB7iF,QACnD6iF,GAAuB7iF,QAAUskE,EAEjC,MAAMnT,EAAYxrB,GAAa3lC,QAC/B4gF,GAAoB5gF,QAAUnwB,MAAM2e,KAAK2iE,EAAUxxE,iBAAiC,uBACpF,MAAM+jG,EAAkB9C,GAAoB5gF,QAAQ4gF,GAAoB5gF,QAAQrwB,OAAS,GAEnFg0G,EACJnvG,GAAcsoG,GAAkBtoG,EAAWA,EAAW7E,OAAS,KAAOmtG,EAAeA,EAAentG,OAAS,GAEzGi0G,EACJpvG,IAAa,KAAOsoG,IAAiB,IAAMtoG,GAAY7E,SAAY2c,EAAAA,IAAqB,EAAI,EAExFu3F,EAAkBF,IAA0BC,EAIhD3K,GACG4K,GACCrvG,GAAcA,EAAW7E,OAAS2c,EAAAA,IAAqB,IACvD6kE,EAAUyxB,cAAez+C,UAAUmiB,SAAS,2BAC7Ck9B,EAAAA,EAAAA,KAAa,IACbryB,EAAUrqB,kBAAsCu8C,cAAyC,EAAzBlyB,EAAUyiB,kBAG7EkQ,EAAAA,EAAAA,IAAc3yB,EAAUyxB,cAAgB,yBACxCzxB,EAAUyxB,cAAez+C,UAAUxoC,IAAI,yBAEvC7iB,YAAW,KACLq4E,EAAUyxB,gBACZmB,EAAAA,EAAAA,IAAiB5yB,EAAUyxB,cAAgB,wBAC7C,GArT2B,OAyT/B7+B,EAAAA,EAAAA,KAAoB,KAClB,MAAM,UAAE+vB,EAAS,aAAED,EAAY,aAAED,GAAiBziB,EAC5C36E,EAAegqG,GAAgBxgF,QAErC,IAAIgkF,EAAextG,GAAgB2sG,GAAuBvP,GACtDiQ,IAKFG,GADuBN,EAAkBA,EAAgB9P,aAAe,GAG1E,MAAM0H,EAAarC,GAAoBwK,GAAwBO,GAzU5C,GA0UbC,EAAoBzvG,GAAcqsG,GAAkB7gF,UAAYxrB,EAAWA,EAAW7E,OAAS,GAGjGk0G,GAAmBvI,IAAe2I,IAEpCjgC,EAAAA,EAAAA,KAAe,MACbF,EAAAA,GAAAA,IACEqN,EACAuyB,EACA,MA9UgB,QAgVhBrzG,OACAA,EACAwvG,EAA4B,OAAIxvG,EACjC,IAIL,MAAM6zG,OAAoC7zG,IAAxB8yG,GAAqCA,IAAwB7e,EAC/E,GAAI4f,IAAaxQ,EAAAA,GAAAA,MACf,OAGF,MAAM1nB,EAASotB,GAAYp5E,SAAWmxD,EAAU1lC,cAAe,IAAG2tD,GAAYp5E,WACxEy8E,GACHzwB,GACEqtB,GAA6Br5E,SAC7BmxD,EAAU1lC,cAA+B,mBAG9C,IAAI04D,EACJ,GAAI7I,GAAc4I,EAChBC,EAAetQ,EAAeD,OACzB,GAAI5nB,EAAQ,CACjB,MAAMo4B,EAAep4B,EAAOlG,wBAAwBnhE,IACpDw/F,EAAerQ,GAAasQ,GAAgBzD,GAAa3gF,SAAW,GACtE,MACEmkF,EADS1H,EACMv/F,KAAKm9B,IAClBoiE,EAAc6F,WAAavC,EA9WC,GADX,IAgXjBlM,EAAer9F,GAGFq9F,EAAer9F,EAGhC,MAAO,MACL6tG,EAAAA,GAAAA,GAAYlzB,EAAWj0E,KAAKsnD,KAAK2/C,KACjCG,EAAAA,GAAAA,MAEA9D,GAAgBxgF,QAAU9iB,KAAKC,IAAID,KAAKsnD,KAAKqvC,EAAesQ,GAAevQ,GAEtEiN,GAAkB7gF,UACrB8gF,GAA0B9gF,SAAU,GAEpCgkD,EAAAA,EAAAA,KAAe,KACb88B,GAA0B9gF,SAAU,CAAK,IAIR,CAItC,GACD,GAED,CAACxrB,EAAYykG,EAAkB8G,EAAU/G,GAAoB6J,GAAwBhD,KAExF9uD,EAAAA,GAAAA,IAAsB7kC,IAA8B,IAA5Bq4F,GAAuBr4F,OACd7b,IAA3Bk0G,IACFC,EAAAA,GAAAA,IA1YiC,IA0Y4BnwG,EAAAA,IAC/D,GACC,CAACigE,IAEJ,MAAM5/D,IAAOo5C,EAAAA,GAAAA,KAEPphB,GAAY11B,QAAQ/G,IAAU08B,EAAAA,EAAAA,IAAS18B,IACvCipG,GAAYliG,SAAU01B,KAAcysE,GAAkB3kC,GAAkBg1B,GACxEjtB,GAAYvlE,SAASkiG,IAAaC,GAClCsL,IAAuB93E,EAAAA,EAAAA,IAAS18B,KAAYukE,IAAmBqjC,KAG9DkB,KAAkBphG,GAAenD,KAE7BosG,GAAoB5gF,SAAkD,IAAvC4gF,GAAoB5gF,QAAQrwB,SAEvC,IAAvB6E,GAAY7E,QAAwE,kBAAxDg2C,IAAenxC,EAAW,KAAKoI,QAAQ6H,QAAQnT,MACpC,kBAAvCqG,GAAaiF,SAAS6H,QAAQnT,MAGhCqtG,GAAyBc,GAAeC,GAClB,IAAvBlrG,GAAY7E,QAAwE,eAAxDg2C,IAAenxC,EAAW,KAAKoI,QAAQ6H,QAAQnT,KAC1EozG,GAAsC,IAAvBlwG,GAAY7E,QAC4B,gBAAxDg2C,IAAenxC,EAAW,KAAKoI,QAAQ6H,QAAQnT,KAE9CqzG,GAAiB58D,IAAYA,EAAQ/yB,cAAgB+yB,EAAQvoB,MAAQuoB,EAAQ5e,MAE7ErJ,IAAYkvB,EAAAA,GAAAA,GAChB,4BACAutB,IAAa,cACZyjC,GAAW,cACH,WAAT1uG,GAAqB,cACrB2uG,GAAmB,oBACnBC,GAAiB,kBACjB5rC,GAAsB,qBACtBwtC,IAAc,YACb3sC,GAAW,gBAGd,OACEhpB,EAAAA,GAAAA,cAAA,OACEkF,IAAKsU,GACL7lC,UAAWA,GACX8kF,SAAUlC,GACVp9C,YAAa8gB,GAAAA,GAEZr2D,EACCo8B,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,SACbqsB,EAAAA,GAAAA,cAAA,YACG+yD,EAAoBA,EAAkB5rG,KAAQ,sBAAoB6lG,EAAgB,UAAY,UAGjGpxD,EACFoE,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,SACZw/E,GAAoBnzD,EAAAA,GAAAA,cAAA,YAAOz3C,GAAK,YAChCiwG,KAAmBrF,GAAoBnzD,EAAAA,GAAAA,cAAA,YAAOz3C,GAAK,eACnDqzC,GACCoE,EAAAA,GAAAA,cAAA,OACErsB,UAAU,WACVovB,MAAOoyD,IACJ,UAASA,GAAsBz8F,WAGjCm8F,IACC70D,EAAAA,GAAAA,cAAA,OACEmD,IAAK0xD,GACLn8F,MAAOy8F,IAAuBz8F,MAC9BC,OAAQw8F,IAAuBx8F,OAC/ByqC,IAAI,aAGP2xD,IACC/0D,EAAAA,GAAAA,cAACgrC,GAAAA,EAAc,CACbvI,SAAO,EACPt/B,IAAK4xD,GACL7pB,MAAI,EACJ6L,yBAAuB,EACvB9L,OAAK,EACLE,aAAW,IAGd6pB,KAAsBH,KAAoBE,IACzC/0D,EAAAA,GAAAA,cAACiyC,GAAAA,EAAQ,CACPv5E,MAAOy8F,IAAuBz8F,MAC9BC,OAAQw8F,IAAuBx8F,SAGlCijC,EAAQ/yB,aACPm3B,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,wBACbqsB,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,kBAAkBprB,GAAK,kBACnCi1D,EAAAA,GAAAA,GAAW5hB,EAAQ/yB,YAAa,CAAC,KAAM,QAAS,aAMzDyvF,GACFt4D,EAAAA,GAAAA,cAAC04D,GAAe,CAACzlG,OAAQnP,IACvBuE,KAAgBukG,IAAiB4F,IAA0B+F,IAC7Dv4D,EAAAA,GAAAA,cAAC24D,GAAU,CACT70G,OAAQA,EACRylB,MAAOA,EACPpkB,KAAMA,EACNkjE,eAAgBA,EAChBmqC,uBAAwBA,KAEtBnqG,GAAcukG,IAAkBphG,EACpCw0C,EAAAA,GAAAA,cAAC44D,GAAkB,CACjBxuF,qBAAsBA,EACtBtmB,OAAQA,EACRglE,WAAYA,EACZkkC,cAAeA,EACf3kG,WAAYA,GAAc,CAACmD,EAAavG,IACxC2nG,cAAeA,IAAiBz+B,GAAc,CAAC3iE,IAC/CqhG,mBAAoBA,GACpBC,iBAAkBjiG,QAAQiiG,GAC1Bx7F,SAAUzG,QAAQ4sC,GAClBs1D,UAAWA,GACX38B,UAAWA,GACX5W,aAAcA,GACdyzC,YAAaA,GACbC,6BAA8BA,GAC9B9uB,qBAAsBA,GACtBr6E,SAAUA,EACVoB,KAAMA,EACN6jE,QAASA,EACTg1B,mBAAoBA,EACpBuC,cAAeA,EACf4M,aAAYP,IAAyB,cAATznG,EAC5B05E,uBAAwB+tB,KAAkBgI,GAA2B/gF,QACrEu5E,YAAaA,EACbC,cAAeA,EACf7uB,2BAA4BA,IAG9Bx+B,EAAAA,GAAAA,cAAC6Q,GAAAA,EAAO,CAAC9O,MAAM,QAAQ82D,gBAAgB,SAErC,KG7lBV,IAAel5D,EAAAA,EAAAA,KAhDwBl8C,IAOjC,IAPkC,KACtCinD,EAAI,cACJouD,EAAa,YACb3vF,EAAW,QACXu4B,EAAO,UACPq3D,EAAS,UACTplF,GACDlwB,EACC,MAAM8E,GAAOo5C,EAAAA,GAAAA,KAGPuD,GAAMvB,EAAAA,EAAAA,IAAuB,OAC7B,kBACJ0f,EAAiB,kBACjBE,EAAiB,uBACjBC,EAAsB,sBACtBC,IACEC,EAAAA,GAAAA,GAAuBxe,GAAM6zD,GAEjC,OACE/4D,EAAAA,GAAAA,cAAA,OAAKrsB,WAAWkvB,EAAAA,GAAAA,GC1CG,uBD0CyBlvB,GAAYuxB,IAAKA,GAC3DlF,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLH,MAAM,YACNxmC,OAAK,EACLoY,UC9C+C,uBD+C/C+tB,QAASA,EACT6iB,cAAehB,EACfjb,UAAW//C,EAAKuwG,IAEhB94D,EAAAA,GAAAA,cAAA,KAAGrsB,WAAWkvB,EAAAA,GAAAA,GCnD+D,uBDmDnC,OAAS,QAAO6H,QAE3D7/C,QAAQse,IAAgB62B,EAAAA,GAAAA,cAAA,OAAKrsB,UCrD4H,yBDqD5F0sB,EAAAA,GAAAA,IAAqBl3B,IAClF4vF,GACC/4D,EAAAA,GAAAA,cAACyR,GAAAA,EAAI,CACH9rD,OAAQ09D,EACR5d,QAAS+d,EACTtP,oBAAqBuP,EACrB9R,WAAS,EACTrG,UAAU,QACVoG,UAAU,UAEV1R,EAAAA,GAAAA,cAACyK,GAAAA,EAAQ,CAACC,KAAK,YAAYhJ,QAASq3D,GAAYxwG,EAAK,mBAGrD,IElEV,GAAuD,uBC+HvD,IAAeo3C,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KACjBjgD,IACC,MAAMkC,GAAqBvB,EAAAA,EAAAA,IAAyBX,GACpD,IAAKkC,EACH,MAAO,CAAC,EAGV,MAAM,OAAEzB,EAAM,SAAEC,EAAUoB,KAAMmD,GAAoB/C,EAC9Ca,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAE1Bk1G,EAAkB5yG,GAAQrC,IAAamB,EAAAA,IAAsC,WAApBoD,EAE/D,MAAO,CACLA,kBACAxE,SACAm1G,eAAgBD,EAAkB5yG,EAAKqrC,0BAAuBvtC,EAC9Dg1G,cAAeF,EAAkB5yG,EAAKmmB,yBAAsBroB,EAC5DilB,YAAa6vF,EAAkB5yG,EAAK+iB,iBAAcjlB,EACnD,GAlBeo/C,EA/FqC7/C,IASnD,IAToD,QACxDstD,EAAO,QACP8iD,EAAO,gBACPvrG,EAAe,OACfxE,EAAM,YACNqlB,EAAW,eACX8vF,EAAc,cACdC,EAAa,eACbC,GACD11G,EACC,MAAM,eACJ21G,EAAc,kBAAEC,EAAiB,iBAAEC,EAAgB,qBAAE3nE,EAAoB,gBACzE4nE,EAAe,iBAAEC,EAAgB,oBAAEC,IACjCt9F,EAAAA,EAAAA,MAGEg7C,GAAaxT,EAAAA,EAAAA,IAAuB,MAEpC+1D,EAAqB7uG,QAAQouG,GAC7BU,EAAoB9uG,QAAQquG,IAElC95D,EAAAA,EAAAA,KAAU,KACJs6D,GAAsB51G,GACxB6tC,EAAqB,CAAE7tC,UACzB,GACC,CAACA,EAAQ6tC,EAAsB+nE,KAElCt6D,EAAAA,EAAAA,KAAU,KACJu6D,GAAqB71G,GACvB21G,EAAoB,CAAE31G,UACxB,GACC,CAACA,EAAQ21G,EAAqBE,IAEjC,MAAMl9C,GAAc1X,EAAAA,EAAAA,KAAY,KAC9B,GAAKgM,EAIL,GAAwB,WAApBzoD,EACF8wG,QACK,CACL,MAAM7hC,EAAoBpgB,EAAWtjC,QAAS4iF,cAAen3D,cAA8B,gBACrFs6D,EAAkBriC,EAAkB/jE,iBAAiC,sBACrEqmG,EAAqBD,EAAgBA,EAAgBp2G,OAAS,GACpE,IAAKq2G,EACH,QAGFliC,EAAAA,GAAAA,IAAcJ,EAAmBsiC,EAAoB,MAlDtC,GAmDjB,IACC,CAAC9oD,EAASzoD,EAAiB8wG,IAExB/nD,GAAexO,EAAAA,GAAAA,GDpFA,wBCsFlBkO,GAAWlmD,QAAQouG,IAAmBpuG,QAAQquG,KDtFwL,wBCuFtOruG,QAAQouG,IAAmBpuG,QAAQquG,MAAoBnoD,GDvFqZ,wBCwF5c8iD,GDxF+S,wBCyF/SsF,GDzF6X,wBC4FhY,OACEn5D,EAAAA,GAAAA,cAAA,OAAKkF,IAAKiS,EAAYxjC,UAAW09B,GAC/BrR,EAAAA,GAAAA,cAAC85D,GAAgB,CACfpvD,KAAK,gBACLouD,cAAc,8BACdp3D,QAAS23D,EACTN,UAAWS,EACXrwF,YAAa8vF,EACbtlF,WAAWkvB,EAAAA,GAAAA,GDpGuE,wBCsG/E62D,GAAsBz2D,IACtB02D,GDvG8J,0BC2GnK35D,EAAAA,GAAAA,cAAC85D,GAAgB,CACfpvD,KAAK,UACLouD,cAAc,sBACdp3D,QAAS43D,EACTP,UAAWQ,EACXpwF,YAAa+vF,EACbvlF,WAAYgmF,GAAqB12D,KAGnCjD,EAAAA,GAAAA,cAAC85D,GAAgB,CACfpvD,KAAK,aACLouD,cAAc,mBACdp3D,QAAS+a,EACTtzC,YAAaA,EACbwK,UDzHiM,yBC2H/L,K,gBC7GV,MAAMomF,GAAqB,KACrBC,GAAmB,GACnBC,GAAiB,YAER18F,eAAe28F,GAC5BC,EAAkB17C,EAAY50C,GAE9B,MAAMgtB,EAAU5pB,IAAIkxC,gBAAgBM,IAC5Bt5D,KAAM8pB,EAAQ,KAAEkzB,GAASsc,EACjC,IAAI27C,EACAr5C,EACA/pB,EACAhoB,EAEJ,GAAIG,EAAAA,IAAAA,IAAkCF,GAAW,CAC/C,MAAMmvC,QAAYi8C,EAAAA,GAAAA,IAAaxjE,IACzB,MAAEn+B,EAAK,OAAEC,GAAWylD,EAC1BpvC,GAAoBsrF,GAAoB5hG,EAAOC,GAE/C,MAAM4hG,EAAexpG,KAAKC,IAAI0H,EAAOC,GAAUohG,GACzCzuB,EAAQr8D,IAAaC,EAAAA,IAE3B,IAAKF,EAAkB,CACrB,IAAKnF,GAAS2wF,oBAAsBlvB,IAAUivB,GAA6B,eAAbtrF,GAA4B,CACxF,MAAMwrF,QAAmB38C,GACvBjnB,EAAS0jE,EAAeR,GAAqBhpG,KAAKC,IAAI0H,EAAOC,GAAU,EAAG,cAG5E,OADAsU,IAAI2xC,gBAAgB/nB,GACbqjE,GAAgBC,EAAU17C,EAAM,CACrC+7C,kBAAmBC,GAEvB,CAEiB,eAAbxrF,IACFkrF,EAAWA,EAASxmG,QAAQsmG,GAAgB,SAG9CG,EAAQ,CAAE1hG,QAAOC,SACnB,CAEAq+B,EAAiBH,CACnB,MAAO,GAAIznB,EAAAA,IAAAA,IAAkCH,GAAW,CACtD,MAAQyrF,WAAYhiG,EAAOiiG,YAAahiG,EAAM,SAAEuoD,SAAmB05C,EAAAA,GAAAA,IAAa/jE,GAChF7nB,GAAoBsrF,GAAoB5hG,EAAOC,GAE1CqW,IACHorF,EAAQ,CAAE1hG,QAAOC,SAAQuoD,aAG3BlqB,QAAuB6jE,EAAAA,GAAAA,IAAqBhkE,EAC9C,MAAO,GAAIxnB,EAAAA,IAAAA,IAAkCJ,GAAW,CACtD,MAAM,SACJiyC,EAAQ,MAAEptD,EAAK,UAAE4tD,EAAS,SAAEo5C,SC5D3Bv9F,eAAkC5F,GACvC,MAAM,aAAEojG,EAAY,YAAEC,SAAsB,qCACtCC,QAAiBF,EAAapjG,IAC5BujG,QAAQ,MAAEpnG,EAAK,OAAE2tD,EAAM,QAAE05C,GAAWC,QAAQ,SAAEl6C,IAAe+5C,EAE/DI,EAAQL,EAAYG,GAG1B,MAAO,CACLrnG,QACA4tD,UAAWD,EACXP,WACA45C,SANeO,EAAS,QAAOA,EAAMD,iBAAiBC,EAAMjkG,KAAK9L,SAAS,iBAAcpH,EAQ5F,CD+Cco3G,CAAmBzkE,GAC7BkqB,EAAQ,CACNG,SAAUA,GAAY,EACtBptD,QACA4tD,aAEF1qB,EAAiB8jE,CACnB,CAEA,MAAO,CACLjkE,UACAsjE,WACAlrF,WACAkzB,OACAi4D,QACAr5C,QACA/pB,iBACAhoB,iBAAkBA,QAAoB9qB,EACtCq3G,SAAW,GAAExrG,KAAKC,SAASe,KAAKob,cAC7BtC,EAEP,CAEO,SAAS2xF,GACdp2F,EAA8Bq2F,GAE9B,OAAOr2F,EAAYvc,KAAK6yG,GAClBD,EACEC,EAAOlB,kBACF,IACFkB,EACH7kE,QAAS6kE,EAAOlB,mBAGbkB,EAGF,IACFA,EACH1sF,kBAAmB0sF,EAAOpsF,YAAeprB,EACzCy3G,yBAAqBz3G,IAG3B,CAEA,SAASo2G,GAAoB5hG,EAAeC,GAE1C,OADuB5H,KAAKC,IAAI0H,EAAOC,GAAU5H,KAAKm9B,IAAIx1B,EAAOC,IACxCqhG,EAC3B,C,4BElHA,IAAI4B,GASW,SAASC,GAA8BC,GACpDF,GAAWn6E,QACXq6E,EAAQr6E,OACV,CAVIle,EAAAA,KACFq4F,GAAaroG,SAASksD,cAAc,SACpCm8C,GAAW5jD,UAAUxoC,IAAI,kCACzBjc,SAAS23B,KAAK6wE,YAAYH,K,gECS5B,MACMI,GAAiC,IAAIC,OAAQ,IAAGC,EAAAA,IAAAA,UAA2B,K,gBCZjF,MAAMC,GAAc,IAAIlvF,IAAI,cAAyDvZ,KAC/E0oG,GAAqB,IACrBC,GAAmB,CAAEF,eAAaG,aAAa,GAC/CC,GAAc,CAAEp3G,KAAM,aACtBq3G,GAAW,GACXC,GAAa,GAEnB,IAAIC,GACAC,GACAC,GAEGr/F,eAAewB,KAOpB,OANK29F,KACHA,GAAsB,oCACtBC,UAAsBD,IAAqBG,QAC3CD,GAAgB,IAAID,GAAaN,KAG5BK,EACT,CAEOn/F,eAAeu/F,GAAMC,SA6C5Bx/F,uBACQwB,WACA69F,GAAcE,OACtB,CA/CQE,GAEN,MAAMljC,EAAY/pE,KAAKC,MACvB,IAAIitG,EACJ,MAAMC,EAAuB,GACvBC,EAAqB,GAE3BP,GAAcQ,gBAAmBC,IAC/BH,EAAOzzG,KAAK4zG,EAAW,EAGzB,MAAMC,EAsCR,SAA6BC,EAAyB79F,GACpD,MAAM89F,EAASD,EAASE,WAClBC,EAAWF,EAAOG,QAAQC,iBAChCF,EAASG,QAAUrB,GACnBgB,EAAOM,QAAQJ,GAEf,MAAMK,EAAaL,EAASM,kBACtBC,EAAY,IAAIC,WAAWH,GACjC,IAAII,GAAc,EAoBlB,OAlBA,SAASC,IACP,GAAID,EACF,OAGFT,EAASW,qBAAqBJ,GAE9B,MAEMlyG,EAFMkyG,EAAU50G,QAAO,CAACC,EAAKuqB,IAAYvqB,EAAMuqB,GAAS,GAC1CkqF,EACE,IAzDoChyG,KAC1DoxG,EAAS1zG,KAAc,IAATsC,GACdgxG,EAAiBhxG,EAAO,EAyDxB2T,CAAG3T,EAAS0wG,GAAa,EAAI1wG,IAE7B8rE,EAAAA,EAAAA,IAAeumC,EACjB,CAEAA,GAEO,KACLD,GAAc,CAAI,CAEtB,CArE0BG,CAAoB1B,IAK5C,MAAO,CACLl6C,KAAMA,IAAM,IAAIrxC,SAAgB,CAACitC,EAASkd,KACxCohC,GAAc2B,OAAS,KACrBjgD,EAAQ,CACNG,KAAM,IAAIP,KAAKg/C,EAAQX,IACvBr7C,SAAUnwD,KAAKwK,QAAQ0hG,GAAYltG,KAAKC,OAAS8pE,GAAa,KAC9DqjC,YACA,EAEJP,GAAc4B,QAAUhjC,EAExB,MAAMijC,EAAY1tG,KAAKC,IAAI,EAAG8oE,EAAYsiC,GAAqBrsG,KAAKC,OACpErD,YAAW,KACTiwG,GAAcl6C,OACd46C,GAAiB,GAChBmB,EAAU,IAEfzsF,MAAOA,KACL,MAAMysF,EAAY1tG,KAAKC,IAAI,EAAG8oE,EAAYsiC,GAAqBrsG,KAAKC,OACpErD,YAAW,KACTiwG,GAAc5qF,QACdirF,EAAWltG,KAAKC,MAChBstG,GAAiB,GAChBmB,EAAU,EAGnB,C,gBCjEA,MAAMC,GAA0B,0BAE1BC,GAAe,CACnBC,KAAM,MACNC,OAAQ,SACRC,UAAW,YACXC,cAAe,eACfC,YAAa,QACbC,UAAW,OAGPC,GAAW,CACfC,OAAQ,IACRP,KAAM,SACNC,OAAQ,KACRC,UAAW,IACXC,cAAe,MACfC,YAAa,MACbC,UAAW,OAGP90E,GAAU,CACd,KACA,KACA,KACA,KACA,KACA,MAGF,SAASi1E,GAAUC,GAIjB,OAHe,IAAIC,WACAC,gBAAgBF,EAAM,aAE9Bn0E,IACb,CAEA,SAASs0E,GAAeC,EAAY/rG,GAClC,MAAMmsE,EAAStsE,SAASksD,cAAcy/C,GAASC,QAI/C,OAHAt/B,EAAOnsE,KAAOA,EACdmsE,EAAOk8B,YAAY0D,EAAKC,WAAU,IAE3B7/B,CACT,CAEA,SAAS8/B,GAAeF,EAAY18D,GAClC,MAAMvlB,EAAKjqB,SAASksD,cAAc1c,GAGlC,OAFAvlB,EAAGu+E,YAAY0D,EAAKC,WAAU,IAEvBliF,CACT,CAEA,SAASoiF,GAASC,EAAoBz2G,GACpC,IAAI02G,EAAU12G,EAAOs2G,WAAU,GAC/B,OAAKG,GAGDA,EAAM98D,OAAS88D,EAAM98D,MAAMg9D,aAAepB,GAAaC,OACzDkB,EAAUH,GAAeG,EAASZ,GAASN,OAEzCiB,EAAM98D,OAAS88D,EAAM98D,MAAMi9D,YAAcrB,GAAaE,SACxDiB,EAAUH,GAAeG,EAASZ,GAASL,SAEzCgB,EAAM98D,OAAS88D,EAAM98D,MAAMk9D,iBAAmBtB,GAAaG,YAC7DgB,EAAUH,GAAeG,EAASZ,GAASJ,YAEzCe,EAAM98D,OAAS88D,EAAM98D,MAAMk9D,iBAAmBtB,GAAaI,gBAC7De,EAAUH,GAAeG,EAASZ,GAASH,gBAEzCc,EAAM98D,OAAS88D,EAAM98D,MAAMm9D,gBAAkBvB,GAAaK,cAC5Dc,EAAUH,GAAeG,EAASZ,GAASF,cAEzCa,EAAM98D,OAAS88D,EAAM98D,MAAMm9D,gBAAkBvB,GAAaM,YAC5Da,EAAUH,GAAeG,EAASZ,GAASD,YAGtCa,GArBEA,CAsBX,CAiBA,SAASK,GAAkBC,GACzB,MAAMX,EAAOW,EAAMV,WAAU,GAC7B,IAAII,EAAUvsG,SAAS8sG,eAAeZ,EAAKvwB,aAAe,IACtDoxB,EAAab,EAQjB,MAPsB,MAAlBA,EAAKc,WACPT,EAAUN,GAAeM,EAAUL,EAA2B/rG,MAC1D,UAAW+rG,EAAKe,WAAW,IAAM31G,QAAQ40G,EAAKe,WAAW,GAAGz9D,SAC9Du9D,EAAab,EAAKe,WAAW,KAGjCV,EAAUF,GAASU,EAA2BR,GACvCA,CACT,CAEA,SAASW,GAAahB,GACpB,GAAIA,EAAKe,aAAef,EAAKe,WAAWh9G,QAAU,GAAuB,OAAlBi8G,EAAKc,UAAuC,OAAlBd,EAAKc,UAAoB,CACxG,IAAIG,EACAZ,EAAUvsG,SAAS8sG,eAAeZ,EAAKvwB,aAAe,IAC1D,GAAsB,OAAlBuwB,EAAKc,UAAuC,OAAlBd,EAAKc,UAAuC,OAAlBd,EAAKc,SAAmB,CAC9EG,EAAantG,SAASksD,cAAcggD,EAAKc,UACzCT,EAAUvsG,SAASotG,yBACnB,MAAMC,EAAQ,GACd,IAAK,IAAI3+F,EAAI,EAAGA,EAAIw9F,EAAKe,WAAWh9G,OAAQye,IAC1C2+F,EAAMn3G,QAAQg3G,GAAahB,EAAKe,WAAWv+F,KAE7C2+F,EAAM/3G,KAAKoZ,GAAkB69F,EAAQ/D,YAAY95F,IACnD,MAA+C,IAApCkoB,GAAQviC,QAAQ63G,EAAKc,WAC9BG,EAAantG,SAASksD,cAAcggD,EAAKc,UACzCT,EAAUK,GAAkBV,EAAKe,WAAW,KACjB,MAAlBf,EAAKc,UACdG,EAAantG,SAASksD,cAAc,KACpCqgD,EA9CN,SAA0BM,GACxB,MAAMX,EAAOW,EAAMV,WAAU,GAC7B,IAAII,EAAUvsG,SAAS8sG,eAAeZ,EAAKvwB,aAAe,IACtDoxB,EAAa/sG,SAAS8sG,eAAe,IASzC,MARI,UAAWZ,EAAKe,WAAW,IAAM31G,QAAQ40G,EAAKe,WAAW,GAAGz9D,SAC9Du9D,EAAab,EAAKe,WAAW,IAE3Bf,EAAKe,WAAW,IAAsC,MAAhCf,EAAKe,WAAW,GAAGD,WAC3CT,EAAUN,GAAeM,EAAQJ,WAAU,GAAQD,EAAKe,WAAW,GAAyB9sG,MAC5F4sG,EAAab,EAAKe,WAAW,GAAGA,WAAW,IAE7CV,EAAUF,GAASU,EAA2BR,GACvCA,CACT,CAiCgBe,CAAiBpB,IACA,OAAlBA,EAAKc,SACdT,EAAUL,GAEViB,EAAantG,SAASksD,cAAc,QACpCqgD,EAAUK,GAAkBV,IAE9B,OAAIiB,GACFA,EAAW3E,YAAY+D,GAChB,CAACY,IAGH,CAACjB,EAAKC,WAAU,GACzB,CAEA,GAAID,EAAKe,WAAY,CACnB,MAAMM,EAAQ,GACd,IAAK,IAAI7+F,EAAI,EAAGA,EAAIw9F,EAAKe,WAAWh9G,OAAQye,IAC1C6+F,EAAMr3G,QAAQg3G,GAAahB,EAAKe,WAAWv+F,KAE7C,OAAO6+F,CACT,CAEA,MAAO,CAACrB,EACV,CAEA,SAASsB,GAAWtB,GAClB,OAAyB,IAAlBA,EAAKuB,QACd,C,gBChJA,MAEMC,GAAkB,0BAwHxB,GAtE0BC,CACxB5sG,EACA6sG,EACAC,EACAC,EACAC,EACAC,MAEAniE,EAAAA,EAAAA,KAAU,KACR,GAAK9qC,EAqDL,OAFAf,SAASytC,iBAAiB,QAASwgE,GAAa,GAEzC,KACLjuG,SAAS0tC,oBAAoB,QAASugE,GAAa,EAAM,EAlD3DjkG,eAAeikG,EAAYxsG,GACzB,IAAKA,EAAEysG,cACL,OAGF,MAAMC,EAAQnuG,SAASouG,cACvB,GAAID,IAAU,CAACE,EAAAA,IAAmBC,EAAAA,KAAyB/zG,SAAS4zG,EAAMz8G,IACxE,OAGF,MAAM68G,EAAa9sG,EAAEysG,cAAcM,QAAQ,QAAQC,UAAU,EA3ExC,MA4Ef3C,EAAOrqG,EAAEysG,cAAcM,QAAQ,aACrC,IAAIE,EAAsB5C,GAAO3uG,EAAAA,EAAAA,IAzEvC,SAA2B2uG,GACzB,IAAI6C,EAAW3uG,SAASksD,cAAc,OACtC,IACE4/C,GD4JkC8C,EC5Jb9C,GD6JD1yF,MAAM+xF,IAlB9B,SAA0B0B,GACxB,MAAMl1E,EAAO33B,SAASksD,cAAc,QAC9BqhD,EAAQV,EAAMI,WACd4B,EAAgB1+G,MAAM2e,KAAKy+F,GAAOz5G,OAAO05G,IACzCsB,EAAa,GAEnB,IAAK,MAAM5C,KAAQ2C,EACjBC,EAAW54G,QAAQg3G,GAAahB,IAGlC,IAAK,IAAIx9F,EAAI,EAAGA,EAAIogG,EAAW7+G,OAAQye,IACrCipB,EAAK6wE,YAAYsG,EAAWpgG,GAAGy9F,WAAU,IAG3C,OAAOx0E,CACT,CAOSo3E,CAAiBlD,GAAU+C,EAAiBxuG,QAAQ,eAAgB,MAAMsnD,UAHxEmkD,GAAU+C,EAAiBxuG,QAAQ,eAAgB,KAAKsnD,SC7JjE,CAAE,MAAOvjD,GACH6C,EAAAA,KAEFC,QAAQC,MAAM/C,EAElB,CDsJa,IAAuByqG,ECrJpCD,EAASjnD,UAAYokD,EAAK1rG,QAAQ,UAAW,KAAKA,QAAQstG,GAAiB,IAE3E,MAAMsB,EAAeL,EAAS1uG,iBAAiC,iBAiC/D,OAhCI+uG,EAAa/+G,SACf0+G,EAAWK,EAAaA,EAAa/+G,OAAS,IAGhDE,MAAM2e,KAAK6/F,EAASM,qBAAqB,MAAMzzG,SAAS0wG,IACtD,GAAMA,aAAgBgD,YAiBtB,OAhBAhD,EAAK5kC,gBAAgB,SAGA,OAAjB4kC,EAAKiD,SAAkBjD,EAAKkD,YAAY,MACvB,MAAjBlD,EAAKiD,SAAiBjD,EAAK1D,YAAYxoG,SAAS8sG,eAAe,OAC9C,QAAjBZ,EAAKiD,SAAsBjD,EAAKpR,QAAQuU,YAAYnD,EAAKkD,YAAYlD,EAAKjgE,aAAa,QAAU,IAEjGigE,EAAKpR,QAAQwU,eAAepD,EAAKxnD,SAEjC6qD,EAAAA,GAA0BrD,EAAKiD,UACjCjD,EAAKzkC,aAAa,mBAAoB8nC,EAAAA,GAA0BrD,EAAKiD,UAGlEjD,EAAKpR,QAAQuU,YAAcnD,EAAKvwB,cAAgBuwB,EAAKsD,WAAWtD,EAAKkD,YAAYlD,EAAKvwB,aAEvFuwB,EAAKpR,QAAQjrD,KAAKq8D,EAAKzkC,aAAa,MAAOykC,EAAKpR,QAAQjrD,KACpDq8D,EAAKpR,QAAQuU,YACnB,KAAKI,EAAAA,GAAAA,YACHvD,EAAKkD,YAAYlD,EAAKvwB,aAAe,IACrC,MACF,KAAK8zB,EAAAA,GAAAA,YACHvD,EAAKvwB,YAAcuwB,EAAKpR,QAAQjrD,KAAO,GACjC,IAIL8+D,EAASjnD,UAAUgoD,SAC5B,CA4BQC,CAAkB7D,QAAOn7G,GAAW,QAClCA,EAEA+9G,IAAuBkB,EAAAA,GAAAA,IAAoBlB,IAAwBX,IACrEW,GAAsBmB,EAAAA,GAAAA,IAAiBnB,GACvCV,OAGF,MAAM,MAAEX,GAAU5rG,EAAEysG,cACpB,IAAIr6G,EAA4B,GAOhC,GALA4N,EAAE0qC,iBACEkhE,EAAMp9G,OAAS,IACjB4D,QAAci8G,EAAAA,GAAAA,GAA8BzC,KAGzCx5G,GAAO5D,SAAWs+G,EACrB,OAGF,GAAI16G,GAAO5D,SAAW69G,EAAe,CACnC,MAAMiC,QAAuBjyF,QAAQC,IAAIlqB,EAAMyB,KAAKmxB,GAC3CkgF,GAAgBlgF,EAAK0Y,KAAM1Y,MAEpConF,GAAgBh8F,GAAgBA,EAAYxE,OAAO0iG,IACrD,CAEA,MAAMC,EAActB,GAAqBz8F,UAAUhiB,OAASy+G,EAAsB,CAAE96G,KAAM26G,GAEtFyB,GACFpC,EAA0BoC,EAAa7B,GAAOz8G,GAElD,CAMC,GACA,CACDk8G,EAA2BE,EAAeD,EAAgB9sG,EAAUgtG,EAAwBC,GAC5F,EChHEiC,GAAe,IAAIj0F,IAAY,CAACyzF,EAAAA,GAAAA,QAA+BA,EAAAA,GAAAA,M,wCCPrE,MAAMS,GAAW,IACXC,GAA0B,0CAC1BC,GAAe,4CACfC,GAAiB,CACrB5yF,SAAU,GACVzsB,MAAO,GACPs/G,aAAa,EACbC,gBAAiB,IAGbC,GAASxwG,SAASksD,cAAc,OA2EtC,MAAMukD,IAAsBC,EAAAA,GAAAA,IAAS,CAACjzF,EAAkBzsB,EAAes/G,KAAyB,CAC9F7yF,WACAzsB,QACAs/G,cACAC,gBAAiB9yF,EAASswB,kBC5FtB4iE,GAAa,sB,4BCmGnB,SAASt+F,GAAkB7C,GACzB,OAAIA,EAAWiM,iBAAyB,OAEpCG,EAAAA,IAAAA,IAAkCpM,EAAWkM,UACxC,QAGLG,EAAAA,IAAAA,IAAkCrM,EAAWkM,UACxC,QAGLI,EAAAA,IAAAA,IAAkCtM,EAAWkM,UACxC,QAGF,MACT,C,gBCzGA,IAAIk1F,IAAW,EAUf,MCfA,IAAexkE,EAAAA,EAAAA,KARgCC,IAC7C,MAAM,OAAEj6C,GAAWi6C,EACbwkE,GAAqBtkE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,sBAAuBp6C,GAGjF,OAAOy+G,EAAqBpkE,EAAAA,GAAAA,cAACokE,EAAuBxkE,QAAY17C,CAAS,I,oDCX3E,SAAwD,uBCqBlDmgH,GAAwB,SA6B9B,IAAe1kE,EAAAA,EAAAA,KA3BqBl8C,IAE9B,IAF+B,KACnCinD,EAAI,MAAE7lB,GACPphC,EACC,MAAM,cAAE6gH,IAAkB//D,EAAAA,EAAAA,MACpB8c,GAAY7e,EAAAA,GAAAA,IAAShT,EAAAA,EAAAA,IAAqBkb,IAAO,EAAOtb,EAAAA,GAAAA,MAExDm1E,GAAU7hE,EAAAA,EAAAA,KAAQ,KACtB,IAAK2e,EAAW,MAAO,GACvB,MAAMtf,EAAkB,SAAVld,EAZO,qBACC,qBAahB2/E,EAA8BnjD,EAAU1tD,QAAQ0wG,GAAuBtiE,GACvE0iE,GAAM,IAAInF,WAAYC,gBAAgBiF,EAA6B,iBAMzE,OALAC,EAAIjxG,iBAAiB,QAAQzE,SAAS+zC,IACpCA,EAAKC,MAAM2hE,OAAS3iE,EACpBe,EAAKC,MAAM4hE,YAnBe,OAmBsB,IAG1C,2BAA0BF,EAAIG,gBAAgBC,WAAW,GAChE,CAACxjD,EAAWx8B,IAEf,OACEmb,EAAAA,GAAAA,cAAA,KAAGrsB,WAAWkvB,EAAAA,GAAAA,GD5CK,uBC4CuB,QAASyhE,GAAiBrhE,KAClEjD,EAAAA,GAAAA,cAAA,OAAKmD,IAAKohE,EAASnhE,IAAI,GAAGzvB,WAAWkvB,EAAAA,GAAAA,GD7C4C,wBC6CdyhE,GAAiBrhE,MAClF,ICwDR,IAAetD,EAAAA,EAAAA,KA7EqBl8C,IAO9B,IAP+B,IACnCu+B,EAAG,MACH6C,EAAK,OACL/gC,EAAM,SACNC,EAAQ,aACR+gH,EAAY,aACZC,GACDthH,EACC,MAAM,cAAE0kC,EAAa,gBAAEpG,IAAoB5lB,EAAAA,EAAAA,MAErC5T,GAAOo5C,EAAAA,GAAAA,KAEP+I,GAAOhI,EAAAA,EAAAA,KAAQ,IACZ1gB,EAAIgjF,MAAMh2G,MAAKiC,IAAA,IAAC,KAAEyhC,GAAMzhC,EAAA,MAAc,mBAATyhC,CAAyB,KAAGn/B,UAC/D,CAACyuB,EAAIgjF,SAED7zD,EAAY8zD,EAAUC,IAAanhE,EAAAA,GAAAA,MACnCohE,EAAcC,IAAmBxkE,EAAAA,EAAAA,SAAsC18C,GAExEq/D,GAAoBxe,EAAAA,EAAAA,KAAa/vC,IACrCA,EAAE0qC,iBACF,MAAM2lE,EAAOrwG,EAAE4lE,cAAcjB,wBAC7ByrC,EAAgB,CAAEt3E,EAAGu3E,EAAKC,MAAO51E,EAAG21E,EAAK7W,SACzCsW,IACAG,GAAU,GACT,CAACH,EAAcG,IAEZM,GAAkBxgE,EAAAA,EAAAA,KAAY,KAClCmgE,IACAH,GAAc,GACb,CAACG,EAAWH,IAETS,GAA0BzgE,EAAAA,EAAAA,KAAY,KAC1CqgE,OAAgBlhH,EAAU,GACzB,IAEGuhH,GAAkB1gE,EAAAA,EAAAA,KAAY,KAClChjB,EAAgB,CACd/pB,MAAOgqB,EAAI/8B,GACXg9B,WAAW,GACX,GACD,CAACD,EAAI/8B,GAAI88B,IAEZ,OACEie,EAAAA,GAAAA,cAACyK,GAAAA,EAAQ,CACPhO,IAAKza,EAAI/8B,GACTmgE,WAAY1a,GAAQ1K,EAAAA,GAAAA,cAAC0lE,GAAa,CAACh7D,KAAMA,EAAM7lB,MAAOA,IACtD6lB,KAAOA,OAAgBxmD,EAAT,OAEdw9C,QAASA,IAAMvZ,EAAc,CAC3BnG,MACAl+B,SACAC,aAEFwgE,cAAehB,GAEdvhC,EAAIxR,UACJ20F,GACCnlE,EAAAA,GAAAA,cAAC2lE,GAAAA,EAAM,KACL3lE,EAAAA,GAAAA,cAACyR,GAAAA,EAAI,CACH9rD,OAAQwrD,EACR7F,UAAU,QACVvI,MAAQ,SAAQoiE,EAAar3E,YAAYq3E,EAAaz1E,OACtD/b,UAAU,0BACVg+B,WAAS,EACTlM,QAAS8/D,EACTrxD,oBAAqBsxD,GAErBxlE,EAAAA,GAAAA,cAACyK,GAAAA,EAAQ,CAACC,KAAK,OAAO+D,aAAW,EAAC/M,QAAS+jE,GAAkBl9G,EAAK,uBAK/D,ICiGf,IAAeo3C,EAAAA,EAAAA,KArJkBl8C,IAgB3B,IAhB4B,OAChCK,EAAM,SACNC,EAAQ,gBACR6hH,EAAe,eACfC,EAAc,eACdC,EAAc,cACdtvG,EAAa,cACbC,EAAa,iBACbC,EAAgB,cAChBC,EAAa,WACbovG,EAAU,SACVlpE,EAAQ,YACRpG,EAAW,aACXuvE,EAAY,aACZC,EAAY,MACZphF,GACDphC,EACC,MAAOyiH,EAAkBC,EAAgBC,IAAmBriE,EAAAA,GAAAA,MACrD6O,EAAkBC,EAAkBwzD,IAAmBC,EAAAA,GAAAA,GAAeJ,EAAkBE,GAEzFG,EAAuB/vG,GAAiBC,EACxC+vG,EAAsBhwG,GAAiBC,GAEtCgwG,EAAyBC,EAA2BC,IAA+B5iE,EAAAA,GAAAA,MAC1F3E,EAAAA,EAAAA,KAAU,KACJ8mE,GACFG,GACF,GACC,CAACH,EAAkBG,IAEtB,MAAMO,GAAyB7hE,EAAAA,EAAAA,KAAY,KACrCmhE,EACFE,IAEAD,GACF,GACC,CAACD,EAAkBC,EAAgBC,IAEhCS,GAAmB9hE,EAAAA,EAAAA,KAAY,CAAC/vC,EAAU8xG,KAC9C,MAAM,MAAE1/G,GAAU4N,EAAEklE,OACd6sC,GAAiBC,EAAAA,GAAAA,IAAc5/G,GAEjC2/G,GAAgBvjH,QAClBwiH,EAAae,EAAgBD,EAC/B,GACC,CAACd,IAEEiB,GAAoBliE,EAAAA,EAAAA,KAAY,MACpCmiE,EAAAA,GAAAA,GACExjH,MAAM2e,KAAKkkG,EAAuBY,EAAAA,IAChC3wG,EAAgB2Y,EAAAA,IAAgCC,EAAAA,KAC/CrlB,KAAK,MACPiL,GAAM6xG,EAAiB7xG,GAAG,IAC5B,GACA,CAACwB,EAAe+vG,EAAsBM,IAEnCO,GAAuBriE,EAAAA,EAAAA,KAAY,MACvCmiE,EAAAA,GAAAA,IAAuBxwG,GAAoBC,EACvCjT,MAAM2e,KAAKgN,EAAAA,KAA+BtlB,KAAK,KAC/C,KACEiL,GAAM6xG,EAAiB7xG,GAAG,IAAO,GACtC,CAAC2B,EAAeD,EAAkBmwG,IAE/BxkF,GAAOqgB,EAAAA,EAAAA,KAAQ,IACZv3C,OAAOmR,OAAOypG,GAAY1+G,QAAQ26B,KAClC6a,MACY,SAAbA,GAAuB7a,EAAI/8B,KAAOnB,IAAUk+B,EAAIiG,UAAUn6B,SAAS,UAGhEk0B,EAAIiG,UAAUn6B,SAAS+uC,OAE/B,CAACkpE,EAAYjiH,EAAQ+4C,IAElBt0C,GAAOo5C,EAAAA,GAAAA,KAEb,GAAKikE,EAIL,OACE5lE,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,cACbqsB,EAAAA,GAAAA,cAACqnE,GAAAA,EAAqB,CACpBpiH,GAAG,qBACH0uB,UAAWuyF,EAAmB,+BAAiC,qBAC/D3qG,OAAK,EACLwmC,MAAM,cACNulE,WAAYV,EACZt+D,UAAU,oBACVi/D,aAAa,uBACbC,UAAQ,GAERxnE,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,sBAEfqsB,EAAAA,GAAAA,cAACyR,GAAAA,EAAI,CACHxsD,GAAG,uBACHU,OAAQugH,GAAoBO,EAC5B90D,WAAS,EACTrG,UAAU,QACVoG,UAAU,SACVjM,QAAS2gE,EACTzyF,UAAU,yBACVugC,oBAAqBkyD,EACrB9yD,aAAe3jD,EAAAA,QAAkCzL,EAAnB0uD,EAC9BW,aAAe5jD,EAAAA,QAAkCzL,EAAnB2uD,EAC9B40D,mBAAoB93G,EAAAA,GACpB+3G,eAAe,uBAMb7B,GACA7lE,EAAAA,GAAAA,cAACyK,GAAAA,EAAQ,CAAC92B,UAAU,iBAAiBixC,UAAQ,GAAC,uDAE/CihD,GACC7lE,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACGwmE,GACCxmE,EAAAA,GAAAA,cAACyK,GAAAA,EAAQ,CAACC,KAAK,QAAQhJ,QAASulE,GAC7B1+G,EAAKg+G,EAAuB,8BACxB/vG,EAAgB,4BAA8B,+BAGrDE,GAAoBC,IAElBqpC,EAAAA,GAAAA,cAACyK,GAAAA,EAAQ,CAACC,KAAK,WAAWhJ,QAAS0lE,GAChC7+G,GAAMmO,GAAoBC,EAAgB,4BAA8B,oBAKlFmvG,GACC9lE,EAAAA,GAAAA,cAACyK,GAAAA,EAAQ,CAACC,KAAK,OAAOhJ,QAASukE,GAAe19G,EAAK,SAGpDs9G,IAAmBpvE,GAAepU,EAAKx5B,KAAKm5B,GAC3Cge,EAAAA,GAAAA,cAAC2nE,GAAa,CACZ3lF,IAAKA,EACLl+B,OAAQA,EACRC,SAAUA,EACV8gC,MAAOA,EACPigF,aAAc4B,EACd3B,aAAc4B,OAIhB,ICjLV,IAAehnE,EAAAA,EAAAA,KAR8BC,IAC3C,MAAM,OAAEj6C,GAAWi6C,EACbgoE,GAAmB9nE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqBp6C,GAG7E,OAAOiiH,EAAmB5nE,EAAAA,GAAAA,cAAC4nE,EAAqBhoE,QAAY17C,CAAS,ICGvE,IAAey7C,EAAAA,EAAAA,KAR4BC,IACzC,MAAM,OAAEj6C,GAAWi6C,EACbioE,GAAiB/nE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,kBAAmBp6C,GAGzE,OAAOkiH,EAAiB7nE,EAAAA,GAAAA,cAAC6nE,EAAmBjoE,QAAY17C,CAAS,I,gBCLnE,MAQA,IAAey7C,EAAAA,EAAAA,KAR4BC,IACzC,MAAM,OAAEj6C,GAAWi6C,EACbkoE,GAAiBhoE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,kBAAmBp6C,GAGzE,OAAOmiH,EAAiB9nE,EAAAA,GAAAA,cAAC8nE,EAAmBloE,QAAY17C,CAAS,I,4BCLnE,MAQA,IAAey7C,EAAAA,EAAAA,KAR+BC,IAC5C,MAAM,OAAEj6C,GAAWi6C,EACbmoE,GAAoBjoE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,qBAAsBp6C,GAG/E,OAAOoiH,EAAoB/nE,EAAAA,GAAAA,cAAC+nE,EAAsBnoE,QAAY17C,CAAS,IC0DzE,IAAey7C,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAACjgD,EAAM4N,KAAgC,IAA9B,UAAE1G,GAAW0G,EACpB,MAAM,OAAEnN,IAAWE,EAAAA,EAAAA,IAAyBX,IAAW,CAAC,EACxD,OAAKS,EAIE,CAAEgF,SAASiP,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQyG,IAH3C,CAAC,CAGsD,GAPhD+4C,EA7C+B7/C,IAE7C,IAF8C,OAClDkC,EAAM,QAAEmD,EAAO,QAAE28C,GAClBhiD,EACC,MAAM,qBAAE63D,IAAyBn/C,EAAAA,EAAAA,OAE1By2C,EAAkBC,IAAoByzD,EAAAA,GAAAA,GAAe3gH,EAAQ8/C,IAC9D,oBAAEuiE,GAAwBl/G,GAAW,CAAC,EAE5C,GAAKA,GAAYA,EAAQm/G,gBAIzB,OACEjoE,EAAAA,GAAAA,cAACyR,GAAAA,EAAI,CACH9rD,OAAQA,EACRgsD,UAAWq2D,EACX18D,UAAU,QACVoG,UAAU,SACVjM,QAASA,EACT9xB,UAAU,kBACVugC,oBAAqBzO,EACrB6N,aAAe3jD,EAAAA,QAAkCzL,EAAnB0uD,EAC9BW,aAAe5jD,EAAAA,QAAkCzL,EAAnB2uD,EAC9Bq1D,WAAS,GAETloE,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,WACZ7qB,EAAQm/G,gBAAgBp/G,KAAK+rE,GAC5B50B,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,OACZihD,EAAI/rE,KAAKw7B,GACR2b,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLiD,QAAM,EACNyf,SAA0B,gBAAhBvgC,EAAOl/B,KAEjBu8C,QAASA,IAAM4Z,EAAqB,CAAE/wD,UAAWzB,EAAQ7D,GAAIo/B,YAE5DA,EAAOl9B,YAMb,K,wCCNX,MA6NA,IAAew4C,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAACjgD,EAAM4N,KAA6C,IAA3C,uBAAEk3G,GAAwBl3G,EACjC,MAAM,OAAEnN,EAAM,SAAEC,EAAUoB,KAAMmD,IAAoBtE,EAAAA,EAAAA,IAAyBX,IAAW,CAAC,EACzF,IAAKS,IAAWC,IAAauE,EAC3B,MAAO,CAAC,EAGV,MACEpC,iBAAiB,WACfiI,EAAU,SAAEhI,EAAUkC,WAAY+/G,EAAiB,UAAE55G,EAAS,WAAEC,KAEhE9J,EAAAA,EAAAA,IAAetB,GAEb0H,GAAeC,EAAAA,EAAAA,IAAmB3H,EAAQS,EAAQC,GAClDgkB,EAAgC,cAApBzf,GACd2f,EAAAA,EAAAA,IAAyB5kB,EAAQS,IACjCkkB,EAAAA,EAAAA,IAAgB3kB,EAAQS,EAAQC,GAC9BsoF,GAAgBzzE,EAAAA,EAAAA,IAA0BvV,GAC1Cq6F,EAAev3F,IAAarC,EAC5BukH,EAAoBD,GAAmBv/G,KAAK5D,IAAO8S,EAAAA,EAAAA,IAAkB1U,EAAQ8K,EAAalJ,KAEhG,IAAI6D,EASAS,EACJ,GATIwB,IAAiBo9G,EACnBr/G,GAAUiP,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQiH,GACnCgd,EACTjf,GAAUwd,EAAAA,EAAAA,IAAqBjjB,EAAQS,EAAQC,EAAUuE,GAChDo1F,GAA8C,IAA9B0qB,EAAmB5kH,SAC5CsF,EAAUu/G,IAAoB,IAI5Bt9G,GAAgBjC,IAAYq/G,EAAwB,CACtD,MAAM,YAAEl5C,GAAgBnmE,EAClBu/D,GAAiBC,EAAAA,EAAAA,IAAqBjlE,EAAQS,GAChDmrE,IAAgBA,EAAYuzB,eAAiBn6B,KAC/C9+D,GAASo/D,EAAAA,EAAAA,IAAsBtlE,EAAQyF,IAGpCS,GAAW0lE,GAAaE,iBAC3B5lE,GAASC,EAAAA,EAAAA,IAAanG,EAAQyF,GAElC,MAAW40F,IACL50F,IACFS,GAASo/D,EAAAA,EAAAA,IAAsBtlE,EAAQyF,GAClCS,IACHA,GAASC,EAAAA,EAAAA,IAAanG,EAAQyF,KAG7BS,IACHA,GAASi3B,EAAAA,EAAAA,IAASryB,IAAe2Y,EAAAA,EAAAA,IAAWzjB,EAAQ8K,IAAe9H,EAAAA,EAAAA,IAAWhD,EAAQ8K,KAI1F,MAAMm6G,EAAuBD,GAAmBx3E,MAAM03E,GACpDA,GAAS93G,QAAQtJ,MAAQgE,OAAOC,KAAKm9G,EAAQ93G,SAASjN,OAAS,IAGjE,MAAO,CACLuH,eACAgd,YACAjf,UACAS,SACA8iF,gBACAm8B,uBAAwB9qB,EAAe0qB,EAAmB5kH,YAASU,EACnEsK,YACAC,aACA65G,uBACAl+F,sBAAsBC,EAAAA,EAAAA,IAA2BhnB,GAClD,GApEeigD,EA3NuC7/C,IAarD,IAbsD,aAC1DsH,EAAY,UACZgd,EAAS,QACTjf,EAAO,OACPS,EAAM,cACN8iF,EAAa,uBACbm8B,EAAsB,UACtBh6G,EAAS,WACTC,EAAU,qBACV65G,EAAoB,uBACpBH,EAAsB,qBACtB/9F,EAAoB,QACpBq+F,GACDhlH,EACC,MAAM,gBACJmI,EAAe,aACf2a,EAAY,aACZ1a,EAAY,uBACZ68G,EAAsB,oBACtBC,EAAmB,qBACnBC,EAAoB,gBACpBC,IACE1sG,EAAAA,EAAAA,MAEE+oC,GAAMvB,EAAAA,EAAAA,IAAuB,MAC7Bp7C,GAAOo5C,EAAAA,GAAAA,KAEP+7C,EAAe7yF,QAAQ29G,GACvBz3D,EAAUlmD,SACZE,GAAgBgd,IAAcjf,GAC5BS,GAAUi/G,GAEVM,GAAahtD,EAAAA,GAAAA,GACjB,CAAC0sD,GACDA,EApC4B,SAoCuBtkH,IAG/C,aACJwrD,EAAY,qBAAEE,IACZC,EAAAA,GAAAA,GAAkBi5D,GAAc/3D,OAAS7sD,GAAYmoF,OAAenoF,GAAYmoF,GAE9E08B,GAAgBhkE,EAAAA,EAAAA,KAAY,KAC5Bh6C,IAAiBo9G,EACnBv8G,EAAgB,CAAErB,eAAWrG,IACpB6jB,EACTxB,EAAa,CAAEhc,eAAWrG,IACjBskH,GACTK,IAEFJ,KAAW,GACV,CACD19G,EAAco9G,EAAwBpgG,EAAWygG,EAAwBC,EAAS78G,EAAiB2a,EACnGsiG,KAGFzpE,EAAAA,EAAAA,KAAU,IAAO2R,GAAUhH,EAAAA,GAAAA,GAAsBg/D,QAAiB7kH,GAAY,CAAC6sD,EAASg4D,IAExF,MAAMC,GAAqBjkE,EAAAA,EAAAA,KAAY,KACjC24C,GACJ7xF,EAAa,CAAE/H,OAAQgF,EAAShF,OAAQyG,UAAWzB,EAAS7D,GAAIK,mBAAmB,GAAO,GACzF,CAACuG,EAAc6xF,EAAc50F,IAE1BmgH,GAAmBlkE,EAAAA,EAAAA,KAAa/vC,IACpCA,EAAE6yC,kBACFkhE,GAAe,GACd,CAACA,IAEEG,GAA6BnkE,EAAAA,EAAAA,KAAY,KAC7C2jE,GAAwB,GACvB,CAACA,KAEE,kBACJrlD,EAAiB,oBAAEgc,EAAmB,kBAAE9b,EAAiB,uBACzDC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBxe,GAErBikE,GAAoBpkE,EAAAA,EAAAA,KAAY,IAAMG,EAAIrxB,SAAS,IACnDu1F,GAAiBrkE,EAAAA,EAAAA,KAAY,IAAMG,EAAIrxB,SAAU,IACjDw1F,GAAiBtkE,EAAAA,EAAAA,KAAY,IAAMG,EAAIrxB,QAASyrB,cAAc,kCAAkC,KAEhG,UACJgM,EAAS,UAAEoG,EAAS,iBAAE43D,EAAgB,iBAAEC,EAAkBxmE,MAAOymE,IAC/DC,EAAAA,GAAAA,GACFpqC,EACA8pC,EACAC,EACAC,GAGI11F,GAAYkvB,EAAAA,GAAAA,GAAe,0BAA2B+M,GAEtD85D,GAAWhnE,EAAAA,EAAAA,KAAQ,IACnB33C,IAAiBo9G,EACZ,aAELpgG,EACK,YAEL21E,EACK,oBADT,GAKC,CAAC31E,EAAW21E,EAAc3yF,EAAco9G,IAErCroC,EAAa0oC,GAA0BA,EAAyB,EAClEjgH,EAAK,wBAAyBigH,QAC9BtkH,EAEEylH,GAAkBjnE,EAAAA,EAAAA,KAAQ,KAC9B,IAAK55C,IAAY40F,IAAiB50F,EAAQ2H,QAAQtJ,OAASqH,GAAa4b,EAAsB,OAAOthB,EAErG,MAAM8gH,GAAexG,EAAAA,EAAAA,IAAiBt6G,EAAQ2H,QAAQtJ,MACtD,MAAO,IACF2B,EACH2H,QAAS,IACJ3H,EAAQ2H,QACXtJ,KAAMyiH,GAET,GACA,CAACx/F,EAAsBszE,EAAc50F,EAAS0F,IAEjD,GAAKkhD,EAIL,OACE1P,EAAAA,GAAAA,cAAA,OAAKrsB,UAAWA,EAAWuxB,IAAKA,EAAKqf,cAAehB,EAAmB7hB,QAAS6hB,GAC9EvjB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,iCACbqsB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,sBACbqsB,EAAAA,GAAAA,cAAA,KAAGrsB,WAAWkvB,EAAAA,GAAAA,GAAe,OAAQ6mE,MAEvC1pE,EAAAA,GAAAA,cAAC+pD,GAAe,CACdp2E,UAAU,eACV7qB,QAAS6gH,EACTpgH,OAASiF,OAAqBtK,EAATqF,EACrBu2E,WAAYA,EACZhsE,MAAOiU,EAAYxf,EAAK,eAAiBiG,EAAYjG,EAAK,qCAAkCrE,EAC5Fw9C,QAASsnE,EACThpC,eAAgB0d,IAElB19C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLvuB,UAAU,kBACVpY,OAAK,EACLsuG,OAAK,EACL9nE,MAAM,cACNuG,UAAW//C,EAAK,UAChBm5C,QAASunE,GAETjpE,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,qBAEd+pE,GACC19C,EAAAA,GAAAA,cAACyR,GAAAA,EAAI,CACH9rD,OAAQ09D,EACRimD,iBAAkBA,EAClBC,iBAAkBA,EAClBj+D,UAAWA,EACXoG,UAAWA,EACX3O,MAAOymE,EACP71F,UAAU,uBACV8xB,QAAS+d,EACTtP,oBAAqBuP,GAErBzjB,EAAAA,GAAAA,cAACyK,GAAAA,EAAQ,CACPC,KAAOl8C,OAAkCtK,EAAtB,oBACnBkhE,WAAY52D,EAAYwxC,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,+BAA6BzvB,EAElEw9C,QAASA,IAAMinE,EAAoB,CACjCn6G,WAAW,KAGZjG,EAAKigH,EAAyB,EAAI,kBAAoB,oBAEzDxoE,EAAAA,GAAAA,cAACyK,GAAAA,EAAQ,CACPC,KAAMl8C,EAAY,yBAAsBtK,EACxCkhE,WAAa52D,OAAsDtK,EAA1C87C,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,0BAEtC+tB,QAASA,IAAMinE,EAAoB,CACjCn6G,WAAW,KAGZjG,EAAKigH,EAAyB,EAAI,kBAAoB,oBAExDF,GACCtoE,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAC8pE,GAAAA,EAAa,MACd9pE,EAAAA,GAAAA,cAACyK,GAAAA,EAAQ,CACPC,KAAOj8C,OAAmCvK,EAAtB,oBACpBkhE,WAAY32D,EAAauxC,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,+BAA6BzvB,EAEnEw9C,QAASA,IAAMknE,EAAqB,CAClCn6G,YAAY,KAGblG,EAAKigH,EAAyB,EAAI,0CAA4C,gBAEjFxoE,EAAAA,GAAAA,cAACyK,GAAAA,EAAQ,CACPC,KAAMj8C,EAAa,yBAAsBvK,EACzCkhE,WAAa32D,OAAuDvK,EAA1C87C,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,0BAEvC+tB,QAASA,IAAMknE,EAAqB,CAClCn6G,YAAY,KAGblG,EAAKigH,EAAyB,EAAI,0CAA4C,iBAIrFxoE,EAAAA,GAAAA,cAAC8pE,GAAAA,EAAa,MACd9pE,EAAAA,GAAAA,cAACyK,GAAAA,EAAQ,CAACC,KAAK,UAAUhJ,QAASwnE,GAC/B3gH,EAAK,sBAKV,KCtQV,IAAeo3C,EAAAA,EAAAA,KAR6BC,IAC1C,MAAM,YAAEx6B,GAAgBw6B,EAClBmqE,GAAkBjqE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,mBAAoB36B,EAAY5hB,QAGvF,OAAOumH,EAAkB/pE,EAAAA,GAAAA,cAAC+pE,EAAoBnqE,QAAY17C,CAAS,ICGrE,IAAey7C,EAAAA,EAAAA,KAR4BC,IACzC,MAAM,OAAEj6C,GAAWi6C,EACboqE,GAAiBlqE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,kBAAmBp6C,GAGzE,OAAOqkH,EAAiBhqE,EAAAA,GAAAA,cAACgqE,EAAmBpqE,QAAY17C,CAAS,ICGnE,IAAey7C,EAAAA,EAAAA,KARuBC,IACpC,MAAM,OAAEj6C,GAAWi6C,EACbqqE,GAAYnqE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,aAAcp6C,GAG/D,OAAOskH,EAAYjqE,EAAAA,GAAAA,cAACiqE,EAAcrqE,QAAY17C,CAAS,ICGzD,IAAey7C,EAAAA,EAAAA,KARsBC,IACnC,MAAM,OAAEj6C,GAAWi6C,EACbsqE,GAAWpqE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,YAAap6C,GAG7D,OAAOukH,EAAWlqE,EAAAA,GAAAA,cAACkqE,EAAatqE,QAAY17C,CAAS,IC2BjDimH,GAAU,IAAIlO,OAAOmO,EAAAA,IAAkB,KAyF7C,IAAezqE,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAACjgD,EAAM4N,KAAuC,IAArC,OAAEnN,EAAM,SAAEC,GAAUkN,EAC3B,MAAM6T,GAAYC,EAAAA,EAAAA,IAAgB1hB,EAAQS,EAAQC,GAClD,MAAO,CACL8gC,OAAOkhB,EAAAA,EAAAA,IAAY1iD,GACnBumB,gBAAgBjlB,EAAAA,EAAAA,IAAetB,GAAQumB,eACvC9E,YACD,GAPew+B,EAvF8B7/C,IAQ5C,IAR6C,OACjDK,EAAM,SACNC,EAAQ,QACRsmH,EAAO,WACP5pE,EAAU,eACV72B,EAAc,UACd9E,EAAS,MACT+f,GACDphC,EACC,MAAM,mBACJ6mH,EAAkB,oBAClBplG,EAAmB,qBACnBqlG,IACEpuG,EAAAA,EAAAA,MAEEquG,GAAsBC,EAAAA,GAAAA,KAAqB,KAC/C,MAAM,KAAEtjH,EAAI,SAAEqe,IAAa9U,EAAAA,EAAAA,IAAkB25G,KACvCK,EAAallG,GAAUxW,MAAM27G,GACjCA,EAAOxlH,OAAS69G,EAAAA,GAAAA,UAGlB,OAAO0H,GAAY/yG,KAAOxQ,EAAKwlB,MAAMw9F,MAAW,EAAE,GACjD,CAACE,GAzBc,KAyBS,GAErBO,GAAUC,EAAAA,GAAAA,GAAiBL,EAAqB,CAACA,EAAqBH,IAAU,IAEtFjrE,EAAAA,EAAAA,KAAU,KACR,MAAM3rC,EAAOm3G,IAETn3G,EACF62G,EAAmB,CAAEnjH,KAAMsM,KAE3ByR,IACAqlG,EAAqB,CAAEzmH,SAAQC,aACjC,GACC,CAAC6mH,EAAS9mH,EAAQC,EAAUmhB,EAAqBolG,EAAoBC,KAExExzD,EAAAA,GAAAA,IAAc,KACZ7xC,IACAqlG,EAAqB,CAAEzmH,SAAQC,YAAW,GACzC,CAACD,EAAQohB,EAAqBnhB,EAAUwmH,IAE3C,MAAMx5D,GAAU4Y,EAAAA,GAAAA,IAAgB,IACvB9+D,QAAQ+e,GAAkBygG,MAAcvlG,IAAc27B,IAC5D,CAACA,EAAY4pE,EAASvlG,EAAW8E,KAC9B,aAAE8lC,EAAY,qBAAEE,IAAyBC,EAAAA,GAAAA,GAAkBkB,GAE3D+5D,GAAmBp/C,EAAAA,GAAAA,GAAiB9hD,GAAgB,GAEpDmhG,GAA4BhmE,EAAAA,EAAAA,KAAY,KAC5CwlE,EAAqB,CAAEzmH,SAAQC,WAAU+gB,WAAW,GAAO,GAC1D,CAAChhB,EAAQC,EAAUwmH,IAEtB,IAAK76D,IAAiBo7D,EACpB,OAIF,MAAM,MAAE9tF,KAAUguF,GAAwBF,EACpCG,EAAc,CAClBx6G,QAAS,CACPmgF,QAASo6B,IAIb,OACEhrE,EAAAA,GAAAA,cAAA,OAAKrsB,WAAWkvB,EAAAA,GAAAA,GAAe,iBAAkB+M,IAC/C5P,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,wBACbqsB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,4BACbqsB,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,oBAEfqsB,EAAAA,GAAAA,cAACmrD,GAAO,CAACriG,QAASmiH,EAAax6B,WAAS,EAAC5rD,MAAOA,IAChDmb,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLvuB,UAAU,uBACVpY,OAAK,EACLsuG,OAAK,EACL9nE,MAAM,cACNuG,UAAU,wBACV5G,QAASqpE,GAET/qE,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,sBAGb,KC7GV,IAAegsB,EAAAA,EAAAA,KARwBC,IACrC,MAAM,OAAEj6C,GAAWi6C,EACbsrE,GAAaprE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAAep6C,GAGjE,OAAOulH,EAAalrE,EAAAA,GAAAA,cAACkrE,EAAetrE,QAAY17C,CAAS,IC+C3D,IAAey7C,EAAAA,EAAAA,KA7CqBl8C,IAK9B,IAL+B,OACnCkC,EAAM,QACN+7C,EAAO,KACPv6C,EAAI,WACJs5C,GACDh9C,EAEC,MAAM0nH,GAAUxnE,EAAAA,EAAAA,IAAwB,MAuBxC,OArBAvE,EAAAA,EAAAA,KAAU,KACR,MAAMgsE,EAASD,EAAQt3F,QACvB,IAAKu3F,EAAQ,OAEb,MAAM1yG,EAAQ0yG,EAAOC,YAAc,EAEhBD,EAAO5zC,QAAQ,aACvBz0B,MAAMgV,YAAY,wBAA0B,GAAEr/C,MAAU,GAClE,CAAC/S,EAAQwB,KAEZi4C,EAAAA,EAAAA,KAAU,KACR,MAAMgsE,EAASD,EAAQt3F,QACvB,IAAKu3F,EAAQ,OAEb,MAAME,EAAaF,EAAO5zC,QAAQ,aAElC,MAAO,KACL8zC,EAAWvoE,MAAMwoE,eAAe,wBAAwB,CACzD,GACA,IAGDvrE,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLvuB,WAAWkvB,EAAAA,GAAAA,GAAe,WAAYl9C,GAAU,QAChD4V,OAAK,EACLwmC,MAAM,cACN6iB,SAAUnkB,EACViB,QAASA,EACT4G,UAAU,6BAEVtI,EAAAA,GAAAA,cAAA,KAAGrsB,WAAWkvB,EAAAA,GAAAA,GAAe,gBAAiB,OAAQ,cAAel9C,GAAU,UAC/Eq6C,EAAAA,GAAAA,cAAA,QAAMkF,IAAKimE,EAASx3F,UAAU,iBAAiBxsB,GACxC,I,gBCyJRqkH,GAAe,SAAfA,GAAe,OAAfA,EAAe,YAAfA,EAAe,gBAAfA,EAAe,YAAfA,EAAe,oBAAfA,CAAe,EAAfA,IAAe,IAWpB,MAg0CA,IAAe7rE,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAACjgD,EAAMqd,KAEW,IAAAkC,EAAA,IAFT,OACP9e,EAAM,SAAEC,EAAQ,gBAAEuE,EAAe,SAAEg8C,GACpC5jC,EACC,MAAMta,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1BovG,EAAUpvG,IAAW2nH,EAAAA,KAAkBpmF,EAAAA,EAAAA,IAAchiC,EAAQS,QAAUI,EACvEqjE,EAAgB18D,QAAQqoG,GACxB7qC,GAAiBC,EAAAA,EAAAA,IAAqBjlE,EAAQS,GAC9C4nH,GAAiBlrF,EAAAA,EAAAA,IAAS18B,GAC1BsvG,EAAkB7rC,GAAgB35C,EAAAA,EAAAA,IAAmBvqB,EAAQ6vG,EAAQjuG,SAAMf,EAC3Eu5F,EAAgBiuB,OAAsDxnH,GAArC8tC,EAAAA,EAAAA,IAAmB3uC,EAAQS,GAC5D6nH,GAAgCpkD,IAAkBmkD,KACnDE,EAAAA,EAAAA,IAA0CvoH,EAAQS,EAAQC,GACzDmnB,GAAe0tB,EAAAA,EAAAA,IAAmBv1C,EAAQS,EAAQC,IAClD,SAAEowB,EAAQ,sBAAE03F,EAAqB,yBAAEC,GAA6BzoH,EAAO6X,SAASC,MAChF4wG,EAAoB1oH,EAAOgxB,cAAc23F,EAAAA,KACzC33F,EAAgBF,IAAa63F,EAAAA,IAA0B3oH,EAAOgxB,cAAcF,QAAYjwB,EACxF+nH,EAAuBN,EAA+BA,EAA6B1mH,QAAKf,EACxFgoH,EAAkBD,GAAuBl0G,EAAAA,EAAAA,IAAkB1U,EAAQS,EAAQmoH,QAAwB/nH,GACnG,cAAEkX,GAAkB/X,EACpB8oH,EAAkB1uB,EAAeA,GAAc5xE,UAAYzQ,OAAgBlX,EAC3E2nB,EAAWzlB,GAAM4lB,eAAiBmgG,IACtC/lH,EAAK4lB,cAAc6kB,MAAM/nB,GAASA,EAAK7jB,KAAOknH,IAC1CA,EACC/lH,GAAMgmH,aAAaC,UAAYjmH,GAAMnB,QAAKf,GAE3CooH,EAAazgG,GAAW/E,EAAAA,EAAAA,IAAWzjB,EAAQwoB,QAAY3nB,EACvD4nB,GAAcwgG,GAAczgG,GAAWxlB,EAAAA,EAAAA,IAAWhD,EAAQwoB,QAAY3nB,EACtEqoH,GAAqBC,EAAAA,EAAAA,IAAyBnpH,EAAQS,GACtD2oH,GAAsBC,EAAAA,EAAAA,IAA0BrpH,EAAQS,GACxDyB,GAAqBvB,EAAAA,EAAAA,IAAyBX,GAC9CspH,EAA0B7oH,IAAWyB,GAAoBzB,QAC1DC,IAAawB,GAAoBxB,UACjCuE,IAAoB/C,GAAoBJ,KACvC0hB,GAAOC,EAAAA,EAAAA,IAAWzjB,EAAQS,GAC1B8oH,EAAsF,QAAjEhqG,EAAIiE,KAAS+G,EAAAA,EAAAA,IAAmBvqB,EAAQwjB,EAAK5hB,KAAK6oB,uBAAe,IAAAlL,GAAAA,EACtFiqG,EAAWpvB,GAAcovB,SAEzB5xF,EAAmC,cAApB3yB,GACjBwkH,EAAAA,EAAAA,IAA4BzpH,EAAQS,IACpCo3B,EAAAA,EAAAA,GAAmB73B,EAAQS,EAAQC,GAEjCgH,GAAeC,EAAAA,EAAAA,IAAmB3H,EAAQS,EAAQC,GAElDyB,GAAWb,EAAAA,EAAAA,IAAetB,GAEhC,MAAO,CACL0pH,eAAgBvnH,EAASoV,UACzBoyG,gBAAgB1mG,EAAAA,EAAAA,IAAqBjjB,EAAQS,EAAQC,EAAUuE,GAC/Du0B,gBAAiBx5B,EAAOw5B,gBACxB9xB,eACA4b,OAAOU,EAAAA,EAAAA,IAAYhkB,EAAQS,EAAQC,GACnCqC,OACAmhE,gBACAc,iBACAskD,0BACAM,wBAAwBC,EAAAA,EAAAA,IAA6B7pH,EAAQS,GAC7Di1D,UAAW3yD,GAAO0hE,EAAAA,EAAAA,IAAc1hE,QAAQlC,EACxCgkE,oBAAoB37D,EAAAA,EAAAA,IAAyBlJ,EAAQihD,GACrD6jB,oBAAoBC,EAAAA,EAAAA,IAAqB/kE,GACzC8pH,oBACsB,WAApB7kH,GACGuC,QAAQqgB,GAAc1nB,QAE3B4pH,eAAoC,cAApB9kH,EAChB2jH,uBACAoB,uBAAwBnB,GAAiBoB,oBACzC5vB,aAAc55F,IAAW0B,EAASU,gBAAgBC,SAClD0J,UAAWrK,EAASqK,UACpB09G,iBAAkBlqH,EAAO8R,SAASyb,SAASzb,SAC3Cq4G,oBAAqBnqH,EAAOwS,aAAa+a,SAASzb,SAClDs4G,iBAAkBhwB,GAAcloD,QAChCm4E,gBAAiBrqH,EAAOkiC,eAAenO,QACvChc,gBACAuhB,aAAct5B,EAAOs5B,aACrB12B,qBAAsBT,EAASS,qBAC/B4lH,wBACAC,2BACAh3G,aAAczR,EAAOyR,aACrBi3G,kBAAmBA,GAAmBx3F,SACtCF,cAAeA,GAAeE,SAC9B6J,WAAY54B,EAAS44B,WAAWC,WAChCsvF,mBAAoBnoH,EAAS44B,WAAW3gB,UACxCmwG,gBAAiBnwB,GAAcowB,YAC/BA,YAAaza,EAAmBA,EAAgBx3D,SAASkyE,WAAY,OAAS5pH,EAC9E6pH,cAAe3a,GAAiBx3D,SAASC,WACzCywE,aACAxgG,aACAD,WACAoP,eACAsxF,qBACAE,sBACA1G,WAAY1iH,EAAO++B,WAAWC,KAC9B2rF,oBAAoBC,EAAAA,EAAAA,GAAe5qH,EAAQS,GAC3C+gC,OAAOkhB,EAAAA,EAAAA,IAAY1iD,GACnB6qH,eAAe36F,EAAAA,GAAAA,GAAmBlwB,EAAQ,sBAAwB8qH,EAAAA,IAClEC,cAAc76F,EAAAA,GAAAA,GAAmBlwB,EAAQ,iBACzC+mB,sBAAsBC,EAAAA,EAAAA,IAA2BhnB,GACjDupH,wBACA3zG,mBAAoB5V,EAAO4V,mBAC3B4zG,WACD,GArGevpE,EArzCwB7/C,IA2DtC,IA3DuC,cAC3CspH,EAAa,cACbsB,EAAa,eACbjB,EAAc,uBACdH,EAAsB,QACtBjkD,EAAO,SACP1kB,EAAQ,WACRgqE,EAAU,eACVtB,EAAc,OACdlpH,EAAM,SACNC,EAAQ,gBACRuE,EAAe,MACfqe,EAAK,KACLvgB,EAAI,wBACJumH,EAAuB,qBACvBviG,EAAoB,sBACpBwiG,EAAqB,gBACrB/vF,EAAe,cACf0qC,EAAa,eACbc,EAAc,UACdtP,EAAS,cACTm1D,EAAa,mBACbhmD,EAAkB,mBAClBC,EAAkB,aAClBu1B,EAAY,UACZ7tF,EAAS,qBACTo8G,EAAoB,uBACpBoB,EAAsB,oBACtBF,EAAmB,iBACnBI,EAAgB,oBAChBC,EAAmB,iBACnBC,EAAgB,gBAChBC,EAAe,cACftyG,EAAa,aACbgzG,EAAY,aACZzxF,EAAY,qBACZ12B,EAAoB,sBACpB4lH,EAAqB,yBACrBC,EAAwB,kBACxBC,EAAiB,cACjB13F,EAAa,aACbvf,EAAY,WACZspB,EAAU,mBACVuvF,EAAkB,YAClBE,GAAW,gBACXD,GAAe,WACftB,GAAU,WACVxgG,GAAU,SACVD,GAAQ,aACRoP,GAAY,aACZlwB,GAAY,mBACZwhH,GAAkB,oBAClBE,GAAmB,cACnBsB,GAAa,WACbhI,GAAU,mBACViI,GAAkB,mBAClB/0G,GAAkB,MAClB4rB,GAAK,SACLgoF,IACDppH,EACC,MAAM,YACJgf,GAAW,WACX8rG,GAAU,WACVxgG,GAAU,gBACV7nB,GAAe,cACfo+B,GAAa,eACbkqF,GAAc,qBACdC,GAAoB,SACpBvnH,GAAQ,eACRwnH,GAAc,oBACdC,GAAmB,WACnBC,GAAU,uBACVC,GAAsB,cACtB1mF,GAAa,qBACb2mF,GAAoB,iBACpBp/G,GAAgB,oCAChBye,KACEhS,EAAAA,EAAAA,MAEE5T,IAAOo5C,EAAAA,GAAAA,KAGPotE,IAAcprE,EAAAA,EAAAA,IAAuB,MAErCqrE,IAAWrrE,EAAAA,EAAAA,IAAuB,OAEjC0mE,GAAS4E,KAAWn2B,EAAAA,GAAAA,GAAU,IAC/Bo2B,IAAoBC,EAAAA,GAAAA,GAAqBnkD,EAAAA,KACzCokD,IAA6BzrE,EAAAA,EAAAA,MAC7B0rE,IAAoBhjD,EAAAA,GAAAA,GAAYgiD,IAC9B31G,MAAOq1B,IAAgBC,GAAAA,EAAAA,MACzBhiB,GAAgB5lB,GAAM4lB,cACtBsjG,GAAgBtjG,KAChBA,GAAcxoB,OAAS,IAAMwoB,GAAc6kB,MAAM/nB,GAASA,EAAK7jB,KAAOmW,MAErEm0G,GAAoBC,GAAqBC,KAA6B1rE,EAAAA,GAAAA,KACvE2rE,IAAoBC,EAAAA,GAAAA,GAAqB7rH,EAAQC,IAEvDq7C,EAAAA,EAAAA,IAAUwwE,GAAAA,GAAmC,CAACvF,KAE9C,MAAMwF,IAAgClsE,EAAAA,EAAAA,IAAO,GAEvCmsE,IAAuB/qE,EAAAA,EAAAA,KAAY,KACvC0qE,IAA2B,GAC1B,CAACA,MACGM,GAAiBC,KAAYC,EAAAA,GAAAA,GAAYhD,EAAwB6C,KAExE1wE,EAAAA,EAAAA,KAAU,KACRgwE,GAA2Bv7F,aAAU3vB,CAAS,GAC7C,CAACJ,KAEJs7C,EAAAA,EAAAA,KAAU,KACJt7C,GAAU64B,GAAgBqsC,GAC5BylD,GAAqB,CAAE3qH,UACzB,GACC,CAACklE,EAASllE,EAAQ2qH,GAAsB9xF,EAAc54B,KAEzDq7C,EAAAA,EAAAA,KAAU,KACJt7C,GAAUsC,GAAQu2B,IAAiB3Q,IAAiBg9C,IAAWjB,EAAAA,EAAAA,IAAiB3hE,IAClFwoH,GAAW,CAAE9qH,UACf,GACC,CAACsC,EAAMtC,EAAQklE,EAASrsC,EAAciyF,GAAY5iG,KAErD,MAAMkkG,IAA+BvsE,EAAAA,EAAAA,KAAO,IAC5CoT,EAAAA,GAAAA,IAAc9lD,IAAqC,IAAnCk/G,EAAYC,GAAkBn/G,EAE5Ci/G,GAA6Br8F,QAAUhpB,QAAQ/G,IAAWqsH,GAAcnkG,KAAkBokG,EAAkB,GAC3G,CAACtsH,EAAQkoB,MAEZksC,EAAAA,EAAAA,KAAgB,KACT62D,GAAYl7F,UAEjBk7F,GAAYl7F,QAAQonC,UAtIP,8uBAsI2B,GACvC,IAEH,MAAO71C,GAAag8F,KAAkBxgE,EAAAA,EAAAA,IAA0B,IAC1DyvE,GAAiBxlH,QAAQua,GAAY5hB,SAErC,gBACJoT,GAAe,YAAE05G,GAAW,eAAEzK,GAAc,eAAEC,GAAc,oBAAEyK,GAAmB,cACjFz5G,GAAa,iBAAEP,GAAgB,cAAEI,GAAa,cAAEF,GAAa,cAAED,GAAa,iBAAEE,KAC5EgsC,EAAAA,EAAAA,KAAQ,KAAM3rC,EAAAA,EAAAA,IAA4B3Q,EAAMmhE,IAAgB,CAACnhE,EAAMmhE,IAErEipD,IAAqBj6G,KAAqBy2G,GAE1C,yBACJlG,GAAwB,uBACxB2J,GAAsB,kBACtBC,GAAiB,kBACjBC,GAAiB,iBACjB9J,GAAgB,gBAChB+J,GAAe,uBACfC,GAAsB,qBACtBC,IpBlXW,SAA2BrtH,GAoBvC,IApBwC,YACzC2hB,EAAW,cACX8oG,EAAa,QACbe,EAAO,eACP7N,EAAc,OACdt9G,EAAM,cACN6S,EAAa,cACbF,EAAa,cACbD,EAAa,iBACbE,GAWDjT,EACC,MAAM,sBAAE00B,EAAqB,oCAAEhK,IAAwChS,EAAAA,EAAAA,OAChEu0G,EAAmBK,IAAwBnwE,EAAAA,EAAAA,KAAkB,IAC7D6vE,EAAwBO,IAA6BpwE,EAAAA,EAAAA,KAAkB,IACvEkmE,EAA0BmK,IAA+BrwE,EAAAA,EAAAA,SAA8B18C,GAExF2sH,GAAyB9rE,EAAAA,EAAAA,KAAY,KACzCq8D,EAAet8G,EAAAA,EAAiB,GAC/B,CAACs8G,IAEE0P,GAAuB/rE,EAAAA,EAAAA,KAC1BmsE,IACC,MAAM5N,EAAqC,mBAAb4N,EAA0BA,EAAS9rG,GAAe8rG,EAChF,GAAK5N,EAAe9/G,OAKpB,GAAI8/G,EAAezyE,MAAM9tB,IACvB,MAAM5d,EAAOygB,GAAkB7C,GAE/B,MAAiB,UAAT5d,IAAqBwR,IAAkBD,GAChC,UAATvR,IAAqBsR,IAAkBC,GAC9B,UAATvR,IAAqBqR,IAAkBE,GAC9B,SAATvR,IAAoBuR,CAAiB,IAE3CyX,EAAoC,CAAErqB,gBACjC,GAAIw/G,EAAezyE,MAAK5/B,IAAA,IAAC,KAAEkxC,GAAMlxC,EAAA,OAAKkxC,EAAO+rE,CAAa,IAC/D/1F,EAAsB,CACpBjf,MAAO,2BAEJ,CACLkoG,EAAekC,GACf,MAAM18F,EAAc08F,EAAezyE,MAAM9tB,IACvC,MAAM5d,EAAOygB,GAAkB7C,GAE/B,MAAiB,UAAT5d,IAAqBwR,GACd,UAATxR,IAAqBsR,GACZ,UAATtR,IAAqBqR,CAAc,IAG3Cu6G,EAAqBlmH,QAAQ+b,GAAelQ,IAC5Cs6G,GAA2Bt6G,EAC7B,MA7BEm6G,GA6BF,GACC,CACDzrG,EAAazO,EAAeD,EAAkBF,EAAeC,EAAe3S,EAAQoqH,EACpF2C,EAAwB14F,EAAuBipF,EAAgBjzF,IAkBnE,MAAO,CACL24F,2BACA6J,mBAhBwB5rE,EAAAA,EAAAA,KAAYxnC,MAAOnW,EAAeu0D,KAC1Dm1D,EAAqB,IAChB1rG,WACMiM,QAAQC,IAAIlqB,EAAMyB,KAAKmxB,GAC9BkgF,GAAgBlgF,EAAK0Y,KAAM1Y,EAAM,CAAE2hF,oBAAqBhgD,QAAaz3D,QAEvE,GACD,CAACkhB,EAAa0rG,IAUfjK,kBARuB9hE,EAAAA,EAAAA,KAAYxnC,MAAOnW,EAAe+pH,KACzDL,QAA2Bz/F,QAAQC,IAAIlqB,EAAMyB,KAAKmxB,GAASkgF,GAAgBlgF,EAAK0Y,KAAM1Y,OACtFi3F,EAA4BE,EAAmB,GAC9C,CAACL,IAMFF,gBAAiB3B,EACjB4B,yBACAC,uBACAL,yBACAC,oBAEJ,CoBqRMU,CAAmB,CACrBhsG,eACA6pG,WACA7N,kBACA8M,gBACApqH,SACA6S,iBACAF,iBACAD,iBACAE,uBAGK26G,GAAmBC,GAAiBC,KAAoBxtE,EAAAA,GAAAA,MACxDytE,GAAsBC,GAAoBC,KAAuB3tE,EAAAA,GAAAA,MACjE4tE,GAAkBC,GAAgBC,KAAmB9tE,EAAAA,GAAAA,MACrD+tE,GAAkBC,GAAgBC,KAAmBjuE,EAAAA,GAAAA,MACrDkuE,GAAmBC,GAAiBC,KAAoBpuE,EAAAA,GAAAA,MACxDquE,GAAiBC,GAAcC,KAAevuE,EAAAA,GAAAA,MAE/C,oBACJwuE,GAAmB,mBACnBC,GAAkB,oBAClBC,GAAmB,qBACnBC,GAAoB,kBACpBC,GACAC,gBAAiBC,GAAa,mBAC9BC,IC7YsBC,MAExB,MAAMH,GAAkBjvE,EAAAA,EAAAA,IAA0B,OAC3C+uE,EAAsBM,IAA2BpyE,EAAAA,EAAAA,MAClDkyE,GAAqBnvE,EAAAA,EAAAA,OACpBgvE,EAAmBM,IAAwBryE,EAAAA,EAAAA,OAElDxB,EAAAA,EAAAA,KAAU,KAEJ8zE,EAAAA,IAAaC,EAAAA,IACVC,IACP,GACC,IAEH,MAAMb,GAAsBxtE,EAAAA,EAAAA,KAAYxnC,UACtC,IACE,MAAM,KAAEmlD,EAAI,MAAE1wC,SAAgBohG,IAAsBC,IAC9CT,EAAgB/+F,UACdi/F,EAAmBj/F,SAAW9jB,KAAKC,MAAQ,GAAM,IACnDw8D,EAAAA,EAAAA,KAAgB,KACdomD,EAAgB/+F,QAASkvB,MAAMuwE,UAAa,SAA4B,IAAnBD,GAAc,sBAA2B,IAGlGJ,EAAqBljH,KAAKC,OAC5B,IAEF8iH,EAAmBj/F,QAAU9jB,KAAKC,MAClCijH,EAAqBljH,KAAKC,OAE1BgjH,EAAwB,CAAEtwD,OAAM1wC,SAClC,CAAE,MAAOta,GAEP8C,QAAQC,MAAM/C,EAChB,IACC,IAEG+6G,GAAsB1tE,EAAAA,EAAAA,KAAY,KACtC,GAAK2tE,EAAL,EAIAlmD,EAAAA,EAAAA,KAAgB,KACVomD,EAAgB/+F,UAClB++F,EAAgB/+F,QAASkvB,MAAMuwE,UAAY,OAC7C,IAGF,IACE,OAAOZ,EAAsB1gG,OAC/B,CAAE,MAAOta,GAGP,YADA8C,QAAQC,MAAM/C,EAEhB,CAdA,CAcA,GACC,CAACg7G,IAEEF,GAAqBztE,EAAAA,EAAAA,KAAY,KACrC,GAAK2tE,EAAL,CAIAM,OAAwB9uH,GACxB4uH,EAAmBj/F,aAAU3vB,EAC7B+uH,OAAqB/uH,IAErBsoE,EAAAA,EAAAA,KAAgB,KACVomD,EAAgB/+F,UAClB++F,EAAgB/+F,QAASkvB,MAAMuwE,UAAY,OAC7C,IAGF,IACE,OAAOZ,EAAsBhwD,MAC/B,CAAE,MAAOhrD,GAGP,YADA8C,QAAQC,MAAM/C,EAEhB,CAlBA,CAkBA,GACC,CAACg7G,IAMJ,OAJAtzE,EAAAA,EAAAA,KAAU,IACDszE,GAAuB3oE,EAAAA,GAAAA,GAAsByoE,QAAsBtuH,GACzE,CAACwuH,EAAsBF,IAEnB,CACLD,sBACAE,sBACAD,qBACAE,uBACAC,oBACAC,kBACAE,qBACD,EDkTGC,IAEJ1gC,EAAAA,GAAAA,IAAY,KACVq9B,GAAkB,CAAEvqH,KAAM,eAAgB,GACzCutH,IAAwBa,EAAAA,MAE3Bn0E,EAAAA,EAAAA,KAAU,KACHszE,IACHhD,GAAkB,CAAEvqH,KAAM,UAC5B,GACC,CAACutH,GAAsBhD,KAE1B,MAAM8D,IAAexjB,EAAAA,GAAAA,GAAYnlG,QAAQmiH,KACzC5tE,EAAAA,EAAAA,KAAU,KACJirE,OAAcmJ,GAAa3/F,SAC7B67F,GAAkB,CAAEvqH,KAAM,UAC5B,GACC,CAACklH,GAASmJ,GAAc9D,KAE3B,MAAM/5E,GAAUvvC,IAAQqtH,EAAAA,EAAAA,IAAYrtH,IAE9B,mBACJstH,GAAkB,kBAClBC,GAAiB,eACjBC,GAAc,qBACdC,GAAoB,YACpBC,KACEC,EAAAA,GAAAA,GACFlpH,QAAQm+D,GAAW+jD,GAAiBJ,GAA2Bd,IAA0BwE,IACzFhG,GACA4E,QACA/qH,EACA4Q,EACAi3G,EACA13F,IAGI,yBACJ2/F,GAAwB,wBACxBC,GAAuB,kBACvBC,KACEC,EAAAA,GAAAA,GACFtpH,QAAQm+D,GAAW+jD,GAAiBJ,GAA2Bb,IAA6BuE,IAC5FhG,GACA4E,GACAC,GACAF,GACAxB,IAGI,qBACJ4G,GAAoB,oBACpBC,I3B5bW,SACbpyF,EACAooF,EACAl1G,GAEA,MAAM,qBAAEm/G,EAAoB,sBAAEC,IAA0Bp4G,EAAAA,EAAAA,OAEjDq4G,EAAkBC,EAAoBC,IAAwB3wE,EAAAA,GAAAA,IAAQ,GAEvE4wE,GAAiB9J,EAAAA,GAAAA,IAAiB,KACtC,MAAMxL,EAAOgL,IACb,IAAKpoF,IAAco9E,GAASuV,EAAAA,IAAsBvV,EAAK77G,OAdxC,EAc8D,OAG7E,IADiB67G,EAAK1yF,MAAMioG,EAAAA,GAAqBC,GAAAA,EAAe3Y,EAAAA,KACjD,OAEf,MAAM4Y,GAAYC,EAAAA,GAAAA,GAAiB1V,GAMnC,OALsByV,IACnBF,EAAAA,IAA0D,KAApCI,EAAAA,GAAAA,GAAqBF,KACvCF,EAAAA,IAAsB/pH,QAAQw0G,EAAK1yF,MAAMqvF,MAI3C4Y,EAAAA,GAAqBE,EAAYA,EAAUnoG,MAAM,gBAAgB,QAClEzoB,CAAS,GACZ,CAACmmH,EAASpoF,IAEP3tB,GAAWq1D,EAAAA,GAAAA,IAAgB,IAAM9+D,QAAQ8pH,MAAmB,CAACA,IAC7DM,EAAcpqH,QAAQsK,GAAU3R,QAiBtC,OAfA47C,EAAAA,EAAAA,KAAU,KACR,IAAKnd,EAAW,OAEhB,MAAMu8D,EAAcm2B,IAChBn2B,EACGy2B,GACHX,EAAqB,CAAE3qH,MAAO60F,IAGhC+1B,GACF,GACC,CAACtyF,EAAW0yF,EAAgBM,EAAaX,EAAsBC,KAElEn1E,EAAAA,EAAAA,IAAUs1E,EAAsB,CAACA,EAAsBrK,IAEhD,CACL+J,qBAAsBvpH,QAAQyJ,GAAY2gH,IAAgBT,GAC1DH,oBAAqBI,EAEzB,C2B4YMS,CACFrqH,QAAQm+D,GACH+jD,GACAJ,GACAd,GACAj1G,KACCy5G,IACNhG,GACAkD,IAGI,qBACJ4H,GAAoB,oBACpBC,GAAmB,cACnBC,GAAa,qBACbC,KACEC,EAAAA,GAAAA,GACF1qH,QAAQm+D,GAAW2jD,IAA4B0D,IAC/ChG,GACA4E,GACAC,GACAF,GACAvB,EACAC,EACAtyG,IAIAzV,OAAQ6vH,GACRx9G,MAAOy9G,GACPvvF,UAAWwvF,GACXhwF,SAAUiwF,GACVxvF,cAAeyvF,GACf/iH,QAASgjH,GACTC,aAAcC,GACd9vF,KAAM+vF,GACNC,SAAUC,ItB3dC,SACbj0F,EACAn+B,EACAumH,EACAjsF,GAEA,MAAM,eAAE+3F,EAAc,eAAExvF,EAAc,mBAAEyvF,IAAuBj6G,EAAAA,EAAAA,OAExDq4G,EAAkBC,EAAoBC,IAAwB3wE,EAAAA,GAAAA,IAAQ,GAEvEsyE,GAA2BC,EAAAA,GAAAA,KAAqB,KACpD,MAAMjX,EAAOgL,IACb,OAAOpoF,GAAao9E,EAAK7vD,WAAW,KAoExC,SAAuB6vD,GACrB,IAAKA,EAAK7vD,WAAW,KACnB,OAAOo0D,GAGT,MAAMz8G,EASR,SAAsBk4G,GASpB,OARA0E,GAAO9oD,UAAYokD,EAAK1rG,QAAQ,QAAS,MAEzCowG,GAAOvwG,iBAA8B,SAASzE,SAASyuB,IAChDA,EAAGulF,YACNvlF,EAAGulF,UAAYvlF,EAAGgiB,aAAa,OACjC,IAGKukE,GAAOhB,SAChB,CAnBewT,CAAalX,GACpBj2G,EAASjC,EAAKwlB,MAAM+2F,IAC1B,OAAKt6G,EAIE46G,GAAoB56G,EAAO,GAAIA,EAAO,GAAkB,KAAdA,EAAO,KAAcjC,EAAKwlB,MAAMg3F,KAHxEC,EAIX,CAhF+C4S,CAAcnX,GAAQuE,EAAc,GAC9E,CAACyG,EAASpoF,GAAYwhF,KACnB,SACJzyF,EAAQ,MAAEzsB,EAAK,YAAEs/G,EAAW,gBAAEC,IAC5Bn6C,EAAAA,GAAAA,GAAgB0sD,EAA0B,CAACA,EAA0BhM,IAAU,IAEnFtzD,EAAAA,GAAAA,IAActzD,IAAoB,IAAlBgzH,GAAahzH,EACvBgzH,GACF9vF,EAAe,CAAE3V,SAAUylG,GAC7B,GACC,CAACzlG,EAAU2V,KAEdyY,EAAAA,EAAAA,KAAU,KACH0kE,GAELqS,EAAe,CACbryH,SAAQktB,SAAU8yF,EAAiBv/G,SACnC,GACD,CAACT,EAAQS,EAAO4xH,EAAgBrS,KAEnC1kE,EAAAA,EAAAA,IAAUs1E,EAAsB,CAACA,EAAsBrK,IAEvD,MACEplH,GAAI+S,EAAK,SACT0tB,EAAQ,cACRS,EAAa,OACbvzB,EAAM,QACNC,EAAO,UACPqzB,EAAS,KACTD,GACG69E,GAAmB1lF,IAAa0lF,IAAqB,CAAC,EAErDn+G,EAASkF,SAASgI,GAASrP,QAAUkiC,KAAc8uF,IAEzDp1E,EAAAA,EAAAA,KAAU,KACHz5C,GAAWqrB,GACdolG,GACF,GACC,CAACzwH,EAAQywH,EAAoBplG,IAEhC,MAAMilG,GAAWlxE,EAAAA,EAAAA,KAAY,KACtB++D,GAELqS,EAAe,CACbryH,SAAQktB,SAAU8yF,EAAiBv/G,QAAOqO,UAC1C,GACD,CAAC9O,EAAQ8O,EAAQrO,EAAO4xH,EAAgBrS,IAE3C,MAAO,CACLn+G,SACAqS,QACAkuB,YACAR,WACAS,gBACAtzB,UACAijH,aAAcrB,EACdxuF,KAAM49E,GAAe59E,EAAQ,IAAGjV,KAAYiV,SAAS/hC,EACrD+xH,WAEJ,CsBqZMS,CACF7rH,QAAQm+D,GAAW2jD,IAA4B0D,IAAkB1zF,GACjE74B,EACAumH,GACAjsF,IAIAz4B,OAAQgxH,GACR/0F,MAAOg1F,GACPC,oBAAqBC,IrBjfV,SACb70F,EACAooF,EACAwD,EACAD,GAEA,MAAOiJ,EAAqBE,IAA0Bn2E,EAAAA,EAAAA,OAC/C4zE,EAAkBC,EAAoBC,IAAwB3wE,EAAAA,GAAAA,IAAQ,GAEvEizE,GAAyBV,EAAAA,GAAAA,KAAqB,KAClD,MAAMjX,EAAOgL,IACb,OAAOpoF,GAAao9E,EAAK7vD,WAAW,MAAOulE,EAAAA,GAAAA,GAAiB1V,GAAM1yF,MAAMu3F,MAAc,GAAG/pG,YAASjW,CAAS,GAC1G,CAACmmH,EAASpoF,GAdE,KAgBTg1F,GAAapM,EAAAA,GAAAA,GACjBmM,EAAwB,CAACA,EAAwB3M,IAAU,GAqB7D,OAlBAjrE,EAAAA,EAAAA,KAAU,KACR,MAAMtc,EAAUm0F,IACVnJ,EAAWD,GAAeD,EAChC,IAAK9qF,IAAYgrF,EAEf,YADAiJ,OAAuB7yH,GAIzB,MAAMmD,EAASy7B,EAAQk/E,UAAU,GAC3BkV,EAA0BpJ,EAASzmH,QAAQ6hG,IAAO7hG,GAAU6hG,EAAEpmE,QAAQ0sB,WAAWnoD,KAEvF0vH,EACEG,GAAyB1zH,OAAS0zH,OAA0BhzH,EAC7D,GACA,CAAC+yH,EAAYpJ,EAAaD,KAE7BxuE,EAAAA,EAAAA,IAAUs1E,EAAsB,CAACA,EAAsBrK,IAEhD,CACL1kH,OAAQkF,QAAQgsH,GAAqBrzH,SAAWgxH,GAChD5yF,MAAO6yF,EACPoC,sBAEJ,CqBycMM,CACFtsH,QAAQm+D,GAAW2jD,IAA6BkB,IAAeA,IAAarqH,QAAWoqH,IAAiBpqH,SACxG6mH,GACAwD,GACAD,IAGIwJ,IAA4BryE,EAAAA,EAAAA,KAAY,SAACsyE,GAAyD,IAAxC5rE,EAAeloD,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAGq+G,EAAAA,IAChF,GAAIn2D,IAAYm2D,EAAAA,KAAqB4O,GAAmB,OACxD,MAAM8G,EAAY1wH,OAAO2wH,eACzB,IAAIxsD,EAOJ,GALEA,EADEtf,IAAYm2D,EAAAA,IACCruG,SAAS+rC,cAA8B0rB,EAAAA,KAEvCz3D,SAASgjD,eAAe9K,GAGrC6rE,EAAUE,WAAY,CACxB,MAAMC,EAAiBH,EAAUI,WAAW,GAC5C,IAAIC,EAAAA,GAAAA,GAAuBF,EAAgBhsE,GAGzC,OAFAmsE,EAAAA,GAAAA,IAAsBP,QACtBtsD,EAAa8sD,cAAc,IAAIC,MAAM,QAAS,CAAEC,SAAS,IAG7D,CAEA9I,GAAS,GAAE5E,OAAYgN,MAGvBW,EAAAA,EAAAA,KAAoB,MAClBC,EAAAA,GAAAA,GAAqBltD,EAAa,GAEtC,GAAG,CAACylD,GAAmBnG,GAAS4E,KAE1BiJ,IAAqCnzE,EAAAA,EAAAA,KAAY,SACrD59C,GACG,IADqBskD,EAAeloD,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAGq+G,EAAAA,IAE1C,MAAMyV,GAAUc,EAAAA,GAAAA,GAA0BhxH,GAC1CiwH,GAA0BC,EAAS5rE,EACrC,GAAG,CAAC2rE,KAEEgB,IAAmCrzE,EAAAA,EAAAA,KAAY,SAACp7C,GAA2D,IAAxC8hD,EAAeloD,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAGq+G,EAAAA,IACzFwV,IAA0BiB,EAAAA,GAAAA,IAAqB1uH,GAAQ8hD,EACzD,GAAG,CAAC2rE,KnB7gBWkB,EACf3xG,EACA7iB,EACAC,EACAsmH,EACA4E,EACA5N,EACA1kF,KAEA,MAAM,UAAE47F,EAAS,WAAEhK,EAAU,iBAAE78F,IAAqBvV,EAAAA,EAAAA,MAE9Cq8G,EAAY3tH,QAAQw2G,GAEpBoX,GAAc1zE,EAAAA,EAAAA,KAAY,WAAiF,IAAhF2zE,EAAiDn1H,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAGqjB,EAAWrjB,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GAClG,GAAIi1H,IAAc77F,EAAc,OAEhC,MAAM0iF,EAAOgL,IAEH,IAAAsO,EAAAC,EAOHC,EAAAC,EAPHzZ,EACFkZ,EAAU,CACRz0H,OAAwB,QAAlB60H,EAAED,EAAU50H,cAAM,IAAA60H,EAAAA,EAAI70H,EAC5BC,SAA4B,QAApB60H,EAAEF,EAAU30H,gBAAQ,IAAA60H,EAAAA,EAAI70H,EAChC4iB,OAAOjW,EAAAA,EAAAA,IAAkB2uG,GACzBz4F,gBAGF2nG,EAAW,CACTzqH,OAAwB,QAAlB+0H,EAAEH,EAAU50H,cAAM,IAAA+0H,EAAAA,EAAI/0H,EAC5BC,SAA4B,QAApB+0H,EAAEJ,EAAU30H,gBAAQ,IAAA+0H,EAAAA,EAAI/0H,EAChC6iB,eAGN,GAAG,CAAC9iB,EAAQC,EAAUy0H,EAAW77F,EAAc0tF,EAASkO,EAAWhK,IAE7DwK,GAAiB/oB,EAAAA,GAAAA,GAAYyoB,GAC7BO,GAA2BjjB,EAAAA,GAAAA,GAAgBkjB,EAAAA,KAAgB,OAAM/0H,EAAW,CAACJ,EAAQC,KAG3F6gD,EAAAA,GAAAA,IAAsBnhD,IAA2C,IAAzC0sH,EAAY+I,EAAcC,GAAU11H,EAC1D,GAAIK,IAAWqsH,GAAcpsH,IAAam1H,KACnCvyG,GAASwyG,GACZlK,EAAQ,KAGLtoG,GAAOC,aACV,OAIJ,GAAIy6F,IAAkB16F,EACpB,OAGFsoG,GAAQkJ,EAAAA,GAAAA,GAA0BxxG,IAElC,MAAMyyG,EAAiBzyG,EAAMnB,UACzB3c,KAAK8hH,GAAWA,EAAOxlH,OAAS69G,EAAAA,GAAAA,aAAqC2H,EAAOp1G,aAC7ElO,OAAOwD,UAAY,GAClBuuH,EAAe51H,QAAQkuB,EAAiB,CAAEpkB,IAAK8rH,IAE9CzpH,EAAAA,KACHqoH,EAAAA,EAAAA,KAAoB,KAClB,MAAMjtD,EAAex3D,SAAS+rC,cAA8B0rB,EAAAA,KACxDD,IACFktD,EAAAA,GAAAA,GAAqBltD,GAAc,EACrC,GAEJ,GACC,CAACjnE,EAAQC,EAAU4iB,EAAOsoG,EAAS5N,EAAe3vF,KAGrD0tB,EAAAA,EAAAA,KAAU,IACD,KAEAo5E,GAEHO,EAAellG,QAAQ,CAAE/vB,SAAQC,aAnFvCogH,IAAW,GAEXtsC,EAAAA,EAAAA,KAAe,KACbssC,IAAW,CAAK,GAmFN,GAET,CAACrgH,EAAQC,EAAUy0H,EAAWO,IAEjC,MAAMM,GAAYrpB,EAAAA,GAAAA,GAAYlsG,GACxBw1H,GAActpB,EAAAA,GAAAA,GAAYjsG,GAsBhC,SAASw1H,IACPd,OAAYv0H,GAAW,EACzB,EAvBAk7C,EAAAA,EAAAA,KAAU,KACR,GAAI+kE,GACF,OAGF,IAAKkG,IAGH,YAFA0O,EAAellG,UAKjB,MAAM2lG,EAAeH,EAAUxlG,QACzB4lG,EAAiBH,EAAYzlG,QAEnCmlG,GAAyB,KACnBK,EAAUxlG,UAAY2lG,GAAgBF,EAAYzlG,UAAY4lG,GAChEV,EAAellG,SACjB,GACA,GACD,CAACwlG,EAAWhP,EAAS2O,EAA0BM,EAAaP,KAM/DtqB,EAAAA,GAAAA,GAAkB8qB,GAClBv6E,GAAgBu6E,EAAiB,EmBgajCjB,CAAS3xG,EAAO7iB,EAAQC,EAAUsmH,GAAS4E,GAASjC,EAAgBrwF,GAEpE,MAAM+8F,IAAgB30E,EAAAA,EAAAA,KAAY,WAAoBxhD,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,IAElD0rH,GAAQ,IAGV7N,GAAet8G,EAAAA,GAEf6uH,KACAM,KACAI,KACAe,KAEI9wE,EAEF33C,YAAW,IAAMklH,MA3VY,KA6V7BA,IAEJ,GAAG,CACD5C,GAAS3qE,EAAU+vE,GAAqBJ,GAAyBmB,GAAqBzB,GACtF9B,MAGK8H,GAAoBC,GAAkBzR,IvB/iB5B0R,EACjBxP,EACA4E,EACA5N,EACAqY,EACAxH,EACApuH,EACAC,EACAoB,EACAwhB,EACAsU,EACAlwB,KAEA,MAAM,YAAE+uH,EAAW,gBAAEC,EAAe,qBAAExP,IAAyBpuG,EAAAA,EAAAA,OACxDgsG,EAAwB6R,IAA6Bp5E,EAAAA,EAAAA,KAAS,IAErEgE,EAAAA,GAAAA,IAAsBnhD,IAA2C,IAAzCw2H,EAAmBC,GAAiBz2H,EAC1D,IAAK49G,EACH,OAGF,GAAIt2G,GAAgBmvH,IAAqBnvH,EAGvC,OAFAkkH,EAAQ,SACR+K,GAA0B,GAI5B,GAAIC,GAAmBh1H,KAAOo8G,EAAcp8G,IAAM8F,IAAiBmvH,EACjE,OAGF,MAAM/yH,GAAQ8yH,GAAqBh/F,GAAc9zB,KAAK3D,OAASy3B,EAAeomF,EAAc5wG,QAAQtJ,KAC9Fk4G,GAAO8Y,EAAAA,GAAAA,GAA0BhxH,GAEvC8nH,EAAQ5P,GACR2a,GAA0B,IAE1BhC,EAAAA,EAAAA,KAAoB,KAClB,MAAMjtD,EAAex3D,SAAS+rC,cAA8B0rB,EAAAA,KACxDD,IACFktD,EAAAA,GAAAA,GAAqBltD,GAAc,EACrC,GACA,GACD,CAACs2C,EAAet2G,EAAckwB,EAAcg0F,KAE/C7vE,EAAAA,EAAAA,KAAU,KACR,IAAKiiE,EACH,OAGF,MAAM8Y,IAAuB,YAAa9Y,EAAc5wG,UACnD4wG,EAAc5wG,QAAQtJ,MAAMqe,UAAUqrB,MAAM85E,GAAWnH,GAAatgG,IAAIynG,EAAOxlH,QAEpFolH,EAAqB,CACnBzmH,SACAC,WACA+gB,UAAWq1G,GACX,GACD,CAACr2H,EAAQC,EAAUs9G,KAEtBjiE,EAAAA,EAAAA,KAAU,KACR,GAAKiiE,EACL,MAAO,KACL,MAAM+Y,GAAS1pH,EAAAA,EAAAA,IAAkB25G,KAC3B56F,EAAS2qG,EAAOjzH,KAAK3D,OAAS42H,OAASl2H,EAE7C61H,EAAgB,CACdj2H,SAAQC,WAAUoB,OAAMgC,KAAMsoB,GAC9B,CACH,GACA,CAAC3rB,EAAQu9G,EAAegJ,EAAS0P,EAAiBh2H,EAAUoB,IAE/D,MAAMqlH,GAAsBC,EAAAA,GAAAA,KAAqB,KAC/C,IAAKpJ,EAAe,OAAO,EAE3B,MAAM+Y,GAAS1pH,EAAAA,EAAAA,IAAkB25G,KACjC,QAAS,YAAahJ,EAAc5wG,UAC/B4wG,EAAc5wG,QAAQtJ,MAAMqe,UAAUqrB,MAAM85E,GAAWnH,GAAatgG,IAAIynG,EAAOxlH,UAC7Ei1H,EAAO50G,UAAUqrB,MAAM85E,GAAWnH,GAAatgG,IAAIynG,EAAOxlH,OAAO,GACvE,CAACk8G,EAAegJ,GAjFD,KAiFwB,GAEpCgQ,GAAmCxP,EAAAA,GAAAA,GAAiBL,EAAqB,CAACA,EAAqBH,IAAU,IAE/GzlE,EAAAA,GAAAA,IAAsB3zC,IAAyB,IAAvBgpH,GAAkBhpH,EACnCowG,GAAiB4Y,GAAmBh1H,KAAOo8G,EAAcp8G,IAI1Do1H,KACF9P,EAAqB,CACnBzmH,SACAC,WACA+gB,WAAW,GAEf,GACC,CAACu8F,EAAev9G,EAAQumH,EAAStmH,EAAUs2H,IAE9C,MAAMC,GAA8Bv1E,EAAAA,EAAAA,KAAY,KACzCp+B,IAGLkxD,EAAAA,EAAAA,KAAe,KACbo3C,GAAQkJ,EAAAA,GAAAA,GAA0BxxG,KAGlCqxG,EAAAA,EAAAA,KAAoB,KAClB,MAAMjtD,EAAex3D,SAAS+rC,cAA8B0rB,EAAAA,KACxDD,IACFktD,EAAAA,GAAAA,GAAqBltD,GAAc,EACrC,GACA,GACF,GACD,CAACpkD,EAAOsoG,IAEL2K,GAAmB70E,EAAAA,EAAAA,KAAY,KACnC20E,IACAY,GAA6B,GAC5B,CAACZ,EAAeY,IAEbX,GAAqB50E,EAAAA,EAAAA,KAAY,KACrC,MAAM,KAAE59C,EAAI,SAAEqe,IAAa9U,EAAAA,EAAAA,IAAkB25G,KAExChJ,IAIAl6G,IAASozH,EAAAA,EAAAA,IAAgBlZ,IAK9ByY,EAAY,CACV3yH,OACAqe,aAGFk0G,IACAY,KAVEpI,IAU2B,GAC5B,CAAC4H,EAAazY,EAAegJ,EAAS6H,EAAiBwH,EAAeY,IAEnEE,GAAaz1E,EAAAA,EAAAA,KAAY,KAC7B,IAAKs8D,EAAe,OACpB,MAAM+Y,GAAS1pH,EAAAA,EAAAA,IAAkB25G,KAC3B56F,EAAS2qG,EAAOjzH,KAAK3D,OAAS42H,OAASl2H,EAE7C61H,EAAgB,CACdj2H,SAAQC,WAAUoB,OAAMgC,KAAMsoB,GAC9B,GACD,CAAC3rB,EAAQu9G,EAAegJ,EAAS0P,EAAiBh2H,EAAUoB,IAK/D,OAHAspG,EAAAA,GAAAA,GAAkB+rB,GAClBx7E,GAAgBw7E,GAET,CAACb,EAAoBC,EAAkBzR,EAAuB,EuBsZE0R,CACrExP,GACA4E,GACAjC,EACA0M,GACAxH,GACApuH,EACAC,EACAuE,EACAqe,EACAsU,GACAlwB,IAII0vH,IAAmBzqB,EAAAA,GAAAA,GAAY0pB,IAC/BgB,IAAwB1qB,EAAAA,GAAAA,GAAYwiB,KAC1CpzE,EAAAA,EAAAA,KAAU,IACD,KAELs7E,GAAsB7mG,UAEtB4mG,GAAiB5mG,SAAS,GAE3B,CAAC/vB,EAAQC,EAAU02H,GAAkBC,KAExC,MAAMC,IAAqC51E,EAAAA,EAAAA,KAAY,KACrD,MAAM61E,EAAqB/K,GAA8Bh8F,QAWvDnkB,GAVGkrH,EAUc,CACf9xH,QAASP,GAAK,2BACd+P,OAAQ,CACNA,OAAQ,WACRhU,QAAS,CAAEW,GAAImW,EAAehW,sBAAsB,IAEtDi3E,WAAY9zE,GAAK,SAfF,CACfO,QAASP,GAAK,0BACd+P,OAAQ,CACNA,OAAQ,mBACRhU,QAAS,CAAEkoC,eAAgB,mBAE7B6vC,WAAY9zE,GAAK,iBAYrBsnH,GAA8Bh8F,QAAUtoB,QAAQqvH,EAAmB,GAClE,CAACx/G,EAAe7S,GAAMmH,KAEnBmrH,IAAkBlxD,EAAAA,GAAAA,IAAgB,IAClCqjD,GAAkB7E,GACbqD,GAAgBsP,MAGrB3H,EAAAA,IAAiCT,IAAyBh1B,GAAkB2sB,OAAcgG,GAI1FjD,EACK5B,GAAgBuP,SAGlBvP,GAAgBwP,KAPdxP,GAAgByP,QAQxB,CACDvI,GAAsB1F,EAAgB3C,GAASgG,GAAgB3yB,EAAcyqB,GAAwBiF,IAEjG8N,IAAyB9N,GAG7B/pD,kBAAmB83D,GAAoB,kBACvC53D,GAAiB,uBACjBC,GAAsB,sBACtBC,KACEC,EAAAA,GAAAA,GAAuBmvD,KAAiBgI,KAAoBrP,GAAgBwP,MAAQE,KAExFha,GACEyL,EACAuL,GACApH,GACA9D,GACC5iG,IAAyBi+C,EAC1BsyD,IAGF,MAAMS,IAAsBr2E,EAAAA,EAAAA,KAAY,KAClCioE,GACF4M,IACF,GACC,CAAC5M,EAAgB4M,KAEdyB,IAAqBt2E,EAAAA,EAAAA,KAAY,CAAC59C,EAAcm0H,KACpD,MAAMC,EAAYD,EAAoBlN,EAjcf,KAkcvB,GAAIjnH,GAAM3D,OAAS+3H,EAAW,CAC5B,MAAMC,EAAcr0H,EAAK3D,OAAS+3H,EAYlC,OAXAxtG,GAAW,CACT3W,KAAM,CACJtO,QAAS,4CACT2yH,WAAY,CACV,sBAAuBD,EAAYlwH,WACnC,aAAckwH,EAAc,EAAI,IAAM,IAExCnkH,aAAa,MAIV,CACT,CACA,OAAO,CAAI,GACV,CAAC+2G,EAAcrgG,KAEZ2tG,IAAgB32E,EAAAA,EAAAA,KAAY,KAChC,GAAI8nE,KAAal3E,GAAS,CACxB,MAAMo1B,EAAex3D,SAAS+rC,cAA8B0rB,EAAAA,KAEtD2wD,GAAanrH,EAAAA,EAAAA,MACborH,EAA0BxM,GAA2Bv7F,SACtD9iB,KAAKI,MAAMwqH,EAAavM,GAA2Bv7F,SAClDgoG,EAAyBhP,GAASiP,cAAgBjP,GAASiP,aAAeH,EAEhF,GACGC,GAA2BA,EAA0B/O,GAASkP,SAC5DF,EACH,CACA,MAAMG,EAAmBH,EACrBhP,GAASiP,aAAgBH,EACzB9O,GAASkP,QAAUH,EAWvB,OAVA7tG,GAAW,CACT3W,KAAM,CACJtO,QAASP,GAAK,gBAAgBgjF,EAAAA,GAAAA,IAAoBywC,IAClDC,YAAY,EACZ5kH,aAAa,KAIjB0zD,GAAcxpC,QAEP,CACT,CACF,CACA,OAAO,CAAI,GACV,CAACoU,GAASptC,GAAMwlB,GAAY8+F,KAEzBqP,IAAkBn3E,EAAAA,EAAAA,KAAYhlC,IAY9B,IAXJqF,YAAa+2G,EAAiB,eAC9BC,EAAiBnjH,GAAmBF,eAAc,YAClDsjH,EAAcpjH,GAAmBD,kBAAiB,SAClDyO,EAAQ,YACR9C,GAOD5E,EACC,GAAwB,yBAApB8c,EACF,OAGF,MAAM,KAAE11B,EAAI,SAAEqe,IAAa9U,EAAAA,EAAAA,IAAkB25G,OACxCljH,GAASg1H,EAAkB34H,SAG3B63H,GAAmBl0H,GAAM,IACzBu0H,OAELj5G,GAAY,CACVtb,OACAqe,WACAb,cACA8C,WACA60G,8BAA8B,EAC9Bl3G,YAAao2F,GAAyB2gB,EAAmBC,GACzD92G,oBAAqB+2G,IAGvBjN,GAA2Bv7F,SAAUrjB,EAAAA,EAAAA,MAErC+9G,GAAW,CAAEzqH,SAAQsjB,WAAW,KAGhCywD,EAAAA,EAAAA,KAAe,KACb6hD,IAAe,IACf,GACD,CACDzgH,GAAmBF,eAAgBE,GAAmBD,kBAAmB6jB,EAAiBwtF,GAC1FgR,GAAoBK,GAAej5G,GAAa8rG,GAAYzqH,EAAQ41H,KAGhE6C,IAAwBx3E,EAAAA,EAAAA,KAAY,CACxCq3E,EACAC,EACA50G,EACA9C,KAEAu3G,GAAgB,CACd92G,eACAg3G,iBACAC,cACA50G,WACA9C,eACA,GACD,CAACS,GAAa82G,KAEXM,IAAaz3E,EAAAA,EAAAA,KAAYxnC,iBAAkD,IAA3CkK,EAAQlkB,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GAAUohB,EAAoBphB,UAAAC,OAAA,EAAAD,UAAA,QAAAW,EAC1E,GAAwB,yBAApB24B,EACF,OAGF,IAAI4/F,EAAqBr3G,GAEzB,GAAIstG,GAAsB,CACxB,MAAMgK,QAAelK,KACrB,GAAIkK,EAAQ,CACV,MAAM,KAAEj+D,EAAI,SAAEyC,EAAQ,SAAEi8C,GAAauf,EACrCD,EAAqB,OAAOviB,GAnkBH,8BAqkBvBz7C,EACA,CAAEnvC,MAAO,CAAE4xC,WAAUi8C,cAEzB,CACF,CAEA,MAAM,KAAEh2G,EAAI,SAAEqe,IAAa9U,EAAAA,EAAAA,IAAkB25G,MAE7C,GAAIoS,EAAmBj5H,OAIrB,YAHA04H,GAAgB,CACd92G,YAAaq3G,IAKjB,IAAKt1H,IAASu2F,EACZ,OAGF,IAAK29B,GAAmBl0H,GAAO,OAE/B,MAAM4jE,EAAex3D,SAAS+rC,cAA8B0rB,EAAAA,KAE5D,GAAI7jE,EAAM,CACR,IAAKu0H,KAAiB,OAEtBj5G,GAAY,CACVtb,OACAqe,WACAb,cACA8C,WACA60G,8BAA8B,GAElC,CAEI5+B,GACFx3F,GAAgB,CACdye,cACA8C,aAIJ2nG,GAA2Bv7F,SAAUrjB,EAAAA,EAAAA,MAErC+9G,GAAW,CAAEzqH,SAAQsjB,WAAW,IAE5B7D,EAAAA,IAAUwnD,GAAgBA,IAAiBx3D,SAASouG,eACtD9F,GAA8B9wC,IAIhC8M,EAAAA,EAAAA,KAAe,KACb6hD,IAAe,GAEnB,GAAG,CACD78F,EAAiBzX,GAAastG,GAAsBrI,GAAS3sB,EAAc29B,GAAoB9M,GAC/FzqH,EAAQ0uH,GAAoB0J,GAAiBR,GAAej5G,GAAavc,GAAiBwzH,KAGtFiD,IAAqB53E,EAAAA,EAAAA,KAAY,KACT,WAAxBgpE,IAAe5oH,MAInBgjC,GAAc,CACZrkC,SAAQ6T,IAAKo2G,GAAcp2G,IAAK5T,YAChC,GACD,CAACgqH,GAAe5lF,GAAerkC,EAAQC,IAEpC64H,IAA+B73E,EAAAA,EAAAA,KAAY,KAC/C8sE,KACAJ,IAAoB,GACnB,CAACI,GAAiBJ,KAEfoL,IAAwB93E,EAAAA,EAAAA,KAAY,CACxC6/C,EAA4BjgF,KAE5B,GAAIigF,GAAQ,YAAaA,EAAM,CAC7B,MAAM,GAAE3/F,EAAE,QAAEuhC,EAAO,SAAE/e,GAAam9E,EAOlC,YANA+pB,GAAoB,CAClB1pH,KACAuhC,UACA7hB,cACA8C,YAGJ,CAEA,MAAM,SAAEA,KAAaq1G,GAAal4B,GAAQ,CAAC,EAE3C,GAAKA,GAAyC,IAAjCz5F,OAAOC,KAAK0xH,GAAUt5H,OAE5B,QAA4BU,IAAxB0gG,EAAKw3B,qBAAqDl4H,IAArB0gG,EAAKy3B,YAA2B,CAC9E,MAAM,eAAED,GAAiB,EAAK,YAAEC,GAAc,GAAUz3B,EACnD23B,GAAsBH,EAAgBC,EAAa50G,EAAU9C,EACpE,MACElC,GAAY,IACPmiF,EACHjgF,qBAPG63G,GAAW3xH,QAAQ4c,GAAW9C,EASrC,GACC,CAAC43G,GAAuBC,GAAY7N,GAAqBlsG,MAE5DmiC,EAAAA,GAAAA,IAAsBpkC,IAAgC,IAA9Bu8G,GAAyBv8G,EAC3Cva,GAAwBA,IAAyB82H,GACnDhN,IAAiBprG,IACfk4G,GAAsB52H,EAAsB0e,EAAY,GAE5D,GACC,CAAC1e,EAAsB42H,GAAuB9M,MAEjD3wE,EAAAA,EAAAA,KAAU,KACJmtE,KACF0C,GAAQ1C,IACRsC,MAEAmJ,EAAAA,EAAAA,KAAoB,KAClB,MAAMjtD,EAAex3D,SAASgjD,eAAeqrD,EAAAA,MAC7CqW,EAAAA,GAAAA,GAAqBltD,GAAc,EAAK,IAE5C,GACC,CAACwhD,GAAoBsC,GAAwBI,MAEhD7vE,EAAAA,EAAAA,KAAU,KACJqtE,IAAqBjpH,SAClBqjH,GAAiB4F,IACtBoC,KACF,GACC,CAAChI,GAAkB4F,GAAqBoC,KAE3C,MAAMmO,IAA0Bj4E,EAAAA,EAAAA,KAAY,CAACp7C,EAAmB8hD,KACzD9hD,EAAMszH,QAAW7yG,GAAyBi+C,EAK/C+vD,GAAiCzuH,EAAO8hD,GAJtCkvE,IAI8C,GAC/C,CAACvC,GAAkC/vD,EAAgBj+C,EAAsBuwG,KAEtEuC,IAAyCn4E,EAAAA,EAAAA,KAAap7C,IAC1DqzH,GAAwBrzH,EAAOk4G,EAAAA,IAAwB,GACtD,CAACmb,KAEEG,IAAkBp4E,EAAAA,EAAAA,KAAY,CAAC1xB,EAAe5L,EAAoB21G,KAClEhQ,GAAkBgQ,GACpB5N,KACAO,IAAiBprG,IACf8qG,KACAoN,GAAsB,CAAExpG,MAAK5L,YAAY9C,IACzCkzD,EAAAA,EAAAA,KAAe,KACb6hD,IAAc,EAAK,GACnB,MAGJj3G,GAAY,CAAE4Q,MAAK5L,cACnBowD,EAAAA,EAAAA,KAAe,KACb6hD,IAAc,EAAK,IAEvB,GACC,CACDtM,EAAgBoC,GAAqBO,GAAiBN,GAA2BoN,GACjFnD,GAAej3G,KAGX0vF,IAAsBptD,EAAAA,EAAAA,KAAY,SACtC9vC,EACAwS,EACA21G,GAGG,IAFHC,EAAmB95H,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GACnB+4H,EAAsC/4H,UAAAC,OAAA,EAAAD,UAAA,QAAAW,EAEtC+Q,EAAU,IACLA,EACH8hC,qBAAqB,GAGnBq2E,GAAkBgQ,GACpB5N,KACAO,IAAiBprG,IACf8qG,KACAoN,GAAsB,CAAE5nH,UAASwS,YAAY9C,IAC7CkzD,EAAAA,EAAAA,KAAe,KACb6hD,GAAc2D,EAAoB,GAClC,MAGJ56G,GAAY,CAAExN,UAASwS,WAAU60G,kCACjCzkD,EAAAA,EAAAA,KAAe,KACb6hD,GAAc2D,EAAoB,IAGxC,GAAG,CACDjQ,EAAgBoC,GAAqBO,GAAiBN,GAA2BoN,GACjFnD,GAAej3G,KAGX66G,IAAwBv4E,EAAAA,EAAAA,KAAY,CACxCw4E,EAA4D91G,EAAoB21G,KAEhF,GAAwB,yBAApBvgG,EACF,OAGEuwF,GAAkBgQ,EACpBrN,IAAiBprG,IACfk4G,GAAsB,CACpB53H,GAAIs4H,EAAat4H,GACjBuhC,QAAS+2F,EAAa/2F,QACtB/e,YACC9C,EAAY,IAGjBgqG,GAAoB,CAClB1pH,GAAIs4H,EAAat4H,GACjBuhC,QAAS+2F,EAAa/2F,QACtB/e,aAIJ,MAAMsjD,EAAex3D,SAAS+rC,cAA8B0rB,EAAAA,KACxDznD,EAAAA,IAAUwnD,GAAgBA,IAAiBx3D,SAASouG,eACtD9F,GAA8B9wC,GAGhCwjD,GAAW,CAAEzqH,SAAQsjB,WAAW,KAChCywD,EAAAA,EAAAA,KAAe,KACb6hD,IAAe,GACf,GACD,CACD51H,EAAQyqH,GAAY1xF,EAAiBggG,GAAuB9M,GAAiB2J,GAAe/K,GAC5FvB,IAGIoQ,IAAyBz4E,EAAAA,EAAAA,KAAY,KACzCwpE,GAAW,CAAEzqH,SAAQsjB,WAAW,KAChCywD,EAAAA,EAAAA,KAAe,KACb6hD,IAAe,GACf,GACD,CAAC51H,EAAQyqH,GAAYmL,KAElB+D,IAAiB14E,EAAAA,EAAAA,KAAaj7B,IAC9BsjG,GACF2C,IAAiBprG,IACfk4G,GAAsB,CAAE/yG,QAAQnF,EAAY,IAE9C6pG,OAEA/rG,GAAY,CAAEqH,SACd0kG,KACF,GACC,CAACA,GAAgBqO,GAAuB9M,GAAiBttG,GAAa2qG,IAEnEsQ,IAAa34E,EAAAA,EAAAA,KAAa44E,IAC9B,GAAIvQ,EACF2C,IAAiBprG,IACfk4G,GAAsB,IAAKc,EAAgBl2G,UAAU,GAAQ9C,EAAY,SAEtE,GAAIg5G,IAAmB,mBAAoBA,GAAkB,gBAAiBA,GAAiB,CACpG,MAAM,eAAEvB,GAAiB,EAAK,YAAEC,GAAc,GAAUsB,EACnDpB,GAAsBH,EAAgBC,GAAa,EAC1D,MACOG,IAAW,EAClB,GACC,CAACK,GAAuBL,GAAYD,GAAuBxM,GAAiB3C,IAEzEwQ,IAAuB74E,EAAAA,EAAAA,KAAY,KACvC,MAAMgmB,EAAex3D,SAAS+rC,cAA8B0rB,EAAAA,KAE5D,IAAK1mB,GAAYymB,IAAiBx3D,SAASouG,cAIzC,OAHA+P,KACAG,UACAE,KAIFhnD,GAAcxpC,OACd50B,YAAW,KACT+kH,KACAG,KACAE,IAAgB,GAx1BgB,IAy1BD,GAChC,CAACL,GAAqBG,GAAiBE,GAAgBztE,IAEpD68D,IAA4Bp8D,EAAAA,EAAAA,KAAY,SAAC59C,GAAsD,IAAxCskD,EAAeloD,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAGq+G,EAAAA,IAC7E,MAAMyV,GAAU75D,EAAAA,GAAAA,GAAWr2D,EAAM,CAAC,cAAe,aAAc,YAC5D4C,KAAK,IACL4J,QAAQ,WAAY,KACvByjH,GAA0BC,EAAS5rE,EACrC,GAAG,CAAC2rE,MAEJh4E,EAAAA,EAAAA,KAAU,KACHoxE,IAELvB,GAAQ,GAAG,GACV,CAACuB,GAAmBvB,GAAS7pG,KAEhC,MAAMy4G,IAA2C94E,EAAAA,EAAAA,KAAa59C,IAC5Dg6G,GAA0Bh6G,EAAM06G,EAAAA,IAAwB,GACvD,CAACV,KAEE2c,IAAe/4E,EAAAA,EAAAA,KAAY,WAAiC,IAAhC0G,EAAOloD,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAGq+G,EAAAA,IAC1C,MAAM0V,EAAY1wH,OAAO2wH,eAEzB,GAAID,EAAUE,WAAY,CACxB,MAAMC,EAAiBH,EAAUI,WAAW,GAC5C,IAAIC,EAAAA,GAAAA,GAAuBF,EAAgBhsE,GAEzC,YADAl4C,SAASwqH,YAAY,UAAU,EAGnC,CAEA9O,GEvlCW,SAA6C5P,GAC1D,MAAM2e,EAAYzqH,SAASksD,cAAc,OACzCu+D,EAAUC,gBAAkB,OAC5BD,EAAUj7E,MAAMp7C,SAAW,WAC3Bq2H,EAAUj7E,MAAMtqC,KAAO,WACvBulH,EAAUj7E,MAAMvqC,IAAM,WACtBwlH,EAAU/iE,UAAYokD,EACtB9rG,SAAS23B,KAAK6wE,YAAYiiB,GAC1B,IAAI/iD,EAAU+iD,EAAUE,UAExB,GAAIjjD,EAAQijD,UAEV,KAAOjjD,EAAQijD,WACbjjD,EAAUA,EAAQijD,UAKtB,MAAMC,EAAaljD,EAAQiU,YAAa1rF,OAClC46H,EAAQ7qH,SAAS8qH,cACjB/G,EAAY1wH,OAAO2wH,eAGzB6G,EAAME,SAASrjD,EAASkjD,GACxBC,EAAMG,OAAOtjD,EAASkjD,GACtB7G,EAAUkH,kBACVlH,EAAUmH,SAASL,GACnB7qH,SAASwqH,YAAY,UAAU,GAE/B,MAAM30H,EAAS40H,EAAU/iE,UAGzB,OAFA1nD,SAAS23B,KAAKwzF,YAAYV,GAEnB50H,CACT,CFsjCYu1H,CAAoCtU,MAC9C,GAAG,CAACA,GAAS4E,KAEP2P,IAA8B75E,EAAAA,EAAAA,KAAY,KAC9C+4E,GAAajc,EAAAA,IAAwB,GACpC,CAACic,KAEEe,IAA0B95E,EAAAA,EAAAA,KAAY,KAC1C79C,GAAS,CACPjC,GAAInB,EAAQC,WAAUoB,KAAM,YAAaG,mBAAmB,GAC5D,GACD,CAAC4B,GAAUpD,EAAQC,KAEtBq7C,EAAAA,EAAAA,KAAU,KACJ8oB,GAAsB5jB,GACxButE,IACF,GACC,CAAC3pD,EAAoB2pD,GAAiBvtE,KAEzClF,EAAAA,EAAAA,KAAU,KACH4pB,IAEDb,EACFkqD,KAEA1lH,YAAW,KACT2lH,IAAa,GAj5Ba,KAm5B9B,GACC,CAACnqD,EAAoBmqD,GAAaD,GAAcrpD,IAEnD,MAAM81D,KAA6BjE,KAAoBrP,GAAgByP,QAChEpV,IAAmB+G,GAA0B91G,IAE9CioH,IAAoBh6E,EAAAA,EAAAA,KAAY,KACpC,OAAQ81E,IACN,KAAKrP,GAAgBwP,KACdwB,KACL,MACF,KAAKhR,GAAgByP,OACf6D,GACGlS,EAIO91G,IACVqX,GAAoC,CAAErqB,WAJtC4L,GAAiB,CACf5G,QAASP,GAAK,mCAAoCnC,GAAM0N,SAMvDy+G,KAEP,MAEF,KAAK/G,GAAgBsP,KACnBnB,KACA,MACF,KAAKnO,GAAgBuP,SACfrI,IACFD,KAEF1C,IAAiBprG,IACfk4G,GAAsB,CAAC,EAAGl4G,EAAY,IAIlC,GAET,CACDk2G,GAAiB2B,GAAY7C,GAAoBjH,GAAsB3C,GAAiB+O,GACxFlS,EAAuBl9G,GAAkBnH,GAAMnC,GAAM0N,MAAOy+G,GAAqBE,GACjFoK,GAAuB/4H,EAAQqqB,GAAqCrX,KAGhEmjH,IAAoB5tD,EAAAA,GAAAA,GAAY2gD,GAAgB,GAChDgS,GAAwBhS,GAAkBiN,GAE1CgF,GAAuB,IAAIlvH,KACjCkvH,GAAqBC,WAAW,GAChCD,GAAqBE,gBAAgB,GAErC,MAAMC,GAAmB,IAAIrvH,KAC7BqvH,GAAiBC,YAAYD,GAAiBE,cAAgB,GAE9D,IAAIC,GAAsB,cAC1B,OAAQ1E,IACN,KAAKrP,GAAgBsP,KACnByE,GAAsB,sBACtB,MACF,KAAK/T,GAAgByP,OACnBsE,GAAuB1Z,GAEnB,uBADA,sCAIR,MAAMlyF,IAAYkvB,EAAAA,GAAAA,GAChB,YACCslB,GAAsB,QACvBiqD,IAAmB,kBAGfoN,IAAsBz6E,EAAAA,EAAAA,KAAY,KACtCgrE,IAAiBprG,IACfk4G,GAAsB,CAAC,EAAGl4G,EAAY,GACtC,GACD,CAACk4G,GAAuB9M,KAErB0P,IAAmB16E,EAAAA,EAAAA,KAAY,KACnC24E,IAAY,GACX,CAACA,KAEEgC,IAAuB36E,EAAAA,EAAAA,KAAY,KACvC83E,GAAsB,CAAE,EAAGjrB,EAAAA,IAAsB,GAChD,CAACirB,KAEE8C,IAAiC56E,EAAAA,EAAAA,KAAY,CAACq3E,EAAyBC,KAC3EtM,IAAiBprG,IACfk4G,GAAsB,CAAET,iBAAgBC,eAAe13G,EAAY,GACnE,GACD,CAACk4G,GAAuB9M,KAErB6P,IAA8B76E,EAAAA,EAAAA,KAAY,CAACq3E,EAAyBC,KACxEqB,GAAW,CAAEtB,iBAAgBC,eAAc,GAC1C,CAACqB,KAEEmC,GAAShF,KAAoBrP,GAAgBsP,KAC/CnB,GACAkB,KAAoBrP,GAAgBuP,SAAWyE,GAC7ChD,GAEAsD,GAAoBv4D,GAAyC,WAAxBwmD,IAAe5oH,OAAsB6nH,EAC1E+S,IAAsBp2D,EAAAA,GAAAA,IAAgB,IACnCm2D,KAAsBzV,OAAcqI,IAC1C,CAACoN,GAAmBzV,GAASqI,KAE1BsN,GAAkBz4D,GAAyC,aAAxBwmD,IAAe5oH,OAAwB6nH,IAC3D,IAAhBa,KAA0B6E,GAE/B,OACE1yE,EAAAA,GAAAA,cAAA,OAAKrsB,UAAWA,IACbkyF,IAAkB78C,GACjBhpB,EAAAA,GAAAA,cAACkqE,GAAQ,CACPvkH,OAAQ0oH,IAAkB4R,GAAAA,EAAAA,KAC1BC,UAAW7R,IAAkB4R,GAAAA,EAAAA,WAA2B5Q,KAAsB4Q,GAAAA,EAAAA,UAC9Ej7D,OAAQspD,EACRtI,aAAca,KAGlB7mE,EAAAA,GAAAA,cAAC+pE,GAAe,CACdjmH,OAAQA,EACRC,SAAUA,EACVm3H,sBAAuBA,GACvB91G,YAAaA,GACbilG,QAASA,GACTrhD,QAASA,EACT89C,yBAA0BA,GAC1B2J,uBAAwBA,GACxBC,kBAAmBA,GACnB/D,wBAAyBA,EACzBS,eAAgBA,EAChBwD,gBAAiBA,GACjBuP,aAAcP,GACdC,OAAQtD,GACR6D,gBAAiBT,GACjBU,aAAc1P,GACdlI,QAASoI,GACTyP,oBAAqBxP,GACrByP,oBAAqBrD,GACrBsD,eAAgB5B,GAChB6B,cAAe5C,KAEjB79E,EAAAA,GAAAA,cAACiqE,GAAS,CACRtkH,OAAQkK,EAAUlK,OAClBiK,OAAQC,EAAUD,OAClB8wH,kBAAmB3nE,EACnB0vD,QAAS+F,GACTqR,OAAQpC,KAETuB,IACCh/E,EAAAA,GAAAA,cAACokE,GAAkB,CACjBz+G,OAAQssH,GACR9kB,WAAgC,cAApB7kG,EACZm9C,QAAS0sE,GACTrpH,QAASk2H,KAGbh/E,EAAAA,GAAAA,cAACkrE,GAAU,CACTvlH,OAAQmsH,GACRrsE,QAASusE,GACTluH,OAAQA,EACR68H,iBAAkB90G,GAClBG,cAAeA,GACf5B,qBAAsBA,IAExB41B,EAAAA,GAAAA,cAAC6nE,GAAc,CACbliH,OAAQwvH,GACRyL,cAAetL,GACfuL,iBAAkBxL,GAClB5vE,QAAS2vE,KAEXp1E,EAAAA,GAAAA,cAAC+nE,GAAiB,CAChBpiH,OAAQgxH,GACRmK,aAAcj2H,QAAQ+iH,IACtBC,YAAaiJ,GACbzM,QAASA,GACT3oE,QAAS87E,GACT/3E,QAASmxE,KAEX52E,EAAAA,GAAAA,cAAA,OAAK/6C,GAAG,mBACN+6C,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,eAAeuxB,IAAK6pE,KAEnC/uE,EAAAA,GAAAA,cAAC4nE,GAAgB,CACfjiH,OAAQ6vH,GACRx9G,MAAOy9G,GACPvvF,UAAWwvF,GACXG,iBAAkBA,GAClBnwF,SAAUiwF,GACVxvF,cAAeyvF,GACfK,SAAUC,GACV6K,gBAAiB14D,EACjBioD,YAAaA,GACblmG,qBAAsBA,EACtB42G,eAAgB1D,GAChB73E,QAASswE,KAEX/1E,EAAAA,GAAAA,cAACihF,GAAuB,CACtBxY,QAAS2S,GACTjT,uBAAwBt9G,QAAQs9G,IAA0B6E,KAE5DhtE,EAAAA,GAAAA,cAACkhF,GAAc,CACbp9H,OAAQA,EACRC,SAAUA,EACVsmH,QAASA,GACT5pE,YAAa8vE,IAAuBF,KAEtCrwE,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,yBACZmsG,IACC9/E,EAAAA,GAAAA,cAACmhF,GAAa,CACZx7H,OAAQo6H,GACR54H,KAAM4mH,GAAc5mH,KACpBs5C,WAAY51C,QAAQ6nH,IACpBhxE,QAASi7E,KAGZqD,IACChgF,EAAAA,GAAAA,cAACqnE,GAAAA,EAAqB,CACpB1zF,WAAWkvB,EAAAA,GAAAA,GAAe,eAAgB2uE,IAAwB,aAClEj2G,OAAK,EACLqpD,cAA0B1gE,IAAhB2pH,GACV9rE,MAAM,cACNulE,WAAYsV,GACZt0E,UAAU,6BAEVtI,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,mCAGhB27F,KAAkBhD,IAAcxgG,KAC/Bk0B,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL3mC,OAAK,EACLwmC,MAAM,cACNL,QAASowE,GAAmBE,GAAkB4L,GAC9Ct1E,UAAW//C,GAAK,sBAChBorB,WAAWkvB,EAAAA,GAAAA,GAAe,iBAAkBqtE,GAA6Br8F,SAAW,qBAEpFmsB,EAAAA,GAAAA,cAAC+8B,GAAAA,EAAM,CACLl2D,KAAMylG,GACNlmH,KAAM0lB,GACNq2B,KAAK,YAIRquE,IAAqBF,IAAe15G,KACrCopC,EAAAA,GAAAA,cAACohF,GAAAA,EAAgB,CACft9H,OAAQA,EACRC,SAAUA,EACVugD,SAAUA,EACV0kB,QAASA,EACT2oD,iBAAkBA,GAClBC,eAAgBA,GAChBC,gBAAiBA,GACjBj7G,gBAAiBA,GACjB05G,YAAaA,GACb+Q,YAAalE,GACbmE,gBAAiBnvB,GACjBouB,oBAAqBvD,GACrBwD,eAAgB1C,GAChB2C,cAAetf,GACfuQ,oBAAqBA,GACrBM,gBAAiBA,GACjBzC,mBAAoBA,GACpBh5G,kBAAmBi6G,KAGvBxwE,EAAAA,GAAAA,cAACuhF,GAAAA,EAAY,CACXr8E,IAAK8pE,GACL/pH,GAAG,qBACHu8H,gBAAiB5f,EAAAA,IACjB99G,OAAQA,EACRyS,kBAAmBi6G,GACnBzsH,SAAUA,EACVuQ,UAAW+7G,GACXhG,QAASA,GACTv+D,YACE4mE,IAAwB3kF,IAxqCG,IAyqCvB,GACEyiF,GAEAjoH,GAAK,kCADJ8kH,GAA0B9kH,GAAK,WAGxCk5H,kBAAmBzL,GACnB0L,aAAc14D,GAAW2jD,IAA4B0D,GACrDsR,oBAAqBtR,GACrBuR,oBAAqBt9E,GAAYqtE,GACjCkQ,4BAA6BnO,IAAsByB,IAAwBK,GAC3EsM,SAAU7S,GACV4Q,OAAQA,GACRkC,kBAAmBlQ,KAEpBlE,GAAsB9iH,QAAQ4qH,KAC7Bz1E,EAAAA,GAAAA,cAAC8B,GAAAA,EAAO,CAACC,MAAM,SAEhBorE,GACCntE,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL3mC,OAAK,EACLsuG,OAAK,EACLl2F,UAAU,mBACVouB,MAAM,cACNL,QAASm9E,GACTv2E,UAAU,2BAEVtI,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,wBAGhB9oB,QAAQohH,KAA0ByG,KAAyB1F,GAC1DhtE,EAAAA,GAAAA,cAACqnE,GAAAA,EAAqB,CACpB1zF,UAAW09F,GAAoB,YAAc,GAC7C91G,OAAK,EACLwmC,MAAM,cACNulE,WAAYgK,GACZhpE,UAAU,6BAEVtI,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,2BAGhB++F,IAAwB7nH,QAAQ8nH,KAC/B3yE,EAAAA,GAAAA,cAAA,QAAMrsB,UAAU,oBACbquG,EAAAA,GAAAA,IAA0BrP,GAAoBG,GAAmBj/F,UAGtEmsB,EAAAA,GAAAA,cAACiiF,GAAU,CACTn+H,OAAQA,EACRC,SAAUA,EACV6hH,iBAAkB8M,KAAyB1F,EAC3CnH,eAAgBA,GAChBC,eAAgBA,GAChBtvG,cAAeA,GACfC,cAAeA,GACfC,iBAAkBA,GAClBC,cAAeA,GACfqvG,aAAca,GACdZ,aAAc3hF,GACdmS,YAAa22E,EACbrH,WAAYA,GACZlpE,SAAUmxE,GACVnpF,MAAOA,KAERh6B,QAAQohH,IACPjsE,EAAAA,GAAAA,cAACkiF,GAAe,CACd33H,UAAW0hH,EACXtmH,OAAQ0rH,GACR5rE,QAAS8rE,KAGZ1D,IACC7tE,EAAAA,GAAAA,cAACgqE,GAAc,CACbrkH,OAAQ6rH,GACR3D,YAAaA,GACbpoE,QAASisE,KAGb1xE,EAAAA,GAAAA,cAACmiF,GAAAA,EAAkB,CACjBr+H,OAAQA,EACR6B,OAAQquH,GACRuM,oBAAqBrM,GACrBpF,qBAAsBA,GACtBrpE,QAASwuE,KAEXj0E,EAAAA,GAAAA,cAAC8nE,GAAc,CACbhkH,OAAQA,EACRC,SAAUA,EACV4B,OAAQyuH,GACRkN,gBAAiBnvB,GACjB1sD,QAAS4uE,KAEXr0E,EAAAA,GAAAA,cAACoiF,GAAAA,EAAY,CACXz8H,OAAQ+tH,GACR5gG,OAAQ8gG,GACR/9G,aAAcg+G,GACdnF,eAAgBA,GAChBI,qBAAsBA,GACtB2R,cAAe3M,GACfyM,oBAAqBzM,GACrBruE,QAASkuE,OAIdjB,IACC1yE,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL3mC,OAAK,EACLwmC,MAAM,SACNpuB,UAAU,SACV+tB,QAAS8wE,GACTlqE,UAAU,0BAEVtI,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,sBAGjBqsB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLgD,IAAK2tE,GACLt3G,OAAK,EACLwmC,MAAM,YACNpuB,WAAWkvB,EAAAA,GAAAA,GAAeg4E,IAAkB7xD,GAAW,YAAa0pD,IAAwB,aAC5F9tD,SAAUk6D,GACVuD,oBAAkB,EAClBC,aAAW,EACXh6E,UAAW//C,GAAKg3H,IAChB79E,QAASq9E,GACTx6D,cACEs2D,KAAoBrP,GAAgBwP,MAAQE,GAAwB33D,QAAoBr/D,GAG1F87C,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,mBACbqsB,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,uBACbqsB,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,6BACbqsB,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,qBAEdunG,IACCl7E,EAAAA,GAAAA,cAACuiF,GAAAA,EAAc,CACb58H,OAAQw1H,GACRlO,uBAAwBA,EACxBkT,aAAe93D,OAAoCnkE,EAAnBu7H,GAChC+C,eAAiBpV,OAAuClpH,EAAtBs7H,GAClCiD,iBAAkB/C,GAClBj6E,QAAS+d,GACTtP,oBAAqBuP,GACrBs9D,gBAAiB14D,IAGpB2nD,GACG,KGxgDV,IAAerwE,EAAAA,EAAAA,KAR0BC,IACvC,MAAM,SAAEtrC,GAAasrC,EACf8iF,GAAe5iF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,gBAAiBzrC,GAAU,GAG/E,OAAOouH,EAAe1iF,EAAAA,GAAAA,cAAC0iF,EAAiB9iF,QAAY17C,CAAS,ICG/D,IAAey7C,EAAAA,EAAAA,KARkCC,IAC/C,MAAM,SAAEtrC,GAAasrC,EACf+iF,GAAuB7iF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,wBAAyBzrC,GAGrF,OAAOquH,EAAuB3iF,EAAAA,GAAAA,cAAC2iF,EAAyB/iF,QAAY17C,CAAS,ICG/E,IAAey7C,EAAAA,EAAAA,KARmCC,IAChD,MAAM,OAAEj6C,GAAWi6C,EACbgjF,GAAwB9iF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,yBAA0Bp6C,GAGvF,OAAOi9H,EAAwB5iF,EAAAA,GAAAA,cAAC4iF,EAA0BhjF,QAAY17C,CAAS,ICGjF,IAAey7C,EAAAA,EAAAA,KARyBC,IACtC,MAAM,OAAEj6C,GAAWi6C,EACbijF,GAAc/iF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAAgBp6C,GAGnE,OAAOk9H,EAAc7iF,EAAAA,GAAAA,cAAC6iF,EAAgBjjF,QAAY17C,CAAS,ICK7D,IAAey7C,EAAAA,EAAAA,KAVuCC,IACpD,MAAM,uBAAE/P,GAA2B+P,EAC7BkjF,GAA4BhjF,EAAAA,GAAAA,GAChCC,GAAAA,GAAAA,MAAe,6BAA8BlQ,GAI/C,OAAOizF,EAA4B9iF,EAAAA,GAAAA,cAAC8iF,EAA8BljF,QAAY17C,CAAS,ICCzF,IAAey7C,EAAAA,EAAAA,KAR8BC,IAC3C,MAAM,OAAEj6C,GAAWi6C,EACbmjF,GAAmBjjF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqBp6C,GAG7E,OAAOo9H,EAAmB/iF,EAAAA,GAAAA,cAAC+iF,EAAqBnjF,QAAY17C,CAAS,ICIvE,IAAey7C,EAAAA,EAAAA,KAR8BC,IAC3C,MAAM,OAAEj6C,GAAWi6C,EACbojF,GAAmBljF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqBp6C,GAG7E,OAAOq9H,EAAmBhjF,EAAAA,GAAAA,cAACgjF,EAAqBpjF,QAAY17C,CAAS,ICGvE,IAAey7C,EAAAA,EAAAA,KARkCC,IAC/C,MAAM,OAAEj6C,GAAWi6C,EACbqjF,GAAuBnjF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,wBAAyBp6C,GAGrF,OAAOs9H,EAAuBjjF,EAAAA,GAAAA,cAACijF,EAAyBrjF,QAAY17C,CAAS,IC6H/E,SAASg/H,GAAQpxD,GACf,MAAqB,SAAdA,EAAKqxD,MAAmBrxD,EAAK3sE,MAAQgqB,EAAAA,IAAAA,IAAkC2iD,EAAK3sE,KACrF,CAEA,MAAMi+H,GAA8B,IAAMl7H,EAAAA,IAoe1C,IAAey3C,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAACjgD,EAAM4N,KAA+B,IAA7B,SAAEqzC,GAAUrzC,EACnB,MAAM4zB,GAAQkhB,EAAAA,EAAAA,IAAY1iD,IAExBuX,UAAWyoH,EAAqBC,WAAYC,EAAgB,gBAAE1qB,EAAe,aAAE2qB,GAC7EngI,EAAO6X,SAASuoH,OAAO5+F,IAAU,CAAC,GAEhC,aACJlwB,EAAY,kBAAED,EAAiB,wBAAEs7B,EAAuB,YACxDv+B,EAAW,iBAAEw7B,EAAgB,aAAEz7B,EAAY,YAAEtF,EAAW,4BAAE4gD,EAA2B,qBACrFl7C,IACEjN,EAAAA,EAAAA,IAAetB,GACbkC,GAAqBvB,EAAAA,EAAAA,IAAyBX,IAC5C8O,OAAO,QAAEsiC,GAAS,aAAE9X,GAAiBt5B,EAEvC66C,EAAoB,CACxBrZ,QACA0+F,mBACA1qB,kBACA2qB,eACA9uH,oBACAwzD,oBAAoB37D,EAAAA,EAAAA,IAAyBlJ,EAAQihD,GACrD++E,sBACAK,qBAAsB74H,SAAQ2sB,EAAAA,EAAAA,IAAwBn0B,IACtD8kE,oBAAoBC,EAAAA,EAAAA,IAAqB/kE,GACzCsgI,kBAAmB94H,QAAQ4G,GAC3BmyH,uBAAwB/4H,QAAQ2G,GAChCqyH,uBAAwB52F,GAAkBtnC,OAC1Cm+H,2BAA4Bj5H,QAAQ+G,GACpCmyH,yBAAyBnrH,EAAAA,EAAAA,IAA0BvV,GACnDklE,qBAAsBx3D,KAAKC,IAAI,EAAG2D,EAAanR,OAAS,GACxDwsC,0BACArT,gBAGF,IAAKp3B,IAAuBkvC,EAAQtD,OAClC,OAAO+M,EAGT,MAAM,OAAEp6C,EAAM,SAAEC,EAAUoB,KAAMmD,GAAoB/C,EAC9Cg7B,GAAYC,EAAAA,EAAAA,IAAS18B,GACrBsC,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1Bk+B,GAAMqD,EAAAA,EAAAA,IAAchiC,EAAQS,GAC5B6jB,GAAYC,EAAAA,EAAAA,IAAgBvkB,EAAQS,EAAQC,IAC1CD,OAAQy4B,EAAahyB,UAAWiyB,GAAmBtwB,EAErDT,GAAaC,EAAAA,EAAAA,IAAiBrI,EAAQS,EAAQC,GAC9C+kE,EAAaj+D,QAAQY,GAAY2f,iBACjCyoF,EAAUztG,IAAQ49H,EAAAA,EAAAA,IAAiB59H,EAAMrC,EAAU+kE,GACnDm7D,GAAkBr8D,EAAAA,EAAAA,IAA0BvkE,EAAQS,GACpDogI,EAA0C,WAApB57H,EACtB67H,EAA6C,cAApB77H,EACzBg/D,EAAmC,WAApBh/D,GAAgCvE,IAAamB,EAAAA,GAC5D6zD,EAAYluD,QAAQzE,IAAQ0hE,EAAAA,EAAAA,IAAc1hE,IAC1CyhE,EAAeh9D,QACnBzE,GAAQkhE,IAAiBvO,IAAagP,EAAAA,EAAAA,IAAiB3hE,KAAUA,EAAKmtC,cAAgBntC,EAAKszB,cAEvF0qG,EAAmBv5H,QAAQzE,GAAMmtC,aAAentC,EAAKi+H,cACrDr8D,EAAwBn9D,QAAQzE,GAAMmtC,aAAentC,EAAK6hE,eAC1DR,EAAgB58D,QAAQm3B,IAAO0lC,EAAAA,EAAAA,IAAoBrkE,EAAQ2+B,EAAI/8B,KAC/D0iE,GAAeF,GAAiBw8D,EAChCK,EAAqBz5H,QACzBzE,IAAQm3F,EAAAA,EAAAA,IAAYn3F,MAAU4rC,EAAAA,EAAAA,IAAmB3uC,EAAQ+C,EAAKnB,KAAO03B,GAEjE5xB,GAAeC,EAAAA,EAAAA,IAAmB3H,EAAQS,EAAQC,GAClDwgI,IAAyBn+H,GAAME,SACjCvC,IAAamB,EAAAA,KAAmB6F,GAAiB3E,EAAK0V,SAASsjF,EAAAA,MAAmB7yD,SAEhF86B,EAAe9qC,GAAeC,GAChCzkB,EAAAA,EAAAA,IAAkB1U,EAAQk5B,EAAaC,QACvCt4B,EAEJ,MAAO,IACFg6C,EACHp6C,SACAC,WACAuE,kBACAlC,OACA2E,eACAw1B,YACAikG,sBAAuB35H,QAAQzE,GAAM8U,UACrC24F,SAAUqwB,KACH99H,GAAQytG,KACTowB,KACCG,GAAoBh+H,GAAMmtC,eAC3BgxF,EACNL,sBACAC,yBACAM,wBAAyBr+H,GAAMq+H,wBAC/BC,oBAAqBt+H,GAAMs+H,oBAC3BC,UACG5gI,IAAamB,EAAAA,KAAmBkB,GAAME,SACpCuE,SAASq5H,GAAuBv8G,GAAWnkB,QAEhDohI,eAAgB/5H,QAAQw8D,GACxBmB,kBAAmBb,GAAeF,GAAiBI,GAAgBG,EACnE+B,oBAAqBpiD,EAAYA,EAAUnkB,OAAS,EACpDspD,8BACAiM,YACA8O,eACAF,cACAF,gBACA28D,mBACAp8D,wBACAs8D,qBACA38G,YACD,GA1Ge27B,EAle4B7/C,IA2C1C,IA3C2C,OAC/CK,EAAM,SACNC,EAAQ,gBACRuE,EAAe,SACfg8C,EAAQ,KACRl+C,EAAI,aACJ2E,EAAY,UACZw1B,EAAS,oBACT2jG,EAAmB,QACnBrwB,EAAO,wBACP4wB,EAAuB,oBACvBC,EAAmB,UACnBC,EAAS,eACTC,EAAc,kBACdp8D,EAAiB,oBACjBuB,EAAmB,iBACnBw5D,EAAgB,MAChB1+F,EAAK,gBACLg0E,EAAe,aACf2qB,EAAY,kBACZ9uH,EAAiB,mBACjBwzD,EAAkB,oBAClBm7D,EAAmB,qBACnBK,EAAoB,mBACpBv7D,EAAkB,kBAClBw7D,EAAiB,uBACjBC,EAAsB,uBACtBC,EAAsB,2BACtBC,EAA0B,wBAC1BC,EAAuB,4BACvBj3E,EAA2B,qBAC3Byb,EAAoB,UACpBxP,EAAS,sBACTyrE,EAAqB,aACrB38D,EAAY,YACZF,EAAW,cACXF,EAAa,wBACbz3B,EAAuB,iBACvBo0F,EAAgB,sBAChBp8D,EAAqB,mBACrBs8D,EAAkB,aAClB3nG,EAAY,UACZhV,GACDlkB,EACC,MAAM,SACJyD,EAAQ,iBACRmiE,EAAgB,iBAChBw7D,GAAgB,SAChBC,GAAQ,iBACRxkG,GAAgB,qBAChBl9B,GAAoB,sBACpB2C,GAAqB,YACrBg/H,GAAW,eACXliG,GAAc,WACdmiG,GAAU,iBACVt1H,GAAgB,aAChB+pC,KACEt9B,EAAAA,EAAAA,OAEIzD,MAAOq1B,KAAgBo8B,EAAAA,GAAAA,MACzB,SAAEV,KAAallB,EAAAA,EAAAA,MAEfh8C,IAAOo5C,EAAAA,GAAAA,MACN0sE,GAAe4W,KAAoBrkF,EAAAA,EAAAA,IAASq/E,GAAAA,EAAAA,OAC5CiF,GAAYC,KAAiBvkF,EAAAA,EAAAA,OAC7BwkF,GAAcC,KAAmBzkF,EAAAA,EAAAA,OACjC0kF,GAAkBC,KAAuB3kF,EAAAA,EAAAA,KAAS,IAEnD,sBACJ4kF,GAAqB,qBACrBr8D,GAAoB,wBACpBF,GAAuB,mBACvBC,GAAkB,2BAClB8qC,ICjMW,SAA0BlwG,EAAiBC,EAAmB4jB,GAC3E,MAAOshD,EAAyBw8D,IAA2B3sC,EAAAA,GAAAA,GAAkC,CAAC,IACvFkb,EAA4B0xB,IAA8B5sC,EAAAA,GAAAA,KAC3D6sC,GAAuBhiF,EAAAA,EAAAA,OACtBulB,EAAoB08D,IAAsB9sC,EAAAA,GAAAA,KAE3Cr8C,EAAM34C,EAAU,GAAEA,KAAUC,SAAaG,EAoI/C,OAjIAk7C,EAAAA,EAAAA,KAAU,KACRsmF,OAA2BxhI,GAC3ByhI,EAAqB9xG,aAAU3vB,EAC/B0hI,OAAmB1hI,EAAU,GAC5B,CACDJ,EAAQ2hI,EAAyBC,EAA4BE,EAAoB7hI,KAGnFq7C,EAAAA,EAAAA,KAAU,KACR,IAAK3C,EAAK,OACV,MAAMitB,EAAqBT,IAA0BxsB,GAC/CopF,EAAel+G,GAAWnkB,QAAU,EACtCkmE,GAAsBm8D,GACxBJ,EAAwB,IACnBx8D,IACH,CAACxsB,GAAM1rC,KAAKC,IAAI,EAAG60H,EAAe,IAEtC,GACC,CAAC58D,EAAyBxsB,EAAK90B,GAAWnkB,OAAQiiI,IA+G9C,CACLD,uBA9G4BzgF,EAAAA,EAAAA,KAAYthD,IAEH,IAFI,uBACzCwqG,EAAyB,GAAE,0BAAEtvB,EAA4B,GAAE,WAAE/uC,EAAU,YAAE4mE,EAAW,UAAE53B,GACtDn7E,EAChC,IAAKK,IAAWC,IAAa04C,EAAK,OAElC,MAAMp5C,GAASuJ,EAAAA,EAAAA,MAIf,IAF4B+a,GAAWnkB,SAEVmkB,EAAW,OAExC,MAAMiiD,EAAqBV,IAC3B,GAAIU,IAAuB4sC,EAAa,CACtC,MAAMsvB,EAAiBn+G,EAAU/f,QAAQgiE,GACzC67D,EAAwB,IACnBx8D,IACH,CAACxsB,GAAMqpF,IAETF,OAAmB1hI,EACrB,CAEIsyG,IACFkvB,OAA2BxhI,GAC3B0hI,OAAmB1hI,IAGrB,MAAM6hI,EAA0B/xB,IAE1BgyB,EAA2BL,EAAqB9xG,QAItD,GAAI+qD,GACmC,IAAlCqvB,EAAuBzqG,QAAqD,IAArCm7E,EAA0Bn7E,SAChEwiI,GAA0Bl4H,SAAS6wE,EAA0B,IACjE,OAGF,MAAMsnD,GAAuB1sH,EAAAA,EAAAA,KAC1BysH,GAA0B3+H,QAAQpC,IAAQ05E,EAA0B7wE,SAAS7I,MAAQ,IACnF2b,OAAOqtF,IAGZ03B,EAAqB9xG,QAAUoyG,EAE/B,MAAMC,GAAmBniH,EAAAA,EAAAA,IAAuB1gB,EAAQS,GAExD,IAAKmiI,EAAqBziI,QAAUo7E,GAAasnD,IAAqBv+G,EAAU7Z,SAASo4H,GAAmB,CAC1G,MAAMC,EAA4Bx+G,EAAU3Y,MAAM/J,GAAOA,EAAKihI,IAC9D,GAAIC,EAA2B,CAC7B,MAAM96H,EAAWsc,EAAU/f,QAAQu+H,GACnCV,EAAwB,IACnBx8D,IACH,CAACxsB,GAAMpxC,GAEX,CACF,CAEA,GAAI06H,GAA2BnnD,EAC7B,OAGF,MAAM9tE,EAAQC,KAAKC,OAAOi1H,GACpBG,EAAaz+G,EAAUvR,WAAWnR,GAAOA,IAAO6L,IAChDu1H,EAAQz2F,EAAa,EAAI,EACzBvkC,EAAW46H,EAAqBziI,OAAS4iI,EAC7CJ,GAA0BxiI,QACtB0vE,EAAAA,GAAAA,IAAMvrD,EAAU/f,QAAQo+H,EAAyB,IAAMK,EAAO,EAAG1+G,EAAUnkB,OAAS,GACpF,EAGNiiI,EAAwB,IACnBx8D,IACH,CAACxsB,GAAMpxC,GACP,GACD,CACDvH,EAAQC,EAAU04C,EAAK90B,EAAWuhD,EAAoB8qC,EAA4ByxB,EAClFx8D,EAAyB28D,EAAoBF,IAkC7Cv8D,sBA/B2BpkB,EAAAA,EAAAA,KAAax6C,IACxC,IAAKzG,IAAWC,IAAa04C,GAAOysB,IAAsB,OAAO,EAEjE,MAAM7lE,GAASuJ,EAAAA,EAAAA,MACf,IAAK+a,GAAWnkB,OAAQ,OAAO,EAE/B,MAAMwe,EAAQ2F,EAAU/f,QAAQ2C,GAC1Bu7H,GAAiBn7D,EAAAA,GAAAA,GAAchjD,EAAUnkB,OAAQwe,EAAQ,GAC/D0jH,GAA2B,GAE3B,MAAMrkH,GAAYC,EAAAA,EAAAA,IAAgBje,EAAQS,EAAQC,GAIlD,OAHwBsd,GAAWvT,SAASvD,KACvCiX,EAAAA,EAAAA,IAA8Bne,EAAQS,EAAQC,EAAUwG,IAG3Dk7H,EAAwB,IACnBx8D,IACH,CAACxsB,GAAMqpF,KAEF,IAEPF,EAAmBj+G,EAAUm+G,KACtB,EACT,GACC,CACDhiI,EAAQmlE,EAAyBC,EAAoBzsB,EAAK90B,EAAW89G,EACrEC,EAA4BE,EAAoB7hI,IAMhDklE,0BACAC,qBACA8qC,6BAEJ,CDiDMsyB,CAAiBxiI,EAAQC,EAAU4jB,GAEjC4+G,GAAuBjiF,GAAYo/E,EACnC8C,GAAyBliF,EAAW8+E,QAA8Bl/H,EAClE0vG,GAAW+wB,IACf52F,GAAco9B,EAAAA,KACXy5D,GAED18D,GAAsBn6B,GAAcE,EAAAA,KACjCF,GAAcs9B,EAAAA,MAEd/mB,GAAYkkB,GAAqBz6B,GAAcg/B,EAAAA,KAGhD05D,IAAkBC,EAAAA,GAAAA,GAAuB5iI,EAAQ0iI,IACjDG,IAAoBD,EAAAA,GAAAA,GAAuB3iI,EAAUyiI,IACrDI,IAA2BF,EAAAA,GAAAA,GAAuBp+H,EAAiBk+H,IACnEK,IAAwBH,EAAAA,GAAAA,GAAuB7+D,EAAc2+D,IAC7DM,IAAuBJ,EAAAA,GAAAA,GAAuB/+D,EAAa6+D,IAC3DO,IAAyBL,EAAAA,GAAAA,GAAuBj/D,EAAe++D,IAC/DQ,IAAmBN,EAAAA,GAAAA,GAAuB7yB,EAAS2yB,MACnDO,KAA2BD,KAAyBD,IAAyB/iI,IAAWmjI,EAAAA,IACxFC,IAAoBR,EAAAA,GAAAA,GAAuB9yB,GAAU4yB,IACrDW,IAAsBT,EAAAA,GAAAA,GAAuBxB,GAAYsB,KAA2B1iI,IAAWmjI,EAAAA,IAC/FG,IAAqBV,EAAAA,GAAAA,GAAuB3tE,EAAWytE,IACvDa,IAA4BX,EAAAA,GAAAA,GAAuBtC,EAAkBoC,IACrEc,IAAiCZ,EAAAA,GAAAA,GAAuB1+D,EAAuBw+D,IAC/Ee,IAAsCb,EAAAA,GAAAA,GAC1C5iI,EAAS0hI,QAAwBthI,EACjCsiI,IAGIp6D,IAAoBC,EAAAA,GAAAA,GAAY9D,GAEhC7U,QACkBxvD,IAAtBkoE,IAAmCA,GAAoB7D,EAAuB6D,QAAoBloE,GAG9F,QAAE8kE,GAAO,uBAAEw+D,GAAsB,0BAAEC,IAge3C,SACEC,EACAn/D,EACA6D,EACAtoE,EACAwgD,GAEA,MAAO0kB,EAAS2+D,IAAc/mF,EAAAA,EAAAA,KAAU0D,GAClCkvC,GAAcC,EAAAA,GAAAA,KAEdm0C,OAA8C1jI,IAAtBkoE,GAAmCA,IAAsB7D,EA8BvF,OA7BIq/D,IACEF,GACFC,GAAW,GAGXh7H,YAAW,KACTg7H,GAAW,EAAK,GACfvE,KAEH5vC,MAIJz8B,EAAAA,GAAAA,IAAc,KACP2wE,GACHC,GAAW,EACb,GACC,CAACD,IAYG,CACL1+D,QAASA,IAAY4+D,EACrBJ,uBAAwBE,EAZ1B,SAAgC1yH,GACP,cAAnBA,EAAE6yH,cAAgC7yH,EAAEklE,SAAWllE,EAAE4lE,eACnD+sD,EAAW98H,QAAQ/G,GAEvB,OAQoEI,EAClEujI,0BAA2BC,EAP7B,WACEC,GAAW,EACb,OAK0EzjI,EAE5E,CA7gByE4jI,EACpEh7E,GAA+Bi3E,EAChCx7D,EACA6D,GACAtoE,EACAwgD,IAGFlF,EAAAA,EAAAA,KAAU,IACDt7C,GACHimD,EAAAA,GAAAA,IAAsB,KACtB7iD,EAAS,CAAEjC,QAAIf,GAAY,SAE3BA,GACH,CAACJ,EAAQoD,KAEZ6vD,EAAAA,GAAAA,IAAc,KACZkuE,GAAiBhF,GAAAA,EAAAA,MACjBoF,QAAgBnhI,EAAU,GACzB,CAACJ,KAGJs7C,EAAAA,EAAAA,KAAU,KACR,IAAK77B,EAAAA,KAAWwd,EAAAA,GACd,OAGF,MAAM,eAAEgnG,GAAmBnhI,OAC3B,IAAKmhI,EACH,OAGF,MAAM7gC,EAAeA,KACnB,MAAM8gC,EAAcD,EAAepvH,SAAWpF,SAASqxG,gBAAgB1N,cAEvE1qC,EAAAA,EAAAA,KAAgB,KACdj5D,SAAS23B,KAAK8sB,UAAUiwE,OAAO,mBAAoBD,EAAY,GAC/D,EAKJ,OAFAD,EAAe/mF,iBAAiB,SAAUkmD,GAEnC,KACL6gC,EAAe9mF,oBAAoB,SAAUimD,EAAa,CAC3D,GACA,KAEH9nD,EAAAA,EAAAA,KAAU,KACJ7e,GACFukG,GAAS,CAAE7xH,OAAQnP,GACrB,GACC,CAACA,EAAQy8B,EAAWukG,MAEvB1lF,EAAAA,EAAAA,KAAU,MACHolF,GAAyB7nG,GAC5B2D,GAAiB,CAAEx8B,OAAQA,GAC7B,GACC,CAACA,EAAQy8B,EAAWikG,EAAuB7nG,EAAc2D,MAE5D8e,EAAAA,EAAAA,KAAU,KACJt7C,GAAUwgI,GAAsBt7D,IAClCvvB,GAAa,CAAE31C,UACjB,GACC,CAACwgI,EAAoBxgI,EAAQklE,GAASvvB,KAEzC,MAAMyuF,IAAkBnjF,EAAAA,EAAAA,KAAa/vC,IACnC,MAAM,MAAE4rG,GAAU5rG,EAAEmzH,cAAgB,CAAC,EAC/BC,EAAkBxnB,GAASA,EAAMp9G,OAAS,GAAKE,MAAM2e,KAAKu+F,GAG7Dv5G,QAAQyqE,GAAuB,kBAAdA,EAAK3sE,OAEtB05F,MAAMqkC,IAET+B,GAAiBmD,EAAkBnI,GAAAA,EAAAA,UAA0BA,GAAAA,EAAAA,SAAuB,GACnF,IAEGoI,IAAqBtjF,EAAAA,EAAAA,KAAY,KACrCkgF,GAAiBhF,GAAAA,EAAAA,KAAmB,GACnC,IAEGqI,IAAuBvjF,EAAAA,EAAAA,KAAY,KACvCwgF,IAAoB,EAAK,GACxB,IAEGgD,IAAkBxjF,EAAAA,EAAAA,KAAY,KAClCwgF,IAAoB,EAAM,GACzB,IAEGiD,IAAyBzjF,EAAAA,EAAAA,KAAY,KACzC8/E,GAAiB,CAAE/gI,OAAQA,EAASC,SAAUA,IAC9CwkI,KACAl/D,GAAkB,GACjB,CAACw7D,GAAkB/gI,EAAQC,EAAUwkI,GAAiBl/D,IAEnDo/D,IAAoB1jF,EAAAA,EAAAA,KAAY,KACpC79C,EAAS,CAAEjC,GAAInB,GAAS,GACvB,CAACoD,EAAUpD,IAER4kI,IAAuB3jF,EAAAA,EAAAA,KAAY,KACvCggF,GAAY,CAAEjhI,OAAQA,IAClBwjI,IACF53H,GAAiB,CACf5G,QAAqBP,GAAZwwD,EAAiB,sCAA8C,sCAE5E,GACC,CAACgsE,GAAajhI,EAAQwjI,GAAgC53H,GAAkBqpD,EAAWxwD,KAEhFogI,IAAiB5jF,EAAAA,EAAAA,KAAY,KACjCliB,GAAe,CAAEC,QAAS,UAAW,GACpC,CAACD,KAEE+lG,IAAmB7jF,EAAAA,EAAAA,KAAY,KACnCigF,GAAW,CAAElhI,OAAQA,GAAU,GAC9B,CAACA,EAAQkhI,KAEN6D,GE5WoBC,EAACjkG,EAAiBkkG,KAC5C,MAAO18F,EAAO28F,IAAYpoF,EAAAA,EAAAA,IAASmoF,GAqBnC,OAnBA3pF,EAAAA,EAAAA,KAAU,KACH2pF,IAIDA,EAAav5E,WAAW,KAC1Bw5E,EAASD,GAETE,GAASjvH,MAAMkvH,EAAAA,IAAsBrkG,EAAOokG,GAASE,KAAKjrE,MACvDjkD,MAAMwkD,IACL,MAAM9mD,EAAMsV,IAAIkxC,gBAAgBM,IAChC47C,EAAAA,GAAAA,IAAa1iG,GACVsC,MAAK,KACJ+uH,EAAU,OAAMrxH,KAAO,GACvB,IAEV,GACC,CAACoxH,EAAclkG,IAEXkkG,EAAe18F,OAAQnoC,CAAS,EFsVT4kI,CAAoBjkG,EAAO0+F,GAEnD5vG,IAAYkvB,EAAAA,GAAAA,GAChBqkF,IAAqB,mBACrBkC,EAAAA,GAAsB,sBAAwB,sBAG1CC,IAAcxmF,EAAAA,GAAAA,GG1XO,uBAAsH,uBH6X/I0gF,GG7XgE,uBH8XhE1qB,GG9XuG,uBH+XvG0qB,GAAoBF,GG/X4J,uBHgYhLn7D,GGhYyN,wBHmYrNohE,IAA6BzmF,EAAAA,GAAAA,GACjC,sBACCslB,GAAsB,SAGnBohE,IAAkCC,EAAAA,EAAAA,IACtCjhI,GAAMk8H,EAAyBC,GAE3B+E,IAA2BC,EAAAA,EAAAA,IAA4BnhI,GAAMnC,EAAMrC,EAAU8G,QAAQE,IAErF4+H,GAA6BJ,IAAmCE,IAGhE,oBACJG,GAAmB,mBAAEC,GAAkB,mBACvCC,GAAkB,kBAAEC,GAAiB,iBACrCC,GAAgB,2BAAEC,KAChBvnF,EAAAA,EAAAA,KACF,I1JzYW,SAAyC3U,EAAqB8lE,GAC3E,MAAMq2B,EAAcn8F,GAAeo9B,EAAAA,IAC/B39B,GAAAA,GACA,EAAIA,GAAAA,GACF28F,EAmCR,SAA6Bp8F,GAC3B,GAAIA,EAAcE,EAAAA,IAA0C,CAC1D,MAAM75B,EAAkBrD,KAAKm9B,IAC3Bn9B,KAAKC,IAAkB,IAAd+8B,EAAoBJ,IAC7BD,IAGI08F,EAAmBr5H,KAAKm9B,IACd,IAAdH,EACAL,IAGF,OAAO38B,KAAKm9B,IACVH,EAAc35B,EAAkBg2H,EAChC38F,GAEJ,CAEA,GAAIM,EAAcI,EAAAA,IAAyC,CACzD,MAAM/5B,EAAkBrD,KAAKm9B,IAC3Bn9B,KAAKC,IAAkB,GAAd+8B,EAAmBJ,IAC5BD,IAGF,OAAO38B,KAAKm9B,IACVH,EAAc35B,EACdq5B,GAEJ,CAEA,OAAIM,EAAcN,GACTA,GAGFM,CACT,CAtE2Bs8F,CAAoBt8F,GACvCu8F,EAAkBv8F,GAAeo9B,EAAAA,IACnC,MAAQ39B,GAAAA,GACR,EAAIA,GAAAA,GAEF+8F,EAAgB12B,EAClBs2B,EAAmBD,EAAcI,EACjCH,EAAmBD,EACjBM,EAAez8F,EAAco9B,EAAAA,IAC/Bp6D,KAAKm9B,IAAIi8F,EAAmBD,EAAa38F,IACzC48F,EAAmBD,EAEjBN,EAAsBY,EAAeD,EACrCV,EAAqBU,EAAgBC,EAY3C,MAAO,CACLZ,sBACAC,qBACAC,mBAXyBj2B,EACtBy2B,EAAkB,EAAKT,EACxB,EAUFE,kBARwBl2B,EACrBy2B,EAAkB,GAAM,EAAIV,EAC7B,EAOFI,iBAhBuBQ,EAAe58F,GAiBtCq8F,2BAhBiCr8F,GAAqB48F,EAkB1D,C0JoWUC,CAAgC18F,GAAai5F,KACnD,CAACA,GAAkBj5F,KAGf28F,IAAkB7nF,EAAAA,GAAAA,GACtB,wBACCmkF,IAAoB,cACrBA,IAAoB5B,KAAiBj9D,GAAsB,eAG7DhZ,EAAAA,GAAAA,GAAe,CACb76C,SAAU6zD,EACV/Y,OAAQrpD,MAGVopD,EAAAA,GAAAA,GAAe,CACb76C,SAAUiyH,GACVn3E,OAAQhsD,KAGV,MAAMunI,GAAsB9/H,SACzBq5H,IAAwB8C,KAAqBD,KAA2BD,KACrED,IAAyB8C,IAEzBiB,GAA6B//H,QACjCk8H,IAA0BF,IAAyBS,IAAkCR,IAClF5C,GAEC/qB,GAAiBtuG,QAAQ8/H,IAAuBxiE,GAAsB+7D,GAE5E,OACElkF,EAAAA,GAAAA,cAAA,OACE/6C,GAAG,eACH0uB,UAAWA,GACX43B,gBAAiBi8E,GACjBzkF,MAAQ,sCACqB6mF,wCACDC,sCACFG,8CACQC,wCACNH,yCACDC,mCACNvG,oDAEf3qB,IAA8B,SAAVh0E,EAAmBgmG,EAAAA,IAAsBC,EAAAA,gBAEnEppF,QAAU+nB,IAAY/0D,EAAqB+zH,QAAoBvkI,GAE/D87C,EAAAA,GAAAA,cAAA,OACErsB,UAAW01G,GACXtmF,MAAO8lF,GAAyB,wBAAuBA,UAA0B3kI,IAEnF87C,EAAAA,GAAAA,cAAA,OAAK/6C,GAAG,0BACP4F,QAAQ47H,IAAmBE,KAC1B3mF,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,kBAAkBo3G,YAAa/D,GAAmBkB,QAAkBhkI,GACjF87C,EAAAA,GAAAA,cAACgrF,GAAY,CACXlnI,OAAQ2iI,GACR1iI,SAAU4iI,GACVr+H,gBAAiBs+H,GACjB59D,QAASA,GACT1kB,SAAUA,EACV2kB,wBAAyBA,GACzBC,mBAAoBA,GACpBC,qBAAsBA,KAExBnpB,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CACTtP,KAAMoa,EAA8B,OAASi3E,EAA0B,QAAU,OACjF9hF,UAAWsmB,EACX9U,eAAa,EACbC,oBAAqBA,GACrBu3E,OAAQxD,IAERznF,EAAAA,GAAAA,cAACkrF,GAAW,CACVzuF,IAAM,GAAEgqF,MAAmBE,MAAqBC,KAChD9iI,OAAQ2iI,GACR1iI,SAAU4iI,GACVxhI,KAAMyhI,GACN/yB,QAASmzB,GACTpzB,SAAUszB,GACV95B,YAAa+3B,GACb93B,cAAeg4B,GACfr8D,QAASA,GACT8qC,gBAAiB82B,GACjB72B,cAAelpG,SAAS04H,IAAqB1qB,GAC7Cr6B,2BAA4B+oD,GAC5BvzB,2BAA4BA,KAE9Bh0D,EAAAA,GAAAA,cAAA,OAAKrsB,UAAW+2G,IACb1D,IACChnF,EAAAA,GAAAA,cAACmrF,GAAQ,CACPrnI,OAAQ2iI,GACR1iI,SAAU4iI,GACVr+H,gBAAiBs+H,GACjBvY,cAAeA,GACfC,WAAY+Z,GACZr/D,QAASA,GACT1kB,SAAUA,IAGb4/E,GACClkF,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,wCAAwCiuB,IAAKr5C,GAAKs5C,MAAQ,WAAQ39C,GAC/E87C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLC,KAAK,OACL2R,OAAK,EACL/R,MAAM,YACNpuB,UAAU,mBACV+tB,QAAS4mF,IAETtoF,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,oBACbqsB,EAAAA,GAAAA,cAAA,YAAOz3C,GAAK,uBAAwBwhE,EAAqB,QAI9D4gE,IACC3qF,EAAAA,GAAAA,cAAA,OAAKrsB,UAAW21G,IACdtpF,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,4BACbqsB,EAAAA,GAAAA,cAAA,YACG2pF,MAMPrlF,IAAauiF,IAA0BQ,KAA8BC,KAErEtnF,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,wCAAwCiuB,IAAKr5C,GAAKs5C,MAAQ,WAAQ39C,GAC/E87C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLC,KAAK,OACL2R,OAAK,EACL3O,QAAM,EACNxxB,UAAU,wBACV+tB,QAASgnF,IAERngI,GAAK6+H,GAAqB,qBAAuB,sBAIvD9iF,GAAYgjF,IACXtnF,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,wCAAwCiuB,IAAKr5C,GAAKs5C,MAAQ,WAAQ39C,GAC/E87C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLC,KAAK,OACL2R,OAAK,EACL3O,QAAM,EACNxxB,UAAU,wBACV+tB,QAASgnF,IAERngI,GAAK,wBAIX+7C,GAAYwiF,IACX9mF,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,wCAAwCiuB,IAAKr5C,GAAKs5C,MAAQ,WAAQ39C,GAC/E87C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLC,KAAK,OACL2R,OAAK,EACL3O,QAAM,EACNxxB,UAAU,wBACV+tB,QAASinF,IAERpgI,GAAK,cAIX+7C,GAAYyiF,IACX/mF,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,wCAAwCiuB,IAAKr5C,GAAKs5C,MAAQ,WAAQ39C,GAC/E87C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLC,KAAK,OACL2R,OAAK,EACL3O,QAAM,EACNxxB,UAAU,wBACV+tB,QAASknF,IAERrgI,GAAK,gBAIZy3C,EAAAA,GAAAA,cAAC2iF,GAAoB,CACnBr6H,gBAAiBs+H,GACjBtyH,SAAU6zD,EACV0rC,QAASmzB,KAEXhnF,EAAAA,GAAAA,cAAC6iF,GAAW,CAACl9H,OAAQg+H,IACrB3jF,EAAAA,GAAAA,cAAC+iF,GAAgB,CAACp9H,OAAQi+H,IAC1B5jF,EAAAA,GAAAA,cAACijF,GAAoB,CAACt9H,OAAQm+H,MAIlC9jF,EAAAA,GAAAA,cAACorF,GAAqB,CACpBr6E,QAASo2E,GACTtzB,QAASmzB,GACT7tB,eAAgBA,MAGnB70D,GAAYtE,EAAAA,GAAAA,cAAC0iF,GAAY,CAACpuH,SAAUzJ,QAAQ07H,OAGhDziI,GACCk8C,EAAAA,GAAAA,cAAC4iF,GAAqB,CACpBj9H,OAAQ2/H,GACRxhI,OAAQA,EACRimE,oBAAqBA,EACrBtkB,QAAS8iF,GACT8C,QAAS7C,KAGbxoF,EAAAA,GAAAA,cAAA,OAAK2xD,eAAa,GACf3hE,GAAyBnnC,KAAI,CAACgnC,EAAwB5tB,IACrD+9B,EAAAA,GAAAA,cAAC8iF,GAAyB,CACxBwI,cAAerpH,EACfw6B,IAAK5M,EAAuB5qC,GAC5B4qC,uBAAwBA,OAI9BmQ,EAAAA,GAAAA,cAACgjF,GAAgB,CAACr9H,OAAQk+H,IACtB,KIjiBJ0H,GAA4B,IAAMrjI,EAAAA,IAClC45B,IAAwB9tB,EAAAA,EAAAA,KAAU0L,GAAOA,KAAM,KAAK,GAAO,IAE5D8rH,GAAa,SAAbA,GAAa,OAAbA,EAAAA,EAAa,qBAAbA,EAAAA,EAAa,2BAAbA,EAAAA,EAAa,6BAAbA,EAAAA,EAAa,mBAAbA,EAAAA,EAAa,2BAAbA,EAAAA,EAAa,yCAAbA,EAAAA,EAAa,2BAAbA,EAAAA,EAAa,iCAAbA,EAAAA,EAAa,uDAAbA,EAAAA,EAAa,uDAAbA,EAAAA,EAAa,kDAAbA,EAAAA,EAAa,wCAAbA,EAAAA,EAAa,oDAAbA,EAAAA,EAAa,sDAAbA,EAAAA,EAAa,0DAAbA,EAAAA,EAAa,wEAAbA,EAAAA,EAAa,4DAAbA,EAAAA,EAAa,wDAAbA,EAAAA,EAAa,oDAAbA,EAAAA,EAAa,0DAAbA,EAAAA,EAAa,4CAAbA,EAAAA,EAAa,gDAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,0BAAbA,EAAAA,EAAa,8BAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,wCAAbA,EAAAA,EAAa,sCAAbA,EAAAA,EAAa,wCAAbA,EAAAA,EAAa,4CAAbA,EAAAA,EAAa,8BAAbA,EAAAA,EAAa,0BAAbA,CAAa,EAAbA,IAAa,IAoClB,MAuaA,IAAe7rF,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAACjgD,EAAM4N,KAEW,IAFT,OACPnN,EAAM,UAAE2nI,EAAS,aAAEC,EAAY,SAAE3nI,GAClCkN,EACC,MAAMzL,GAAWb,EAAAA,EAAAA,IAAetB,IACxBkB,MAAOonI,IAAuBn0G,EAAAA,EAAAA,IAAwBn0B,IAAW,CAAC,GAClEkB,MAAOqnI,IAAuBC,EAAAA,EAAAA,IAA2BxoI,IAAW,CAAC,GACrEkB,MAAOunI,IAAmBC,EAAAA,EAAAA,IAAuB1oI,IAAW,CAAC,EAC/D+C,EAAOtC,GAASuC,EAAAA,EAAAA,IAAWhD,EAAQS,QAAUI,EAC7C2iB,EAAO4kH,GAAa3nI,IAAU08B,EAAAA,EAAAA,IAAS18B,IAAUgjB,EAAAA,EAAAA,IAAWzjB,EAAQS,QAAUI,EAC9E60D,EAAY3yD,IAAQ0hE,EAAAA,EAAAA,IAAc1hE,GAClC+3E,EAAgB/3E,GAAME,SAAWuE,QAAQ9G,GAAYA,IAAamB,EAAAA,IAClEqkB,EAAQ40D,EAAgB/3E,EAAK0V,SAAS/X,QAAaG,EACnD8nI,EAAe7tD,GAAiB50D,IAAS0iH,EAAAA,EAAAA,IAAkB7lI,EAAMmjB,GACjEmiF,EAAQ7kF,IAAQmC,EAAAA,EAAAA,IAAUnC,GAE1B2/C,EAAgB3/C,IAAQqlH,EAAAA,EAAAA,IAAiBrlH,GACzCslH,EAAYthI,SACf6gI,GACED,IACCjlE,GACDpgE,KACCkiE,EAAAA,EAAAA,IAAqBjlE,EAAQ+C,EAAKnB,OAElCu7B,EAAAA,EAAAA,IAASp6B,EAAKnB,OAASwuH,EAAAA,EAAAA,IAAYrtH,IAASA,EAAKmtG,aAAentG,EAAKmtC,cAErE64F,EAAkBvhI,QAAQ/G,GAAU0B,EAAS6O,WAAWzF,SAAS9K,IAASw0B,eAC1E+zG,GAAqBluD,GAAiBr6E,GACxCkuC,EAAAA,EAAAA,IAAmB3uC,EAAQS,IAASuoI,uBACpCnoI,EACEq1B,EAAoBz1B,EACtB0B,EAAS6O,WAAWzF,SAAS9K,IAASy0B,YAAYF,YAASn0B,EAE/D,MAAO,CACLioI,YACA3lE,gBACA6lE,oBACAtzE,YACA2yC,QACAvtB,gBACA6tD,eACA/4H,OAAQ4T,GAAM5hB,GACd0mI,qBACAC,qBACAE,iBACAM,kBACA7yG,oBACAuzB,4BAA6BtnD,EAASsnD,4BACvC,GAhDexJ,EAva2B7/C,IAiCzC,IAAA6oI,EAAA,IAjC0C,OAC9CxoI,EAAM,SACNC,EAAQ,aACRwoI,EAAY,UACZd,EAAS,SACTe,EAAQ,aACRd,EAAY,aACZe,EAAY,oBACZC,EAAmB,gBACnBC,EAAe,YACfC,EAAW,cACXC,EAAa,gBACbC,EAAe,eACfC,EAAc,oBACdC,EAAmB,aACnBC,EAAY,iBACZC,EAAgB,cAChB1mE,EAAa,OACbvzD,EAAM,UACNk5H,EAAS,UACTpzE,EAAS,QACTtT,EAAO,eACPqT,EAAc,mBACd6yE,EAAkB,mBAClBC,EAAkB,eAClBE,EAAc,gBACdM,EAAe,kBACfC,EAAiB,kBACjB9yG,EAAiB,4BACjBuzB,EAA2B,MAC3B4+C,EAAK,cACLvtB,EAAa,aACb6tD,GACDvoI,EACC,MAAM,wBACJ0pI,EAAuB,sBACvBC,EAAqB,kBACrBC,EAAiB,wBACjBC,EAAuB,iBACvBC,EAAgB,oBAChBjgC,EAAmB,qBACnBhoC,EAAoB,iBACpBkoE,EAAgB,yBAChBC,EAAwB,yBACxBC,EAAwB,mBACxBC,IACExxH,EAAAA,EAAAA,OAEGyxH,EAAoBC,EAAkBC,IAAqB/pF,EAAAA,GAAAA,MAC5D,SAAEO,IAAaC,EAAAA,EAAAA,MAEfwpF,GAAwBhpF,EAAAA,EAAAA,KAAY,KACxC0oF,EAAyB,CAAE3pI,OAAQA,EAASu0B,OAAQkB,IACpDu/B,EAAek1E,EAAAA,GAAAA,WAA6B,GAC3C,CAAClqI,EAAQy1B,EAAmBu/B,EAAgB20E,IAEzCQ,IAA0BlpF,EAAAA,EAAAA,KAAY,KAC1C2oF,EAAyB,CAAE5pI,OAAQA,EAAS2P,KAAM8lB,EAAmB9lB,OACrEqlD,EAAek1E,EAAAA,GAAAA,SACfF,GAAmB,GAClB,CAAChqI,EAAQgqI,EAAmBv0G,EAAmBm0G,EAA0B50E,IAEtEo1E,IAAiCnpF,EAAAA,EAAAA,KAAaxgD,IAClD4oI,EAAwB,CAAE5oI,UAEtBA,EAAMf,QACRs+B,GAAsBwrG,EACxB,GACC,CAACA,EAAyBH,IAEvBgB,IAAiCppF,EAAAA,EAAAA,KAAaxgD,IAClD6oI,EAAsB,CAAE7oI,SAAQ,GAC/B,CAAC6oI,IAEEgB,IAA6BrpF,EAAAA,EAAAA,KAAaxgD,IAC9C8oI,EAAkB,CAAE9oI,SAAQ,GAC3B,CAAC8oI,IAEEzmE,IAAmB7hB,EAAAA,EAAAA,KAAY,KACnCugB,EAAqB,CAAEryD,UAAS,GAC/B,CAACqyD,EAAsBryD,IAEpBo7H,IAAkBtpF,EAAAA,EAAAA,KAAY,KAC7BjhD,GAAWC,GAChB4pI,EAAmB,CAAE7pI,SAAQ4V,QAAS3V,GAAW,GAChD,CAACD,EAAQ6pI,EAAoB5pI,IAE1BuqI,IAAyBvpF,EAAAA,EAAAA,KAAY,KACzCwoF,GAAkB,GACjB,CAACA,IAEEgB,IAAyBxpF,EAAAA,EAAAA,KAAY,KACzCyoF,GAAkB,GACjB,CAACA,KAEG3mF,GAAsB2nF,KAA2B5tF,EAAAA,EAAAA,KAAU2rF,IAElEntF,EAAAA,EAAAA,KAAU,KACRzyC,YAAW,KACT6hI,IAAyBjC,EAAa,GACrChB,GAA0B,GAC5B,CAACgB,IAEJ,MAAMhkI,IAAOo5C,EAAAA,GAAAA,KACP8sF,GAAahD,EACjBwB,IAAiByB,EAAAA,GAAAA,QACflD,GAAcmD,QACZ1B,IAAiByB,EAAAA,GAAAA,YACnBlD,GAAcoD,YACZ3B,IAAiByB,EAAAA,GAAAA,WACnBlD,GAAcqD,YACX,EACHrC,EACFhB,GAAcsD,OACZjC,EACFrB,GAAcuD,YACZpC,EACFnB,GAAcwD,cACZpC,EACFpB,GAAcyD,UACZjC,EACFxB,GAAc0D,cACZxD,EACFwB,IAAqBc,EAAAA,GAAAA,QACnBxC,GAAc2D,cACZjC,IAAqBc,EAAAA,GAAAA,gBACvBxC,GAAc4D,sBACZlC,IAAqBc,EAAAA,GAAAA,WACvBxC,GAAc6D,iBACZnC,IAAqBc,EAAAA,GAAAA,mBACvBxC,GAAc8D,yBACZpC,IAAqBc,EAAAA,GAAAA,iBACvBxC,GAAc+D,uBACZrC,IAAqBc,EAAAA,GAAAA,mBACvBxC,GAAcgE,yBACZtC,IAAqBc,EAAAA,GAAAA,kBACvBxC,GAAciE,wBACZvC,IAAqBc,EAAAA,GAAAA,oBACvBxC,GAAckE,0BACZxC,IAAqBc,EAAAA,GAAAA,2BACvBxC,GAAcmE,iCACZzC,IAAqBc,EAAAA,GAAAA,qBACvBxC,GAAcoE,2BACZ1C,IAAqBc,EAAAA,GAAAA,mBACvBxC,GAAcqE,yBACZ3C,IAAqBc,EAAAA,GAAAA,gBACvBxC,GAAcsE,uBACZ5C,IAAqBc,EAAAA,GAAAA,mBACvBxC,GAAcuE,0BACZ7C,IAAqBc,EAAAA,GAAAA,aACvBxC,GAAcwE,mBACZ9C,IAAqBc,EAAAA,GAAAA,QACvBxC,GAAcyE,cACZ/C,IAAqBc,EAAAA,GAAAA,WACvBxC,GAAc0E,iBACZhD,IAAqBc,EAAAA,GAAAA,eACvBxC,GAAc2E,qBACZjD,IAAqBc,EAAAA,GAAAA,UACvBxC,GAAc4E,gBACZlD,IAAqBc,EAAAA,GAAAA,WACvBxC,GAAc6E,iBACZnD,IAAqBc,EAAAA,GAAAA,aACvBxC,GAAc8E,wBACZpsI,EACFuoI,EACFjB,GAAc+E,WACZ7D,EACFlB,GAAcgF,kBACZ1D,EACFtB,GAAciF,YACZ1D,EACFvB,GAAckF,eACZxsI,EAEEysI,GAAwD,QAArCrE,GAAG5gE,EAAAA,GAAAA,GAAiB+iE,IAAY,UAAK,IAAAnC,EAAAA,GAAK,EAoN7DsE,GACJtsF,GACGmqF,KAAejD,GAAcoD,aAC7BH,KAAejD,GAAcqD,YAC7BJ,KAAejD,GAAc0D,eAC7BT,KAAejD,GAAcgF,mBAC7B9E,EAGCmF,IAAkBhuF,EAAAA,GAAAA,GACtB,sBACA+tF,IAAgB,cACf/pF,IAAwBiG,IAAgC,iBAG3D,OACE9M,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,eACbqsB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLvuB,UAAU,eACVpY,OAAK,EACLwmC,MAAM,cACNI,KAAK,UACLT,QAAS+D,EACT6C,UAA0B//C,GAAfqoI,GAAoB,cAAsB,iBAErD5wF,EAAAA,GAAAA,cAAA,OAAKrsB,UAAWk9G,MAElB7wF,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CACTtP,KAAOmU,IAAwBiG,EAA+B,OAAS,YACvE7K,UAAW0uF,IA/NjB,WACE,IAA6B,IAAzBA,GAIJ,OAAQA,IACN,KAAKnF,GAAcuD,YACjB,OAAO/uF,EAAAA,GAAAA,cAAA,UAAKz3C,GAAK,gBACnB,KAAKijI,GAAcsD,OACjB,OACE9uF,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACwL,GAAAA,EAAW,CACVE,yBAAyB,cACzBrf,MAAOs/F,EACP1/E,SAAUiiF,KAEZluF,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL3mC,OAAK,EACL4mC,KAAK,UACLJ,MAAM,cAENL,QAASA,IAAM4rD,EAAoB,CAAEz1F,YAAY42D,EAAAA,GAAAA,IAAc1+D,KAAKC,SACpEs4C,UAAU,2BAEVtI,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,yBAIrB,KAAK63G,GAAc0D,cACjB,OAAOlvF,EAAAA,GAAAA,cAAA,UAAKz3C,GAAKwwD,EAAY,wBAA0B,oBACzD,KAAKyyE,GAAc2D,cACjB,OAAOnvF,EAAAA,GAAAA,cAAA,UAAKz3C,GAAK,SACnB,KAAKijI,GAAc4D,sBACjB,OAAOpvF,EAAAA,GAAAA,cAAA,UAAKz3C,GAAKwwD,EAAY,oBAAsB,oBACrD,KAAKyyE,GAAc6D,iBACjB,OAAOrvF,EAAAA,GAAAA,cAAA,UAAKz3C,GAAK,eACnB,KAAKijI,GAAcgE,yBACjB,OAAOxvF,EAAAA,GAAAA,cAAA,UAAKz3C,GAAK,0BACnB,KAAKijI,GAAcqE,yBACjB,OAAO7vF,EAAAA,GAAAA,cAAA,UAAKz3C,GAAK,wBACnB,KAAKijI,GAAcsE,uBACjB,OAAO9vF,EAAAA,GAAAA,cAAA,UAAKz3C,GAAK,oBACnB,KAAKijI,GAAcuE,0BACjB,OAAO/vF,EAAAA,GAAAA,cAAA,UAAKz3C,GAAK,eACnB,KAAKijI,GAAc+D,uBACjB,OAAOvvF,EAAAA,GAAAA,cAAA,UAAKz3C,GAAK,uBACnB,KAAKijI,GAAciE,wBACjB,OAAOzvF,EAAAA,GAAAA,cAAA,UAAKz3C,GAAK,iBACnB,KAAKijI,GAAckE,0BACjB,OAAO1vF,EAAAA,GAAAA,cAAA,UAAKz3C,GAAK,wBACnB,KAAKijI,GAAcmE,iCACjB,OAAO3vF,EAAAA,GAAAA,cAAA,UAAKz3C,GAAK,wBACnB,KAAKijI,GAAcoE,2BACjB,OAAO5vF,EAAAA,GAAAA,cAAA,UAAKz3C,GAAK,qBACnB,KAAKijI,GAAcyE,cACjB,OAAOjwF,EAAAA,GAAAA,cAAA,UAAKz3C,GAAK,2BACnB,KAAKijI,GAAc0E,iBACjB,OAAOlwF,EAAAA,GAAAA,cAAA,UAAuBz3C,GAAlB6jI,EAAuB,WAAmB,YACxD,KAAKZ,GAAc6E,iBACjB,OACErwF,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,UAAKz3C,GAAK,eACVy3C,EAAAA,GAAAA,cAAA,WAASrsB,UAAU,SAChB4F,IAAsBA,EAAkBd,WACvCunB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL3mC,OAAK,EACLwmC,MAAM,cACNI,KAAK,UACLmG,UAAW//C,GAAK,QAChBm5C,QAASqsF,GAET/tF,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,oBAGhB4F,GAAqBA,EAAkBd,WACtCunB,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL3mC,OAAK,EACLwmC,MAAM,SACNI,KAAK,UACLmG,UAAW//C,GAAK,UAChBm5C,QAASmsF,GAET7tF,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,sBAEfqsB,EAAAA,GAAAA,cAAC4c,GAAAA,EAAa,CACZj3D,OAAQioI,EACRnoF,QAASqoF,EACTh6H,MAAOvL,GAAK,cACZpB,KAAMoB,GAAK,kBACX2+D,sBAAoB,EACpBrK,aAAct0D,GAAK,UACnBu0D,eAAgBmxE,QAO9B,KAAKzC,GAAc8E,mBACjB,OAAOtwF,EAAAA,GAAAA,cAAA,UAAiBz3C,GAAZwwD,EAAiB,oBAA4B,mBAC3D,KAAKyyE,GAAc2E,qBACjB,OAAOnwF,EAAAA,GAAAA,cAAA,UAAKz3C,GAAK,oCACnB,KAAKijI,GAAcwD,cACjB,OACEhvF,EAAAA,GAAAA,cAACwL,GAAAA,EAAW,CACVnf,MAAOu/F,EACP9/E,YAAavjD,GAAK,sBAClBuoI,iBAAe,EACf7kF,SAAUkiF,KAGhB,KAAK3C,GAAcyD,UACjB,OACEjvF,EAAAA,GAAAA,cAACwL,GAAAA,EAAW,CACVnf,MAAOy/F,EACPhgF,YAAavjD,GAAK,mBAClBuoI,iBAAe,EACf7kF,SAAUmiF,KAGhB,KAAK5C,GAAc+E,WACjB,OAAOvwF,EAAAA,GAAAA,cAAA,UAAKz3C,GAAKwwD,EAAY,qBAAuB,qBACtD,KAAKyyE,GAAcgF,kBACjB,OAAOxwF,EAAAA,GAAAA,cAAA,UAAKz3C,GAAK,uBACnB,KAAKijI,GAAcoD,YACjB,OAAO5uF,EAAAA,GAAAA,cAAA,UAAKz3C,GAAK,gBACnB,KAAKijI,GAAc8D,yBACjB,OAAOtvF,EAAAA,GAAAA,cAAA,UAAKz3C,GAAK,uBACnB,KAAKijI,GAAcqD,WACnB,KAAKrD,GAAcwE,mBACjB,OAAOhwF,EAAAA,GAAAA,cAAA,UAAKz3C,GAAK,iBACnB,KAAKijI,GAAc4E,gBACjB,OAAOpwF,EAAAA,GAAAA,cAAA,UAAKz3C,GAAK,cACnB,KAAKijI,GAAciF,YACjB,OAAOzwF,EAAAA,GAAAA,cAAA,UAAKz3C,GAAK,aACnB,KAAKijI,GAAckF,UACjB,OAAO1wF,EAAAA,GAAAA,cAAA,UAAKz3C,GAAK,cACnB,QACE,OACEy3C,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,UA3JCz3C,GADL41E,EACU,gBAGVplB,EACU,oBAGV9lD,EACUy4F,EAAQ,qBAAuB,sBAGjC,oBAkJJ1rD,EAAAA,GAAAA,cAAA,WAASrsB,UAAU,SAChB6yC,GACCxmB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL3mC,OAAK,EACLwmC,MAAM,cACNI,KAAK,UACLmG,UAAW//C,GAAK,cAChBm5C,QAASklB,IAET5mB,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,wBAGhBw4G,IAAchuD,GACbn+B,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL3mC,OAAK,EACLwmC,MAAM,cACNI,KAAK,UACLmG,UAAW//C,GAAK,QAChBm5C,QAAS4sF,IAETtuF,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,oBAGhBq4G,GACChsF,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL3mC,OAAK,EACLwmC,MAAM,cACNI,KAAK,UACLmG,UAAW//C,GAAK,aAChBm5C,QAAS2sF,IAETruF,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,oBAGhB04G,GACCrsF,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL3mC,OAAK,EACLwmC,MAAM,cACNI,KAAK,UACLmG,UAAW//C,GAAK,cAChBm5C,QAAS6sF,IAETvuF,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,uBAO7B,CAiCOo9G,IAEC,K,6BC5ZV,SAASC,GACPC,EACAC,EACAv0G,EACAw0G,GAEA,MAAO1mI,EAAa2mI,IAAWC,EAAAA,GAAAA,GAC7B10G,EAAeu0G,OAAiBhtI,EAChCitI,OACAjtI,EACAotI,EAAAA,IAKF,MAAO,CAAC7mI,EAAa2mI,KAFJ3mI,IAAgB0mI,GAAW1mI,EAAY,KAAO0mI,EAAQ,IAGzE,CAEA,SAASI,GACPC,EACAP,EACAC,EACAv0G,EACAl0B,EACA6uB,EACA5d,GAEA,MAAM+3H,GAAgB9tF,EAAAA,EAAAA,OAEtBoT,EAAAA,GAAAA,IAAc,KACZ06E,EAAc59G,aAAU3vB,CAAS,GAChC,CAACwV,KAEJq9C,EAAAA,GAAAA,IAAc,KACRk6E,IAAsBO,GAAsB/oI,GAAgB6uB,IAC9Dm6G,EAAc59G,SAAU69G,EAAAA,EAAAA,IACtBjpI,EACA6uB,EACAk6G,GAEJ,GACC,CAAC/oI,EAAc6uB,EAAU25G,EAAmBO,IAE/C,MAAO/mI,EAAa2mI,IAAWC,EAAAA,GAAAA,GAC7B10G,EAAeu0G,OAAiBhtI,EAChCutI,EAAc59G,aACd3vB,EACuB,UAAvBstI,EAAiC/6G,EAAAA,IAAqBgB,EAAAA,KAKxD,MAAO,CAAChtB,EAAa2mI,KAFJ3mI,IAAgBgnI,EAAc59G,SAAWppB,EAAY,KAAOgnI,EAAc59G,QAAQ,IAGrG,CCxKA,MAGM89G,IAAwBzhH,EAAAA,EAAAA,KAAUxQ,GAAOA,KAAM,KAAK,GAE1D,IAAIkyH,IAA8B,E,gHC0FlC,MAAMC,GAAO,CACX,CAAE1sI,KAAM,QAAS2O,MAAO,mBACxB,CAAE3O,KAAM,YAAa2O,MAAO,mBAC5B,CAAE3O,KAAM,QAAS2O,MAAO,mBACxB,CAAE3O,KAAM,QAAS2O,MAAO,oBA2Z1B,IAAe6rC,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAACjgD,EAAMmd,KAAgD,IAA9C,OAAE1c,EAAM,QAAE4V,EAAO,SAAE4qC,GAAU9jC,EACpC,MAAMpa,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,GAC1B25F,GAAezrD,EAAAA,EAAAA,IAAmB3uC,EAAQS,GAC1C01C,GAAe7wC,EAAAA,EAAAA,IAAmBtF,EAAQS,IACxC6zB,YAAam6G,EAAe,cAAE7/H,IAAkB2kB,EAAAA,EAAAA,IAAyBvzB,IAAW,CAAC,GACvF,SAAEi0B,GAAcrlB,GAAiB6/H,GAAmB7/H,EAAc6/H,IAAqB,CAAC,GAEtFjxH,KAAMq+D,EAAWlgD,aAAcF,GAAqBz7B,EAAOgd,OAC3DQ,KAAMg5E,GAAcx2F,EAAO8O,MAE7B4/B,EAAU3rC,IAAQm3F,EAAAA,EAAAA,IAAYn3F,GAC9B2yD,EAAY3yD,IAAQ0hE,EAAAA,EAAAA,IAAc1hE,GAClC2rI,GAAiBr4H,IAAYq4B,GAAYgnB,IAAa06D,EAAAA,EAAAA,IAAYrtH,IAClEmvC,EAAUkoD,GAAcloD,QACxBM,EAAmB4nD,GAAc5nD,iBACjCm8F,EAAmBD,GAAiB3rI,IACpCA,EAAK6rI,aAAgBx0C,IAAiBA,EAAay0C,gBACnDC,EAAgBJ,GAAiB3rI,KACjCgsI,EAAAA,EAAAA,IAAiBhsI,EAAM,kBAAmBisI,EAAAA,EAAAA,IAAkBjsI,EAAM,gBAAkBA,EAAKmtG,WACzF++B,EAAmBP,GAAiB3rI,KAASgsI,EAAAA,EAAAA,IAAiBhsI,EAAM,aAAeA,EAAKmtG,WACxF7b,GAAoBC,EAAAA,EAAAA,IAAwBt0F,EAAQS,GAE1D,IAAIyuI,EACAC,EACA3rH,EAOJ,OANI2Z,EAAAA,EAAAA,IAAS18B,KACX0uI,EAAiB1uI,EACjB+iB,GAAOC,EAAAA,EAAAA,IAAWzjB,EAAQmvI,GAC1BD,EAAoB1rH,IAASA,EAAKgZ,UAAW7W,EAAAA,EAAAA,IAAUnC,IAGlD,CACLge,OAAOkhB,EAAAA,EAAAA,IAAY1iD,GACnB01D,YACAy5E,iBACAh5F,eACAliB,WACAw6G,kBACAS,oBACAR,gBACAC,mBACAG,gBACAG,mBACAl3H,cAAe/X,EAAO+X,cACtB8sD,oBAAoB37D,EAAAA,EAAAA,IAAyBlJ,EAAQihD,GACrD1gC,aAAcxd,GAAMwd,aACpB+Y,aAAct5B,EAAOs5B,aACrB+6D,oBACAxY,YACApgD,mBACA+6D,YACA6F,gBAAiBt5F,GAAMoyE,eACnBu5D,GAAiBx8F,GAAW,CAAEA,UAASM,uBACvC08F,GAAqB1rH,GAAQ,CAAE4rH,cAAe5rH,EAAKiZ,aAAaxyB,KACrE,GAvDeg2C,EArZuB7/C,IA4BrC,IA5BsC,OAC1CK,EAAM,QACN4V,EAAO,aACPuzH,EAAY,qBACZyF,EAAoB,MACpB7tG,EAAK,UACLk0B,EAAS,eACTy5E,EAAc,cACdp3H,EAAa,aACbo+B,EAAY,SACZliB,EAAQ,gBACRw6G,EAAe,kBACfS,EAAiB,cACjBR,EAAa,iBACbC,EAAgB,cAChBG,EAAa,iBACbG,EAAgB,cAChBG,EAAa,QACbl9F,EAAO,iBACPM,EAAgB,UAChBqpC,EAAS,iBACTpgD,EAAgB,UAChB+6D,EAAS,mBACT3xB,EAAkB,aAClBtkD,EAAY,aACZ+Y,EAAY,kBACZ+6D,EAAiB,gBACjBgI,GACDj8F,EACC,MAAM,wBACJkvI,EAAuB,gBACvBC,EAAe,gBACfC,EAAe,SACf3rI,EAAQ,yBACR4rI,EAAwB,gBACxBl3D,EAAe,gBACfooB,EAAe,aACfn4F,EAAY,kBACZquB,EAAiB,6BACjB64G,IACE52H,EAAAA,EAAAA,MAGEq9C,GAAe7V,EAAAA,EAAAA,IAAuB,MAEtCiK,GAAgBjK,EAAAA,EAAAA,IAAuB,MACvCp7C,GAAOo5C,EAAAA,GAAAA,MACN6O,EAAWwiF,IAAgBpyF,EAAAA,EAAAA,IAAS,IACpCqyF,EAAgBC,IAAqBtyF,EAAAA,EAAAA,MAEtC2P,GAAO7N,EAAAA,EAAAA,KAAQ,IAAO,IACtBqvF,EAAgB,CAAC,CACnB5sI,KAAM,UAAW2O,MAAOilD,EAAY,qBAAuB,iBACxD,MACF84E,MAGEn4H,EAA0D,GAAhD,CAAC,CAAEvU,KAAM,QAAS2O,MAAO,uBACpCy+H,EAAoB,CAAC,CAAEptI,KAAM,cAAe2O,MAAO,qBAAwB,KAC7E,CAACy+H,EAAmBR,EAAeh5E,EAAWr/C,IAE5Cy5H,GAAqB3iF,EAAYD,EAAK/sD,OAAS,EAAI+sD,EAAK/sD,OAAS,EAAIgtD,EACrE4iF,GAAU7iF,EAAK4iF,IAAoBhuI,MAElCkuI,GAAY5oI,GAAa2mI,GAASkC,IFrK5B,SACbV,EACAC,EACAU,EACAH,EACAtB,EACArkB,EACAglB,EACAvzD,EACApgD,EACA+6D,EACApxF,EACA6uB,EACAqF,EACAjjB,GAEA,MAAM25H,EAAyB,YAAZD,GAA0BtB,EAA4BA,EAAVsB,EAEzDI,GAAY9wF,EAAAA,EAAAA,KAAQ,KACxB,GAAK+qE,GAAqBvuC,GAAcpgD,EAIxC,OAAO20G,EAAAA,EAAAA,IACLhmB,EAAiB5kH,KAAIpF,IAAA,IAAC,OAAEwP,GAAQxP,EAAA,OAAKwP,CAAM,IAC3CisE,EACApgD,EACD,GACA,CAAC2uF,EAAkBvuC,EAAWpgD,IAE3B3H,GAAUurB,EAAAA,EAAAA,KAAQ,KACtB,GAAK+vF,GAAkB54C,EAIvB,OAAO65C,EAAAA,EAAAA,IAAYjB,EAAe54C,GAAW,EAAK,GACjD,CAACA,EAAW44C,KAERkB,EAAmBC,EAAgBC,GAA2B7C,GACnEqC,EAAYT,EAAiBj2G,EAAc62G,IAGtCM,EAAkBC,EAAcC,GAAyBzC,GAC9D,QAAS8B,EAAYE,EAAgB52G,EAAcl0B,EAAc6uB,EAAU5d,IAGtEu6H,EAAqBC,EAAkBC,GAA6B5C,GACzE,YAAa8B,EAAYE,EAAgB52G,EAAcl0B,EAAc6uB,EAAU5d,IAG1E06H,EAAiBC,EAAcC,GAAyB/C,GAC7D,QAAS8B,EAAYE,EAAgB52G,EAAcl0B,EAAc6uB,EAAU5d,IAGtE66H,EAAkBC,EAAcC,GAAyBlD,GAC9D,QAAS8B,EAAYE,EAAgB52G,EAAcl0B,EAAc6uB,EAAU5d,IAGtEg7H,EAAkBC,EAAeC,GAA0BrD,GAChE,QAAS8B,EAAYE,EAAgB52G,EAAcl0B,EAAc6uB,EAAU5d,IAGtEm7H,EAAuBC,EAAoBC,GAA+B/D,GAC/EqC,EAAYR,EAAiBl2G,EAAcxF,GAG7C,IAAI1sB,EACA2mI,EACAkC,GAAgB,EAEpB,OAAQD,GACN,IAAK,UACH5oI,EAAckpI,EACdvC,EAAUwC,EACVN,EAAgBO,EAChB,MACF,IAAK,cACHppI,EAAcoqI,EACdzD,EAAU0D,EACVxB,EAAgByB,EAChB,MACF,IAAK,QACHtqI,EAAcqpI,EACd1C,EAAU2C,EACVT,EAAgBU,EAChB,MACF,IAAK,YACHvpI,EAAcwpI,EACd7C,EAAU8C,EACVZ,EAAgBa,EAChB,MACF,IAAK,QACH1pI,EAAc2pI,EACdhD,EAAUiD,EACVf,EAAgBgB,EAChB,MACF,IAAK,QACH7pI,EAAc8pI,EACdnD,EAAUoD,EACVlB,EAAgBmB,EAChB,MACF,IAAK,QACHhqI,EAAciqI,EACdtD,EAAUuD,EACVrB,EAAgBsB,EAIpB,MAAO,CAACvB,EAAY5oI,EAAa2mI,EAASkC,EAC5C,CEwD4D0B,CACxDpC,EACAC,EACAC,EACAM,GACAtB,EACAv8F,EACAk9F,EACAvzD,EACApgD,EACA+6D,EACArgD,EACAliB,EACAqF,EACAjjB,GAEIu7H,GAA4B,YAAf5B,KAA8BtB,GAAgC,UAAfsB,GAC5DpxF,GAAYsO,EAAKn6C,WAAUnF,IAAA,IAAC,KAAE9L,GAAM8L,EAAA,OAAK9L,IAASkuI,EAAU,KAE5D,aAAE98B,IDrLK,SACb/8C,EACA45E,EACAnG,EACAyF,IAGA9tF,EAAAA,GAAAA,IAAsBnhD,IAAmB,IAAjByxI,GAAYzxI,EAClC,GAAIyxI,GAAeA,IAAgB9B,EAAS,CAC1C,MAAMpuD,EAAYxrB,EAAa3lC,QACzBshH,EAASnwD,EAAU1lC,cAA8B,YACnD0lC,EAAU2iB,UAAYwtC,EAAOh/B,YAC/Bu8B,EAAiC,YAAZU,EAAwB1E,EAAAA,GAAAA,WAA0BA,EAAAA,GAAAA,aACvEkD,IAA8B,GAC9Bj6D,EAAAA,GAAAA,IAAcqN,EAAWmwD,EAAQ,aAASjxI,OAAWA,OAAWA,EArB5C,KAsBpByI,YAAW,KACTilI,IAA8B,CAAK,GAtBN,KAyBnC,IACC,CAACwB,EAASV,EAAsBl5E,KAGnC5U,EAAAA,GAAAA,IAAsB3zC,IAAwB,IAAtBmkI,GAAiBnkI,EACvC,GAAIg8H,IAAiByB,EAAAA,GAAAA,SAAwBzB,IAAiBmI,EAC5D,OAGF,MAAMpwD,EAAYxrB,EAAa3lC,QAC/B,IAAKmxD,EACH,OAGF,MAAMqwD,EAAYrwD,EAAU1lC,cAA8B,aACrD+1F,GAAaA,EAAUl/B,UAAYnxB,EAAU2iB,YAIlDiqC,IAA8B,GAC9Bj6D,EAAAA,GAAAA,IACEqN,EACAA,EAAUrqB,kBACV,aACAz2D,EACyB,EAAzB8gF,EAAUyiB,cAGZ96F,YAAW,KACTilI,IAA8B,CAAK,GAtDF,KAyDnCc,EAAqBzF,GAAa,GACjC,CAACA,EAAczzE,EAAck5E,IAEhC,MAAM4C,GAAwBvwF,EAAAA,EAAAA,KAAY,KACxC,MAAMigC,EAAYxrB,EAAa3lC,QAC/B,IAAKmxD,EACH,OAGF,MAAMqwD,EAAYrwD,EAAU1lC,cAA8B,YAC1D,IAAK+1F,EACH,OAGF,IAAIn3F,EAAsBwwF,EAAAA,GAAAA,QACtB1pD,EAAU2iB,WAAa0tC,EAAUl/B,YACnCj4D,EAAoB,YAAZk1F,EACJ1E,EAAAA,GAAAA,WACAA,EAAAA,GAAAA,aAGNgE,EAAqBx0F,EAAM,GAC1B,CAACsb,EAAck5E,EAAsBU,IAoBxC,OAjBAh0F,EAAAA,EAAAA,KAAU,KACJwyF,IAIJ0D,GAAuB,GACtB,CAACA,EAAuBlC,IAWpB,CAAE78B,cARYxxD,EAAAA,EAAAA,KAAY,KAC3B6sF,IAIJD,GAAsB2D,EAAsB,GAC3C,CAACA,IAGN,CCuF2BC,CAAgB/7E,EAAc65E,GAAYpG,EAAcyF,IAE3E,mBAAE8C,GAAkB,qBAAEC,ICnMf,SACbj8E,GAEA,IADAk8E,EAAoBnyI,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,sCAgDvB,OA7CA67C,EAAAA,EAAAA,KAAU,KACR,SAASu2F,IACP,MAAM3wD,EAAYxrB,EAAa3lC,QACzB+hH,EAAe5wD,EAAU1lC,cAA8Bo2F,GACvDP,EAASnwD,EAAU1lC,cAA8B,YACvD,GAAIs2F,GAAgBT,EAAQ,CAC1B,MAAM9tC,EAAYriB,EAAUyiB,aAAe0tC,EAAO1tC,cAElDj7B,EAAAA,EAAAA,KAAgB,KACdopE,EAAa7yF,MAAM8yF,UAAa,GAAExuC,KAAa,GAEnD,CACF,CAMA,OAJAsuC,IAEA/uI,OAAOo6C,iBAAiB,SAAU20F,GAAc,GAEzC,KACL/uI,OAAOq6C,oBAAoB,SAAU00F,GAAc,EAAM,CAC1D,GACA,CAACn8E,EAAck8E,IAwBX,CAAEF,oBArBkBzwF,EAAAA,EAAAA,KAAY,MAErC8yB,EAAAA,EAAAA,KAAe,KACb,MAAMmN,EAAYxrB,EAAa3lC,QAC/B,GAAkC,WAA9BmxD,EAAUjiC,MAAM+yF,UAAwB,OAE5C,MAAMC,EAAiB/wD,EAAUvsB,YAAcusB,EAAUgxD,aAEzDxpE,EAAAA,EAAAA,KAAgB,KACdwY,EAAUjiC,MAAM+yF,UAAY,SAC5B9wD,EAAUjiC,MAAMkzF,aAAgB,GAAEF,KAAkB,GACpD,GACF,GACD,CAACv8E,IAQyBi8E,sBANA1wF,EAAAA,EAAAA,KAAY,KACvC,MAAMigC,EAAYxrB,EAAa3lC,QAC/BmxD,EAAUjiC,MAAM+yF,UAAY,SAC5B9wD,EAAUjiC,MAAMkzF,aAAe,GAAG,GACjC,CAACz8E,IAGN,CDgJuD08E,CAAmB18E,IAEjEiqB,GAAa0yD,IEtMCC,MACrB,MAAO3yD,EAAa4yD,IAAkBz1F,EAAAA,EAAAA,IAAS,GAM/C,MAAO,CAAC6iC,GAJkB1+B,EAAAA,EAAAA,KAAY,KACpCsxF,GAAgBxiH,GAAYA,EAAU,GAAE,GACvC,IAEoC,EF+LCuiH,IAEhCnqC,QAASqqC,KAAgCpqC,EAAAA,GAAAA,IAAwB,CACvEC,QAAS3yC,EACTs0C,WA7F0B,MAgGtByoC,IAAuBxxF,EAAAA,EAAAA,KAAY,KACvC0wF,KACAU,IAAkB,GACjB,CAACV,GAAsBU,KAEpBK,IAA4BzxF,EAAAA,EAAAA,KAAY,KAC5CguF,EAA6B,CAAEvrI,uBAAwBivI,EAAAA,GAAAA,YAAoC,GAC1F,CAAC1D,KAGJ3zF,EAAAA,EAAAA,KAAU,KACRuzF,EAAwB,CAAE5tI,UAAWquI,IAA6B,GACjE,CAACT,EAAyBS,GAAS15H,IAEtC,MAAMygB,GAAYq4G,GAAkB1uI,GAEpCs7C,EAAAA,EAAAA,KAAU,KACJziB,GACFzC,EAAkB,CAAEC,cACtB,GACC,CAACD,EAAmBC,GAAWwC,IAElC,MAAM+5G,IAAoB3xF,EAAAA,EAAAA,KAAahoC,IACrC6+D,EAAgB,CACd93E,OAAQq2B,GACRp2B,SAAUmB,EAAAA,GACV6X,UACAjR,OAAQgxE,EAAAA,GAAAA,aACR,GACD,CAAC3iD,GAAWyhD,IAET+6D,IAAkB5xF,EAAAA,EAAAA,KAAax6C,IACnCy5F,EAAgB,CAAElgG,OAAQq2B,GAAW5vB,aAAY,GAChD,CAAC4vB,GAAW6pE,IAET4yC,IAAoB7xF,EAAAA,EAAAA,KAAa9/C,IACrCiC,EAAS,CAAEjC,MAAK,GACf,CAACiC,IAEE2vI,IAAqB9xF,EAAAA,EAAAA,KAAax6C,IACtCsB,EAAa,CAAE/H,OAAQq2B,GAAW5vB,aAAY,GAC7C,CAAC4vB,GAAWtuB,IAETirI,IAAgC/xF,EAAAA,EAAAA,KAAY,KAChDmuF,OAAkBhvI,EAAU,GAC3B,IAiCH,IAAI6yI,IA/BJnyF,EAAAA,GAAAA,IAAsB7kC,IAAyB,IAAvBi3H,GAAkBj3H,EACxC,GAAkB,IAAdywC,GAAmBwmF,IAAsBjF,EAC3C,OAGF,MAAMkF,EAAezmF,GAAauhF,EAAgB,GAAK,GAEvDiB,EAAajiI,KAAKm9B,IAAI+oG,EAAc1mF,EAAK/sD,OAAS,GAAG,GACpD,CAACuuI,EAAevhF,EAAWD,KAE9BnR,EAAAA,EAAAA,KAAU,KACR,GAAKwO,EAAc/5B,SAAYlkB,EAAAA,GAI/B,OAAOm/C,EAAAA,GAAAA,IAAclB,EAAc/5B,QAAS,CAC1Ck7B,wBAAyB,WACzBC,QAAUA,CAACh6C,EAAGhH,IACRA,IAAcihD,GAAAA,GAAAA,MAChB+jF,EAAajiI,KAAKm9B,IAAIilG,GAAqB,EAAG5iF,EAAK/sD,OAAS,KACrD,GACEwK,IAAcihD,GAAAA,GAAAA,QACvB+jF,EAAajiI,KAAKC,IAAI,EAAGmiI,GAAqB,KACvC,IAKX,GACD,CAACA,GAAoB5iF,EAAK/sD,SAIzByxI,GACF8B,GAAkB7uE,EAA2C,EAlLrC,IAoLdz9D,KACVssI,GAAiBG,EAAAA,KAEnB,MAAMC,IAAmBr7E,EAAAA,GAAAA,GAAkB,CAACh4D,EAAQ4V,EAAS25H,GAAYF,IAAqB4D,IAgK9F,OACE/2F,EAAAA,GAAAA,cAACo3F,GAAAA,EAAc,CACblyF,IAAKsU,EACL7lC,UAAU,wBACV0jH,aAAe,uDAAsDhE,yBACrEzyB,MAAOu2B,GAAmB1sI,QAAcvG,EACxCu/E,YAAaA,GACb6zD,cAAeC,EAAAA,IACfC,iBAAkBL,GAAmC,YAAf9D,GAA2B/B,EAAAA,GAAgB76G,EAAAA,IAAsB,EAEvGghH,sBAAoB,EACpBC,YAAU,EACVC,WAAYvG,GACZ34B,SAAUlC,KAER+8B,IAyCR,SAA2BxvI,EAAgB0uI,EAAoCxpE,GAC7E,OACEhpB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,gBACbqsB,EAAAA,GAAAA,cAAC43F,GAAAA,EAAW,CAAC3kI,OAAQu/H,GAAkB1uI,EAAQ+zI,aAAc7uE,IAC7DhpB,EAAAA,GAAAA,cAAC83F,GAAAA,EAAS,CAACxrF,aAAckmF,GAAkB1uI,IAGjD,CAhDyBi0I,CAAkBj0I,EAAQ0uI,EAAgBtqE,GAAsBivE,KACjFvzH,GACAo8B,EAAAA,GAAAA,cAAA,OACErsB,UAAU,gBAEVqsB,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CACTkD,IAAK0I,EACLlb,KAAMnqC,EAAKs5C,MAAQ,oBAAsB,iBACzCI,UAAWA,GACX0O,YAAaJ,EAAK/sD,OAClBw0I,qBAAmB,EACnBrkH,UAAU,0BACVskH,QAASzC,GACTvK,OAAQsL,IAhLlB,WACE,IAAK9rI,KAAgB0sI,KAAqB39F,EAAc,CACtD,MAAM0+F,EAAYjD,KAAekC,GAC3BgB,EAA2BttI,QAAuB,YAAfwoI,IAA4BrB,GAErE,OACEhyF,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,uBACXukH,IAAcC,GAA4Bn4F,EAAAA,GAAAA,cAAC8B,GAAAA,EAAO,MACnDq2F,GAA4Bn4F,EAAAA,GAAAA,cAACo4F,GAAAA,EAAY,CAACjxI,KAAK,8CAGtD,CAEA,IAAKsD,GAAYjH,OAAQ,CACvB,IAAI2D,EAEJ,OAAQksI,IACN,IAAK,UACHlsI,EAAO6qI,EAAmB,4CAA8C,mBACxE,MACF,IAAK,cACH7qI,EAAOoB,EAAK,oBACZ,MACF,IAAK,YACHpB,EAAOoB,EAAK,wBACZ,MACF,IAAK,QACHpB,EAAOoB,EAAK,wBACZ,MACF,IAAK,QACHpB,EAAOoB,EAAK,wBACZ,MACF,IAAK,QACHpB,EAAOoB,EAAK,yBACZ,MACF,QACEpB,EAAOoB,EAAK,0BAGhB,OACEy3C,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,sBACbqsB,EAAAA,GAAAA,cAACo4F,GAAAA,EAAY,CAACjxI,KAAMA,IAG1B,CAEA,OACE64C,EAAAA,GAAAA,cAAA,OACErsB,UAAY,WAAU0/G,UACtBzxF,IAAKr5C,EAAKs5C,OAAwB,UAAfwxF,GAAyB,WAAQnvI,EACpDytG,eAAa,GAEG,UAAf0hC,GACE5oI,GAA0B5B,KAAK5D,GAAOu0C,EAAav0C,IAClD+6C,EAAAA,GAAAA,cAACq4F,GAAAA,EAAK,CACJ57F,IAAKx3C,EACL6D,QAAS0wC,EAAav0C,GACtBuzE,YAAaknB,GAAmBlmD,EAAav0C,GAAIuzE,YACjDsJ,oBAAqBw0D,GACrB50F,QAASg1F,OAGI,cAAfrD,GACD5oI,GAA0B5B,KAAK5D,GAAOu0C,EAAav0C,IAClD+6C,EAAAA,GAAAA,cAAC6qD,GAAAA,EAAQ,CACPpuD,IAAKx3C,EACL6D,QAAS0wC,EAAav0C,GACtBqzI,UAAQ,EACRC,SAAO,EACP5kH,UAAU,cACVwzD,cAAeuQ,EAAkB5pF,SAAS7I,GAC1C68E,oBAAqBw0D,GACrBkC,YAAa3B,OAGA,UAAfxD,GACD5oI,GAA0B5B,KAAK5D,GAAOu0C,EAAav0C,IAClD+6C,EAAAA,GAAAA,cAACy4F,GAAAA,EAAO,CACNh8F,IAAKx3C,EACL6D,QAAS0wC,EAAav0C,GACtBuzE,YAAaknB,GAAmBlmD,EAAav0C,GAAIuzE,YACjDsJ,oBAAqBw0D,GACrBoC,eAAgB7B,OAGH,UAAfxD,GACD5oI,GAA0B5B,KAAK5D,GAAOu0C,EAAav0C,IAClD+6C,EAAAA,GAAAA,cAAC6kC,GAAAA,GAAK,CACJpoC,IAAKx3C,EACL4/B,MAAOA,EACP/7B,QAAS0wC,EAAav0C,GACtB6G,OAAQw+F,EAAAA,GAAAA,YACR/5F,KAAMipC,EAAav0C,GAAIsL,KACvBosB,aAAcA,EACdhJ,UAAU,cACV62E,OAAQmsC,GACR6B,YAAa3B,GACb5nI,aAAcywF,IAAoBlmD,EAAav0C,GAAIuzE,YACnD2O,cAAeuQ,EAAkB5pF,SAAS7I,OAG7B,UAAfouI,GACD5oI,GAA0B5B,KAAK5D,GAAOu0C,EAAav0C,IAClD+6C,EAAAA,GAAAA,cAAC6kC,GAAAA,GAAK,CACJpoC,IAAKx3C,EACL4/B,MAAOA,EACP/7B,QAAS0wC,EAAav0C,GACtBm7E,aAAau4D,EAAAA,GAAAA,GAAcpwI,EAAMixC,EAAav0C,GAAK40F,EAAW3a,GAC9DpzE,OAAQw+F,EAAAA,GAAAA,YACR/5F,KAAMipC,EAAav0C,GAAIsL,KACvBosB,aAAcA,EACdhJ,UAAU,cACV62E,OAAQmsC,GACR6B,YAAa3B,GACb5nI,aAAcywF,IAAoBlmD,EAAav0C,GAAIuzE,YACnD2O,cAAeuQ,EAAkB5pF,SAAS7I,OAG7B,YAAfouI,GACD5oI,GAA0B5B,KAAI,CAAC5D,EAAIgd,KAClC+9B,SAAAA,GAAAA,cAAC44F,GAAAA,EAAQ,CACPn8F,IAAKx3C,EACLqmI,cAAerpH,EACf0R,UAAU,6CAEV+tB,QAASA,IAAMk1F,GAAkB3xI,GACjCqpD,gBAxIoBuqF,EAwImB5zI,EAvI1C4zI,IAAaz9H,GAAkBk3H,EAA+B,CAAC,CACpEx+H,MAAOvL,EAAK,iCACZmiD,KAAM,OACN8D,QAASA,KACP0kF,EAAkB2F,EAAS,SAJ0B30I,IAyI/C87C,EAAAA,GAAAA,cAACgtB,GAAAA,EAAe,CAAC/5D,OAAQhO,EAAI6zI,YAAajjG,IAAmB5wC,GAAK8zI,eAAa,KA1I3F,IAAgCF,CA4IvB,IACgB,gBAAfxF,GACD5oI,GAA0B5B,KAAI,CAAC5D,EAAIgd,IAClC+9B,EAAAA,GAAAA,cAAC44F,GAAAA,EAAQ,CACPn8F,IAAKx3C,EACLqmI,cAAerpH,EACf0R,UAAU,6CAEV+tB,QAASA,IAAMx6C,EAAS,CAAEjC,QAE1B+6C,EAAAA,GAAAA,cAACutB,GAAAA,EAAa,CAACzpE,OAAQmB,YAGzBf,EAGV,CAgCW00D,IAEH5Y,EAAAA,GAAAA,cAACqQ,GAAAA,EAAO,CAAC2oF,KAAG,EAACxoF,UAAW2iF,GAAoB5iF,KAAMA,EAAME,YAAauiF,KAIxEb,GACCnyF,EAAAA,GAAAA,cAACi5F,GAAAA,EAAoB,CACnBloF,QAAwB,YAAfsiF,GACT3xF,QAAS80F,GACTluF,UAAW//C,EAAK,0BAEhBy3C,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,+BAGhB2+G,GACCtyF,EAAAA,GAAAA,cAACk5F,GAAAA,EAAiB,CAChBvzI,OAAQkF,QAAQooI,GAChBhgI,OAAQggI,EACRxtF,QAASqxF,KAGE,KG1erB,IAAen3F,EAAAA,EAAAA,KAPyBC,IACtC,MAAMu5F,GAAcr5F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAGnD,OAAOo5F,EAAcn5F,EAAAA,GAAAA,cAACm5F,EAAgBv5F,GAAYI,EAAAA,GAAAA,cAAC6Q,GAAAA,EAAO,KAAG,ICK/D,IAAelR,EAAAA,EAAAA,KAPwBC,IACrC,MAAMw5F,GAAat5F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAGlD,OAAOq5F,EAAap5F,EAAAA,GAAAA,cAACo5F,EAAex5F,GAAYI,EAAAA,GAAAA,cAAC6Q,GAAAA,EAAO,KAAG,ICE7D,GAPuCjR,IACrC,MAAM2wF,GAAazwF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAGlD,OAAOwwF,EAAavwF,EAAAA,GAAAA,cAACuwF,EAAe3wF,GAAYI,EAAAA,GAAAA,cAAC6Q,GAAAA,EAAO,KAAG,ECG7D,GAP8CjR,IAC5C,MAAM4wF,GAAoB1wF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,qBAGzD,OAAOywF,EAAoBxwF,EAAAA,GAAAA,cAACwwF,EAAsB5wF,GAAYI,EAAAA,GAAAA,cAAC6Q,GAAAA,EAAO,KAAG,ECC3E,IAAelR,EAAAA,EAAAA,KAPgB05F,KAC7B,MAAMrK,GAAgBlvF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAGrD,OAAOivF,EAAgBhvF,EAAAA,GAAAA,cAACgvF,EAAa,MAAMhvF,EAAAA,GAAAA,cAAC6Q,GAAAA,EAAO,KAAG,ICGxD,IAAelR,EAAAA,EAAAA,KAPY25F,KACzB,MAAMrK,GAAYnvF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,aAGjD,OAAOkvF,EAAYjvF,EAAAA,GAAAA,cAACivF,EAAS,MAAMjvF,EAAAA,GAAAA,cAAC6Q,GAAAA,EAAO,KAAG,ICEhD,IAAelR,EAAAA,EAAAA,KANc45F,KAC3B,MAAMxK,GAAcjvF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAEnD,OAAOgvF,EAAc/uF,EAAAA,GAAAA,cAAC+uF,EAAW,MAAM/uF,EAAAA,GAAAA,cAAC6Q,GAAAA,EAAO,KAAG,I,gBCoCpD,MAyGA,IAAelR,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAACjgD,EAAM4N,KAA6B,IAA3B,OAAEnN,GAAQmN,EACjB,MAAM7K,GAAOC,EAAAA,EAAAA,IAAWhD,EAAQS,IACxBszB,QAASoiH,GAAoBn2I,EAAO87B,aAAe,CAAC,GACpDte,KAAMg5E,GAAcx2F,EAAO8O,OAC7B,uBAAE3K,IAA2B7C,EAAAA,EAAAA,IAAetB,IAC5C,cAAE+X,GAAkB/X,EACpB01D,EAAY3yD,IAAQ0hE,EAAAA,EAAAA,IAAc1hE,IAGtC7B,MAAOmhD,EAAW,eAClBxzC,EAAc,cACda,EAAa,aACbC,IACErO,EAAAA,EAAAA,IAAetB,GAAQq9B,WAE3B,MAAO,CACLq4B,YACAxjB,SAASvD,EAAAA,EAAAA,IAAmB3uC,EAAQS,IAASyxC,QAC7Cn6B,gBACAy+E,YACA2/C,kBACA9zF,cACA+zF,YAAavnI,EACbuL,UAAWjW,IAA2BivI,EAAAA,GAAAA,QACtC1jI,gBACAC,eACD,GA3BeswC,EAzG8B7/C,IAc5C,IAd6C,UACjDs1D,EAAS,QACTxjB,EAAO,WACPmkG,EAAU,cACVt+H,EAAa,UACby+E,EAAS,gBACT2/C,EAAe,UACf/7H,EAAS,YACTioC,EAAW,YACX+zF,EAAW,aACXzmI,EAAY,cACZD,EAAa,QACb0yC,EAAO,SACPnxC,GACD7Q,EACC,MAAM,mBAAEk2I,IAAuBx9H,EAAAA,EAAAA,MAEzB5T,GAAOo5C,EAAAA,GAAAA,MACNi4F,EAAmBC,IAAwBj5F,EAAAA,EAAAA,IAAmB,IAE/Dk5F,GADwBztE,EAAAA,GAAAA,GAAYutE,KACcA,GAExDzqF,EAAAA,GAAAA,GAAe,CACb76C,WACA86C,OAAQ3J,IAGV,MAAM+tF,GAAY9wF,EAAAA,EAAAA,KAAQ,IACjBnN,EAAUA,EAAQ1sC,KAAKkxI,GAAWA,EAAO9mI,SAAU,IACzD,CAACsiC,IAEEykG,GAAqBj1F,EAAAA,EAAAA,KAAaxgD,IACtCo1I,EAAmB,CAAEp1I,SAAQ,GAC5B,CAACo1I,IAEEM,GAAev3F,EAAAA,EAAAA,KAAQ,KAE3B,MAAMw8B,GAAYtyE,EAAAA,EAAAA,MAAYyT,MAAMQ,KAC9Bq5H,EAAqBV,GAAkBW,EAAAA,EAAAA,IAAkBX,EAAiBt6D,EAAWx5B,GAAe,GAE1G,OAAOguF,EAAAA,EAAAA,KACLn6H,EAAAA,EAAAA,IAAO,IACF2gI,KACClnI,GAAgB,MAChBD,GAAiB,KACpB1L,QAAQ4L,IACT,MAAM4T,EAAOq4D,EAAUjsE,GAOvB,OACGugI,EAAU1lI,SAASmF,IACjBA,IAAWmI,KACTyL,KAASmC,EAAAA,EAAAA,IAAUnC,KAAWkyC,GAAalyC,EAAKuzH,oBAAqB,IAG9EvgD,EACD,GACA,CACD2/C,EAAiB3/C,EAAWn0C,EAAa1yC,EAAcD,EAAeqI,EAAeo4H,EAAWz6E,IAG5FshF,GAAiBt1F,EAAAA,EAAAA,KAAY,KAC7B60F,EAAkBp2I,SACpBm2I,EAAmB,CAAEp1I,MAAO,KAC5Bm1I,EAAWE,GACb,GACC,CAACA,EAAmBD,EAAoBD,IAE3C,OACE15F,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,kBACbqsB,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,wBACbqsB,EAAAA,GAAAA,cAACs6F,GAAAA,EAAM,CACLnJ,QAAS8I,EACTM,YAAaX,EACbY,YAAa90F,EACb+0F,kBAAmBlyI,EAAK,yBACxBmyI,cAAc,4BACdj9H,UAAWg8H,EACXkB,oBAAqBd,EACrBe,eAAgBZ,EAChBa,cAAY,EACZC,gBAAiBhB,IAGnB95F,EAAAA,GAAAA,cAACi5F,GAAAA,EAAoB,CACnBloF,QAASlmD,QAAQ+uI,EAAkBp2I,QACnCohE,SAAUnnD,EACV6qC,UAAW//C,EAAK,yBAChBm5C,QAAS24F,GAER58H,EACCuiC,EAAAA,GAAAA,cAAC8B,GAAAA,EAAO,CAACC,MAAM,UAEf/B,EAAAA,GAAAA,cAAA,KAAGrsB,UAAU,4BAIf,KCpIV,IAAegsB,EAAAA,EAAAA,KAPyBC,IACtC,MAAM6wF,GAAc3wF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAGnD,OAAO0wF,EAAczwF,EAAAA,GAAAA,cAACywF,EAAgB7wF,GAAYI,EAAAA,GAAAA,cAAC6Q,GAAAA,EAAO,KAAG,ICG/D,IAAelR,EAAAA,EAAAA,KAPuBC,IACpC,MAAM8wF,GAAY5wF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,aAGjD,OAAO2wF,EAAY1wF,EAAAA,GAAAA,cAAC0wF,EAAc9wF,GAAYI,EAAAA,GAAAA,cAAC6Q,GAAAA,EAAO,KAAG,IC0CrDkqF,GAAqB,IAAM7yI,EAAAA,IAC3B8yI,GAAqB7vI,OAAOC,KAAK6vI,EAAAA,IAAoBz3I,OAAS,EAC9D03I,GAA2B/vI,OAAOC,KAAK4iI,EAAAA,IAAmBxqI,OAAS,EAEzE,SAAS23I,KACP,MAAMC,EAAc7nI,SAAS+rC,cAAc,mCACvC87F,GACFA,EAAY75G,MAEhB,CAEA,MAsTA,IAAeoe,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAACjgD,EAAM0c,KAA+B,IAA7B,SAAEukC,GAAUvkC,EACnB,MAAM,OAAEjc,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBX,IAAW,CAAC,EAC5Dg4I,GAAuBC,EAAAA,EAAAA,IAA2Bj4I,IAClD,WAAEgR,EAAU,4BAAEy4C,IAAgCnoD,EAAAA,EAAAA,IAAetB,GAC7Dk4I,EAAuBz3I,EAASuQ,EAAWzF,SAAS9K,IAAS0Q,gBAAatQ,EAE1Ei6E,GADUr6E,GAASuC,EAAAA,EAAAA,IAAWhD,EAAQS,IAASwC,aAAUpC,IAC9B2G,QAAQ9G,GAAYA,IAAamB,EAAAA,IAElE,MAAO,CACLupI,YAAY+M,EAAAA,EAAAA,IAA4Bn4I,EAAQihD,GAChDxgD,SACAC,WACAo6E,gBACAs9D,eAAgB5wI,QAAQ/G,GAAUu3I,GAClCvuF,8BACAyuF,uBACD,GAjBej4F,EAtT2B7/C,IASzC,IAAA6oI,EAAA,IAT0C,WAC9CmC,EAAU,OACV3qI,EAAM,SACNC,EAAQ,SACRugD,EAAQ,cACR65B,EAAa,eACbs9D,EAAc,4BACd3uF,EAA2B,qBAC3ByuF,GACD93I,EACC,MAAM,eACJi4I,EAAc,iBACdnO,EAAgB,qBAChBnqI,EAAoB,sBACpBgqI,EAAqB,kBACrBC,EAAiB,iBACjBsO,EAAgB,eAChBC,EAAc,6BACd7I,EAA4B,yBAC5BtF,EAAwB,iBACxBD,EAAgB,wBAChBqO,EAAuB,oBACvBC,EAAmB,4BACnBC,EAA2B,sBAC3BC,EAAqB,oBACrBC,IACE9/H,EAAAA,EAAAA,OAEIzD,MAAOq1B,IAAgBo8B,EAAAA,GAAAA,MACxB8iE,EAAciP,IAAmBt7F,EAAAA,EAAAA,IAAuB8tF,EAAAA,GAAAA,UACxDxB,EAAkBiP,IAAuBv7F,EAAAA,EAAAA,IAA4BotF,EAAAA,GAAAA,UACrEoO,EAAsBC,IAA2Bz7F,EAAAA,EAAAA,OACjD07F,EAAyBC,IAA8B37F,EAAAA,EAAAA,MACxD47F,EAAiBvP,IAAiByB,EAAAA,GAAAA,QAElC/oI,OAAwBzB,IAAfuqI,EACThD,EAAYgD,IAAewM,EAAAA,GAAAA,SAC3BzO,EAAWiC,IAAewM,EAAAA,GAAAA,OAC1BvP,EAAe+C,IAAewM,EAAAA,GAAAA,WAC9BxO,EAAegC,IAAewM,EAAAA,GAAAA,WAC9BvO,EAAsB+B,IAAewM,EAAAA,GAAAA,kBACrCtO,EAAkB8B,IAAewM,EAAAA,GAAAA,cACjCrO,EAAc6B,IAAewM,EAAAA,GAAAA,UAC7BpO,EAAgB4B,IAAewM,EAAAA,GAAAA,YAC/BjO,EAAsByB,IAAewM,EAAAA,GAAAA,cACrCnO,EAAkB2B,IAAewM,EAAAA,GAAAA,YACjClO,EAAiB0B,IAAewM,EAAAA,GAAAA,UAChCwB,EAAe1uG,GAAeE,EAAAA,KAE7B4Y,EAAsB2nF,IAA2B5tF,EAAAA,EAAAA,KAAUj7C,GAE5DgrI,GAAyE,QAAtDrE,GAAG5gE,EAAAA,GAAAA,GAAiB+iE,GAAY,GAAOgN,UAAe,IAAAnP,EAAAA,GAAK,EAE9E1qG,IAAQmjB,EAAAA,EAAAA,KAAY,WAA2B,IAA1B23F,IAAcn5I,UAAAC,OAAA,QAAAU,IAAAX,UAAA,KAAAA,UAAA,GACvC,OAAQkrI,GACN,KAAKwM,EAAAA,GAAAA,cACHlI,EAA6B,CAAEvrI,uBAAwBivI,EAAAA,GAAAA,SACvD,MACF,KAAKwE,EAAAA,GAAAA,SACH,GAAIuB,GAAkBE,EAAgB,CACpCR,EAAgBxN,EAAAA,GAAAA,SAChB,KACF,CACAgN,EAAe,CAAEvnI,OAAO,GAAS,CAAEwoI,gBAAgB,IACnD,MACF,KAAK1B,EAAAA,GAAAA,WACH,OAAQ/N,GACN,KAAKc,EAAAA,GAAAA,QACHT,IACA,MACF,KAAKS,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,WACL,KAAKA,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,UACL,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,UACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,oBACHmO,EAAoBnO,EAAAA,GAAAA,SACpB,MACF,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,qBACHmO,EAAoBnO,EAAAA,GAAAA,kBACpBqO,OAAwBn4I,GACxBq4I,OAA2Br4I,GAC3B,MACF,KAAK8pI,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,mBACHmO,EAAoBnO,EAAAA,GAAAA,oBACpB,MACF,KAAKA,EAAAA,GAAAA,WACL,KAAKA,EAAAA,GAAAA,WACHmO,EAAoBnO,EAAAA,GAAAA,SACpB8N,EAAoB,CAAEh4I,OAAQA,EAASu0B,YAAQn0B,IAC/CupI,EAAyB,CAAE3pI,OAAQA,EAASu0B,YAAQn0B,IAIxD,MAEF,KAAK+2I,EAAAA,GAAAA,kBACHY,IACA,MACF,KAAKZ,EAAAA,GAAAA,WACHzN,IACA,MACF,KAAKyN,EAAAA,GAAAA,OACHE,KACA/3I,IACA,MAEF,KAAK63I,EAAAA,GAAAA,cACHE,KACA/N,EAAsB,CAAE7oI,WAAOL,IAC/B,MACF,KAAK+2I,EAAAA,GAAAA,UACHE,KACA9N,EAAkB,CAAE9oI,WAAOL,IAC3B,MAEF,KAAK+2I,EAAAA,GAAAA,YACHU,IACA,MACF,KAAKV,EAAAA,GAAAA,YACHe,IACA,MACF,KAAKf,EAAAA,GAAAA,UACHgB,IAGN,GAAG,CACDxN,EAAY+N,EAAgBd,EAAgBC,EAAkB5I,EAC9D7F,EAAkBK,EAAkBnqI,EAAsBgqI,EAAuBC,EACjFI,EAA0B3pI,EAAQg4I,EAAqBtO,EAAkBqO,EACzEG,EAAuBC,IAGnBW,IAAyB73F,EAAAA,EAAAA,KAAY,CAAC8zF,EAAUgE,KACpDR,EAAwBxD,GACxB0D,EAA2BM,EAAW,GACrC,IAEGC,IAA6B/3F,EAAAA,EAAAA,KAAayuF,IAC9CoI,EAAe,CAAE93I,OAAQA,EAAS0vI,aAAY,GAC7C,CAACoI,EAAgB93I,IA2CpB,SAAS80D,GAActkD,GACrB,IAA6B,IAAzBq8H,GAIJ,OAAQA,IACN,KAAKsK,EAAAA,GAAAA,cACH,OACEj7F,EAAAA,GAAAA,cAAC+8F,GAAc,CACbtgG,IAAM,oBAAmB34C,IACzBA,OAAQA,EACRwQ,SAAU3O,GAAU2O,EACpBolI,WAAYoD,GACZr3F,QAAS7jB,KAGf,KAAKq5G,EAAAA,GAAAA,SACH,OACEj7F,EAAAA,GAAAA,cAAC2uF,GAAO,CACNlyF,IAAM,WAAU34C,IAChBA,OAAQA,EACR4V,QAASykE,EAAgBp6E,OAAWG,EACpC+oI,aAAcA,EACd3oF,SAAUA,EACVouF,qBAAsBwJ,IAG5B,KAAKjB,EAAAA,GAAAA,OACH,OACEj7F,EAAAA,GAAAA,cAACm5F,GAAW,CACV18F,IAAM,gBAAe34C,IACrBA,OAAQA,EACRC,SAAUA,EACV0hD,QAAS7jB,GACTttB,SAAU3O,GAAU2O,IAG1B,KAAK2mI,EAAAA,GAAAA,WACH,OACEj7F,EAAAA,GAAAA,cAACo5F,GAAU,CACT38F,IAAM,cAAa34C,IACnBA,OAAQA,EACR+0D,cAAeq0E,EACfoP,wBAAyBA,EACzBF,qBAAsBA,EACtB9nI,SAAU3O,GAAU2O,EACpBwkD,eAAgBqjF,EAChBa,mBAAoBJ,GACpBn3F,QAAS7jB,KAIf,KAAKq5G,EAAAA,GAAAA,WACH,OAAOj7F,EAAAA,GAAAA,cAACuwF,GAAU,CAACzsI,OAAQA,IAC7B,KAAKm3I,EAAAA,GAAAA,kBACH,OAAOj7F,EAAAA,GAAAA,cAACwwF,GAAiB,CAAC1sI,OAAQA,EAASwQ,SAAU3O,GAAU2O,IACjE,KAAK2mI,EAAAA,GAAAA,cACH,OAAOj7F,EAAAA,GAAAA,cAACgvF,GAAa,CAACvpF,QAAS7jB,GAAOttB,SAAU3O,GAAU2O,IAC5D,KAAK2mI,EAAAA,GAAAA,UACH,OAAOj7F,EAAAA,GAAAA,cAACivF,GAAS,CAACxpF,QAAS7jB,GAAOttB,SAAU3O,GAAU2O,IACxD,KAAK2mI,EAAAA,GAAAA,YACH,OAAOj7F,EAAAA,GAAAA,cAAC+uF,GAAW,CAACtpF,QAAS7jB,GAAOttB,SAAU3O,GAAU2O,IAC1D,KAAK2mI,EAAAA,GAAAA,YACH,OAAOj7F,EAAAA,GAAAA,cAACywF,GAAW,CAAChrF,QAAS7jB,GAAOttB,SAAU3O,GAAU2O,IAC1D,KAAK2mI,EAAAA,GAAAA,UACH,OAAOj7F,EAAAA,GAAAA,cAAC0wF,GAAS,CAACjrF,QAAS7jB,GAAOttB,SAAU3O,GAAU2O,IAI5D,CAEA,OAhHA8qC,EAAAA,EAAAA,KAAU,IAAOz5C,GAASokD,EAAAA,GAAAA,GAAsBnoB,SAAS19B,GAAY,CAACyB,EAAQi8B,MAE9Ewd,EAAAA,EAAAA,KAAU,KACRzyC,YAAW,KACT6hI,GAAyB7oI,EAAO,GAC/Bo1I,GAAmB,GACrB,CAACp1I,KAEJy5C,EAAAA,EAAAA,KAAU,KACJm8F,IACFY,EAAoBZ,GACpBQ,OAA4B73I,GAC9B,GACC,CAACq3I,EAAsBQ,KAG1B38F,EAAAA,EAAAA,KAAU,KACJz5C,GAAU82I,GACZ76G,IACF,GAEC,CAAC66G,KAGJxzD,EAAAA,GAAAA,IAA4Bh4E,IAAkB,IAAhBk/G,GAAWl/G,EACnCk/G,IAAersH,IACjBo4I,EAAgBxN,EAAAA,GAAAA,SAChByN,EAAoBnO,EAAAA,GAAAA,SACtB,GACC,CAAClqI,KAEJqrD,EAAAA,GAAAA,GAAe,CACb76C,SAAUmnI,IACRhN,IAAewM,EAAAA,GAAAA,UACZxM,IAAewM,EAAAA,GAAAA,YACfxM,IAAewM,EAAAA,GAAAA,eACfxM,IAAewM,EAAAA,GAAAA,aACfxM,IAAewM,EAAAA,GAAAA,WACpB7rF,OAAQA,IAAMxtB,IAAM,KA2EpBoe,EAAAA,GAAAA,cAAA,OACE/6C,GAAG,sBACH0uB,UAAY8nH,OAA+Bv3I,EAAd,aAE5Bu4I,GACCz8F,EAAAA,GAAAA,cAAA,OAAKrsB,UAAU,mBAAmB+tB,QAAS9f,KAE7Coe,EAAAA,GAAAA,cAAA,OAAK/6C,GAAG,eACN+6C,EAAAA,GAAAA,cAACi9F,GAAW,CACVn5I,OAAQA,EACRC,SAAUA,EACVwoI,aAAc5mI,EACd8lI,UAAWA,EACXe,SAAUA,EACVd,aAAcA,EACde,aAAcA,EACdC,oBAAqBA,EACrBC,gBAAiBA,EACjBC,YAAaA,EACbC,cAAeA,EACfC,gBAAiBA,EACjBC,eAAgBA,EAChBC,oBAAqBA,EACrBC,aAAcA,EACdC,iBAAkBA,EAClBznF,QAAS7jB,GACTk3B,eAAgBqjF,IAElBn8F,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CACTtP,KAAOmU,GAAwBiG,EAA+B,OAAS,WACvE6D,YAAaqqF,GAAqBE,GAClCj5F,UAAWypF,EAAesP,GAAqB9N,EAAmByD,GAClEl9E,eAAa,EACbC,oBACEi9E,KAAwBsK,EAAAA,GAAAA,kBACpBA,EAAAA,GAAAA,gBAAgC/2I,GAGrC00D,KAGD,KCnWV,IAAejZ,EAAAA,EAAAA,KANwBl8C,IAAgB,IAAf,OAAEkC,GAAQlC,EAChD,MAAMy5I,GAAcp9F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAAgBp6C,GAEnE,OAAOu3I,EAAcl9F,EAAAA,GAAAA,cAACk9F,EAAW,WAAMh5I,CAAS,ICL5Ci5I,GAAkB,GAClBC,GAAiB,IAEvB,IAAIC,GAAsC,GACtCC,IAAU,EAEC,SAASC,GAAS5lI,EAAawiG,GAC5CkjC,GAAiB5zI,KAAK,CAAEkO,MAAKwiG,aACxBmjC,KACHA,IAAU,EACV3wI,YAAW4Q,gBAOfA,iBACE,IAAI8L,EAAQ,EACZ,IAAK,MAAMm0H,KAAmBH,GAC5BI,GAAYD,GACZn0H,IACIA,IAAU8zH,WACNnrH,EAAAA,EAAAA,IAAMorH,IACZ/zH,EAAQ,GAGZg0H,GAAmB,EACrB,CAjBYK,GACNJ,IAAU,CAAK,GACdF,IAEP,CAeA,SAASK,GAAWh6I,GAAqC,IAApC,IAAEkU,EAAG,SAAEwiG,GAA2B12G,EACrD,MAAMgQ,EAAOF,SAASksD,cAAc,KACpChsD,EAAKC,KAAOiE,EACZlE,EAAK8pI,SAAWpjC,EAChB,IACE1mG,EAAKkqI,OACP,CAAE,MAAOjmI,GAEP8C,QAAQC,MAAM/C,EAChB,CACF,CCzBA,MAEMkmI,GAAoB,IAAIruH,IACxBsuH,GAAqB,IAAItuH,IAqF/B,IAAeowB,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KACjBjgD,IACC,MAAMwL,GAAkBlK,EAAAA,EAAAA,IAAetB,GAAQwL,gBAAgBD,SAG/D,MAAO,CACLC,kBACAjG,SAJyBuC,OAAOmR,OAAOzN,GAAiBgiC,MAAMxoC,GAAeA,EAAW7E,SAIzDH,EAAOuF,SAASgG,cAAW1K,EAC3D,GAReo/C,EAnFoB7/C,IAGlC,IAHmC,gBACvCoL,EAAe,SACfjG,GACDnF,EACC,MAAM,4BAAEq6I,EAA2B,iBAAEpuI,IAAqByM,EAAAA,EAAAA,MAEpD25F,GAAeC,EAAAA,GAAAA,GAXQ,KAWgC,GAEvDgoC,GAA0Bh5F,EAAAA,EAAAA,KAAaj8C,IAC3C+0I,GAAmBruH,IAAI1mB,GACvBgtG,GAAa,KACP+nC,GAAmB17F,OACrB27F,EAA4B,CAAEl1I,SAAUlF,MAAM2e,KAAKw7H,MACnDA,GAAmBG,QACrB,GACA,GACD,CAACF,EAA6BhoC,KAEjC12D,EAAAA,EAAAA,KAAU,KACR,MAAM6+F,EAAiB9yI,OAAO8f,QAAQpc,GAAiBhG,KAAIoI,IAAA,IAAEnN,EAAQuE,GAAW4I,EAAA,OAC9E5I,EAAWQ,KAAK5D,GAAO2D,EAAU9E,GAAQ+c,KAAK5b,IAAI,IACjDwrG,OAEEwtC,EAAez6I,OAKpBy6I,EAAelvI,SAASjG,IACtB,GAAI80I,GAAkB16H,IAAIpa,GACxB,OAEF80I,GAAkBpuH,IAAI1mB,GACtB,MAAMo1I,GAAexiF,EAAAA,EAAAA,IAAoB5yD,EAAS,YAClD,IAAKo1I,EAEH,YADAH,EAAwBj1I,GAI1B,MAAMu4D,EAAYlyB,GAAAA,GAA0B+uG,GAE5C,GAAI78E,EAGF,OAFAk8E,GAASl8E,GAAW88E,EAAAA,EAAAA,IAA0Br1I,SAC9Ci1I,EAAwBj1I,GAI1B,MAAM,SACJyK,EAAQ,MAAEojC,EAAK,MAAEoqB,GACfj4D,EAAQ2H,QAEZ,KADmB8C,GAAYojC,GAASoqB,IAAQ5e,MAAQ,GACxCi8F,EAAAA,KAAoBC,EAAAA,KAAsBC,EAAAA,GAKxD,OAJA5uI,EAAiB,CACf5G,QAAS,6EAEXi1I,EAAwBj1I,GAI1B,MAAMy1I,GAAcj2D,EAAAA,EAAAA,IAAsBx/E,EAAS,YACnDqmC,GAAAA,GAAkB+uG,EAAcK,GAAa,GAAMtkI,MAAM7Q,IACvD,GAAIm1I,IAAgBnvG,EAAAA,GAAAA,YAA4B,CAC9C,MAAMz3B,EAAM,IAAIsV,IAAI7jB,EAAQxC,OAAO2M,SAASirI,SACtCrkC,GAAWgkC,EAAAA,EAAAA,IAA0Br1I,GAC3C6O,EAAIyV,aAAajK,IAAI,WAAYs7H,mBAAmBtkC,IACpD,MAAMukC,EAAiB93I,OAAOC,KAAK8Q,EAAIrM,YACvCozI,GAAgB19F,iBAAiB,gBAAgB,KAC/CtxC,EAAiB,CACf5G,QAAS,yEACT,GAEN,MAAWM,GACTm0I,GAASn0I,GAAQ+0I,EAAAA,EAAAA,IAA0Br1I,IAG7Ci1I,EAAwBj1I,EAAQ,GAChC,IApDF80I,GAAkBI,OAqDlB,GACD,CAACp1I,EAAUiG,EAAiBivI,EAA6BC,EAAyBruI,GAErE,K,gBCvFlB,MAsEA,IAAeiwC,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAACjgD,EAAM4N,KAAiC,IAA/B,WAAEsH,GAAYtH,EACrB,MAAM,OAAEnN,GAAWyU,GAAc,CAAC,EAC5BnS,EAAOtC,IAAUuC,EAAAA,EAAAA,IAAWhD,EAAQS,GAG1C,MAAO,CACL+vG,QAHchpG,QAAQzE,KAAS49H,EAAAA,EAAAA,IAAiB59H,EAAMlB,EAAAA,IAIvD,GAReo+C,EA3DyB7/C,IAAwC,IAAvC,WAAE8U,EAAU,UAAEomI,EAAS,QAAE9qC,GAASpwG,EAC9E,MAAM,UAAEm7I,EAAS,gBAAEjwI,IAAoBwN,EAAAA,EAAAA,MACjC5T,GAAOo5C,EAAAA,GAAAA,MACP,IAAEhqC,EAAG,OAAE7T,EAAM,UAAEyG,GAAcgO,GAAc,CAAC,EAC5C5S,EAASkF,QAAQ8M,GAEjB+3G,GAAoBC,EAAAA,GAAAA,GAAqB7rH,IAC/CuuF,EAAAA,GAAAA,IAAY,KACVq9B,EAAkB,CAAEvqH,KAAM,eAAgB,GACzCQ,GAAUkuG,EApBmB,SAoBmB3vG,GAEnD,MAAM26I,GAAgB95F,EAAAA,EAAAA,KAAa2tC,IACjC,IACE,MAAMt7E,EAAOwG,KAAKY,MAAMk0E,EAAMt7E,MACP,gBAAnBA,EAAK0nI,YACPnwI,EAAgB,CAAER,WAAYrK,EAAQuE,WAAY,CAACkC,GAAY6D,aAAa,IAC5EwwI,KAGqB,eAAnBxnI,EAAK0nI,YACPnwI,EAAgB,CAAER,WAAYrK,EAAQuE,WAAY,CAACkC,KACnDq0I,IAEJ,CAAE,MAAO5pI,GACP,IAED,CAAClR,EAAQ86I,EAAWr0I,EAAWoE,IAE5BowI,GAAah6F,EAAAA,EAAAA,KAAa2tC,IAC9BA,EAAM9X,cAAcn5C,OAAO,GAC1B,IAOH,OALA2d,EAAAA,EAAAA,KAAU,KACRx4C,OAAOo6C,iBAAiB,UAAW69F,GAC5B,IAAMj4I,OAAOq6C,oBAAoB,UAAW49F,KAClD,CAACA,IAGF7+F,EAAAA,GAAAA,cAACg/F,GAAAA,EAAK,CACJrrH,UAAU,YACVhuB,OAAQA,EACR8/C,QAASm5F,EACT9qI,MAAO6qI,EACPM,gBAAc,GAEbt5I,GACCq6C,EAAAA,GAAAA,cAAA,UACErsB,UAAU,aACV2nE,OAAQyjD,EACR57F,IAAKxrC,EACL7D,MAAOvL,EAAK,cACZ22I,QAAQ,yDACRC,MAAM,eAGJ,KC1EZ,IAAex/F,EAAAA,EAAAA,KAPgBl8C,IAAgB,IAAf,OAAEkC,GAAQlC,EACxC,MAAM27I,GAAgBt/F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAAkBp6C,GAGvE,OAAOy5I,EAAgBp/F,EAAAA,GAAAA,cAACo/F,EAAa,WAAMl7I,CAAS,ICGtD,IAAey7C,EAAAA,EAAAA,KAPUl8C,IAAgB,IAAf,OAAEkC,GAAQlC,EAClC,MAAM47I,GAAUv/F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,WAAYp6C,GAG3D,OAAO05I,EAAUr/F,EAAAA,GAAAA,cAACq/F,EAAO,WAAMn7I,CAAS,ICK1C,IAAey7C,EAAAA,EAAAA,KARoCC,IACjD,MAAM,OAAEj6C,GAAWi6C,EACb0/F,GAAyBx/F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,0BAA2Bp6C,GAGzF,OAAO25I,EAAyBt/F,EAAAA,GAAAA,cAACs/F,EAA2B1/F,QAAY17C,CAAS,ICInF,IAAey7C,EAAAA,EAAAA,KAR2BC,IACxC,MAAM,IAAEjoC,GAAQioC,EACV2/F,GAAgBz/F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAAkBpoC,GAGvE,OAAO4nI,EAAgBv/F,EAAAA,GAAAA,cAACu/F,EAAkB3/F,QAAY17C,CAAS,ICGjE,IAAey7C,EAAAA,EAAAA,KAR6BC,IAC1C,MAAM,OAAEj6C,GAAWi6C,EACb4/F,GAAkB1/F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,mBAAoBp6C,GAG3E,OAAO65I,EAAkBx/F,EAAAA,GAAAA,cAACw/F,EAAoB5/F,QAAY17C,CAAS,ICCrE,IAAey7C,EAAAA,EAAAA,KARuBC,IACpC,MAAM,YAAE/B,GAAgB+B,EAClB6/F,GAAY3/F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,aAAclC,GAG/D,OAAO4hG,EAAYz/F,EAAAA,GAAAA,cAACy/F,EAAc7/F,QAAY17C,CAAS,ICKzD,IAAey7C,EAAAA,EAAAA,KAP8BC,IAC3C,MAAM,SAAEtrC,GAAasrC,EACf8/F,GAAmB5/F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqBzrC,GAE7E,OAAOorI,EAAmB1/F,EAAAA,GAAAA,cAAC0/F,EAAgB,WAAMx7I,CAAS,ICG5D,IAAey7C,EAAAA,EAAAA,KAPuBC,IACpC,MAAM,SAAEtrC,GAAasrC,EACf+/F,GAAY7/F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,aAAczrC,GAE/D,OAAOqrI,EAAY3/F,EAAAA,GAAAA,cAAC2/F,EAAS,WAAMz7I,CAAS,I,uOCG9C,MA6BA,IAAey7C,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KACjBjgD,IACQ,CACLsR,cAAchQ,EAAAA,EAAAA,IAAetB,GAAQsR,gBAHvB2uC,EA7B8B7/C,IAAsB,IAArB,aAAEkR,GAAclR,EACjE,MAAM,SAAEyD,IAAaiV,EAAAA,EAAAA,MAEfyjI,EAAYA,KAChB14I,EAAS,CAAEjC,QAAIf,GAAa,CAAEy4I,gBAAgB,GAAO,EAGjDkD,EAA8C5uI,IAAgC,IAA/B,OAAEnN,EAAM,KAAEqB,EAAI,SAAEpB,GAAUkN,GAC7Ek+C,EAAAA,GAAAA,GAAe,CACb76C,UAAU,EACVc,MAAM0qI,EAAAA,EAAAA,IAAmBh8I,EAAQqB,EAAMpB,GACvCqrD,OAAQwwF,GACR,EAGJ,OACE5/F,EAAAA,GAAAA,cAAA,WACGrrC,GAAc9L,KAAI,CAAC4S,EAAawG,IAC/B+9B,EAAAA,GAAAA,cAAC6/F,EACCE,GAAA,CACAtjG,IAAM,GAAEhhC,EAAY3X,UAAU2X,EAAY1X,YAAY0X,EAAYtW,QAAQ8c,KAEtExG,MAGJ,KCzBV,IAAekkC,EAAAA,EAAAA,KAR6BC,IAC1C,MAAM,OAAEj6C,GAAWi6C,EACbogG,GAAkBlgG,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,mBAAoBp6C,GAG3E,OAAOq6I,EAAkBhgG,EAAAA,GAAAA,cAACggG,EAAoBpgG,QAAY17C,CAAS,ICGrE,IAAey7C,EAAAA,EAAAA,KARgCC,IAC7C,MAAM,OAAEj6C,GAAWi6C,EACbqgG,GAAqBngG,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,sBAAuBp6C,GAGjF,OAAOs6I,EAAqBjgG,EAAAA,GAAAA,cAACigG,EAAuBrgG,QAAY17C,CAAS,ICG3E,IAAey7C,EAAAA,EAAAA,KARyBC,IACtC,MAAM,OAAE5Y,GAAW4Y,EACbsgG,GAAcpgG,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAAgB/Y,GAGnE,OAAOk5G,EAAclgG,EAAAA,GAAAA,cAACkgG,EAAgBtgG,QAAY17C,CAAS,ICG7D,IAAey7C,EAAAA,EAAAA,KAR2BC,IACxC,MAAM,IAAE5d,GAAQ4d,EACVugG,GAAgBrgG,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAAkB/d,GAGvE,OAAOm+G,EAAgBngG,EAAAA,GAAAA,cAACmgG,EAAkBvgG,QAAY17C,CAAS,ICGjE,IAAey7C,EAAAA,EAAAA,KARmCC,IAChD,MAAM,IAAE5d,GAAQ4d,EACVwgG,GAAwBtgG,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,yBAA0B/d,GAGvF,OAAOo+G,EAAwBpgG,EAAAA,GAAAA,cAACogG,EAA0BxgG,QAAY17C,CAAS,ICZjF,IAAgB,KAAO,wBCyCjBm8I,GAAkB,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,WAmKhF,IAAe1gG,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KACjBjgD,IAAuBi9I,EAAAA,EAAAA,KAAK37I,EAAAA,EAAAA,IAAetB,GAAS,CAAC,cADpCigD,EAjKsB7/C,IAAkB,IAAjB,SAAEoV,GAAUpV,EAErD,MAAM88I,GAAY58F,EAAAA,EAAAA,IAA0B,MACtC68F,GAAc78F,EAAAA,EAAAA,IAAmB,IACjC88F,GAAkB98F,EAAAA,EAAAA,KAAO,GACzB3V,GAAam8B,EAAAA,GAAAA,KACbqpB,GAAcC,EAAAA,GAAAA,MACd,SAAEnvC,IAAaC,EAAAA,EAAAA,MAEfm8F,EAAwBp8F,EAAW,GAAK,KACxC,iBACJxrC,EAAgB,IAAEN,EAAG,MAAEE,EAAK,KAAED,EAAI,OAAEE,GAClCE,GAAY,CAAC,EAEX8nI,GAAmB57F,EAAAA,EAAAA,KAAY,SAACkxB,EAAWE,GAA8C,IAAnC9oC,EAAM9pC,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAGm9I,EACnE,IAAK,IAAIz+H,EAAI,EAAGA,EAAIorB,EAAQprB,IAAK,CAC/B,MAAM2+H,EAAW3+H,EAAI,EACf4+H,EAAM,CACV/yG,EAAGmoC,GAAK2qE,GAAY,GAAM,KAC1BlxG,EAAO,IAAJymC,GAEC2qE,EAAU/vI,KAAKob,SAAW8pD,EAAI,IAE9B8qE,EAAW,CACfjzG,EAAG8yG,EAAWE,GAAqB,EAAXA,EACxBpxG,GAHeymC,EAAI,EAAIplE,KAAKob,SAAWgqD,GAMnC6qE,EAAcX,GAAgBtvI,KAAKI,MAAMJ,KAAKob,SAAWk0H,GAAgB78I,SACzE2+C,EAhCkB,GAiCxBq+F,EAAY3sH,QAAQpqB,KAAK,CACvBo3I,MACA1+F,OACAJ,MAAOi/F,EACPD,WACAE,QAAS9+F,EACT++F,iBAAkC,GAAhBnwI,KAAKob,SACvBg1H,SAAU,EACVC,YAAarxI,KAAKC,MAClBqxI,WAAY,GAEhB,CACF,GAAG,CAACX,IAEEY,GAAev8F,EAAAA,EAAAA,KAAY,KAC/B,IAAKw7F,EAAU1sH,UAAY4sH,EAAgB5sH,QACzC,OAEF,MAAM2rC,EAAS+gF,EAAU1sH,QAEnBisC,EAAMN,EAAOG,WAAW,MAC9B,IAAKG,EACH,OAGF,MAAQpnD,MAAO6oI,EAAa5oI,OAAQ6oI,GAAiBhiF,EACrDM,EAAI2hF,UAAU,EAAG,EAAGF,EAAaC,GAEjC,MAAME,EAA+B,GACrClB,EAAY3sH,QAAQ9kB,SAAQ,CAACm6F,EAAGjnF,KAC9B,MAAM,IACJ4+H,EAAG,SACHE,EAAQ,KACR5+F,EAAI,MACJJ,EAAK,QACLk/F,EAAO,iBACPC,EAAgB,SAChBC,EAAQ,YACRC,EAAW,WACXC,GACEn4C,EACE30B,GAAQxkE,KAAKC,MAAQoxI,GAAe,IAEpCO,EAAS,CACb7zG,EAAG+yG,EAAI/yG,EAAIizG,EAASjzG,EAAIymC,EACxB7kC,EAAGmxG,EAAInxG,EAAIqxG,EAASrxG,EAAI6kC,GAGpBqtE,EAAc,CAClB9zG,EAAgB,IAAbizG,EAASjzG,EACZ4B,EAAGqxG,EAASrxG,GAAY,IAAP6kC,GAGbstE,EAAa1/F,EAAOpxC,KAAKyjE,IAAIzjE,KAAK+wI,IAAIT,EAAaH,IACnDa,EAAc,EAAIV,EAAaH,GAAoBnwI,KAAK+9E,GAAK,KAE7DkzD,EAAgBX,EAAa,EAC7BY,EAAiBlyI,KAAKC,MAG5B,GADqB2xI,EAAOjyG,EAAI8xG,EAAet4C,EAAE/mD,KAG/C,YADAu/F,EAAiBj4I,KAAKy/F,GAIxB,MAAMg5C,EAAc,IACfh5C,EACH23C,IAAKc,EACLZ,SAAUa,EACVX,QAASY,EACTV,SAAUY,EACVX,YAAaa,EACbZ,WAAYW,GAGdxB,EAAY3sH,QAAQ5R,GAAKigI,EACzBpiF,EAAIF,UAAY7d,EAChB+d,EAAIqiF,YACJriF,EAAIsiF,QACFvB,EAAI/yG,EACJ+yG,EAAInxG,EACJyS,EACA8+F,EACAE,EACA,EACA,EAAIpwI,KAAK+9E,IAEXhvB,EAAIuiF,MAAM,IAEZ7B,EAAY3sH,QAAU2sH,EAAY3sH,QAAQxsB,QAAQ6hG,IAAOw4C,EAAiB5zI,SAASo7F,KAC/Es3C,EAAY3sH,QAAQrwB,QACtBq0E,EAAAA,EAAAA,IAAeypE,GAEfb,EAAgB5sH,SAAU,CAC5B,GACC,IAkBH,IAhBAkjC,EAAAA,GAAAA,IAAc9lD,IAAwB,IAChCqxI,GADUC,GAAiBtxI,EAU/B,OARIsxI,IAAqBzpI,IACvB6nI,EAAiBjoI,GAASs1B,EAAWt1B,MAAOC,GAAUq1B,EAAWr1B,QACjE2pI,EAAc31I,WAAW6mF,EAvIE,KAwItBitD,EAAgB5sH,UACnB4sH,EAAgB5sH,SAAU,GAC1BgkD,EAAAA,EAAAA,IAAeypE,KAGZ,KACL5zI,aAAa40I,EAAY,CAC1B,GAEA,CAACxpI,EAAkB06E,EAAa8tD,KAE9BxoI,GAAoB/I,KAAKC,MAAQ8I,EAnJP,IAoJ7B,OAGF,MAAMiqC,GAAQ2hC,EAAAA,GAAAA,GACZ75E,QAAQ2N,IAAS,QAAOA,MACxB3N,QAAQ4N,IAAU,SAAQA,MAC1B5N,QAAQ6N,IAAW,UAASA,MAC5B7N,QAAQ8N,IAAY,WAAUA,OAGhC,OACEqnC,EAAAA,GAAAA,cAAA,OAAK/6C,GAAG,WAAW0uB,UAAWsvB,GAAAA,KAAaF,MAAOA,GAChD/C,EAAAA,GAAAA,cAAA,UAAQkF,IAAKq7F,EAAW5sH,UAAWsvB,GAAAA,OAAevqC,MAAOs1B,EAAWt1B,MAAOC,OAAQq1B,EAAWr1B,SAC1F,KCzLV,IAAegnC,EAAAA,EAAAA,KAR0BC,IACvC,MAAM,QAAErd,GAAYqd,EACd4iG,GAAe1iG,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,gBAAiBxd,GAGrE,OAAOigH,EAAexiG,EAAAA,GAAAA,cAACwiG,EAAiB5iG,QAAY17C,CAAS,ICG/D,IAAey7C,EAAAA,EAAAA,KAR8BC,IAC3C,MAAM,OAAEj6C,GAAWi6C,EACb6iG,GAAmB3iG,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqBp6C,GAG7E,OAAO88I,EAAmBziG,EAAAA,GAAAA,cAACyiG,EAAqB7iG,QAAY17C,CAAS,ICEvE,IAAey7C,EAAAA,EAAAA,KAR0BC,IACvC,MAAM,OAAEj6C,GAAWi6C,EACb8iG,GAAe5iG,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,gBAAiBp6C,GAGrE,OAAO+8I,EAAe1iG,EAAAA,GAAAA,cAAC0iG,EAAiB9iG,QAAY17C,CAAS,ICG/D,IAAey7C,EAAAA,EAAAA,KAR0BC,IACvC,MAAM,OAAEj6C,GAAWi6C,EACb+iG,GAAe7iG,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,gBAAiBp6C,GAGrE,OAAOg9I,EAAe3iG,EAAAA,GAAAA,cAAC2iG,EAAiB/iG,QAAY17C,CAAS,ICI/D,IAAey7C,EAAAA,EAAAA,KARsCC,IACnD,MAAM,MAAE1mC,GAAU0mC,EACZgjG,GAA2B9iG,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,4BAA6B7mC,GAG7F,OAAO0pI,EAA2B5iG,EAAAA,GAAAA,cAAC4iG,EAA6BhjG,QAAY17C,CAAS,ICGvF,IAAey7C,EAAAA,EAAAA,KARgCC,IAC7C,MAAM,OAAEv3B,GAAWu3B,EACbijG,GAAqB/iG,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,sBAAuB13B,GAGjF,OAAOw6H,EAAqB7iG,EAAAA,GAAAA,cAAC6iG,EAAuBjjG,QAAY17C,CAAS,ICE3E,IAAey7C,EAAAA,EAAAA,KARkCC,IAC/C,MAAM,kBAAE9tB,GAAsB8tB,EACxBkjG,GAAuBhjG,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,wBAAyBjuB,GAGrF,OAAOgxH,EAAuB9iG,EAAAA,GAAAA,cAAC8iG,EAAyBljG,QAAY17C,CAAS,ICG/E,IAAey7C,EAAAA,EAAAA,KARkCC,IAC/C,MAAM,eAAEt4C,GAAmBs4C,EACrBmjG,GAAuBjjG,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,wBAAyBz4C,GAGrF,OAAOy7I,EAAuB/iG,EAAAA,GAAAA,cAAC+iG,EAAyBnjG,QAAY17C,CAAS,ICK/E,IAAey7C,EAAAA,EAAAA,KAVsCC,IACnD,MAAM,yBAAE1X,GAA6B0X,EAC/BojG,GAA2BljG,EAAAA,GAAAA,GAC/BC,GAAAA,GAAAA,MAAe,4BAA6B7X,GAI9C,OAAO86G,EAA2BhjG,EAAAA,GAAAA,cAACgjG,EAA6BpjG,QAAY17C,CAAS,ICMvF,IAAey7C,EAAAA,EAAAA,KAR4CC,IACzD,MAAM,OAAEj6C,EAAM,WAAE6hF,GAAe5nC,EACzBqjG,GAAiBnjG,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,kBAAmBp6C,IAAW6hF,GAGpF,OAAOy7D,EAAiBjjG,EAAAA,GAAAA,cAACijG,EAAmBrjG,QAAY17C,CAAS,ICDnE,IAAey7C,EAAAA,EAAAA,KAR2BC,IACxC,MAAM,KAAEsjG,GAAStjG,EACXujG,GAAgBrjG,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAAkBmjG,GAGvE,OAAOC,EAAgBnjG,EAAAA,GAAAA,cAACmjG,EAAkBvjG,QAAY17C,CAAS,IC6IjE,IAAIk/I,IAAiB,EAErB,MAoYA,IAAezjG,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAACjgD,EAAMuf,KAA+B,IAA7B,SAAE0hC,GAAU1hC,EACnB,MACE1H,UACEC,OAAO,SACLgZ,EAAQ,yBAAEkvH,IAEb,aACD1mH,GACEt5B,GAEE,gBACJ+U,EAAe,0BACfyvB,EAAyB,yBACzBK,EAAwB,eACxB5gC,EAAc,QACdi7B,EAAO,OACPyE,EAAM,iBACNpvB,EAAgB,0BAChBwB,EAAyB,wBACzBC,EAAuB,4BACvByzC,EAA2B,WAC3Bv0C,EAAU,YACVrM,EAAW,kBACXwI,EAAiB,0BACjBoD,EAAyB,cACzB5B,EAAa,QACbsB,EAAO,WACPtE,EAAU,gBACVqrC,EAAe,aACf94C,EAAY,YACZ+W,EAAW,QACXI,EAAO,kBACPzD,EAAiB,wBACjBrR,EAAuB,cACvBC,IACEpD,EAAAA,EAAAA,IAAetB,IAEXS,OAAQy4B,EAAahyB,UAAWiyB,GAAmBtwB,EACrDm7D,EAAe9qC,GAAeC,GAChCzkB,EAAAA,EAAAA,IAAkB1U,EAAQk5B,EAAaC,QACvCt4B,EACEo/I,EAAc/qI,IAAcR,EAAAA,EAAAA,IAAkB1U,EAAQkV,EAAWzU,OAAQyU,EAAWhO,WACpFo0I,EAAY2E,GAAa7yI,QAAQ8lF,MAAMziF,MACvCyvC,EAAclgD,EAAO+X,eAAgB0L,EAAAA,EAAAA,IAAWzjB,EAAQA,EAAO+X,oBAAiBlX,GAChF,OAAEJ,IAAWE,EAAAA,EAAAA,IAAyBX,IAAW,CAAC,EAClDkgJ,IAA0BtyG,EAAAA,EAAAA,IAA+B5tC,EAAQ,4BAC/DuV,EAAAA,EAAAA,IAA0BvV,GAE5BmgJ,EAAqB17I,GAA0B27I,EAAAA,EAAAA,IAAiBpgJ,EAAQyE,QAA2B5D,EAEzG,MAAO,CACLy4B,eACA+mH,iBAAkBhvI,EAClBivI,mBAAoB94I,QAAQ/G,GAC5B8/I,mBAAmBr3I,EAAAA,EAAAA,IAAyBlJ,EAAQihD,GACpDu/F,mBAAmBC,EAAAA,EAAAA,IAAwBzgJ,GAC3C0gJ,oBAAoBC,EAAAA,EAAAA,IAAyB3gJ,GAC7C4gJ,sBAAsBC,EAAAA,EAAAA,IAA2B7gJ,GACjD8gJ,iBAAkBt5I,QAAQqL,EAAc1S,QACxC4gJ,WAAYv5I,QAAQ2M,EAAQhU,QAC5B6jE,eACAzvD,mBACAysI,sBAAuBx5I,QAAQiN,GAC/Bg1C,8BACA1zC,4BACAC,0BACAirI,oBAAoB1pG,EAAAA,EAAAA,IAAyBv3C,GAC7C85C,kBAAmB3gC,EAAcnZ,EAAO65C,WAAWC,uBAAoBj5C,EACvE6/H,yBAAyBnrH,EAAAA,EAAAA,IAA0BvV,GACnD8wB,WACAkvH,2BACAkB,kBAAmB/nI,EAAc3R,QAAQxH,EAAO46C,gBAAa/5C,EAC7DytB,YAAatuB,EAAO8R,SAASQ,MAAMC,OACnC4uI,oBAAqBnhJ,EAAOwS,aAAaF,MAAMC,OAC/C6uI,iBAAkBvxI,GAAYD,OAC9ByxI,wBAAyBxxI,GAAYC,gBACrCoF,aACAomI,YACAgG,yBAA0B95I,QAAQ0zC,GAClCnmC,kBACAwsI,mBAAoBxsI,IAAmB0O,EAAAA,EAAAA,IAAWzjB,EAAQ+U,EAAgBJ,OAC1E6sI,mBAAoBh9G,GAA2B7F,IAC/CkG,2BACAlB,SACAuc,cACAhhB,UACAnY,sBAAsBC,EAAAA,EAAAA,IAA2BhnB,GACjDyhJ,mBAAoBr/I,GAAcE,OAClCo/I,aAAc5rI,GAAmBD,MACjCgwB,mBAAoBtsB,EAAQssB,mBAC5B87G,mBAAoBn6I,QAAQ+R,EAAQysB,SACpCm6G,qBACAhnI,cACAlV,iBACAS,gBACAw7I,yBACD,GAjGejgG,EApYoB7/C,IA+ClC,IA/CmC,aACvCk5B,EAAY,SACZ2nB,EAAQ,iBACRo/F,EAAgB,mBAChBC,EAAkB,kBAClBC,EAAiB,kBACjBC,EAAiB,mBACjBE,EAAkB,iBAClBI,EAAgB,WAChBC,EAAU,aACV/8E,EAAY,kBACZlqB,EAAiB,iBACjBvlC,EAAgB,sBAChBysI,EAAqB,4BACrBv3F,EAA2B,aAC3Bi4F,EAAY,0BACZ3rI,EAAyB,wBACzBC,EAAuB,mBACvBirI,EAAkB,wBAClBvgB,EAAuB,SACvB5vG,EAAQ,yBACRkvH,EAAwB,YACxB1xH,EAAW,oBACX6yH,EAAmB,kBACnBD,EAAiB,iBACjBE,EAAgB,wBAChBC,EAAuB,WACvBnsI,EAAU,UACVomI,EAAS,yBACTgG,EAAwB,gBACxBvsI,EAAe,mBACfwsI,EAAkB,mBAClBC,EAAkB,yBAClB38G,EAAwB,eACxB5gC,EAAc,OACd0/B,EAAM,YACNuc,EAAW,QACXhhB,EAAO,mBACPuiH,EAAkB,mBAClB57G,EAAkB,mBAClB87G,EAAkB,qBAClBf,EAAoB,qBACpB75H,EAAoB,mBACpBo5H,EAAkB,YAClBhnI,EAAW,cACXzU,GAAa,uBACbw7I,IACD9/I,EACC,MAAM,SACJwhJ,GAAQ,mBACRC,GAAkB,yBAClBC,GAAwB,2BACxBC,GAA0B,eAC1BlpI,GAAc,iBACdmpI,GAAgB,kBAChBC,GAAiB,kBACjBC,GAAiB,gBACjBC,GAAe,uBACfC,GAAsB,gBACtBppG,GAAe,iBACfqpG,GAAgB,sBAChBC,GAAqB,kBACrBC,GAAiB,qBACjB7pG,GAAoB,uBACpB8pG,GAAsB,iBACtBC,GAAgB,qBAChBC,GAAoB,qBACpBC,GAAoB,yBACpBC,GAAwB,WACxB30G,GAAU,cACV40G,GAAa,eACb/jH,GAAc,gBACdgkH,GAAe,iBACfz0H,GAAgB,wBAChB00H,GAAuB,kBACvBC,GAAiB,aACjBC,GAAY,gBACZC,GAAe,SACfr/I,GAAQ,iBACRqiE,GAAgB,wBAChBttB,GAAuB,gBACvBv1C,GAAe,iBACf8/I,GAAgB,oBAChBxqG,GAAmB,0BACnByqG,KACEtqI,EAAAA,EAAAA,MAEA5B,EAAAA,MAAU6oI,KACZA,IAAiB,EAEjB5oI,QAAQ6f,IAAI,qBAIdsqB,EAAAA,GAAAA,IAAW,MACJ+hG,EAAAA,GAAAA,IAAW3mG,GAAAA,GAAAA,MAAc,GArGG,KAwGnC,MAAO4mG,GAA0BC,KAAgC7iG,EAAAA,GAAAA,IAAQ,IACzEY,EAAAA,GAAAA,GAAWiiG,GAxG4B,KA2GvC,MAAMptF,IAAe7V,EAAAA,EAAAA,IAAuB,OAEtC,UAAEkjG,KAActiG,EAAAA,EAAAA,OACtBnF,EAAAA,EAAAA,KAAU,KACHskG,GAAqBC,GAAuBkD,GAGtCnD,GAAoBC,GAAsBr/F,GAEnDilB,KAHAA,IAIF,GACC,CAACs9E,GAAWnD,EAAkBC,EAAoBr/F,EAAUilB,MAE/D8oB,EAAAA,GAAAA,GAAYk0D,GAAiB/pI,EA1HC,SA0HuCtY,GAAW,IAGhFk7C,EAAAA,EAAAA,KAAU,KACJziB,GAAgBngB,IAClBN,IAAe,GACfo1B,KACA40G,KACAjB,KACAQ,KACAP,KACAkB,KACAjB,KACAC,KACAE,KACAC,GAAkB,CAAEpxH,SAAU63F,EAAAA,MAC9B7pF,KACAgkH,KACAT,KACAC,KACAY,KACAC,KACAxqG,KACAyqG,KACF,GACC,CACD9pH,EAAcuoH,GAAoBK,GAAmBH,GAA4BD,GACjFG,GAAmBppI,GAAgBupI,GAAwBS,GAAe/jH,GAAgBgkH,GAC1FT,GAAkBa,GAAiBj1G,GAAY80G,GAAyBT,GAAuBa,GAC/FX,GAAwB7pG,GAAqBC,GAAyB7xB,EAAsB5N,EAAayoI,MAI3G7lG,EAAAA,EAAAA,KAAU,KACJziB,GAAgBngB,GAAe4N,IACjCy7H,KACA5pG,KACF,GACC,CAAC7xB,EAAsB5N,EAAamgB,EAAckpH,GAAwB5pG,MAG7EmD,EAAAA,EAAAA,KAAU,KACJziB,GAAgBngB,IACd2X,IAAa63F,EAAAA,KACfu5B,GAAkB,CAAEpxH,SAAUA,IAGhCqxH,GAAgB,CAAEsB,SAAU3yH,IAC9B,GACC,CAACA,EAAUwI,EAAc6oH,GAAiBD,GAAmB/oI,KAGhEooC,EAAAA,GAAAA,IAAsB3zC,IAAwB,IAAtB81I,GAAiB91I,GAClC81I,GAAoBpqH,GAAgBngB,GACvCkV,GAAiB,CACfpkB,IAAKnC,OAAOC,MAAKwB,EAAAA,EAAAA,MAAYiJ,aAAagL,MAC1C2K,aAAa,GAEjB,GACC,CAACmR,EAAcngB,EAAakV,MAG/B0tB,EAAAA,EAAAA,KAAU,KACJziB,GAAgBngB,IACbmV,GAAgB6yH,IACnBnoG,KACAN,MAGEpqB,GAAe6yH,GACjBoB,KAEJ,GACC,CACDjpH,EAAchL,EAAa0qB,GAAiBN,GAAsB6pG,GAAmBpB,EACrFhoI,KAIF4iC,EAAAA,EAAAA,KAAU,KACJziB,GAAgB2nH,GAAsB9nI,GACxCypI,IACF,GACC,CAACtpH,EAAc2nH,EAAoB2B,GAA0BzpI,KAGhE4iC,EAAAA,EAAAA,KAAU,KACJziB,IAAiB0mH,GACnByC,IACF,GACC,CAACnpH,EAAc0mH,EAA0ByC,MAG5C1mG,EAAAA,EAAAA,KAAU,KACR,MAAM4nG,GAA4BC,EAAAA,EAAAA,MAC9BtqH,GAAgBqqH,GAA2BE,SAC7CC,EAAAA,GAAAA,IAAgBC,mBAAmBJ,EAA0BE,QAC/D,GACC,CAACvqH,KAEJioB,EAAAA,GAAAA,IAAsB7kC,IAAwB,IAAtBgnI,GAAiBhnI,EACvC,MAAMsnI,GAAqBC,EAAAA,EAAAA,MACtBD,IAEAN,GAAoBpqH,GACvBz1B,GAAS,CACPjC,GAAIoiJ,EAAmBvjJ,OACvBC,SAAUsjJ,EAAmBtjJ,SAC7BoB,KAAMkiJ,EAAmBliJ,MAE7B,GACC,CAACw3B,EAAcz1B,MAGlBgxD,EAAAA,EAAAA,KAAgB,KACd,MAAM8sB,EAAYxrB,GAAa3lC,QACiB,IAA5CmxD,EAAUuiE,WAAYC,oBACxB7vC,EAAAA,EAAAA,IAAc3yB,EAAW,0BAC3B,GACC,IAEH,MAAMyiE,IAAuB53F,EAAAA,GAAAA,GAC3B6zF,OAAkBx/I,GAAW,OAAMA,EAAW4oD,OAA6B5oD,GAAW,GAElFwjJ,IAA2B/jG,EAAAA,EAAAA,KAAO,GAClC6vC,IAAcC,EAAAA,GAAAA,MAGpB18B,EAAAA,GAAAA,IAAcv2C,IAA4B,IAA1BmnI,GAAqBnnI,EACnC,QAA6Btc,IAAzByjJ,GAAsCjE,IAAqBiE,IAAyB5jB,EACtF,OAGF2jB,GAAyB7zH,SAAU,EAE/BkN,EAAAA,KACFi3F,EAAAA,EAAAA,KAAoB,KAClBzkH,SAAS23B,KAAK8sB,UAAUiwE,OAAO,8BAA+Byb,EAAiB,IAInF,MAAMkE,GAA4BvvC,EAAAA,GAAAA,OAElCwvC,EAAAA,GAAAA,GAAqBt0I,SAASgjD,eAAe,iBAAkB,KAC7DqxF,IACAF,GAAyB7zH,SAAU,EACnC2/D,IAAa,GACb,GACD,CAACkwD,EAAkB3f,EAAyBvwC,KAE/C,MAAMs0D,IAAwBj4F,EAAAA,GAAAA,GAC5B+zF,OAAmB1/I,GAAW,OAAMA,EAAW4oD,OAA6B5oD,GAAW,GAEnF6jJ,IAA4BpkG,EAAAA,EAAAA,KAAO,IAClCqkG,GAAqBC,KAA0BrnG,EAAAA,EAAAA,IAASgjG,IAG/D7sF,EAAAA,GAAAA,IAAcr2C,IAA6B,IAA3BwnI,GAAsBxnI,EACpC,QAA8Bxc,IAA1BgkJ,GAAuCtE,IAAsBsE,EAC/D,OAGF,GAAI3E,GAEF,YADA0E,GAAuBrE,GAIzBmE,GAA0Bl0H,SAAU,EAEpC,MAAM+zH,GAA4BvvC,EAAAA,GAAAA,OAElCwvC,EAAAA,GAAAA,GAAqBt0I,SAASgjD,eAAe,gBAAiB,KAC5DqxF,IACAG,GAA0Bl0H,SAAU,EACpC2/D,KACAy0D,GAAuBrE,EAAkB,GACzC,GACD,CAACA,EAAmBL,GAAwB/vD,KAE/C,MAAM7/D,IAAYkvB,EAAAA,GAAAA,GAChB4kG,GAAqBU,eAAiB,oBACtCV,GAAqBW,cAAgB,mBACrCV,GAAyB7zH,SAAW,wBACpCi0H,GAAsBK,eAAiB,qBACvCL,GAAsBM,cAAgB,oBACtCL,GAA0Bl0H,SAAW,yBACrCm0H,IAAuB,sBACvBl7F,GAA+B,8BAG3B0tE,IAAaz1E,EAAAA,EAAAA,KAAY,KAC7BsgG,GAAiB,CAAEzqI,WAAW,GAAO,GACpC,CAACyqI,KAEEzhD,IAAc7+C,EAAAA,EAAAA,KAAY,KAC9BsgG,GAAiB,CAAEzqI,WAAW,IAEzBrH,SAASO,MAAMhG,SAASuN,EAAAA,MAC3B3U,KAGF2M,GAAW,EAAM,GAChB,CAACgyI,GAAkB3+I,KAEhB2hJ,IAA6BtjG,EAAAA,EAAAA,KAAY,KAC7CghG,IAAsB,GACrB,CAACA,KAEEuC,IAAkCvjG,EAAAA,EAAAA,KAAY,KAClDihG,IAAsB,GACrB,CAACA,KAOJ,OAJAv3C,EAAAA,GAAAA,GAAkB+rB,GAAY52B,IAC9B5kD,GAAgBw7E,IhM9dH,WAAwD,IAApB/5E,EAAUl9C,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,IAC3D67C,EAAAA,EAAAA,KAAU,KACR,GAAKzvC,EAAAA,GAAL,CAIA,IAAI8wC,EAgBJ,OATApB,IAAc27B,aAAa,UAAWz7B,IAKlCh8B,EAAAA,KAAWykC,EAAAA,IACbz0C,SAASytC,iBAAiB,eAAgBvB,IAGrC,KACLJ,IAAc27B,aAAa,UAAW,yDAClCz3D,EAAAA,KAAWykC,EAAAA,IACbz0C,SAAS0tC,oBAAoB,eAAgBxB,GAC/C,EAjBAJ,IAAc27B,aAAa,UAXE,4EAM/B,CAuBC,GACA,CAACv6B,GACN,CgMkcE8nG,CAA2B1E,GAGzB7jG,EAAAA,GAAAA,cAAA,OAAKkF,IAAKsU,GAAcv0D,GAAG,OAAO0uB,UAAWA,IAC3CqsB,EAAAA,GAAAA,cAACwoG,GAAU,MACXxoG,EAAAA,GAAAA,cAACyoG,GAAY,CAACnkG,SAAUA,IACxBtE,EAAAA,GAAAA,cAAC0oG,GAAW,CAACpkG,SAAUA,IACvBtE,EAAAA,GAAAA,cAACk9F,GAAW,CAACv3I,OAAQk+I,IACrB7jG,EAAAA,GAAAA,cAACs/F,GAAsB,CAAC35I,OAAQo+I,IAChC/jG,EAAAA,GAAAA,cAAC+iG,GAAoB,CAACz7I,eAAgBA,IACtC04C,EAAAA,GAAAA,cAACo/F,GAAa,CAACz5I,OAAQw+I,IACvBnkG,EAAAA,GAAAA,cAACq/F,GAAO,CAAC15I,OAAQy+I,IAChB/8E,GAAgBrnB,EAAAA,GAAAA,cAAC4tB,GAAW,CAACnxB,IAAK4qB,EAAapiE,GAAI6D,QAASu+D,EAAc1G,MAAI,IAC/E3gB,EAAAA,GAAAA,cAACu/F,GAAa,CAAC5nI,IAAKC,IACpBooC,EAAAA,GAAAA,cAACwiG,GAAY,CAACjgH,QAASA,EAASghB,YAAaA,IAC7CvD,EAAAA,GAAAA,cAACw/F,GAAe,CAAC75I,OAAQ0+I,IACzBrkG,EAAAA,GAAAA,cAACH,GAAe,CACdl6C,OAAQkF,QAAQuO,GAChBqsC,QAAS4iG,GACTM,oBAAqBvvI,IAEvB4mC,EAAAA,GAAAA,cAAC8iG,GAAoB,CACnBhxH,kBAAmBzY,EACnBosC,QAAS6iG,KAEVnrG,GAAqB6C,EAAAA,GAAAA,cAACy/F,GAAS,CAAC5hG,YAAaV,IAC9C6C,EAAAA,GAAAA,cAAC0/F,GAAgB,CAACprI,SAAUzJ,QAAQsyC,GAAqBonG,KACzDvkG,EAAAA,GAAAA,cAACggG,GAAe,CACdr6I,OAAQkF,QAAQ45I,GAAoBC,GACpCzxI,OAAQwxI,EACRtxI,gBAAiBuxI,IAEnB1kG,EAAAA,GAAAA,cAACmjG,GAAa,CAACD,KAAMn7I,KACrBi4C,EAAAA,GAAAA,cAAC4oG,GAAS,CAACrwI,WAAYA,EAAYomI,UAAWA,IAC9C3+F,EAAAA,GAAAA,cAACkgG,GAAW,CAACl5G,OAAQA,IACrBgZ,EAAAA,GAAAA,cAAC6oG,GAAe,MAChB7oG,EAAAA,GAAAA,cAAC8oG,GAAiB,MAClB9oG,EAAAA,GAAAA,cAAC2/F,GAAS,CAACrrI,SAAUiwI,IACrBvkG,EAAAA,GAAAA,cAAC+oG,GAAW,CAAC9oG,eAAa,IAC1BD,EAAAA,GAAAA,cAACigG,GAAkB,CAACt6I,OAAQg/I,IAC5B3kG,EAAAA,GAAAA,cAACmgG,GAAa,CACZn+G,IAAK4iH,EACLz/I,KAAMiT,GAAiBjT,KACvBs9B,yBAA0BrqB,GAAiBqqB,2BAE7Cud,EAAAA,GAAAA,cAACogG,GAAqB,CAACp+G,IAAK6iH,IAC5B7kG,EAAAA,GAAAA,cAACgjG,GAAwB,CAAC96G,yBAA0BA,IACpD8X,EAAAA,GAAAA,cAACgpG,GAAyB,MACzBlE,GAAsB9kG,EAAAA,GAAAA,cAACyiG,GAAgB,CAAC98I,OAAQm/I,IACjD9kG,EAAAA,GAAAA,cAAC4iG,GAAwB,CAAC1pI,MAAO6rI,IACjC/kG,EAAAA,GAAAA,cAAC0iG,GAAY,CAAC/8I,OAAQujC,EAAoBuc,QAAS4gG,KACnDrmG,EAAAA,GAAAA,cAAC2iG,GAAY,CAACh9I,OAAQq/I,EAAoBv/F,QAAS6gG,KACnDtmG,EAAAA,GAAAA,cAAC6iG,GAAkB,CAACx6H,OAAQm7H,IAC5BxjG,EAAAA,GAAAA,cAACijG,GAAc,CAACt9I,OAAQs+I,EAAsBz8D,WAAYm/D,KACtD,K,kEC5fV,MAqHA,IAAehnG,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KACjBjgD,IACQ,CACL4lJ,iBAAkB5lJ,EAAOqY,YAHX4nC,EAnH0B7/C,IAGxC,IAHyC,SAC7CylJ,EAAQ,iBACRD,GACDxlJ,EACC,MAAM,aACJyb,EAAY,QACZiqI,EAAO,wBACPhqI,EAAuB,2BACvBiqI,IACEjtI,EAAAA,EAAAA,OAEE,qBACJ2C,EAAoB,aACpBO,EAAY,UACZ5B,GACEwrI,EAEE1gJ,GAAOo5C,EAAAA,GAAAA,MACN0nG,EAAiBC,IAAsB1oG,EAAAA,EAAAA,IAAiB,KACxD2oG,EAAoBC,IAAyB5oG,EAAAA,EAAAA,KAAS,IACtD6oG,EAAqBC,EAAyBC,IAA4B5lG,EAAAA,GAAAA,IAAQ,IACnF,aAAE2L,IAAiBG,EAAAA,GAAAA,GAAkBq5F,IAE3CvkG,EAAAA,GAAAA,GAAWykG,EAA4B/pI,EAAeA,EAAetP,KAAKC,WAAQ9L,GAElF,MAAM0lJ,GAAmB7kG,EAAAA,EAAAA,KAAY,KACnCukG,EAAmB,GAAG,GACrB,IAEGO,GAAe9kG,EAAAA,EAAAA,KAAarpC,SACXxX,IAAjBmb,GAKJiqI,EAAmB,KACnBrqI,EAAAA,EAAAA,IAAevD,GAAUzB,KAAKiF,GAAc,KAC1CC,IACAmqI,EAAmB/gJ,EAAK,sBAAsB,KAP9C+gJ,EAAmB/gJ,EAAK,aAQxB,GACD,CAACA,EAAM8W,KAEV+/B,EAAAA,EAAAA,KAAU,UACal7C,IAAjBmb,EACFiqI,EAAmB/gJ,EAAK,cACU,IAAzBuW,GACTwqI,EAAmB,GACrB,GACC,CAACjqI,EAAc9W,EAAMuW,IAExB,MAAMgrI,GAAuB/kG,EAAAA,EAAAA,KAAY,KACvC4kG,IACAR,EAAQ,CAAEY,cAAc,GAAO,GAC9B,CAACJ,EAA0BR,IAE9B,GAAKz5F,EAoBL,OACE1P,EAAAA,GAAAA,cAAA,OAAKrsB,UC7GmB,wBD8GtBqsB,EAAAA,GAAAA,cAAA,OAAKrsB,UC9GkD,uBD8GvBiuB,IAAKr5C,EAAKs5C,MAAQ,WAAQ39C,GACxD87C,EAAAA,GAAAA,cAACgqG,GAAAA,EAAuB,CACtBrmE,OAAQsmE,GAAAA,EAAAA,KACRC,WAAYC,GACZhoG,KAnFQ,IAoFRxuB,UCnHiF,yBDsHnFqsB,EAAAA,GAAAA,cAACoqG,GAAAA,EAAY,CACX3tG,IAAI,gBACJ4tG,kBAAgB,EAChBC,8BAA4B,EAC5B7sI,UAAWA,EACXhD,MAAO4uI,EACPv9F,YAAavjD,EAAK,qCAClBgiJ,YAAahiJ,EAAK,QAClBiiJ,WAAYZ,EACZa,kBAAmBlB,EACnBmB,UAAQ,EACRC,2BAA4BnB,EAC5BoB,SAAUf,IApCd7pG,EAAAA,GAAAA,cAAA,OAAKrsB,UC9F8G,wBD+FjHqsB,EAAAA,GAAAA,cAAA,SACEA,EAAAA,GAAAA,cAAC6qG,GAAAA,EAAI,CAACnpG,QAASgoG,GAAyB,WAAe,IAAI,wCAG7D1pG,EAAAA,GAAAA,cAAA,SACEA,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CAACH,MAAM,cAAcI,KAAK,OAAO8kB,QAAM,EAACvlB,QAASgoG,GACrDnhJ,EAAK,8BAmCZy3C,EAAAA,GAAAA,cAAC4c,GAAAA,EAAa,CACZj3D,OAAQ8jJ,EACRhkG,QAASkkG,EACTxiJ,KAAMoB,EAAK,mBACXs0D,aAAct0D,EAAK,0BACnBu0D,eAAgBgtF,EAChB5iF,sBAAoB,IAElB,KEzIN3sD,EAAAA,KAEFC,QAAQ6f,IAAI,+BAGd,MAAQ3e,UAAU,eAAEC,IAAgB,gBAAEkhB,KAAoBjwB,EAAAA,EAAAA,MACrDiwB,IAAoBlhB,IAAmBmvI,EAAAA,KAC1C3uI,EAAAA,EAAAA,MAAa6C,S","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.module.scss?16ed","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/ui/Toggle.module.scss?0590","webpack://telegram-t/./src/components/ui/Toggle.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/util/permanentWebVersion.ts","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/util/Deferred.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessageSuggestedAvatar.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/helpers/webpageType.ts","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useMessageTranslation.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/hooks/useAuthorWidth.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/lib/cleanDocsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useAttachmentModal.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/MessageLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== id\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  window.open(createMessageHashUrl(chatId, 'thread', threadId), '_blank');\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\nimport type {\n  TabState, GlobalState, ActionReturnType,\n} from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  replaceTabThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectChatScheduledMessages,\n  selectTabState,\n  selectRequestedTranslationLanguage,\n} from '../../selectors';\nimport { compact, findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, threadId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openChat({\n      id: chatId,\n      threadId,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const byChatId = tabState.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  const byChatId = selectTabState(global, tabId).activeDownloads.byChatId;\n  const newByChatId: TabState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return updateTabState(global, {\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: [...(tabState.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, id, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = selectRequestedTranslationLanguage(global, chatId, id, tabId);\n\n  return updateTabState(global, {\n    messageLanguageModal: { chatId, messageId: id, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    messageLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  const resultText = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyHtmlToClipboard(result.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  APP_VERSION, DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectTabState,\n} from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { compact, unique } from '../../../util/iteratees';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\nimport * as langProvider from '../../../util/langProvider';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(PAGE_TITLE);\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: playbackRate || tabState.mediaViewer.playbackRate || global.mediaViewer.lastPlaybackRate,\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, setupPasscode,\n} from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport type { ActionReturnType } from '../../types';\nimport { signalPasscodeHash } from '../../../util/establishMultitabRole';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  signalPasscodeHash();\n  global = getGlobal();\n  global = updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  });\n  setGlobal(global);\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import { addActionHandler } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (id) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId: id,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n    },\n  }, tabId);\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceThreadParam,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectUser,\n  selectUserFullInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport {\n  getMessageOriginalId,\n  getUserFullName,\n  isDeletedUser,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport { translate } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n\n  const replyingToTopId = chat.isForum\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: replyingToId,\n    replyingToTopId,\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    }, tabId);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        }, tabId);\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          }, tabId);\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      }, tabId);\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      }, tabId);\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const { text, entities, tabId = getCurrentTabId() } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, draft, shouldForce,\n  } = payload;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  draft.isLocal = true;\n  draft.shouldForce = shouldForce;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (result) {\n    draft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, localOnly, shouldForce,\n  } = payload;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  const newDraft: ApiDraft | undefined = shouldForce ? { shouldForce, text: '' } : undefined;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { message: text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const { isSilent, scheduledAt, tabId = getCurrentTabId() } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      toThreadId,\n      messages: realMessages,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyingToTopId: toThreadId,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      }, tabId);\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const originChannelId = selectThreadOriginChat(global, chatId, threadId)?.id;\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  global = getGlobal();\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, chatId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingList! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n  groupedId?: string;\n},\n...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  global = getGlobal();\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && threadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByUserIds: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    let fullInfo = selectUserFullInfo(global, chatId);\n    if (!fullInfo) {\n      const { accessHash } = user;\n      const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n      user = result?.user;\n      fullInfo = result?.fullInfo;\n    }\n\n    if (fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectLanguageCode(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      views: update.views,\n      forwards: update.forwards,\n    });\n\n    const message = selectChatMessage(global, chatId, update.id);\n    if (!message) return;\n\n    const repliesChatId = message.repliesThreadInfo?.chatId;\n    const threadId = message.repliesThreadInfo?.threadId;\n    if (!repliesChatId || !threadId) return;\n\n    global = updateThreadInfo(global, repliesChatId, threadId, {\n      messagesCount: update.messagesCount,\n      recentReplierIds: update.recentReplierIds,\n      lastMessageId: update.maxId,\n      lastReadInboxMessageId: update.readMaxId,\n    });\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectTabState, selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { translate } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiChat, ApiTopic, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateTopics,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery, selectTabState } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        localChats, localUsers, globalChats, globalUsers,\n      } = result;\n\n      if (localChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n      }\n\n      if (localUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: localChats.map(({ id }) => id),\n          userIds: localUsers.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread, updateThreadInfo,\n  updateThreadInfos,\n  updateUsers,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId, selectReplyingToId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport { updateTabState } from '../../reducers/tabs';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = {\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n          replyingToId: selectReplyingToId(global, chatId, Number(threadId)),\n        };\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = allMessages.map(({ id }) => id);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        if (threadInfo?.originChannelId) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, threadInfo);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        if (result.repliesThreadInfos.length) {\n          global = updateThreadInfos(global, currentChatId, result.repliesThreadInfos);\n        }\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/langProvider';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { translate } from '../../../util/langProvider';\nimport { addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  if ((hasChangedAvatarHash || hasChangedProfilePhoto || hasChangedFallbackPhoto || hasChangedPersonalPhoto)\n    && user.photos?.length) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, profileId);\n  if (user && !fullInfo?.profilePhoto) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n\n    user = result.user;\n    fullInfo = result.fullInfo;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n  const fallbackPhoto = fullInfo?.fallbackPhoto;\n  const personalPhoto = fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n","import type { GlobalState, TabArgs } from '../types';\nimport type { InlineBotSettings } from '../../types';\nimport { updateTabState } from './tabs';\nimport { selectTabState } from '../selectors';\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser, selectThreadTopMessageId, selectUserFullInfo,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { translate } from '../../../util/langProvider';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, threadId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedContact(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, MAIN_THREAD_ID, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    botId = message.viaBotId || message.senderId;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n  const replyingTo = selectReplyingToId(global, chatId, threadId);\n  let replyingToTopId: number | undefined;\n\n  if (replyingTo && threadId !== MAIN_THREAD_ID) {\n    replyingToTopId = selectThreadTopMessageId(global, chatId, threadId)!;\n  }\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockContact', bot.id, bot.accessHash);\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: translate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive && !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  await loadAttachBots(global, hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(global, bot, isEnabled, isWriteAllowed);\n});\n\nasync function toggleAttachBot<T extends GlobalState>(\n  global: T, bot: ApiUser, isEnabled: boolean, isWriteAllowed?: boolean,\n) {\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n  global = getGlobal();\n  await loadAttachBots(global);\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, bot, url, startParam, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isFromBotMenu = !bot;\n  if (!isFromBotMenu && !global.attachMenu.bots[bot.id]) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload,\n        },\n      },\n    }, tabId);\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId, threadId, tabId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId: isFromBotMenu ? chatId : bot.id,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n    tabId,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  await toggleAttachBot(global, botUser, true, isWriteAllowed);\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, threadId = MAIN_THREAD_ID, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyingToTopId: threadId,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice, selectTabState,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\nimport { selectTabState } from '../selectors';\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ userId }) => userId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      userId: currentUserId!,\n      reaction,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  isSameReaction, getUserReactions, isMessageLocal, getDocumentMediaHash,\n} from '../../helpers';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation), ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const tabState = selectTabState(global, tabId);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    const newActiveReactions = hasReaction ? omit(tabState.activeReactions, [messageId]) : {\n      ...tabState.activeReactions,\n      [messageId]: [\n        ...(tabState.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = updateTabState(global, {\n      activeReactions: newActiveReactions,\n    }, tabId);\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { messageId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = tabState.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [messageId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: [],\n  };\n  setGlobal(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  updateStatistics, updateMessageStatistics, updateStatisticsGraph, addUsers,\n} from '../../reducers';\nimport { selectChatMessages, selectChat, selectChatFullInfo } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  leaveChat,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectThreadParam,\n  selectChatFullInfo,\n  selectTabState,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction, ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  deleteTopic,\n  updateMessageTranslations,\n  clearMessageTranslation,\n  removeChatFromChatLists,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsServiceChatReady,\n  selectThreadIdFromMessage,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action)) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo && !isLocal) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: tabState.activeEmojiInteractions?.length || 0,\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (threadInfo.topMessageId === threadId && !chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = newThreadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId: getCurrentTabId() });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message)) {\n      global = updateThreadInfo(global, chatId, threadInfo.threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport {\n  deleteContact, replaceUserStatuses, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUserFullInfo } from '../../selectors';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          // TODO Do not display modal if premium is bought from another device\n          if (update.user.isPremium) actions.openPremiumModal({ isSuccess: true, tabId });\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(global, update.id);\n      } else {\n        return removeBlockedContact(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.setReplyingToId({ messageId: undefined, tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport {\n  addNotifyException, updateChat, updateTopic, updateNotifySettings,\n} from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/windowEnvironment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage, selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nimport { useLastCallback } from './useLastCallback';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  const lastCallback = useLastCallback(callback);\n\n  useEffect(() => onBeforeUnload(lastCallback), [lastCallback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HAg4STRlxDV3frYuABYr\",\"particle\":\"HO3tML0GAC9vTH28baKB\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './CustomEmojiEffect.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji | ApiEmojiStatus;\n  className?: string;\n  isLottie?: boolean;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomEmojiEffect: FC<OwnProps> = ({\n  reaction,\n  isLottie,\n  className,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(!isLottie ? stickerHash : undefined);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData && !isLottie) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        if (isLottie) {\n          return (\n            <CustomEmoji\n              documentId={reaction.documentId}\n              className={styles.particle}\n              style={style}\n              withSharedAnimation\n            />\n          );\n        }\n\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiEffect);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default memo(StatusPickerMenuAsync);\n","import React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useTimeout from '../../../hooks/useTimeout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport Button from '../../ui/Button';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../middle/message/CustomEmojiEffect';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"pHTSMORJ7J73wlJmXnNb\",\"widget\":\"bCgS149_amzM_wXYhOwW\",\"min\":\"EIngX7JB2IwA5XnGAlpo\",\"mid\":\"bNWGD8kaT2IHf7HrmLoA\",\"max\":\"FiCjIrDiSiJDbaafBQ8V\",\"filler\":\"KAFaJ8frkI3Uu05TmeTH\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './Toggle.module.scss';\n\ninterface OwnProps {\n  value: 'min' | 'mid' | 'max';\n}\n\nfunction Toggle({ value }: OwnProps) {\n  return (\n    <div className={buildClassName(styles.root, 'Toggle')} aria-hidden>\n      <i className={buildClassName(styles.filler, styles[value])} />\n      <i className={buildClassName(styles.widget, styles[value])} />\n    </div>\n  );\n}\n\nexport default memo(Toggle);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  APP_NAME, APP_VERSION,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { IS_PWA } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport {\n  selectCurrentMessageList, selectIsCurrentUserPremium, selectTabState, selectTheme,\n} from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport StatusButton from './StatusButton';\nimport Toggle from '../../ui/Toggle';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    isAuthRememberMe?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'archiveSettings'>\n  & Pick<TabState, 'canInstall'>;\n\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  onSearchQuery,\n  isClosingSearch,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  isAuthRememberMe,\n  canInstall,\n  archiveSettings,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n    openUrl,\n    updatePerformanceSettings,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  }, [hasPasscode]);\n\n  useHotkeys(isAuthRememberMe ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  }, [setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  }, [animationLevel, setSettingOption]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleBugReportClick = useCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  }, [openUrl]);\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid')\n    : 'min';\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={WEBK_VERSION_URL}\n          onClick={handleSwitchToWebK}\n        >\n          Switch to K Version\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  ), [\n    animationLevelValue, archivedUnreadChatsCount, canInstall, handleAnimationLevelChange, handleBugReportClick, lang,\n    handleChangelogClick, handleDarkModeToggle, handleOpenTipsChat, handleSelectSaved, handleSwitchToWebK,\n    onSelectArchived, onSelectContacts, onSelectSettings, theme, withOtherVersions, archiveSettings,\n  ]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          {menuItems}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      currentUserId, connectionState, isSyncing, archiveSettings,\n    } = global;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      isAuthRememberMe: global.authRememberMe,\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite } from '../../../api/types';\nimport type { SettingsScreens, LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../../global/types';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  archiveSettings,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    const global = getGlobal();\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(global, id);\n\n      const contextActions = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n            } else {\n              openShareChatFolderModal({\n                folderId: id,\n              });\n            }\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [displayedFolders, folderCountersById, lang, maxFolders, folderInvitesById, maxFolderInvites]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        lastSyncTime={lastSyncTime}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={hasArchivedChats && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n      )}\n    >\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      currentUserId,\n      lastSyncTime,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      archiveSettings,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\nimport ForumPanel from './ForumPanel';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  }, [closeForumPanel, onContentChange]);\n\n  const handleUpdateClick = useCallback(() => {\n    window.location.reload();\n  }, []);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\n\nimport { IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME } from '../../util/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, isFirstChatFolderActive, setGlobalSearchClosing, resetChatCreation, setGlobalSearchQuery,\n    setGlobalSearchDate, setGlobalSearchChatId, settingsScreen, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  const handleTopicSearch = useCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  }, [forumPanelChatId, setGlobalSearchChatId, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || (isFirstChatFolderActive && !isChatOpen && !isForumPanelOpen)\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleArchivedChats = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  }, []);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_PWA && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isUpdateAvailable={isUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={resizeRef}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      afterChildren={(\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n    >\n      {renderContent}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n    } = tabState;\n    const {\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport {\n  useState, useEffect, useLayoutEffect, useCallback,\n} from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useCallback((width?: number) => {\n    if (!elementRef.current) {\n      return;\n    }\n\n    const widthPx = width ? `${width}px` : '';\n    elementRef.current.style.width = widthPx;\n    if (cssPropertyName) {\n      elementRef.current.style.setProperty(cssPropertyName, widthPx);\n    }\n  }, [cssPropertyName, elementRef]);\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinnedMessageBorder\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinned-message-border-wrapper-1\":\"QpNjYZM0KJrGrocs69__\",\"pinnedMessageBorderWrapper1\":\"QpNjYZM0KJrGrocs69__\",\"pinned-message-border-wrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinnedMessageBorderWrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinned-message-border-mark\":\"YX_iyQuDtga6uKXRQqR0\",\"pinnedMessageBorderMark\":\"YX_iyQuDtga6uKXRQqR0\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useLayoutEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TMOjo7XfD1ZiiuRtfpkm\",\"pinnedMessage\":\"uhn_g6FmUELuGJrCm45w\",\"messageText\":\"bSvmca5kaTIUh3yJBxnF\",\"loading\":\"d7XDT4Keip1KHh7mcCv9\",\"pinListIcon\":\"DusHAy2Lx0SlaPpVAb_o\",\"pinListIconHidden\":\"jSVbc8Hb7PjitJujB_dQ\",\"no-hover\":\"jeTsUEkDCkzGUVwy6lrL\",\"noHover\":\"jeTsUEkDCkzGUVwy6lrL\",\"messageTextTransition\":\"ugsKEK4Xb166oFMP8hHy\",\"withMedia\":\"FBCNFm307_rxATSHPSiN\",\"title\":\"q9_FnsHlndM1hZqZjxjM\",\"summary\":\"WRuyhyQK6mv28Mz8iK28\",\"inlineButton\":\"kXRuktM2s7UN91zOl0Tx\",\"pictogramTransition\":\"EK6juGhJwhsLLm4Aag2F\",\"pinnedThumb\":\"RFnmHP92f6CwfuR2Upaw\",\"pinnedThumbImage\":\"JfPOYkOcaMjS7Y5rsHZ4\",\"fade-in\":\"IkKnzordTRzWWtIbLHdD\",\"fadeIn\":\"IkKnzordTRzWWtIbLHdD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler\n          && <img className={styles.pinnedThumbImage} src={srcUrl} width={width} height={height} alt=\"\" />}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}>\n          <div className={styles.title} dir=\"auto\">\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary lang={lang} message={message} noEmoji={Boolean(mediaThumbnail)} />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import { getAverageColor, getColorLuma } from './colors';\n\nconst LUMA_THRESHOLD = 240;\n\nexport function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      const averageColor = await getAverageColor(img.src);\n      const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx2D = canvas.getContext('2d')!;\n        ctx2D.fillStyle = fillColor;\n        ctx2D.fillRect(0, 0, canvas.width, canvas.height);\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          ctx2D.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nasync function steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  const averageColor = await getAverageColor(img.src);\n  const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n  ctx.fillStyle = fillColor;\n  ctx.globalCompositeOperation = 'destination-over';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useCallback, useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectTabState, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const updatePlaybackRate = useCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  }, [setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const handlePlaybackClick = useCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  }, [handleContextMenuClose, isPlaybackRateActive, playbackRate, updatePlaybackRate]);\n\n  const PlaybackRateButton = useCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  }, [\n    handleBeforeContextMenu, handleContextMenu, handleContextMenuClose, handlePlaybackClick, isContextMenuOpen,\n    isMobile, isPlaybackRateActive, playbackRate,\n  ]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash: accessHash! });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectTabState,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\nimport { useFastClick } from '../../hooks/useFastClick';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isComments?: boolean;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (lastSyncTime && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const { handleClick: handleHeaderClick, handleMouseDown: handleHeaderMouseDown } = useFastClick(() => {\n    openChatWithInfo({ id: chatId, threadId });\n  });\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  }, [pinMessage]);\n\n  const handlePinnedMessageClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  }, [pinnedMessageIds, pinnedMessageId, onFocusPinnedMessage, chatId, threadId]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  }, [openChat, chatId, threadId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    isMobile, isSelectModeActive, messageListType, currentTransitionKey, setBackButtonActive, isTablet,\n    shouldShowCloseButton,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage), undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              lang(isComments ? 'CommentsCount' : 'Replies', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div\n          className=\"chat-info-wrapper\"\n          onClick={handleHeaderClick}\n          onMouseDown={handleHeaderMouseDown}\n        >\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n        isComments: Boolean(threadInfo?.originChannelId),\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { useCallback } from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport {\n  useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\n\nimport { LOCAL_MESSAGE_MIN_ID } from '../../../config';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 100;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  const toggleScrollToolsRef = useStateRef(toggleScrollTools);\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollToolsRef.current!();\n    }\n  }, [isReady, toggleScrollToolsRef]);\n\n  const freezeShortly = useCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [freezeForFab, freezeForNotch, unfreezeForFab, unfreezeForNotch]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions, REM } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isOwnMessage,\n  getMessageVideo,\n  getMessageWebPageVideo,\n} from '../../../../global/helpers';\n\nexport const MIN_MEDIA_WIDTH_WITH_COMMENTS = 20 * REM;\nexport const MIN_MEDIA_WIDTH_WITH_TEXT = 15 * REM;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 20 * REM;\nconst MIN_MEDIA_WIDTH = 7 * REM;\nexport const MIN_MEDIA_HEIGHT = 5 * REM;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(\n  message: ApiMessage, asForwarded?: boolean, noAvatars?: boolean, isMobile?: boolean,\n) {\n  const isOwn = isOwnMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, asForwarded, isWebPagePhoto, noAvatars, isMobile)\n    : calculateVideoDimensions(video!, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { requestForcedReflow, requestMeasure, requestMutation } from '../../../../lib/fasterdom/fasterdom';\n\nimport type { FocusDirection } from '../../../../types';\n\nimport animateScroll from '../../../../util/animateScroll';\n\n// This is used when the viewport was replaced.\nconst BOTTOM_FOCUS_OFFSET = 500;\nconst RELOCATED_FOCUS_OFFSET = 750;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  messageId: number,\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n  isJustAdded?: boolean,\n) {\n  const isRelocatedRef = useRef(!isJustAdded);\n\n  useLayoutEffect(() => {\n    const isRelocated = isRelocatedRef.current;\n    isRelocatedRef.current = false;\n\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n      // `noFocusHighlight` is always called with “scroll-to-bottom” buttons\n      const isToBottom = noFocusHighlight;\n\n      const exec = () => animateScroll(\n        messagesContainer,\n        elementRef.current!,\n        isToBottom ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? (isToBottom ? BOTTOM_FOCUS_OFFSET : RELOCATED_FOCUS_OFFSET) : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n        true,\n      );\n\n      if (isRelocated) {\n        // We need this to override scroll setting from Message List layout effect\n        requestForcedReflow(exec);\n      } else {\n        requestMeasure(() => {\n          requestMutation(exec()!);\n        });\n      }\n    }\n  }, [\n    elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer,\n  ]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { createConnector } from './PostMessageConnector';\nimport Deferred from './Deferred';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nsetTimeout(initWorker, WORKER_INIT_DELAY);\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","export default class Deferred<T = void> {\n  promise: Promise<T>;\n\n  reject!: (reason?: any) => void;\n\n  resolve!: (value: T | PromiseLike<T>) => void;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.reject = reject;\n      this.resolve = resolve;\n    });\n  }\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage } from '../../api/types';\nimport type { TextPart } from '../../types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { getMessageMediaHash } from '../../global/helpers';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Avatar from '../common/Avatar';\nimport CropModal from '../ui/CropModal';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ntype OwnProps = {\n  message: ApiMessage;\n  renderContent: () => TextPart | undefined;\n};\n\nconst ActionMessageSuggestedAvatar: FC<OwnProps> = ({\n  message,\n  renderContent,\n}) => {\n  const {\n    openMediaViewer, uploadProfilePhoto, showNotification,\n  } = getActions();\n\n  const { isOutgoing } = message;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n  const suggestedPhotoUrl = useMedia(getMessageMediaHash(message, 'full'));\n  const isVideo = message.content.action!.photo?.isVideo;\n\n  const showAvatarNotification = useCallback(() => {\n    showNotification({\n      title: lang('ApplyAvatarHintTitle'),\n      message: lang('ApplyAvatarHint'),\n      action: {\n        action: 'requestNextSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  }, [lang, showNotification]);\n\n  const handleSetSuggestedAvatar = useCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  }, [showAvatarNotification, uploadProfilePhoto]);\n\n  const handleCloseCropModal = useCallback(() => {\n    setCropModalBlob(undefined);\n  }, []);\n\n  const handleSetVideo = useCallback(async () => {\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const photo = message.content.action!.photo!;\n    const blobUrl = await mediaLoader.fetch(`videoAvatar${photo.id}?size=u`, ApiMediaFormat.BlobUrl);\n    const blob = await fetch(blobUrl).then((r) => r.blob());\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  }, [closeVideoModal, message.content.action, showAvatarNotification, uploadProfilePhoto]);\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetch(suggestedPhotoUrl).then((r) => r.blob()));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        mediaId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <span className=\"action-message-suggested-avatar\" tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        photo={message.content.action!.photo}\n        loopIndefinitely\n        withVideo={isVideo}\n        size=\"jumbo\"\n      />\n      <span>{renderContent()}</span>\n\n      <span className=\"action-message-button\">{lang(isVideo ? 'ViewVideoAction' : 'ViewPhotoAction')}</span>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('SuggestedVideo')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        textParts={renderContent()}\n      />\n    </span>\n  );\n};\n\nexport default memo(ActionMessageSuggestedAvatar);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker, ApiTopic,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n  selectTopicFromMessage,\n  selectTabState,\n  selectCanPlayAnimatedEmojis,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\nimport ActionMessageSuggestedAvatar from './ActionMessageSuggestedAvatar';\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId?: number;\n  messageListType?: MessageListType;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isJustAdded?: boolean;\n  isLastInList?: boolean;\n  isInsideTopic?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n  onPinnedIntersectionChange?: PinnedIntersectionChangedCallback;\n};\n\ntype StateProps = {\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  topic?: ApiTopic;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  isEmbedded,\n  appearanceOrder = 0,\n  isJustAdded,\n  isLastInList,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  isInsideTopic,\n  topic,\n  memoFirstUnreadIdRef,\n  canPlayAnimatedEmojis,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onPinnedIntersectionChange,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.id, message.chatId, isFocused, focusDirection, noFocusHighlight, isJustAdded);\n\n  useEffect(() => {\n    if (!message.isPinned) return undefined;\n\n    return () => {\n      onPinnedIntersectionChange?.({ viewportPinnedIdsToRemove: [message.id], isUnmount: true });\n    };\n  }, [onPinnedIntersectionChange, message.isPinned, message.id]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n  const isSuggestedAvatar = message.content.action?.type === 'suggestProfilePhoto' && message.content.action!.photo;\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const renderContent = useCallback(() => {\n    return renderActionMessageText(\n      lang,\n      message,\n      senderUser,\n      senderChat,\n      targetUsers,\n      targetMessage,\n      targetChatId,\n      topic,\n      { isEmbedded },\n      observeIntersectionForLoading,\n      observeIntersectionForPlaying,\n    );\n  },\n  [\n    isEmbedded, lang, message, observeIntersectionForLoading, observeIntersectionForPlaying, senderChat,\n    senderUser, targetChatId, targetMessage, targetUsers, topic,\n  ]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  // TODO Refactoring for action rendering\n  const shouldSkipRender = isInsideTopic && message.content.action?.text === 'TopicWasCreatedAction';\n  if (shouldSkipRender) {\n    return <span ref={ref} />;\n  }\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{renderContent()}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play={canPlayAnimatedEmojis}\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    (isGift || isSuggestedAvatar) && 'centered-action',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    !isGift && !isSuggestedAvatar && 'in-one-row',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      data-is-pinned={message.isPinned || undefined}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isSuggestedAvatar && <span className=\"action-message-content\">{renderContent()}</span>}\n      {isGift && renderGift()}\n      {isSuggestedAvatar && (\n        <ActionMessageSuggestedAvatar\n          message={message}\n          renderContent={renderContent}\n        />\n      )}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, threadId }): StateProps => {\n    const {\n      chatId, senderId, replyToMessageId, content,\n    } = message;\n\n    const userId = senderId;\n    const { targetUserIds, targetChatId } = content.action || {};\n    const targetMessageId = replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = threadId ? selectIsMessageFocused(global, message, threadId) : false;\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n    } = (isFocused && selectTabState(global).focusedMessage) || {};\n\n    const chat = selectChat(global, chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n    const topic = selectTopicFromMessage(global, message);\n\n    return {\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      topic,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n      }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat,\n} from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n  getMessageIsSpoiler,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\nimport MediaSpoiler from './MediaSpoiler';\n\nimport './EmbeddedMessage.scss';\nimport { useFastClick } from '../../hooks/useFastClick';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n  const isSpoiler = Boolean(message && getMessageIsSpoiler(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message && handleClick}\n      onMouseDown={message && handleMouseDown}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected, isSpoiler)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n  isSpoiler?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className={buildClassName('embedded-thumb', isRoundVideo && 'round')}>\n      {!isSpoiler && (\n        <img\n          src={srcUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className=\"pictogram\"\n          draggable={false}\n        />\n      )}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './MessageMeta.scss';\nimport { useFastClick } from '../../../hooks/useFastClick';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, undefined, lang.timeFormat);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon icon-reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <i className=\"icon icon-pinned-message message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getActions } from '../../../global';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, withEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const openModal = useCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet, sticker]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [\n    hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect,\n    sticker.stickerSetInfo, withEffect,\n  ]);\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n        cacheBuster={lastSyncTime}\n      />\n      {hasEffect && withEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport safePlay from '../../../util/safePlay';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [chatId, emoji, interactWithAnimatedEmoji, isOwn, messageId, play, sendInteractionBunch, size]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../../util/windowEnvironment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nexport default function useBlurredMediaThumbRef(\n  message: ApiMessage,\n  isDisabled?: boolean | string,\n  forcedUri?: string,\n) {\n  const { isMobile } = useAppLayout();\n\n  const dataUri = forcedUri || getMessageMediaThumbDataUri(message);\n\n  return useCanvasBlur(\n    dataUri,\n    Boolean(isDisabled),\n    isMobile && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import React, {\n  useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions, MIN_MEDIA_HEIGHT } from './helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  forcedWidth?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  asForwarded?: boolean;\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  forcedWidth,\n  size = 'inline',\n  dimensions,\n  asForwarded,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n\n  const withBlurredBackground = Boolean(forcedWidth);\n  const [withThumb] = useState(!fullMediaData);\n  const noThumb = Boolean(fullMediaData);\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground);\n  const thumbClassNames = useMediaTransition(!noThumb);\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(photo.isSpoiler);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'), !isDownloading, getMessageMediaFormat(message, 'download'),\n  );\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [fullMediaData, hideSpoiler, isSpoilerShown, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [shouldAffectAppendix, fullMediaData, isOwn, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, asForwarded, noAvatars, isMobile);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n    height < MIN_MEDIA_HEIGHT && 'fix-min-height',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = size === 'inline' ? `height: ${height}px;${dimensionsStyle}` : undefined;\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n      <img\n        src={fullMediaData}\n        className={buildClassName('full-media', withBlurredBackground && 'with-blurred-bg')}\n        alt=\"\"\n        style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n        draggable={!isProtected}\n      />\n      {withThumb && (\n        <canvas ref={thumbRef} className={buildClassName('thumbnail', thumbClassNames)} />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton\n        && <i className={buildClassName('icon', 'icon-download', downloadButtonClassNames)} />}\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { MIN_MEDIA_HEIGHT } from './helpers/mediaDimensions';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  forcedWidth?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  forcedWidth,\n  lastSyncTime,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(video.isSpoiler);\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(Boolean(canAutoPlay && !isSpoilerShown));\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'), lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n  const hasThumb = Boolean(thumbDataUri);\n  const withBlurredBackground = Boolean(forcedWidth);\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading && lastSyncTime;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview, undefined, lastSyncTime);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [\n    isUploading, isDownloading, fullMediaData, isPlayAllowed, isSpoilerShown, onClick, message, onCancelUpload,\n    hideSpoiler,\n  ]);\n\n  const className = buildClassName(\n    'media-inner dark',\n    !isUploading && 'interactive',\n    height < MIN_MEDIA_HEIGHT && 'fix-min-height',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className={buildClassName('full-media', withBlurredBackground && 'with-blurred-bg')}\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n          style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames, withBlurredBackground && 'with-blurred-bg')}\n        alt=\"\"\n        style={forcedWidth ? `width: ${forcedWidth}px;` : undefined}\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon', 'icon-large-play', playButtonClassNames)} />\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar\n        size=\"large\"\n        user={user}\n        text={firstName || lastName}\n      />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    const user = selectUser(global, contact.userId);\n\n    return {\n      user,\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, useRef, useLayoutEffect,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useLayoutEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + getServerTimeOffset(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { getWebpageButtonText } from './helpers/webpageType';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Button from '../../ui/Button';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const { openTelegramLink } = getActions();\n  const webPage = getMessageWebPage(message);\n  const { isMobile } = useAppLayout();\n\n  const lang = useLang();\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  const handleQuickButtonClick = useCallback(() => {\n    if (!webPage) return;\n    openTelegramLink({\n      url: webPage.url,\n    });\n  }, [webPage]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n    type,\n  } = webPage;\n  const quickButtonLangKey = !inPreview ? getWebpageButtonText(type) : undefined;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message, undefined, undefined, isMobile);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n    quickButtonLangKey && 'with-quick-button',\n  );\n\n  function renderQuickButton(langKey: string) {\n    return (\n      <Button\n        className=\"WebPage--quick-button\"\n        size=\"tiny\"\n        color=\"translucent-bordered\"\n        onClick={handleQuickButtonClick}\n      >\n        {lang(langKey)}\n      </Button>\n    );\n  }\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      <div className=\"WebPage--content\">\n        {photo && !video && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersection}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoad}\n            size={isSquarePhoto ? 'pictogram' : 'inline'}\n            asForwarded={asForwarded}\n            nonInteractive={!isMediaInteractive}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onClick={isMediaInteractive ? handleMediaClick : undefined}\n            onCancelUpload={onCancelMediaTransfer}\n          />\n        )}\n        {isArticle && (\n          <div className=\"WebPage-text\">\n            <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n            {!inPreview && title && (\n              <p className=\"site-title\">{renderText(title)}</p>\n            )}\n            {truncatedDescription && (\n              <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n            )}\n          </div>\n        )}\n        {!inPreview && video && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersection!}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoad}\n            canAutoPlay={canAutoPlay}\n            lastSyncTime={lastSyncTime}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            onClick={isMediaInteractive ? handleMediaClick : undefined}\n            onCancelUpload={onCancelMediaTransfer}\n          />\n        )}\n      </div>\n      {quickButtonLangKey && renderQuickButton(quickButtonLangKey)}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","// https://github.com/telegramdesktop/tdesktop/blob/3da787791f6d227f69b32bf4003bc6071d05e2ac/Telegram/SourceFiles/history/view/history_view_view_button.cpp#L51\nexport function getWebpageButtonText(type?: string) {\n  switch (type) {\n    case 'telegram_channel_request':\n    case 'telegram_megagroup_request':\n    case 'telegram_chat_request':\n      return 'lng_view_button_request_join';\n    case 'telegram_message':\n      return 'lng_view_button_message';\n    case 'telegram_bot':\n      return 'lng_view_button_bot';\n    case 'telegram_voicechat':\n      return 'lng_view_button_voice_chat';\n    case 'telegram_livestream':\n      return 'lng_view_button_voice_chat_channel';\n    case 'telegram_megagroup':\n    case 'telegram_chat':\n      return 'lng_view_button_group';\n    case 'telegram_channel':\n      return 'lng_view_button_channel';\n    case 'telegram_user':\n      return 'lng_view_button_user';\n    case 'telegram_botapp':\n      return 'lng_view_button_bot_app';\n    case 'telegram_chatlist':\n      return 'ViewChatList';\n    default:\n      return undefined;\n  }\n}\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground, photoUrl);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n                crossOrigin=\"anonymous\"\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={forcedWidth || photo.dimensions?.width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  lastSyncTime,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  }, [chatId, id, loadExtendedMedia]);\n\n  useInterval(refreshExtendedMedia, lastSyncTime ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  }, [chatId, id, openInvoice]);\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffectWithPrevDeps(([prevShouldRenderText]) => {\n    if (shouldRenderText) {\n      if (!prevShouldRenderText) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (mapBlobUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.classList.add('has-appendix-thumb');\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    }\n  }, [shouldRenderText, isOwn, isInSelectMode, isSelected, theme, mapBlobUrl]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={iconSrc} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useSignal from '../../../hooks/useSignal';\nimport { useThrottledSignal } from '../../../hooks/useAsyncResolvers';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nconst PROGRESS_THROTTLE = 16; // Min period needed for `playerEl.currentTime` to update\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState(false);\n\n  const [getProgress, setProgress] = useSignal(0);\n  const getThrottledProgress = useThrottledSignal(getProgress, PROGRESS_THROTTLE);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [setProgress, isActivated, getThrottledProgress]);\n\n  useLayoutEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - getThrottledProgress() * circumference;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n  }, [isActivated, getThrottledProgress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    requestMutation(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, [setProgress]);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [setProgress]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openComments } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openComments({ id: chatId, threadId, originChannelId });\n  }, [openComments, chatId, threadId, originChannelId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"is-custom-emoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"isCustomEmoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmojiEffect from './CustomEmojiEffect';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  withEffects?: boolean;\n};\n\nconst CENTER_ICON_SIZE = 2.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n  withEffects,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const { customEmoji } = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(withEffects && activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomEmojiEffect reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceOnHeavyAnimation\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  withEffects?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  withEffects,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, toggleReaction]);\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n        withEffects={withEffects}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => (\n            <Avatar\n              key={user.id}\n              user={user}\n              size=\"micro\"\n            />\n          ))}\n        </div>\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} className=\"counter\" />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n  withEffects?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n  noRecentReactors,\n  withEffects,\n}) => {\n  const lang = useLang();\n\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n          withEffects={withEffects}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestMasterAndRequestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ActiveEmojiInteraction, ActiveReaction, ChatTranslatedMessages, MessageListType,\n} from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n  ApiChatMember,\n  ApiUsername,\n  ApiTopic,\n  ApiReaction,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type { FocusDirection, IAlbum, ISettings } from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport { AudioOrigin } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectIsCurrentUserPremium,\n  selectIsChatProtected,\n  selectTopicFromMessage,\n  selectTabState,\n  selectChatTranslations,\n  selectRequestedTranslationLanguage,\n  selectChatFullInfo,\n  selectPerformanceSettingsValue,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n  getMessageSingleCustomEmoji,\n  hasMessageText,\n  isChatGroup,\n  getMessageLocation,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport {\n  getMinMediaWidth,\n  calculateMediaDimensions,\n  MIN_MEDIA_WIDTH_WITH_COMMENTS,\n  MIN_MEDIA_WIDTH_WITH_TEXT,\n} from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\n\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useAuthorWidth from '../hooks/useAuthorWidth';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport TopicChip from '../../common/TopicChip';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  requestedTranslationLanguage?: string;\n  withReactionEffects?: boolean;\n  withStickerEffects?: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  requestedTranslationLanguage,\n  withReactionEffects,\n  withStickerEffects,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuPosition,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(\n    isShown || isJustAdded,\n    undefined,\n    noAppearanceAnimation && !isJustAdded,\n    false,\n  );\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    isJustAdded && 'is-just-added',\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const detectedLanguage = useTextLanguage(areTranslationsEnabled ? text?.text : undefined);\n\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, messageId, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, true);\n\n  const currentText = isTranslationPending ? (previousTranslatedText || text) : translatedText;\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWidthWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime()),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !hasAnimatedEmoji) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n\n  useFocusMessage(\n    ref, messageId, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, isJustAdded,\n  );\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  useAuthorWidth(ref, signature);\n\n  const shouldFocusOnResize = isLastInGroup;\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage]);\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let reactionsMaxWidth;\n  let contentWidth: number | undefined;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        asForwarded,\n        noAvatars,\n        isMobile,\n      }).width;\n    }\n\n    if (width) {\n      if (width < (isMediaWidthWithCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)) {\n        contentWidth = width;\n      }\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(currentText), isMediaWidthWithCommentButton), width);\n      if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(\n      getMinMediaWidth(Boolean(currentText), isMediaWidthWithCommentButton), albumLayout.containerStyle.width,\n    );\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n    reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n  } else if (sticker && !hasSubheader) {\n    const { width } = getStickerDimensions(sticker, isMobile);\n    style = `width: ${width + extraPadding}px`;\n    reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n  }\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    return (\n      <MessageText\n        message={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  function renderQuickReactionButton() {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        withEffects={withReactionEffects}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            withEffect={withStickerEffects}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded && !isOwn) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.views !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            maxWidth={reactionsMaxWidth}\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            withEffects={withReactionEffects}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, repliesThreadInfo, forwardInfo,\n      transcriptionId, isPinned,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const isLocation = Boolean(getMessageLocation(message));\n    const chatTranslations = selectChatTranslations(global, chatId);\n    const requestedTranslationLanguage = selectRequestedTranslationLanguage(global, chatId, message.id);\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      lastSyncTime,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && activeReactions[reactionMessage.id],\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      senderAdminMember,\n      messageTopic,\n      genericEffects: global.genericEmojiEffects,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled: global.settings.byKey.canTranslate,\n      requestedTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withReactionEffects: selectPerformanceSettingsValue(global, 'reactionEffects'),\n      withStickerEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      ...((canShowSender || isLocation) && { sender }),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n      }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type {\n  ApiChat, ApiTopic, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n    openMessageLanguageModal,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId!,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n      noForumTopicPanel: true,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId!,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  const handleTranslationClick = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openMessageLanguageModal({ chatId, id: messageId });\n  }, [chatId, messageId, openMessageLanguageModal]);\n\n  const handleOpenThread = useCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n  }, [message.chatId, message.id, openChat]);\n\n  const handleTopicChipClick = useCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  }, [chatId, focusMessage, isChatWithRepliesBot, messageTopic, messageId, replyToChatId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n  };\n}\n","import { useState } from '../lib/teact/teact';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nimport useSyncEffect from './useSyncEffect';\n\nexport default function useTextLanguage(text?: string) {\n  const [language, setLanguage] = useState<string>();\n\n  useSyncEffect(() => {\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    }\n  }, [text]);\n\n  return language;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { ChatTranslatedMessages } from '../../../../global/types';\n\nexport default function useMessageTranslation(\n  chatTranslations: ChatTranslatedMessages | undefined,\n  chatId: string,\n  messageId: number,\n  requestedLanguageCode?: string,\n) {\n  const { translateMessages } = getActions();\n  const messageTranslation = requestedLanguageCode\n    ? chatTranslations?.byLangCode[requestedLanguageCode]?.[messageId] : undefined;\n\n  const { isPending, text } = messageTranslation || {};\n\n  useEffect(() => {\n    if (!text && !isPending && requestedLanguageCode) {\n      translateMessages({ chatId, messageIds: [messageId], toLanguageCode: requestedLanguageCode });\n    }\n  }, [chatId, text, isPending, messageId, requestedLanguageCode, translateMessages]);\n\n  return {\n    isPending,\n    translatedText: text,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { RefObject } from 'react';\nimport { useLayoutEffect } from '../../../lib/teact/teact';\nimport { requestForcedReflow } from '../../../lib/fasterdom/fasterdom';\n\nexport default function useAuthorWidth(\n  containerRef: RefObject<HTMLDivElement>,\n  signature?: string,\n) {\n  useLayoutEffect(() => {\n    if (!signature) return;\n\n    requestForcedReflow(() => {\n      const width = containerRef.current!.querySelector<HTMLDivElement>('.message-signature')?.offsetWidth;\n      if (!width) return undefined;\n\n      return () => {\n        containerRef.current!.style.setProperty('--meta-safe-author-width', `${width}px`);\n      };\n    });\n  }, [containerRef, signature]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.text.text,\n                entities: message.text.entities,\n              })}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport type { Signal } from '../../util/signals';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePrevious(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        const isTopicTopMessage = message.id === threadTopMessageId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageListType } from '../../global/types';\nimport type { ApiTopic } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { requestForcedReflow, forceMeasure, requestMeasure } from '../../lib/fasterdom/fasterdom';\n\nimport type { FC } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\nimport type {\n  ApiBotInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\n\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { LoadMoreDirection } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  LOCAL_MESSAGE_MIN_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium,\n  selectLastScrollOffset,\n  selectThreadInfo,\n  selectTabState,\n  selectUserFullInfo,\n  selectChatFullInfo,\n  selectPerformanceSettingsValue,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/windowEnvironment';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll from '../../util/resetScroll';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useContainerHeight from './hooks/useContainerHeight';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isComments?: boolean;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  onPinnedIntersectionChange,\n  getForceNextPinnedInHeader,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime, loadSponsoredMessages]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = (\n      threadTopMessageId\n      && threadFirstMessageId !== threadTopMessageId\n      && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n    )\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, orderRule), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId, type, isServiceNotificationsChat]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.repliesThreadInfo?.isComments\n      || messagesById[id]?.views !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  }, [\n    updateStickyDates, hasTools, getForceNextPinnedInHeader, onPinnedIntersectionChange, type, chatId, threadId,\n  ]);\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          animateScroll(\n            container,\n            lastItemElement!,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <OptimizedVideo\n                  canPlay\n                  src={botInfoGifUrl}\n                  loop\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      isComments: Boolean(threadInfo?.originChannelId),\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      lastSyncTime: global.lastSyncTime,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import type { RefObject } from 'react';\nimport { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport useSignal from '../../../hooks/useSignal';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  }, [setContainerHeight]);\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport animateScroll from '../../util/animateScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst MAX_ASPECT_RATIO = 20;\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n  let shouldSendAsFile;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    const img = await preloadImage(blobUrl);\n    const { width, height } = img;\n    shouldSendAsFile = !validateAspectRatio(width, height);\n\n    const shouldShrink = Math.max(width, height) > MAX_QUICK_IMG_SIZE;\n    const isGif = mimeType === GIF_MIME_TYPE;\n\n    if (!shouldSendAsFile) {\n      if (!options?.compressedBlobUrl && !isGif && (shouldShrink || mimeType !== 'image/jpeg')) {\n        const resizedUrl = await scaleImage(\n          blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n        );\n        URL.revokeObjectURL(blobUrl);\n        return buildAttachment(filename, blob, {\n          compressedBlobUrl: resizedUrl,\n        });\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    }\n\n    previewBlobUrl = blobUrl;\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    shouldSendAsFile = !validateAspectRatio(width, height);\n\n    if (!shouldSendAsFile) {\n      quick = { width, height, duration };\n    }\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    shouldSendAsFile: shouldSendAsFile || undefined,\n    uniqueId: `${Date.now()}-${Math.random()}`,\n    ...options,\n  };\n}\n\nexport function prepareAttachmentsToSend(\n  attachments: ApiAttachment[], shouldSendCompressed?: boolean,\n): ApiAttachment[] {\n  return attachments.map((attach) => {\n    if (shouldSendCompressed) {\n      if (attach.compressedBlobUrl) {\n        return {\n          ...attach,\n          blobUrl: attach.compressedBlobUrl,\n        };\n      }\n      return attach;\n    }\n\n    return {\n      ...attach,\n      shouldSendAsFile: !attach.voice ? true : undefined,\n      shouldSendAsSpoiler: undefined,\n    };\n  });\n}\n\nfunction validateAspectRatio(width: number, height: number) {\n  const maxAspectRatio = Math.max(width, height) / Math.min(width, height);\n  return maxAspectRatio <= MAX_ASPECT_RATIO;\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","import { IS_IOS } from '../../../../util/windowEnvironment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/windowEnvironment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport twemojiRegex from '../../../../lib/twemojiRegex';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst MAX_LENGTH = 8;\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const getSingleEmoji = useDerivedSignal(() => {\n    const html = getHtml();\n    if (!isEnabled || !html || (IS_EMOJI_SUPPORTED && html.length > MAX_LENGTH)) return undefined;\n\n    const hasEmoji = html.match(IS_EMOJI_SUPPORTED ? twemojiRegex : EMOJI_IMG_REGEX);\n    if (!hasEmoji) return undefined;\n\n    const cleanHtml = prepareForRegExp(html);\n    const isSingleEmoji = cleanHtml && (\n      (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n      || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n    );\n\n    return isSingleEmoji\n      ? (IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!)\n      : undefined;\n  }, [getHtml, isEnabled]);\n\n  const isActive = useDerivedState(() => Boolean(getSingleEmoji()), [getSingleEmoji]);\n  const hasStickers = Boolean(stickers?.length);\n\n  useEffect(() => {\n    if (!isEnabled) return;\n\n    const singleEmoji = getSingleEmoji();\n    if (singleEmoji) {\n      if (!hasStickers) {\n        loadStickersForEmoji({ emoji: singleEmoji });\n      }\n    } else {\n      clearStickersForEmoji();\n    }\n  }, [isEnabled, getSingleEmoji, hasStickers, loadStickersForEmoji, clearStickersForEmoji]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isStickerTooltipOpen: Boolean(isActive && hasStickers && !isManuallyClosed),\n    closeStickerTooltip: markManuallyClosed,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\nimport { requestMeasure } from '../lib/fasterdom/fasterdom';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestMeasure(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","// Utility for cleaning html code from Google Docs.\n// Original source from DocsSoap:\n// https://www.npmjs.com/package/docs-soap\n\nconst GDOCS_ELEMENT_ID_REGEXP = /id=\"docs-internal-guid/i;\n\nconst GDOCS_STYLES = {\n  BOLD: '700',\n  ITALIC: 'italic',\n  UNDERLINE: 'underline',\n  STRIKETHROUGH: 'line-through',\n  SUPERSCRIPT: 'super',\n  SUBSCRIPT: 'sub',\n};\n\nconst ELEMENTS = {\n  ANCHOR: 'a',\n  BOLD: 'strong',\n  ITALIC: 'em',\n  UNDERLINE: 'u',\n  STRIKETHROUGH: 'del',\n  SUPERSCRIPT: 'sup',\n  SUBSCRIPT: 'sub',\n};\n\nconst headers = [\n  'H1',\n  'H2',\n  'H3',\n  'H4',\n  'H5',\n  'H6',\n];\n\nfunction parseHtml(html: string): HTMLElement {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, 'text/html');\n\n  return doc.body;\n}\n\nfunction wrapNodeAnchor(node: Node, href: string): HTMLAnchorElement {\n  const anchor = document.createElement(ELEMENTS.ANCHOR) as HTMLAnchorElement;\n  anchor.href = href;\n  anchor.appendChild(node.cloneNode(true));\n\n  return anchor;\n}\n\nfunction wrapNodeInline(node: Node, style: string): Node {\n  const el = document.createElement(style);\n  el.appendChild(node.cloneNode(true));\n\n  return el;\n}\n\nfunction wrapNode(inner: HTMLElement, result: Node): Node {\n  let newNode = result.cloneNode(true);\n  if (!inner) {\n    return newNode;\n  }\n  if (inner.style && inner.style.fontWeight === GDOCS_STYLES.BOLD) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.BOLD);\n  }\n  if (inner.style && inner.style.fontStyle === GDOCS_STYLES.ITALIC) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.ITALIC);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.UNDERLINE) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.UNDERLINE);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.STRIKETHROUGH) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.STRIKETHROUGH);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUPERSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUPERSCRIPT);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUBSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUBSCRIPT);\n  }\n\n  return newNode;\n}\n\nfunction applyBlockStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = document.createTextNode('') as Node;\n  if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n    styledNode = node.childNodes[0];\n  }\n  if (node.childNodes[0] && node.childNodes[0].nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode.cloneNode(true), (node.childNodes[0] as HTMLAnchorElement).href);\n    styledNode = node.childNodes[0].childNodes[0];\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction applyInlineStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = node;\n  if (node.nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode, (node as HTMLAnchorElement).href);\n    if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n      styledNode = node.childNodes[0];\n    }\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction getCleanNode(node: Node): Node[] {\n  if (node.childNodes && (node.childNodes.length <= 1 || node.nodeName === 'OL' || node.nodeName === 'UL')) {\n    let newWrapper: Node | undefined;\n    let newNode = document.createTextNode(node.textContent || '') as Node;\n    if (node.nodeName === 'UL' || node.nodeName === 'OL' || node.nodeName === 'LI') {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = document.createDocumentFragment();\n      const items = [];\n      for (let i = 0; i < node.childNodes.length; i++) {\n        items.push(...getCleanNode(node.childNodes[i]));\n      }\n      items.map((i: Node): Node => newNode.appendChild(i));\n    } else if (headers.indexOf(node.nodeName) !== -1) {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = applyInlineStyles(node.childNodes[0]);\n    } else if (node.nodeName === 'P') {\n      newWrapper = document.createElement('p');\n      newNode = applyBlockStyles(node);\n    } else if (node.nodeName === 'BR') {\n      newNode = node;\n    } else {\n      newWrapper = document.createElement('span');\n      newNode = applyInlineStyles(node);\n    }\n    if (newWrapper) {\n      newWrapper.appendChild(newNode);\n      return [newWrapper];\n    }\n\n    return [node.cloneNode(true)];\n  }\n\n  if (node.childNodes) {\n    const nodes = [];\n    for (let i = 0; i < node.childNodes.length; i++) {\n      nodes.push(...getCleanNode(node.childNodes[i]));\n    }\n    return nodes;\n  }\n\n  return [node];\n}\n\nfunction filterNode(node: Node): boolean {\n  return node.nodeType !== 8; // Node.COMMENT_NODE = 8\n}\n\nfunction getCleanDocument(dirty: HTMLElement): HTMLElement {\n  const body = document.createElement('body');\n  const nodes = dirty.childNodes;\n  const filteredNodes = Array.from(nodes).filter(filterNode);\n  const cleanNodes = [];\n\n  for (const node of filteredNodes) {\n    cleanNodes.push(...getCleanNode(node));\n  }\n\n  for (let i = 0; i < cleanNodes.length; i++) {\n    body.appendChild(cleanNodes[i].cloneNode(true));\n  }\n\n  return body;\n}\n\nexport default function cleanDocsHtml(clipboardContent: string): string {\n  if (!clipboardContent.match(GDOCS_ELEMENT_ID_REGEXP)) {\n    return parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, '')).innerHTML;\n  }\n\n  return getCleanDocument(parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, ''))).innerHTML;\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { DEBUG, EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport cleanDocsHtml from '../../../../lib/cleanDocsHtml';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  try {\n    html = cleanDocsHtml(html);\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] | undefined = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (!files?.length && !pastedText) {\n        return;\n      }\n\n      if (files?.length && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file);\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      if (textToPaste) {\n        insertTextAndUpdateCursor(textToPaste, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport { requestMeasure, requestNextMutation } from '../../../../lib/fasterdom/fasterdom';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\nimport type { Signal } from '../../../../util/signals';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useDebouncedResolver } from '../../../../hooks/useAsyncResolvers';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst URL_ENTITIES = new Set<string>([ApiMessageEntityTypes.TextUrl, ApiMessageEntityTypes.Url]);\nconst DEBOUNCE_MS = 300;\n\nconst useEditing = (\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n  replyingToId?: number,\n): [VoidFunction, VoidFunction, boolean] => {\n  const { editMessage, setEditingDraft, toggleMessageWebPage } = getActions();\n  const [shouldForceShowEditing, setShouldForceShowEditing] = useState(false);\n\n  useEffectWithPrevDeps(([prevEditedMessage, prevReplyingToId]) => {\n    if (!editedMessage) {\n      return;\n    }\n\n    if (replyingToId && prevReplyingToId !== replyingToId) {\n      setHtml('');\n      setShouldForceShowEditing(false);\n      return;\n    }\n\n    if (prevEditedMessage?.id === editedMessage.id && replyingToId === prevReplyingToId) {\n      return;\n    }\n\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n\n    setHtml(html);\n    setShouldForceShowEditing(true);\n\n    requestNextMutation(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, replyingToId, editingDraft, setHtml]);\n\n  useEffect(() => {\n    if (!editedMessage) {\n      return;\n    }\n\n    const shouldSetNoWebPage = !('webPage' in editedMessage.content)\n      && editedMessage.content.text?.entities?.some((entity) => URL_ENTITIES.has(entity.type));\n\n    toggleMessageWebPage({\n      chatId,\n      threadId,\n      noWebPage: shouldSetNoWebPage,\n    });\n  }, [chatId, threadId, editedMessage]);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      const edited = parseMessageInput(getHtml());\n      const update = edited.text.length ? edited : undefined;\n\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    if (!editedMessage) return false;\n\n    const edited = parseMessageInput(getHtml());\n    return !('webPage' in editedMessage.content)\n      && editedMessage.content.text?.entities?.some((entity) => URL_ENTITIES.has(entity.type))\n      && !(edited.entities?.some((entity) => URL_ENTITIES.has(entity.type)));\n  }, [editedMessage, getHtml], DEBOUNCE_MS, true);\n\n  const getShouldResetNoWebPageDebounced = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage || prevEditedMessage?.id !== editedMessage.id) {\n      return;\n    }\n\n    if (getShouldResetNoWebPageDebounced()) {\n      toggleMessageWebPage({\n        chatId,\n        threadId,\n        noWebPage: false,\n      });\n    }\n  }, [editedMessage, chatId, getHtml, threadId, getShouldResetNoWebPageDebounced]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n\n    // Run one frame after editing draft reset\n    requestMeasure(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n\n      // Wait one more frame until new HTML is rendered\n      requestNextMutation(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, getHtml, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(getHtml());\n    const update = edited.text.length ? edited : undefined;\n\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel, shouldForceShowEditing];\n};\n\nexport default useEditing;\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { InlineBotSettings } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport memoized from '../../../../util/memoized';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useSyncEffect from '../../../../hooks/useSyncEffect';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst THROTTLE = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isEnabled: boolean,\n  chatId: string,\n  getHtml: Signal<string>,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot, resetAllInlineBots } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const extractBotQueryThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('@') ? parseBotQuery(html) : MEMO_NO_RESULT;\n  }, [getHtml, isEnabled], THROTTLE);\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDerivedState(extractBotQueryThrottled, [extractBotQueryThrottled, getHtml], true);\n\n  useSyncEffect(([prevUsername]) => {\n    if (prevUsername) {\n      resetInlineBot({ username: prevUsername });\n    }\n  }, [username, resetInlineBot]);\n\n  useEffect(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query,\n    });\n  }, [chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  const {\n    id: botId,\n    switchPm,\n    switchWebview,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = (usernameLowered && inlineBots?.[usernameLowered]) || {};\n\n  const isOpen = Boolean((results?.length || switchPm) && !isManuallyClosed);\n\n  useEffect(() => {\n    if (!isOpen && !username) {\n      resetAllInlineBots();\n    }\n  }, [isOpen, resetAllInlineBots, username]);\n\n  const loadMore = useCallback(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [chatId, offset, query, queryInlineBot, usernameLowered]);\n\n  return {\n    isOpen,\n    botId,\n    isGallery,\n    switchPm,\n    switchWebview,\n    results,\n    closeTooltip: markManuallyClosed,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nconst buildQueryStateMemo = memoized((username: string, query: string, canShowHelp: boolean) => ({\n  username,\n  query,\n  canShowHelp,\n  usernameLowered: username.toLowerCase(),\n}));\n\nfunction parseBotQuery(html: string) {\n  if (!html.startsWith('@')) {\n    return MEMO_NO_RESULT;\n  }\n\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return buildQueryStateMemo(result[1], result[2], result[2] === '' && !text.match(HAS_NEW_LINE));\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst RE_COMMAND = /^\\/([\\w@]{1,32})?$/i;\n\nconst THROTTLE = 300;\n\nexport default function useBotCommandTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const detectCommandThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('/') ? prepareForRegExp(html).match(RE_COMMAND)?.[0].trim() : undefined;\n  }, [getHtml, isEnabled], THROTTLE);\n\n  const getCommand = useDerivedSignal(\n    detectCommandThrottled, [detectCommandThrottled, getHtml], true,\n  );\n\n  useEffect(() => {\n    const command = getCommand();\n    const commands = botCommands || chatBotCommands;\n    if (!command || !commands) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const filter = command.substring(1);\n    const nextFilteredBotCommands = commands.filter((c) => !filter || c.command.startsWith(filter));\n\n    setFilteredBotCommands(\n      nextFilteredBotCommands?.length ? nextFilteredBotCommands : undefined,\n    );\n  }, [getCommand, botCommands, chatBotCommands]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isOpen: Boolean(filteredBotCommands?.length && !isManuallyClosed),\n    close: markManuallyClosed,\n    filteredBotCommands,\n  };\n}\n","import { useCallback, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiAttachment } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\n\nexport default function useAttachmentModal({\n  attachments,\n  fileSizeLimit,\n  setHtml,\n  setAttachments,\n  chatId,\n  canSendAudios,\n  canSendVideos,\n  canSendPhotos,\n  canSendDocuments,\n}: {\n  attachments: ApiAttachment[];\n  fileSizeLimit: number;\n  setHtml: (html: string) => void;\n  setAttachments: (attachments: ApiAttachment[]) => void;\n  chatId: string;\n  canSendAudios?: boolean;\n  canSendVideos?: boolean;\n  canSendPhotos?: boolean;\n  canSendDocuments?: boolean;\n}) {\n  const { openLimitReachedModal, showAllowedMessageTypesNotification } = getActions();\n  const [shouldForceAsFile, setShouldForceAsFile] = useState<boolean>(false);\n  const [shouldForceCompression, setShouldForceCompression] = useState<boolean>(false);\n  const [shouldSuggestCompression, setShouldSuggestCompression] = useState<boolean | undefined>(undefined);\n\n  const handleClearAttachments = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, [setAttachments]);\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (!newAttachments.length) {\n        handleClearAttachments();\n        return;\n      }\n\n      if (newAttachments.some((attachment) => {\n        const type = getAttachmentType(attachment);\n\n        return (type === 'audio' && !canSendAudios && !canSendDocuments)\n          || (type === 'video' && !canSendVideos && !canSendDocuments)\n          || (type === 'image' && !canSendPhotos && !canSendDocuments)\n          || (type === 'file' && !canSendDocuments);\n      })) {\n        showAllowedMessageTypesNotification({ chatId });\n      } else if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n        const shouldForce = newAttachments.some((attachment) => {\n          const type = getAttachmentType(attachment);\n\n          return (type === 'audio' && !canSendAudios)\n            || (type === 'video' && !canSendVideos)\n            || (type === 'image' && !canSendPhotos);\n        });\n\n        setShouldForceAsFile(Boolean(shouldForce && canSendDocuments));\n        setShouldForceCompression(!canSendDocuments);\n      }\n    }, [\n      attachments, canSendAudios, canSendDocuments, canSendPhotos, canSendVideos, chatId, fileSizeLimit,\n      handleClearAttachments, openLimitReachedModal, setAttachments, showAllowedMessageTypesNotification,\n    ],\n  );\n\n  const handleAppendFiles = useCallback(async (files: File[], isSpoiler?: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => (\n        buildAttachment(file.name, file, { shouldSendAsSpoiler: isSpoiler || undefined })\n      ))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleFileSelect = useCallback(async (files: File[], suggestCompression?: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file))));\n    setShouldSuggestCompression(suggestCompression);\n  }, [handleSetAttachments]);\n\n  return {\n    shouldSuggestCompression,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate: setHtml,\n    handleClearAttachments,\n    handleSetAttachments,\n    shouldForceCompression,\n    shouldForceAsFile,\n  };\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  if (attachment.shouldSendAsFile) return 'file';\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'image';\n  }\n\n  if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'video';\n  }\n\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'audio';\n  }\n\n  return 'file';\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { requestMeasure, requestNextMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../../global';\n\nimport type { ApiDraft } from '../../../../global/types';\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { ApiMessageEntityTypes } from '../../../../api/types';\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useStateRef } from '../../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useRunDebounced from '../../../../hooks/useRunDebounced';\n\nlet isFrozen = false;\n\nfunction freeze() {\n  isFrozen = true;\n\n  requestMeasure(() => {\n    isFrozen = false;\n  });\n}\n\nconst useDraft = (\n  draft: ApiDraft | undefined,\n  chatId: string,\n  threadId: number,\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  lastSyncTime?: number,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n\n  const isEditing = Boolean(editedMessage);\n\n  const updateDraft = useCallback((prevState: { chatId?: string; threadId?: number } = {}, shouldForce = false) => {\n    if (isEditing || !lastSyncTime) return;\n\n    const html = getHtml();\n\n    if (html) {\n      saveDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        draft: parseMessageInput(html),\n        shouldForce,\n      });\n    } else {\n      clearDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        shouldForce,\n      });\n    }\n  }, [chatId, threadId, isEditing, lastSyncTime, getHtml, saveDraft, clearDraft]);\n\n  const updateDraftRef = useStateRef(updateDraft);\n  const runDebouncedForSaveDraft = useRunDebounced(DRAFT_DEBOUNCE, true, undefined, [chatId, threadId]);\n\n  // Restore draft on chat change\n  useEffectWithPrevDeps(([prevChatId, prevThreadId, prevDraft]) => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n\n      if (!draft?.shouldForce) {\n        return;\n      }\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestNextMutation(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, editedMessage, loadCustomEmojis]);\n\n  // Save draft on chat change\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      if (!isEditing) {\n        // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n        updateDraftRef.current({ chatId, threadId });\n      }\n\n      freeze();\n    };\n  }, [chatId, threadId, isEditing, updateDraftRef]);\n\n  const chatIdRef = useStateRef(chatId);\n  const threadIdRef = useStateRef(threadId);\n  useEffect(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    if (!getHtml()) {\n      updateDraftRef.current();\n\n      return;\n    }\n\n    const scopedShatId = chatIdRef.current;\n    const scopedThreadId = threadIdRef.current;\n\n    runDebouncedForSaveDraft(() => {\n      if (chatIdRef.current === scopedShatId && threadIdRef.current === scopedThreadId) {\n        updateDraftRef.current();\n      }\n    });\n  }, [chatIdRef, getHtml, runDebouncedForSaveDraft, threadIdRef, updateDraftRef]);\n\n  function forceUpdateDraft() {\n    updateDraft(undefined, true);\n  }\n\n  useBackgroundMode(forceUpdateDraft);\n  useBeforeUnload(forceUpdateDraft);\n};\n\nexport default useDraft;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useMedia from '../../../hooks/useMedia';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const { isTouchScreen } = useAppLayout();\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((path) => {\n      path.style.stroke = color;\n      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, 'icon', !isTouchScreen && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, !isTouchScreen && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  threadId?: number;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  threadId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleAttachBot]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        bot,\n        chatId,\n        threadId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW, SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { validateFiles } from '../../../util/files';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  canSendPhotos: boolean;\n  canSendVideos: boolean;\n  canSendDocuments: boolean;\n  canSendAudios: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], shouldSuggestCompression?: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  canSendPhotos,\n  canSendVideos,\n  canSendDocuments,\n  canSendAudios,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const canSendVideoAndPhoto = canSendPhotos && canSendVideos;\n  const canSendVideoOrPhoto = canSendPhotos || canSendVideos;\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, shouldSuggestCompression?: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileSelect(validatedFiles, shouldSuggestCompression);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(canSendVideoAndPhoto ? CONTENT_TYPES_WITH_PREVIEW : (\n        canSendPhotos ? SUPPORTED_IMAGE_CONTENT_TYPES : SUPPORTED_VIDEO_CONTENT_TYPES\n      )).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [canSendPhotos, canSendVideoAndPhoto, handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog(!canSendDocuments && canSendAudios\n      ? Array.from(SUPPORTED_AUDIO_CONTENT_TYPES).join(',') : (\n        '*'\n      ), (e) => handleFileSelect(e, false));\n  }, [canSendAudios, canSendDocuments, handleFileSelect]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            {canSendVideoOrPhoto && (\n              <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n                {lang(canSendVideoAndPhoto ? 'AttachmentMenu.PhotoOrVideo'\n                  : (canSendPhotos ? 'InputAttach.Popover.Photo' : 'InputAttach.Popover.Video'))}\n              </MenuItem>\n            )}\n            {(canSendDocuments || canSendAudios)\n              && (\n                <MenuItem icon=\"document\" onClick={handleDocumentSelect}>\n                  {lang(!canSendDocuments && canSendAudios ? 'InputAttach.Popover.Music' : 'AttachDocument')}\n                </MenuItem>\n              )}\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            threadId={threadId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectCanAnimateInterface,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n  shouldForceShowEditing?: boolean;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  shouldForceShowEditing,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [\n    replyingToId, shouldForceShowEditing, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId,\n    exitForwardMode,\n  ]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id, noForumTopicPanel: true });\n  }, [focusMessage, isForwarding, message]);\n\n  const handleClearClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  }, [clearEmbedded]);\n\n  const handleChangeRecipientClick = useCallback(() => {\n    changeForwardRecipient();\n  }, [changeForwardRecipient]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getRootElement = useCallback(() => ref.current!, []);\n  const getMenuElement = useCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'), []);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId, shouldForceShowEditing]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div className=\"ComposerEmbeddedMessage_inner\">\n        <div className=\"embedded-left-icon\">\n          <i className={buildClassName('icon', leftIcon)} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: false,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: true,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: false,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: true,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { shouldForceShowEditing }): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = selectTabState(global);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = selectCanAnimateInterface(global);\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId && !shouldForceShowEditing) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message && !shouldForceShowEditing) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { Signal } from '../../../util/signals';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageEntityTextUrl, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectTabState, selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport { useDebouncedResolver } from '../../../hooks/useAsyncResolvers';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  getHtml: Signal<string>;\n  isDisabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  getHtml,\n  isDisabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n    const linkEntity = entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n\n    return linkEntity?.url || text.match(RE_LINK)?.[0];\n  }, [getHtml], DEBOUNCE_MS, true);\n\n  const getLink = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffect(() => {\n    const link = getLink();\n\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [getLink, chatId, threadId, clearWebPagePreview, loadWebPagePreview, toggleMessageWebPage]);\n\n  useSyncEffect(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId, clearWebPagePreview, threadId, toggleMessageWebPage]);\n\n  const isShown = useDerivedState(() => {\n    return Boolean(webPagePreview && getHtml() && !noWebPage && !isDisabled);\n  }, [isDisabled, getHtml, noWebPage, webPagePreview]);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div className=\"WebPagePreview_inner\">\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: selectTabState(global).webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  TabState, MessageListType, GlobalState, ApiDraft,\n} from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n  ApiAttachMenuPeerType,\n  ApiChatFullInfo,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_UPLOAD_FILEPART_SIZE,\n  EDITABLE_INPUT_MODAL_ID,\n  SCHEDULED_WHEN_ONLINE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_IOS } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatBot,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatType,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingMessage,\n  selectEditingScheduledDraft,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectReplyingToId,\n  selectRequestedDraftFiles,\n  selectRequestedDraftText,\n  selectScheduledIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  isChatAdmin,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment, { prepareAttachmentsToSend } from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport { insertHtmlInSelection } from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { buildCustomEmojiHtml } from './helpers/customEmoji';\nimport { processMessageInputForCustomEmoji } from '../../../util/customEmojiManager';\nimport { getTextWithEntitiesAsHtml } from '../../common/helpers/renderTextWithEntities';\n\nimport useSignal from '../../../hooks/useSignal';\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAttachmentModal from './hooks/useAttachmentModal';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useDraft from './hooks/useDraft';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  isMobile?: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    isOnActiveTab: boolean;\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiDraft;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    replyingToId?: number;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: TabState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: TabState['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n    attachmentSettings: GlobalState['attachmentSettings'];\n    slowMode?: ApiChatFullInfo['slowMode'];\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = TabState['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  isOnActiveTab,\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  isMobile,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  replyingToId,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  attachmentSettings,\n  theme,\n  slowMode,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    addRecentCustomEmoji,\n    showNotification,\n    showAllowedMessageTypesNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const [getHtml, setHtml] = useSignal('');\n  const getSelectionRange = useGetSelectionRange(EDITABLE_INPUT_CSS_SELECTOR);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  useEffect(processMessageInputForCustomEmoji, [getHtml]);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useSyncEffect(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n  const hasAttachments = Boolean(attachments.length);\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n    canSendVoices, canSendPlainText, canSendAudios, canSendVideos, canSendPhotos, canSendDocuments,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isComposerBlocked = !canSendPlainText && !editingMessage;\n\n  const {\n    shouldSuggestCompression,\n    shouldForceCompression,\n    shouldForceAsFile,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate,\n    handleClearAttachments,\n    handleSetAttachments,\n  } = useAttachmentModal({\n    attachments,\n    setHtml,\n    setAttachments,\n    fileSizeLimit,\n    chatId,\n    canSendAudios,\n    canSendVideos,\n    canSendPhotos,\n    canSendDocuments,\n  });\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const isEditingRef = useStateRef(Boolean(editingMessage));\n  useEffect(() => {\n    if (getHtml() && !isEditingRef.current) {\n      sendMessageAction({ type: 'typing' });\n    }\n  }, [getHtml, isEditingRef, sendMessageAction]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(isReady && isOnActiveTab && isForCurrentMessageList && shouldSuggestStickers && !hasAttachments),\n    getHtml,\n    setHtml,\n    undefined,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    closeCustomEmojiTooltip,\n    insertCustomEmoji,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isOnActiveTab && isForCurrentMessageList && shouldSuggestCustomEmoji && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isStickerTooltipOpen,\n    closeStickerTooltip,\n  } = useStickerTooltip(\n    Boolean(isReady\n      && isOnActiveTab\n      && isForCurrentMessageList\n      && shouldSuggestStickers\n      && canSendStickers\n      && !hasAttachments),\n    getHtml,\n    stickersForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    botId: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    switchWebview: inlineBotSwitchWebview,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments && lastSyncTime),\n    chatId,\n    getHtml,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean(isReady && isForCurrentMessageList && ((botCommands && botCommands?.length) || chatBotCommands?.length)),\n    getHtml,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const insertHtmlAndUpdateCursor = useCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    if (inputId === EDITABLE_INPUT_ID && isComposerBlocked) return;\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${getHtml()}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestNextMutation(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [isComposerBlocked, getHtml, setHtml]);\n\n  const insertFormattedTextAndUpdateCursor = useCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertCustomEmojiAndUpdateCursor = useCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useDraft(draft, chatId, threadId, getHtml, setHtml, editingMessage, lastSyncTime);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n\n    setAttachments(MEMO_EMPTY_ARRAY);\n\n    closeEmojiTooltip();\n    closeCustomEmojiTooltip();\n    closeStickerTooltip();\n    closeMentionTooltip();\n\n    if (isMobile) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [\n    setHtml, isMobile, closeStickerTooltip, closeCustomEmojiTooltip, closeMentionTooltip, closeEmojiTooltip,\n    closeSymbolMenu,\n  ]);\n\n  const [handleEditComplete, handleEditCancel, shouldForceShowEditing] = useEditing(\n    getHtml,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n    replyingToId,\n  );\n\n  // Handle chat change (should be placed after `useDraft` and `useEditing`)\n  const resetComposerRef = useStateRef(resetComposer);\n  const stopRecordingVoiceRef = useStateRef(stopRecordingVoice);\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      stopRecordingVoiceRef.current();\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      resetComposerRef.current();\n    };\n  }, [chatId, threadId, resetComposerRef, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: {\n          action: 'openChat',\n          payload: { id: currentUserId, shouldReplaceHistory: true },\n        },\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  }, [currentUserId, lang, showNotification]);\n\n  const mainButtonState = useDerivedState(() => {\n    if (editingMessage && shouldForceShowEditing) {\n      return MainButtonState.Edit;\n    }\n\n    if (IS_VOICE_RECORDING_SUPPORTED && !activeVoiceRecording && !isForwarding && !(getHtml() && !hasAttachments)) {\n      return MainButtonState.Record;\n    }\n\n    if (shouldSchedule) {\n      return MainButtonState.Schedule;\n    }\n\n    return MainButtonState.Send;\n  }, [\n    activeVoiceRecording, editingMessage, getHtml, hasAttachments, isForwarding, shouldForceShowEditing, shouldSchedule,\n  ]);\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const validateTextLength = useCallback((text: string, isAttachmentModal?: boolean) => {\n    const maxLength = isAttachmentModal ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength.toString(),\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return false;\n    }\n    return true;\n  }, [captionLimit, showDialog]);\n\n  const checkSlowMode = useCallback(() => {\n    if (slowMode && !isAdmin) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n      const nowSeconds = getServerTime();\n      const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n        && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n      const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n      if (\n        (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n        || nextSendDateNotReached\n      ) {\n        const secondsRemaining = nextSendDateNotReached\n          ? slowMode.nextSendDate! - nowSeconds\n          : slowMode.seconds - secondsSinceLastMessage!;\n        showDialog({\n          data: {\n            message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n            isSlowMode: true,\n            hasErrorKey: false,\n          },\n        });\n\n        messageInput?.blur();\n\n        return false;\n      }\n    }\n    return true;\n  }, [isAdmin, lang, showDialog, slowMode]);\n\n  const sendAttachments = useCallback(({\n    attachments: attachmentsToSend,\n    sendCompressed = attachmentSettings.shouldCompress,\n    sendGrouped = attachmentSettings.shouldSendGrouped,\n    isSilent,\n    scheduledAt,\n  }: {\n    attachments: ApiAttachment[];\n    sendCompressed?: boolean;\n    sendGrouped?: boolean;\n    isSilent?: boolean;\n    scheduledAt?: number;\n  }) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n    if (!text && !attachmentsToSend.length) {\n      return;\n    }\n    if (!validateTextLength(text, true)) return;\n    if (!checkSlowMode()) return;\n\n    sendMessage({\n      text,\n      entities,\n      scheduledAt,\n      isSilent,\n      shouldUpdateStickerSetsOrder: true,\n      attachments: prepareAttachmentsToSend(attachmentsToSend, sendCompressed),\n      shouldGroupMessages: sendGrouped,\n    });\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestMeasure(() => {\n      resetComposer();\n    });\n  }, [\n    attachmentSettings.shouldCompress, attachmentSettings.shouldSendGrouped, connectionState, getHtml,\n    validateTextLength, checkSlowMode, sendMessage, clearDraft, chatId, resetComposer,\n  ]);\n\n  const handleSendAttachments = useCallback((\n    sendCompressed: boolean,\n    sendGrouped: boolean,\n    isSilent?: boolean,\n    scheduledAt?: number,\n  ) => {\n    sendAttachments({\n      attachments,\n      sendCompressed,\n      sendGrouped,\n      isSilent,\n      scheduledAt,\n    });\n  }, [attachments, sendAttachments]);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (currentAttachments.length) {\n      sendAttachments({\n        attachments: currentAttachments,\n      });\n      return;\n    }\n\n    if (!text && !isForwarding) {\n      return;\n    }\n\n    if (!validateTextLength(text)) return;\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (text) {\n      if (!checkSlowMode()) return;\n\n      sendMessage({\n        text,\n        entities,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetsOrder: true,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestMeasure(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, getHtml, isForwarding, validateTextLength, clearDraft,\n    chatId, stopRecordingVoice, sendAttachments, checkSlowMode, sendMessage, forwardMessages, resetComposer,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') {\n      return;\n    }\n\n    callAttachBot({\n      chatId, url: botMenuButton.url, threadId,\n    });\n  }, [botMenuButton, callAttachBot, chatId, threadId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else if (args.sendCompressed !== undefined || args.sendGrouped !== undefined) {\n      const { sendCompressed = false, sendGrouped = false } = args;\n      void handleSendAttachments(sendCompressed, sendGrouped, isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSendAttachments, handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffectWithPrevDeps(([prevContentToBeScheduled]) => {\n    if (contentToBeScheduled && contentToBeScheduled !== prevContentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n\n      requestNextMutation(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      void handleFileSelect(requestedDraftFiles);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker, inputId?: string) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji, inputId);\n  }, [insertCustomEmojiAndUpdateCursor, isChatWithSelf, isCurrentUserPremium, showCustomEmojiPremiumNotification]);\n\n  const handleCustomEmojiSelectAttachmentModal = useCallback((emoji: ApiSticker) => {\n    handleCustomEmojiSelect(emoji, EDITABLE_INPUT_MODAL_ID);\n  }, [handleCustomEmojiSelect]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestMeasure(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestMeasure(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestMeasure(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder });\n      requestMeasure(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestMeasure(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestMeasure(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const sendSilent = useCallback((additionalArgs?: ScheduledMessageArgs) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ ...additionalArgs, isSilent: true }, scheduledAt);\n      });\n    } else if (additionalArgs && ('sendCompressed' in additionalArgs || 'sendGrouped' in additionalArgs)) {\n      const { sendCompressed = false, sendGrouped = false } = additionalArgs;\n      void handleSendAttachments(sendCompressed, sendGrouped, true);\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, handleSendAttachments, requestCalendar, shouldSchedule]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!isMobile || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu, isMobile]);\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useEffect(() => {\n    if (!isComposerBlocked) return;\n\n    setHtml('');\n  }, [isComposerBlocked, setHtml, attachments]);\n\n  const insertTextAndUpdateCursorAttachmentModal = useCallback((text: string) => {\n    insertTextAndUpdateCursor(text, EDITABLE_INPUT_MODAL_ID);\n  }, [insertTextAndUpdateCursor]);\n\n  const removeSymbol = useCallback((inputId = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(getHtml()));\n  }, [getHtml, setHtml]);\n\n  const removeSymbolAttachmentModal = useCallback(() => {\n    removeSymbol(EDITABLE_INPUT_MODAL_ID);\n  }, [removeSymbol]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({\n      id: chatId, threadId, type: 'scheduled', noForumTopicPanel: true,\n    });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && isMobile) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu, isMobile]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy || !canSendVoices);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        void handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          } else if (!canSendVoices) {\n            showAllowedMessageTypesNotification({ chatId });\n          }\n        } else {\n          void startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, handleEditComplete, activeVoiceRecording, requestCalendar, areVoiceMessagesNotAllowed,\n    canSendVoiceByPrivacy, showNotification, lang, chat?.title, startRecordingVoice, pauseRecordingVoice,\n    handleMessageSchedule, chatId, showAllowedMessageTypesNotification, canSendVoices,\n  ]);\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilent = useCallback(() => {\n    sendSilent();\n  }, [sendSilent]);\n\n  const handleSendWhenOnline = useCallback(() => {\n    handleMessageSchedule({ }, SCHEDULED_WHEN_ONLINE);\n  }, [handleMessageSchedule]);\n\n  const handleSendScheduledAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({ sendCompressed, sendGrouped }, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilentAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    sendSilent({ sendCompressed, sendGrouped });\n  }, [sendSilent]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const withBotMenuButton = isChatWithBot && botMenuButton?.type === 'webApp' && !editingMessage;\n  const isBotMenuButtonOpen = useDerivedState(() => {\n    return withBotMenuButton && !getHtml() && !activeVoiceRecording;\n  }, [withBotMenuButton, getHtml, activeVoiceRecording]);\n\n  const withBotCommands = isChatWithBot && botMenuButton?.type === 'commands' && !editingMessage\n    && botCommands !== false && !activeVoiceRecording;\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        getHtml={getHtml}\n        isReady={isReady}\n        shouldSuggestCompression={shouldSuggestCompression}\n        shouldForceCompression={shouldForceCompression}\n        shouldForceAsFile={shouldForceAsFile}\n        isForCurrentMessageList={isForCurrentMessageList}\n        shouldSchedule={shouldSchedule}\n        onCaptionUpdate={onCaptionUpdate}\n        onSendSilent={handleSendSilentAttachments}\n        onSend={handleSendAttachments}\n        onSendScheduled={handleSendScheduledAttachments}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachments}\n        onAttachmentsUpdate={handleSetAttachments}\n        onCustomEmojiSelect={handleCustomEmojiSelectAttachmentModal}\n        onRemoveSymbol={removeSymbolAttachmentModal}\n        onEmojiSelect={insertTextAndUpdateCursorAttachmentModal}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filteredUsers={mentionFilteredUsers}\n        onInsertUserName={insertMention}\n        onClose={closeMentionTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        getHtml={getHtml}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n\n        <InlineBotTooltip\n          isOpen={isInlineBotTooltipOpen}\n          botId={inlineBotId}\n          isGallery={isInlineBotTooltipGallery}\n          inlineBotResults={inlineBotResults}\n          switchPm={inlineBotSwitchPm}\n          switchWebview={inlineBotSwitchWebview}\n          loadMore={loadMoreForInlineBot}\n          isSavedMessages={isChatWithSelf}\n          canSendGifs={canSendGifs}\n          isCurrentUserPremium={isCurrentUserPremium}\n          onSelectResult={handleInlineBotSelect}\n          onClose={closeInlineBotTooltip}\n        />\n        <ComposerEmbeddedMessage\n          onClear={handleEmbeddedClear}\n          shouldForceShowEditing={Boolean(shouldForceShowEditing && editingMessage)}\n        />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          getHtml={getHtml}\n          isDisabled={!canAttachEmbedLinks || hasAttachments}\n        />\n        <div className=\"message-input-wrapper\">\n          {withBotMenuButton && (\n            <BotMenuButton\n              isOpen={isBotMenuButtonOpen}\n              text={botMenuButton.text}\n              isDisabled={Boolean(activeVoiceRecording)}\n              onClick={handleClickBotMenu}\n            />\n          )}\n          {withBotCommands && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {(!isComposerBlocked || canSendGifs || canSendStickers) && (\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              canSendStickers={canSendStickers}\n              canSendGifs={canSendGifs}\n              onGifSelect={handleGifSelect}\n              onStickerSelect={handleStickerSelect}\n              onCustomEmojiSelect={handleCustomEmojiSelect}\n              onRemoveSymbol={removeSymbol}\n              onEmojiSelect={insertTextAndUpdateCursor}\n              closeBotCommandMenu={closeBotCommandMenu}\n              closeSendAsMenu={closeSendAsMenu}\n              isSymbolMenuForced={isSymbolMenuForced}\n              canSendPlainText={!isComposerBlocked}\n            />\n          )}\n          <MessageInput\n            ref={inputRef}\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            canSendPlainText={!isComposerBlocked}\n            threadId={threadId}\n            isActive={!hasAttachments}\n            getHtml={getHtml}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : (!isComposerBlocked\n                  ? (botKeyboardPlaceholder || lang('Message'))\n                  : lang('Chat.PlaceholderTextNotAllowed'))\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && isForCurrentMessageList && !hasAttachments}\n            noFocusInterception={hasAttachments}\n            shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon icon-schedule\" />\n            </Button>\n          )}\n          {Boolean(botKeyboardMessageId) && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && Boolean(currentRecordTime) && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            threadId={threadId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            canSendPhotos={canSendPhotos}\n            canSendVideos={canSendVideos}\n            canSendDocuments={canSendDocuments}\n            canSendAudios={canSendAudios}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {Boolean(botKeyboardMessageId) && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n            onClose={closeStickerTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        noFastClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon icon-send\" />\n        <i className=\"icon icon-schedule\" />\n        <i className=\"icon icon-microphone-alt\" />\n        <i className=\"icon icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          canScheduleUntilOnline={canScheduleUntilOnline}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onSendWhenOnline={handleSendWhenOnline}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChatWithUser = isUserId(chatId);\n    const chatBotFullInfo = isChatWithBot ? selectUserFullInfo(global, chatBot.id) : undefined;\n    const chatFullInfo = !isChatWithUser ? selectChatFullInfo(global, chatId) : undefined;\n    const messageWithActualBotKeyboard = (isChatWithBot || !isChatWithUser)\n      && selectNewestMessageWithBotKeyboardButtons(global, chatId, threadId);\n    const scheduledIds = selectScheduledIds(global, chatId, threadId);\n    const { language, shouldSuggestStickers, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chatFullInfo ? chatFullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId && (\n      chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId)\n        ? defaultSendAsId\n        : (chat?.adminRights?.anonymous ? chat?.id : undefined)\n    );\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !selectUserFullInfo(global, user.id)?.noVoiceMessages) ?? true;\n    const slowMode = chatFullInfo?.slowMode;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n\n    const tabState = selectTabState(global);\n\n    return {\n      isOnActiveTab: !tabState.isBlurred,\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      replyingToId,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === tabState.forwardMessages.toChatId,\n      pollModal: tabState.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chatFullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: tabState.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: tabState.inlineBots.byUsername,\n      isInlineBotLoading: tabState.inlineBots.isLoading,\n      chatBotCommands: chatFullInfo?.botCommands,\n      botCommands: chatBotFullInfo ? (chatBotFullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBotFullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n      attachmentSettings: global.attachmentSettings,\n      slowMode,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { requestMutation } from '../../../../lib/fasterdom/fasterdom';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/windowEnvironment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording =\n  { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction }\n  | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            requestMutation(() => {\n              recordButtonRef.current!.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n            });\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    requestMutation(() => {\n      if (recordButtonRef.current) {\n        recordButtonRef.current!.style.boxShadow = 'none';\n      }\n    });\n\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n\n    requestMutation(() => {\n      if (recordButtonRef.current) {\n        recordButtonRef.current!.style.boxShadow = 'none';\n      }\n    });\n\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './MessageLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MessageLanguageModal = useModuleLoader(Bundles.Extra, 'MessageLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageLanguageModal ? <MessageLanguageModal {...props} /> : undefined;\n};\n\nexport default memo(MessageLanguageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { ThemeKey } from '../../types';\n\nimport {\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  GENERAL_TOPIC_ID,\n  TMP_CHAT_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n} from '../../config';\nimport { IS_ANDROID, IS_IOS, MASK_IMAGE_DISABLED } from '../../util/windowEnvironment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatBot,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat,\n  getMessageSendingRestrictionReason,\n  getForumComposerPlaceholder,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport MessageLanguageModal from './MessageLanguageModal.async';\n\nimport './MiddleColumn.scss';\n\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isMessageLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n  pinnedIds?: number[];\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nconst MiddleColumn: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isMessageLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  lastSyncTime,\n  pinnedIds,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, threadId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                <MessageLanguageModal isOpen={isMessageLanguageModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown!}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      messageLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chats: { listIds }, lastSyncTime } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isMessageLanguageModalOpen: Boolean(messageLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isComments);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !selectChatFullInfo(global, chat.id) && lastSyncTime,\n    );\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !replyingToId && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: (\n        (threadId !== MAIN_THREAD_ID && !chat?.isForum)\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n      ),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { getGlobal } from '../../../global';\nimport { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\n\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport useSignal from '../../../hooks/useSignal';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(chatId?: string, threadId?: number, pinnedIds?: number[]) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  }, [\n    chatId, threadId, key, pinnedIds, getLoadingPinnedId, getForceNextPinnedInHeader, setCurrentPinnedIndexes,\n    getCurrentPinnedIndexes, setLoadingPinnedId, setForceNextPinnedInHeader,\n  ]);\n\n  const onFocusPinnedMessage = useCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) return false;\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  }, [\n    chatId, getCurrentPinnedIndexes, getLoadingPinnedId, key, pinnedIds, setCurrentPinnedIndexes,\n    setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, getCanManageTopic, isChatAdmin, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const toggleEditTopic = useCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  }, [chatId, openEditTopicPanel, threadId]);\n\n  const handleToggleManagement = useCallback(() => {\n    toggleManagement();\n  }, [toggleManagement]);\n\n  const handleToggleStatistics = useCallback(() => {\n    toggleStatistics();\n  }, [toggleStatistics]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  lastSyncTime?: number,\n  topicId?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloadIds,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel, topicId]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    lastSyncTime,\n    topicId,\n  );\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\nimport { requestMutation, requestMeasure } from '../../../lib/fasterdom/fasterdom';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './CreateTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default memo(CreateTopicAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './EditTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default memo(EditTopicAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectChat,\n  selectCurrentMessageList, selectTabState,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n    closeCreateTopicPanel, closeEditTopicPanel,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}`}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return (\n          <RightSearch\n            key={`right_search_${chatId!}`}\n            chatId={chatId!}\n            threadId={threadId!}\n            onClose={close}\n            isActive={isOpen && isActive}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState, TabState } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  messages?: GlobalState['messages']['byChatId'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages![chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n    const hasActiveDownloads = Object.values(activeDownloads).some((messageIds) => messageIds.length);\n\n    return {\n      activeDownloads,\n      messages: hasActiveDownloads ? global.messages.byChatId : undefined,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { createLocationHash } from '../../util/routing';\nimport { selectTabState } from '../../global/selectors';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default memo(AttachBotInstallModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\nimport { selectTabState } from '../../global/selectors';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(DraftRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(AttachBotRecipientPickerAsync);\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../util/moduleLoader';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ninterface LocalOwnProps {\n  shouldLoad?: boolean;\n}\n\nconst ReactionPickerAsync: FC<OwnProps & LocalOwnProps> = (props) => {\n  const { isOpen, shouldLoad } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen && !shouldLoad);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default memo(ReactionPickerAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default memo(ChatlistModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { LangCode } from '../../types';\nimport type {\n  ApiAttachBot,\n  ApiChat,\n  ApiChatFolder,\n  ApiMessage,\n  ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/windowEnvironment';\nimport {\n  selectChatMessage,\n  selectTabState,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n  selectIsReactionPickerOpen,\n  selectPerformanceSettingsValue,\n  selectCanAnimateInterface,\n  selectChatFolder,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport updateIcon from '../../util/updateIcon';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport ReactionPicker from '../middle/message/ReactionPicker.async';\nimport ChatlistModal from '../modals/chatlist/ChatlistModal.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUser?: ApiUser;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isCurrentUserPremium?: boolean;\n  chatlistModal?: TabState['chatlistModal'];\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\nconst REACTION_PICKER_LOADING_DELAY_MS = 7000; // 7 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  lastSyncTime,\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  chatlistModal,\n  noRightColumnAnimation,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadFeaturedEmojiStickers,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const [shouldLoadReactionPicker, markShouldLoadReactionPicker] = useFlag(false);\n  useTimeout(markShouldLoadReactionPicker, REACTION_PICKER_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadFeaturedEmojiStickers();\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachBots, loadContactList,\n    loadPremiumGifts, checkAppVersion, loadConfig, loadGenericEmojiEffects, loadDefaultTopicIcons, loadTopReactions,\n    loadDefaultStatusIcons, loadRecentReactions, loadRecentEmojiStatuses, isCurrentUserPremium, isMasterTab, initMain,\n  ]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab, lastSyncTime, loadDefaultStatusIcons, loadRecentEmojiStatuses]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime && isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime, isMasterTab, loadCustomEmojis]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [\n    lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds,\n    isMasterTab,\n  ]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (lastSyncTime && parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [lastSyncTime]);\n\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    if (!prevLastSyncTime && lastSyncTime) {\n      openChat({\n        id: parsedLocationHash.chatId,\n        threadId: parsedLocationHash.threadId,\n        type: parsedLocationHash.type,\n      });\n    }\n  }, [lastSyncTime, openChat]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useSyncEffect(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  }, [onTabFocusChange]);\n\n  const handleFocus = useCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  }, [onTabFocusChange, updatePageTitle]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    closeStickerSetModal();\n  }, [closeStickerSetModal]);\n\n  const handleCustomEmojiSetsModalClose = useCallback(() => {\n    closeCustomEmojiSets();\n  }, [closeCustomEmojiSets]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn />\n      <MiddleColumn isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <ChatlistModal info={chatlistModal} />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} shouldLoad={shouldLoadReactionPicker} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n      lastSyncTime,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n      chatlistModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      lastSyncTime,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUser,\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      chatlistModal,\n      noRightColumnAnimation,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","_len","arguments","length","_ref","Array","_key","tabId","getCurrentTabId","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","undefined","replaceLocalTextSearchResults","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","selectTabState","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","currentMessageList","tabState","premiumModal","promo","isOpen","updateTabState","replaceTabThreadParam","activeReactions","exitMessageSelectMode","isStatisticsShown","contentToBeScheduled","forwardMessages","toChatId","chat","selectChat","isForum","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","window","open","createMessageHashUrl","isChatInfoShown","lastIsChatInfoShown","setGlobal","openChat","text","files","filter","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","deleteFolderDialogModal","chatlistModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectChatScheduledMessages","selectChatMessages","messages","map","message","selectAllowedMessageActions","canCopy","sort","message1","message2","result","reduce","acc","sender","selectSender","push","getSenderTitle","emoji","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","join","getMessageSummaryDescription","renderMessageSummaryHtml","resultText","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","replaceThreadParam","messageId","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","Number","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","getIsMobile","pollResults","voters","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","forceOnHeavyAnimation","direction","loadViewportMessages","shouldForceRender","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","RELEASE_DATETIME","Date","now","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","content","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","_ref2","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","activeLanguage","selectRequestedTranslationLanguage","messageLanguageModal","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","isClosing","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickerSearch","resultIds","gifSearch","offset","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","updateIcon","asUnread","document","querySelectorAll","link","href","replace","setPageTitleInstant","nextTitle","title","setPageTitle","debounce","notificationInterval","prevIsScreenLocked","force","leftColumnWidth","management","isActive","screen","nextScreen","getIsTablet","isLeftColumnShown","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","sticker","recent","stickers","hash","newStickers","s","documentId","recentCustomEmojis","order","isCustomEmoji","added","setIds","customEmojis","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","l","lastDelimiter","allowedContentString","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","selectIsTrustedBot","botTrustRequest","onConfirm","action","openedGame","top","left","width","height","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","topicId","editTopicPanel","archiveSettings","isHidden","isMinimized","APP_VERSION_REGEX","fetch","then","response","trim","test","isUpdateAvailable","catch","DEBUG","console","error","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","settings","byKey","currentUserId","INACTIVE_MARKER","PAGE_TITLE","round","newUnread","messageList","passcode","isScreenLocked","currentChat","getChatTitle","topics","onlineTimeout","prevBlurredTabsCount","addCallback","updateIsOnline","getActions","isLockedUpdated","blurredTabsCount","values","byTabId","isMasterTab","newBlurredTabsCount","getAllMultitabTokens","status","payment","clearPayment","closeInvoice","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","noLockOnUnload","onBeforeUnload","hasPasscode","clearStoredSession","async","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","previousGlobal","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","_global$passcode$inva","timeoutUntil","reactionPicker","uploadProgressCallbacks","Map","runDebouncedForMarkRead","cb","offsetId","isOutlying","isBudgetPreload","_len2","_ref3","_key2","addOffset","LoadMoreDirection","MESSAGE_LIST_SLICE","callApi","users","repliesThreadInfos","localMessages","_ref4","isDeleted","_ref5","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingLists","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","sliceSize","from","to","areSomeLocal","areAllLocal","sendMessage","params","_len3","_ref6","_key3","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","replyingToTopId","delete","isRestricted","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","updateChatMessage","replyMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","omit","scheduledAt","replyingToMessage","replyToTopMessageId","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","isFirst","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","draft","shouldForce","user","selectUser","isDeletedUser","isLocal","updateChat","draftDate","replyToMsgId","localOnly","selectDraft","newDraft","isUnpin","isOneSide","isSilent","topId","pinnedIds","selectPinnedIds","isPinned","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","translate","isUserBot","minId","selectFirstUnreadId","unreadCount","readCount","count","countSortedIds","topic","updateThreadInfo","lastReadInboxMessageId","newTopicUnreadCount","updateTopic","webPagePreview","options","poll","option","shouldResetVoters","offsets","nextOffset","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","selectThreadIdFromMessage","scheduledInThread","entries","scheduledIds","selectScheduledMessage","originChannelId","selectThreadOriginChat","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","customEmoji","safeReplacePinnedIds","seenByUserIds","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","URL","autologinDomains","hostname","searchParams","autologinToken","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","showDialog","getUserFullName","selectForwardsCanBeSentToChat","closeMediaViewer","showAllowedMessageTypesNotification","toLanguageCode","selectLanguageCode","updateRequestedMessageTranslation","removeRequestedMessageTranslation","updateMessageTranslation","isPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","loadMessageViews","_ref7","shouldIncrement","shouldSendAsFile","mimeType","GIF_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","Set","add","update","views","forwards","repliesChatId","repliesThreadInfo","messagesCount","recentReplierIds","readMaxId","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchWords","updateStickerSearch","config","gifSearchUsername","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","searchSharedMedia","SHARED_MEDIA_SLICE","topMessageId","newFoundIds","selectCurrentMediaSearch","updateLocalMediaSearchResults","releaseStatusTimeout","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","currentResults","timestamp","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","editingDraft","selectEditingDraft","currentChatId","currentThreadId","activeThreadId","lastReadInboxId","newCurrentChatId","currentChatMessages","topicLastMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","otherChatId","otherThreadId","updateChats","updateUsers","loadTopics","loadTopicById","shouldCloseChatOnError","threads","updateThread","_ref8","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","connectionState","authState","sync","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","newUser","newFullInfo","avatarHash","profilePhoto","fallbackPhoto","personalPhoto","photos","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","isPrivate","isUserId","userOrChat","userSearch","updateUserSearchFetchingStatus","emojiStatus","expires","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","isWriteAllowed","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","openUrl","openGame","alert","isError","getPaymentForm","inputInvoice","form","invoice","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","_len4","_key4","shippingOptions","setRequestInfoId","updateShippingOptions","button","openPollModal","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","newResults","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","appName","startApp","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","requestedAttachBotInstall","botUser","actionPayload","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","isPaymentModalOpen","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","step","isClosed","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","userReactions","currentReactions","reactions","isReactionChosen","chosenOrder","reaction","existingIndex","r","isSameReaction","recentReactions","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","y","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","timestamps","selectDefaultReaction","isMessageLocal","toggleReaction","shouldAddToRecent","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","getUserReactions","hasReaction","some","userReaction","newUserReactions","selectMaxUserReactions","selectPerformanceSettingsValue","newActiveReactions","active","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","topReactions","isGroup","selectChatFullInfo","dcId","statisticsDcId","stats","recentTopMessages","msgId","updateStatistics","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","ANIMATION_DELAY","updateReactions","areDeepEqual","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","firstUnreadId","candidateGlobal","updateChatLastMessage","currentLastMessage","selectTopicFromMessage","findLastMessage","deleteMessages","newLastMessage","clearMessageTranslation","deleteTopic","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","isTopicReply","selectIsMessageInCurrentMessageList","getMessageText","selectScheduledIds","threadScheduledIds","deleteChatScheduledMessages","thread","markMessageListRead","pickTruthy","updatePerThread","currentUpdatedInThread","newPinnedIds","currentThreadInfo","newThreadInfo","lastReadInboxMessageIdInThread","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","removeChatFromChatLists","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","isChosen","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","media","preview","extendedMedia","transcriptions","sendingState","translations","updateMessageTranslations","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","updateUserFullInfo","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedContact","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","lastCallback","useLastCallback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","React","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","isLottie","stickerHash","getStickerPreviewHash","previewMediaData","useMedia","paths","useMemo","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","buildClassName","path","style","CustomEmoji","styles","withSharedAnimation","src","alt","StatusPickerMenu","withGlobal","currentUser","setEmojiStatus","loadCurrentUser","buttonRef","useRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","useCallback","handleEmojiStatusClick","CustomEmojiEffect","ref","ripple","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","onClose","searchQuery","isConnectionStatusMinimized","animationLevel","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","isAuthRememberMe","authRememberMe","shouldHideSearch","contactsFilter","onSearchQuery","isClosingSearch","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","updatePerformanceSettings","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","archivedUnreadChatsCount","chatsCount","handleLockScreenHotkey","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ariaLabel","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","ANIMATION_LEVEL_MAX","ANIMATION_LEVEL_MIN","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","localStorage","setItem","clearWebsync","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","animationLevelValue","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","menuItems","MenuItem","icon","Switcher","label","checked","noAnimation","Toggle","isCharIcon","getPromptInstall","DropdownMenu","trigger","footer","APP_NAME","positionX","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","orderedFolderIds","folderInvitesById","archived","shouldSkipHistoryAnimations","hasArchivedChats","maxFolders","maxFolderInvites","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","allChatsFolder","ALL_FOLDER_ID","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","destructive","badgeCount","isBadgeActive","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","renderCount","LeftSearch","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionY","autoClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","reload","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","fluid","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleTopicSearch","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_MAC_OS","useSyncEffect","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","classList","remove","useLayoutEffect","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleSettingsScreenSelect","renderContent","currentScreen","onScreenSelect","isChannel","LeftMain","LAYERS_ANIMATION_NAME","afterChildren","onMouseDown","onMouseUp","onDoubleClick","drawRect","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","isFullWidth","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","getMessageMediaHash","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleClick","handleMouseDown","useFastClick","ConfirmDialog","confirmLabel","confirmHandler","PinnedMessageNavigation","thumbDataUri","spoiler","getPictogramDimensions","srcUrl","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","renderText","MessageSummary","noEmoji","RippleEffect","shouldStopPropagation","LUMA_THRESHOLD","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","averageColor","getAverageColor","fillColor","getColorLuma","res","canvas","createElement","ctx2D","getContext","fillStyle","fillRect","ctx","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","globalCompositeOperation","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onContextMenu","volumeIcon","renderAudio","subtitle","renderVoice","disabled","RangeSlider","bold","forceOpen","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","confirmIsDestructive","Checkbox","onCheck","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatChannel","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","selectIsChatWithSelf","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","isComments","firstPinnedMessage","isReady","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","useDerivedState","waitingForPinnedId","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handleHeaderMouseDown","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","usePrevious","canRevealTools","componentEl","requestMutation","renderBackButton","asClose","withUnreadCounter","UnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","emojiStatusSize","noRtl","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderPinnedMessage","ChatReportPanel","AudioPlayer","getMessageKey","HeaderActions","canExpandActions","GROUP_INTERVAL_SECONDS","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","DEBOUNCE","STICKY_TOP","STICKY_TOP_WITH_TOOLS","INTERSECTION_THROTTLE_FOR_MEDIA","MIN_MEDIA_WIDTH_WITH_COMMENTS","MIN_MEDIA_WIDTH_WITH_TEXT","MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS","MIN_MEDIA_WIDTH","MIN_MEDIA_HEIGHT","SMALL_IMAGE_THRESHOLD","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","asForwarded","noAvatars","isOwn","isOwnMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","isWebPageVideo","getMessageWebPageVideo","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","AlbumRectPart","None","Top","Right","Bottom","Left","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","BOTTOM_FOCUS_OFFSET","RELOCATED_FOCUS_OFFSET","FOCUS_MARGIN","useFocusMessage","isFocused","focusDirection","noFocusHighlight","isJustAdded","isRelocatedRef","isRelocated","messagesContainer","closest","isToBottom","exec","animateScroll","requestForcedReflow","requestMeasure","ANDROID_KEYBOARD_HIDE_DELAY_MS","SWIPE_ANIMATION_DURATION","QUICK_REACTION_DOUBLE_TAP_DELAY","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","useThrottledCallback","quickReactionContainer","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","startedAt","excludedClosestSelector","onRelease","preventMessageInputBlur","target","contains","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","DEFAULT_THRESHOLD","worker","initializationDeferred","_defineProperty","promise","reject","createConnector","Worker","ContextMenuContainer","openMediaViewer","uploadProfilePhoto","cropModalBlob","setCropModalBlob","isVideoModalOpen","openVideoModal","closeVideoModal","suggestedPhotoUrl","showAvatarNotification","actionText","handleSetSuggestedAvatar","handleCloseCropModal","handleSetVideo","File","videoTs","videoSizes","videoStartTs","role","MediaViewerOrigin","Avatar","loopIndefinitely","withVideo","CropModal","textParts","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","premiumGiftSticker","canPlayAnimatedEmojis","selectCanPlayAnimatedEmojis","isEmbedded","appearanceOrder","isLastInList","isInsideTopic","memoFirstUnreadIdRef","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","onPinnedIntersectionChange","requestConfetti","useOnIntersect","viewportPinnedIdsToRemove","isUnmount","noAppearanceAnimation","markShown","isSuggestedAvatar","useIsIntersecting","shouldShowConfettiRef","usersById","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","handlePremiumGiftClick","AnimatedIconFromSticker","play","noLoop","nonInteractive","ActionMessageSuggestedAvatar","anchor","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","ActionMessage","outgoingStatus","signature","withReactionOffset","renderQuickReactionButton","noReplies","isTranslated","onTranslationClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","formatDateTimeToString","timeFormat","editDateTime","isEdited","editDate","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","observeIntersection","shouldLoop","shouldPlayEffect","withEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","cacheBuster","AnimatedSticker","tgsUrl","isLowPriority","onEnded","SIZE","INTERACTION_BUNCH_TIME","MS_DIVIDER","TIME_DEFAULT","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","container","performance","interactionMessageId","withEffects","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","forceLoadPreview","quality","forcePreview","LIKE_STICKER_ID","customEmojiId","getCustomEmojiSize","isBig","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","crossOrigin","getImageData","getAppendixColorFromImage","useBlurredMediaThumbRef","forcedUri","dataUri","getMessageMediaThumbDataUri","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","canAutoLoad","uploadProgress","forcedWidth","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","fullMediaData","withBlurredBackground","withThumb","noThumb","thumbRef","blurredBackgroundRef","thumbClassNames","useMediaTransition","isSpoilerShown","hideSpoiler","downloadProgress","getMessageMediaFormat","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","MESSAGE_CONTENT_SELECTOR","CUSTOM_APPENDIX_ATTRIBUTE","contentEl","appendixBg","dimensionsStyle","ProgressSpinner","withAnimation","canAutoPlay","videoRef","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","isPlayerReady","markPlayerReady","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","isInline","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","cancelMessageMediaDownload","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","isRegistered","formatPhoneNumberWithCode","getPercentage","total","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","PollOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","handleQuickButtonClick","siteName","displayUrl","quickButtonLangKey","getWebpageButtonText","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","Photo","SafeLink","Video","langKey","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","Skeleton","forceAspectRatio","loadExtendedMedia","refreshExtendedMedia","useInterval","VENUE_COLORS","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","prevShouldRenderText","long","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","VideoWithSelect","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","playerRef","shouldSpinnerRender","setIsActivated","getProgress","setProgress","useSignal","getThrottledProgress","useThrottledSignal","playerEl","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playingProgressEl","shouldPlay","stopPlaying","capturePlaying","paused","stopCurrentAudio","renderIcon","openComments","recentRepliers","chatsById","hasUnread","commentsText","CENTER_ICON_SIZE","EFFECT_SIZE","genericEffects","stopActiveReaction","centerIconId","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","onLoad","withRecentReactors","recentReactors","recentReaction","ReactionAnimatedEmoji","isOutside","metaChildren","noRecentReactors","ReactionButton","getReactionUniqueKey","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","APPENDIX_OWN","APPENDIX_NOT_OWN","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","chatFullInfo","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","isLocation","chatTranslations","selectChatTranslations","requestedTranslationLanguage","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","areTranslationsEnabled","canTranslate","hasLinkedChat","linkedChatId","withReactionEffects","withStickerEffects","selectOutgoingStatus","observeIntersectionForBottom","noComments","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","openAudioPlayer","sendPollVote","focusMessageInComments","openMessageLanguageModal","channelPostId","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","detectedLanguage","setLanguage","threshold","args","detectLanguage","useTextLanguage","isTranslationPending","translatedText","requestedLanguageCode","translateMessages","messageTranslation","byLangCode","useMessageTranslation","previousTranslatedText","currentText","currentTranslatedText","isMediaWidthWithCommentButton","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","postAuthorTitle","useAuthorWidth","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","calculatedWidth","reactionsMaxWidth","contentWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","isForAnimation","MessageText","withTranslucentThumbs","renderReactionsAndMeta","meta","MessageMeta","Reactions","forwardAuthor","chatUsername","c","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","fakeType","FakeIcon","renderSenderName","TopicChip","EmbeddedMessage","Sticker","AnimatedCustomEmoji","AnimatedEmoji","Album","MessagePhoneCall","RoundVideo","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","Contact","Poll","Game","InvoiceMediaPreview","DotAnimation","WebPage","Invoice","Location","CommentButton","InlineButtons","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","messageGroups","getContainerHeight","isViewportNewest","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","useBackgroundMode","margin","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","toggleScrollToolsRef","useStateRef","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","isTopicTopMessage","Message","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","SponsoredMessage","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","chatBotFullInfo","isChatLoaded","isGroupChat","isCreator","threadFirstMessageId","selectFirstMessageId","noMessageSendingAnimation","isServiceNotificationsChat","hasTools","canPost","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","parentElement","prevContainerHeightRef","isComposerVisible","setContainerHeight","currentNormalHeight","normalHeight","String","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","bottomOffset","isAlreadyFocusing","isResized","newScrollTop","newAnchorTop","resetScroll","restartCurrentScrollAnimation","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","isEmptyTopic","isBotInfoEmpty","onScroll","ContactGreeting","NoMessages","MessageListContent","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","ScrollDownButton","MAX_QUICK_IMG_SIZE","MAX_ASPECT_RATIO","FILE_EXT_REGEX","buildAttachment","filename","quick","preloadImage","validateAspectRatio","shouldShrink","compressedBlobUrl","resizedUrl","videoWidth","videoHeight","preloadVideo","createPosterForVideo","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","uniqueId","prepareAttachmentsToSend","shouldSendCompressed","attach","shouldSendAsSpoiler","resetInput","applyIosAutoCapitalizationFix","inputEl","appendChild","STARTS_ENDS_ON_EMOJI_IMG_REGEX","RegExp","EMOJI_IMG_REGEX","encoderPath","MIN_RECORDING_TIME","POLYFILL_OPTIONS","reuseWorker","BLOB_PARAMS","FFT_SIZE","MIN_VOLUME","opusRecorderPromise","OpusRecorder","mediaRecorder","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","subscribeToAnalyzer","onstop","onerror","delayStop","GDOCS_ELEMENT_ID_REGEXP","GDOCS_STYLES","BOLD","ITALIC","UNDERLINE","STRIKETHROUGH","SUPERSCRIPT","SUBSCRIPT","ELEMENTS","ANCHOR","parseHtml","html","DOMParser","parseFromString","wrapNodeAnchor","node","cloneNode","wrapNodeInline","wrapNode","inner","newNode","fontWeight","fontStyle","textDecoration","verticalAlign","applyInlineStyles","dirty","createTextNode","styledNode","nodeName","childNodes","getCleanNode","newWrapper","createDocumentFragment","items","applyBlockStyles","nodes","filterNode","nodeType","STYLE_TAG_REGEX","useClipboardPaste","insertTextAndUpdateCursor","setAttachments","editedMessage","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_ID","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","pastedFormattedText","fragment","clipboardContent","filteredNodes","cleanNodes","getCleanDocument","textContents","getElementsByTagName","HTMLElement","tagName","replaceWith","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","innerText","ApiMessageEntityTypes","trimEnd","preparePastedHtml","containsCustomEmoji","stripCustomEmoji","getFilesFromDataTransferItems","newAttachments","textToPaste","URL_ENTITIES","THROTTLE","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","buildQueryStateMemo","memoized","RE_COMMAND","isFrozen","DeleteMessageModal","COLOR_REPLACE_PATTERN","isTouchScreen","iconSvg","mediaDataWithReplacedColors","doc","stroke","strokeWidth","documentElement","outerHTML","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","menuPosition","setMenuPosition","rect","right","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","AttachBotIcon","Portal","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","canSendVideoAndPhoto","canSendVideoOrPhoto","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","shouldSuggestCompression","validatedFiles","validateFiles","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ResponsiveHoverButton","onActivate","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","AttachBotItem","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","keyboardButtons","noCompact","shouldForceShowEditing","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useMenuPosition","leftIcon","strippedMessage","strippedText","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","getHtml","loadWebPagePreview","toggleMessageWebPage","detectLinkDebounced","useDebouncedResolver","linkEntity","entity","getLink","useDerivedSignal","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","REPLIES_USER_ID","isChatWithUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","adminRights","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","slowMode","selectEditingScheduledDraft","isOnActiveTab","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","dropAreaState","onDropHide","clearDraft","closePollModal","loadScheduledHistory","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","appendixRef","inputRef","setHtml","getSelectionRange","useGetSelectionRange","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","processMessageInputForCustomEmoji","customEmojiNotificationNumber","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","hasAttachments","canSendGifs","canAttachEmbedLinks","isComposerBlocked","shouldForceCompression","shouldForceAsFile","handleAppendFiles","onCaptionUpdate","handleClearAttachments","handleSetAttachments","setShouldForceAsFile","setShouldForceCompression","setShouldSuggestCompression","newValue","suggestCompression","useAttachmentModal","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","useVoiceRecording","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","SEND_MESSAGE_ACTION_INTERVAL","isEditingRef","isChatAdmin","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","useEmojiTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isStickerTooltipOpen","closeStickerTooltip","loadStickersForEmoji","clearStickersForEmoji","isManuallyClosed","markManuallyClosed","unmarkManuallyClosed","getSingleEmoji","IS_EMOJI_SUPPORTED","twemojiRegex","cleanHtml","prepareForRegExp","parseEmojiOnlyString","hasStickers","useStickerTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotSwitchWebview","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetAllInlineBots","extractBotQueryThrottled","useThrottledResolver","getPlainText","parseBotQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","detectCommandThrottled","getCommand","nextFilteredBotCommands","useBotCommandTooltip","insertHtmlAndUpdateCursor","newHtml","selection","getSelection","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","requestNextMutation","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","useDraft","saveDraft","isEditing","updateDraft","prevState","_prevState$chatId","_prevState$threadId","_prevState$chatId2","_prevState$threadId2","updateDraftRef","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevDraft","customEmojiIds","chatIdRef","threadIdRef","forceUpdateDraft","scopedShatId","scopedThreadId","resetComposer","handleEditComplete","handleEditCancel","useEditing","editMessage","setEditingDraft","setShouldForceShowEditing","prevEditedMessage","prevReplyingToId","shouldSetNoWebPage","edited","getShouldResetNoWebPageDebounced","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","resetComposerRef","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isCustomSendMenuOpen","handleEmbeddedClear","validateTextLength","isAttachmentModal","maxLength","extraLength","textParams","checkSlowMode","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","sendAttachments","attachmentsToSend","sendCompressed","sendGrouped","shouldUpdateStickerSetsOrder","handleSendAttachments","handleSend","currentAttachments","record","handleClickBotMenu","handleActivateBotCommandMenu","handleMessageSchedule","restArgs","prevContentToBeScheduled","handleCustomEmojiSelect","isFree","handleCustomEmojiSelectAttachmentModal","handleGifSelect","isScheduleRequested","shouldPreserveInput","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","sendSilent","additionalArgs","handleSendAsMenuOpen","insertTextAndUpdateCursorAttachmentModal","removeSymbol","execCommand","tempInput","contentEditable","lastChild","textLength","range","createRange","setStart","setEnd","removeAllRanges","addRange","removeChild","deleteLastCharacterOutsideSelection","removeSymbolAttachmentModal","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","handleSendScheduled","handleSendSilent","handleSendWhenOnline","handleSendScheduledAttachments","handleSendSilentAttachments","onSend","withBotMenuButton","isBotMenuButtonOpen","withBotCommands","DropAreaState","withQuick","onSendSilent","onSendScheduled","onFileAppend","onAttachmentsUpdate","onCustomEmojiSelect","onRemoveSymbol","onEmojiSelect","shouldBeAnonymous","selectedSendAsId","filteredUsers","onInsertUserName","withUsername","isSavedMessages","onSelectResult","ComposerEmbeddedMessage","WebPagePreview","BotMenuButton","SymbolMenuButton","onGifSelect","onStickerSelect","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","AttachMenu","BotKeyboardMenu","CustomEmojiTooltip","EmojiTooltip","allowDisabledClick","noFastClick","CustomSendMenu","onSendSchedule","onSendWhenOnline","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","MessageLanguageModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isMessageLanguageModalOpen","withInterfaceAnimations","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","shouldJoinToSend","isJoinToSend","shouldLoadFullChat","shouldBlockSendInForum","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","unpinAllMessages","loadUser","joinChannel","restartBot","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","toggle","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","customBackgroundValue","useCustomBackground","settingValue","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","MiddleHeader","onStop","MessageList","Composer","FloatingActionButtons","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","isEditingInvite","canViewStatistics","_useCurrentOrPrev","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","ManagementScreens","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","CreateTopic","EditTopic","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","renderingActiveTab","tabType","resultType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","isFirstTab","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","StickerSearchAsync","GifSearchAsync","PollResultsAsync","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","RightHeader","MediaViewer","LIMIT_PER_BATCH","BATCH_INTERVAL","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","downloadWindow","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createLocationHash","_extends","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","CONFETTI_COLORS","pick","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","beginPath","ellipse","fill","hideTimeout","prevConfettiTime","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","ReactionPicker","info","ChatlistModal","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","isPremiumModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadTopReactions","loadFeaturedEmojiStickers","loadBundle","shouldLoadReactionPicker","markShouldLoadReactionPicker","isDesktop","langCode","prevLastSyncTime","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","parentNode","childElementCount","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","AnimatedIconWithPreview","LOCAL_TGS_URLS","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}