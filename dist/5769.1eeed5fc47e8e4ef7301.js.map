{"version":3,"file":"5769.1eeed5fc47e8e4ef7301.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.module.scss?16ed","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/util/permanentWebVersion.ts","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/hooks/useMessageTranslation.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/util/primitives/LimitedMap.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessageSuggestedAvatar.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/helpers/webpageType.ts","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/hooks/useAuthorWidth.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/lib/cleanDocsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useAttachmentModal.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\nimport { selectSendAs, selectTabState } from '../selectors';\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat, ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction, ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  deleteTopic,\n  updateMessageTranslations,\n  clearMessageTranslation,\n  removeChatFromChatLists,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsServiceChatReady,\n  selectThreadIdFromMessage,\n  selectTopicFromMessage,\n  selectTabState,\n  selectSendAs,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions, isActionMessage,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action)) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo && !isLocal) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: tabState.activeEmojiInteractions?.length || 0,\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (threadInfo.topMessageId === threadId && !chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = newThreadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const currentSendAs = selectSendAs(global, message.chatId);\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(peerId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (currentSendAs?.id === peerId || peerId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message) && !isActionMessage(message)) {\n      global = updateThreadInfo(global, chatId, threadInfo.threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceSettings,\n  replaceThreadParam,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectTranslationLanguage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectUser,\n  selectUserFullInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport {\n  getMessageOriginalId,\n  getUserFullName, isChatChannel,\n  isDeletedUser, isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport { translate } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { deleteMessages } from '../apiUpdaters/messages';\nimport Deferred from '../../../util/Deferred';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\nlet lastSendMessageDeferred = Deferred.resolved();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  if (!messageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = messageList;\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n\n  const replyingToTopId = chat.isForum\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  const params = {\n    ...payload,\n    chat,\n    currentThreadId: messageList.threadId,\n    replyingTo: replyingToId,\n    replyingToTopId,\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        });\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          });\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, draft, shouldForce,\n  } = payload;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  draft.isLocal = true;\n  draft.shouldForce = shouldForce;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (result) {\n    draft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, localOnly, shouldForce,\n  } = payload;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  const newDraft: ApiDraft | undefined = shouldForce ? { shouldForce, text: '' } : undefined;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await lastSendMessageDeferred.promise;\n      await callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n      });\n    })();\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyingToTopId: toThreadId,\n        currentThreadId: toThreadId || MAIN_THREAD_ID,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const originChannelId = selectThreadOriginChat(global, chatId, threadId)?.id;\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, chatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId) || {};\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(threadId);\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingList! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  currentThreadId: number;\n  replyingToTopId?: number;\n  groupedId?: string;\n}) {\n  lastSendMessageDeferred = new Deferred();\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  global = getGlobal();\n  if (params.currentThreadId === undefined) {\n    return;\n  }\n\n  if (!params.replyingTo && params.currentThreadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, params.currentThreadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && params.currentThreadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, params.currentThreadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n\n  lastSendMessageDeferred.resolve();\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    let fullInfo = selectUserFullInfo(global, chatId);\n    if (!fullInfo) {\n      const { accessHash } = user;\n      const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n      user = result?.user;\n      fullInfo = result?.fullInfo;\n    }\n\n    if (fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      views: update.views,\n      forwards: update.forwards,\n    });\n\n    const message = selectChatMessage(global, chatId, update.id);\n    if (!message) return;\n\n    const repliesChatId = message.repliesThreadInfo?.chatId;\n    const threadId = message.repliesThreadInfo?.threadId;\n    if (!repliesChatId || !threadId) return;\n\n    global = updateThreadInfo(global, repliesChatId, threadId, {\n      messagesCount: update.messagesCount,\n      recentReplierIds: update.recentReplierIds,\n      lastMessageId: update.maxId,\n      lastReadInboxMessageId: update.readMaxId,\n    });\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectTabState, selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { translate } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiChat, ApiTopic, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateTopics,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery, selectTabState } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        localChats, localUsers, globalChats, globalUsers,\n      } = result;\n\n      if (localChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n      }\n\n      if (localUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: localChats.map(({ id }) => id),\n          userIds: localUsers.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/langProvider';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread, updateThreadInfo,\n  updateThreadInfos,\n  updateUsers,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId, selectReplyingToId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport { updateTabState } from '../../reducers/tabs';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = {\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n          replyingToId: selectReplyingToId(global, chatId, Number(threadId)),\n        };\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = allMessages.map(({ id }) => id);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        if (threadInfo?.originChannelId) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, threadInfo);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        if (result.repliesThreadInfos.length) {\n          global = updateThreadInfos(global, result.repliesThreadInfos);\n        }\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { translate } from '../../../util/langProvider';\nimport { addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  if ((hasChangedAvatarHash || hasChangedProfilePhoto || hasChangedFallbackPhoto || hasChangedPersonalPhoto)\n    && user.photos?.length) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, profileId);\n  if (user && !fullInfo?.profilePhoto) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n\n    user = result.user;\n    fullInfo = result.fullInfo;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n  const fallbackPhoto = fullInfo?.fallbackPhoto;\n  const personalPhoto = fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n","import type { GlobalState, TabArgs } from '../types';\nimport type { InlineBotSettings } from '../../types';\nimport { updateTabState } from './tabs';\nimport { selectTabState } from '../selectors';\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState, selectBot,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser, selectThreadTopMessageId, selectUserFullInfo,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { translate } from '../../../util/langProvider';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, threadId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedContact(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, MAIN_THREAD_ID, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    botId = message.viaBotId || message.senderId;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n  const replyingToTopId = (chat.isForum || threadId !== MAIN_THREAD_ID)\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: replyingToId || replyingToTopId,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockContact', bot.id, bot.accessHash);\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: translate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive && !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  await loadAttachBots(global, hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(global, bot, isEnabled, isWriteAllowed);\n});\n\nasync function toggleAttachBot<T extends GlobalState>(\n  global: T, bot: ApiUser, isEnabled: boolean, isWriteAllowed?: boolean,\n) {\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n  global = getGlobal();\n  await loadAttachBots(global);\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, bot, url, startParam, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isFromBotMenu = !bot;\n  if (!isFromBotMenu && !global.attachMenu.bots[bot.id]) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload,\n        },\n      },\n    }, tabId);\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId, threadId, tabId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId: isFromBotMenu ? chatId : bot.id,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n    tabId,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  await toggleAttachBot(global, botUser, true, isWriteAllowed);\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, threadId = MAIN_THREAD_ID, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyingToTopId: threadId,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice, selectTabState,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  isSameReaction, getUserReactions, isMessageLocal, getDocumentMediaHash,\n} from '../../helpers';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation), ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const tabState = selectTabState(global, tabId);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    const newActiveReactions = hasReaction ? omit(tabState.activeReactions, [messageId]) : {\n      ...tabState.activeReactions,\n      [messageId]: [\n        ...(tabState.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = updateTabState(global, {\n      activeReactions: newActiveReactions,\n    }, tabId);\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { messageId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = tabState.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [messageId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: [],\n  };\n  setGlobal(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  updateStatistics, updateMessageStatistics, updateStatisticsGraph, addUsers,\n} from '../../reducers';\nimport { selectChatMessages, selectChat, selectChatFullInfo } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { IS_ELECTRON } from '../../../config';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== id\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\nimport type {\n  GlobalState, ActionReturnType,\n} from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  replaceTabThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n  cancelMessageMediaDownload,\n  addActiveMessageMediaDownload,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectChatScheduledMessages,\n  selectTabState,\n  selectRequestedMessageTranslationLanguage,\n  selectPinnedIds,\n  selectRequestedChatTranslationLanguage,\n} from '../../selectors';\nimport { compact, findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle, isChatChannel } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      const chat = selectChat(global, chatId);\n\n      lastMessageId = chat?.lastMessage?.id;\n    }\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, threadId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openChat({\n      id: chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return cancelMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  for (const message of messages) {\n    global = cancelMessageMediaDownload(global, message, tabId);\n  }\n\n  return global;\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return addActiveMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { IS_ELECTRON } from '../config';\nimport { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE, IS_ELECTRON,\n} from '../../../config';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectTabState,\n} from '../../selectors';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport { compact, unique } from '../../../util/iteratees';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\nimport * as langProvider from '../../../util/langProvider';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  if (IS_ELECTRON) {\n    return;\n  }\n\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsAppUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : PAGE_TITLE);\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: playbackRate || tabState.mediaViewer.playbackRate || global.mediaViewer.lastPlaybackRate,\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { SettingsScreens } from '../../../types';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import { addActionHandler } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (id) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId: id,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  leaveChat,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectThreadParam,\n  selectChatFullInfo,\n  selectTabState,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport {\n  deleteContact, replaceUserStatuses, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUserFullInfo } from '../../selectors';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          // TODO Do not display modal if premium is bought from another device\n          if (update.user.isPremium) actions.openPremiumModal({ isSuccess: true, tabId });\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(global, update.id);\n      } else {\n        return removeBlockedContact(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.setReplyingToId({ messageId: undefined, tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport {\n  addNotifyException, updateChat, updateTopic, updateNotifySettings,\n} from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/windowEnvironment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage, selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nimport useLastCallback from './useLastCallback';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  const lastCallback = useLastCallback(callback);\n\n  useEffect(() => onBeforeUnload(lastCallback), [lastCallback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HAg4STRlxDV3frYuABYr\",\"particle\":\"HO3tML0GAC9vTH28baKB\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './CustomEmojiEffect.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji | ApiEmojiStatus;\n  className?: string;\n  isLottie?: boolean;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomEmojiEffect: FC<OwnProps> = ({\n  reaction,\n  isLottie,\n  className,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(!isLottie ? stickerHash : undefined);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData && !isLottie) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        if (isLottie) {\n          return (\n            <CustomEmoji\n              documentId={reaction.documentId}\n              className={styles.particle}\n              style={style}\n              withSharedAnimation\n            />\n          );\n        }\n\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiEffect);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useTimeout from '../../../hooks/useTimeout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport Button from '../../ui/Button';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../middle/message/CustomEmojiEffect';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  APP_NAME,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_ELECTRON,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport { IS_APP, IS_MAC_OS } from '../../../util/windowEnvironment';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\nimport { useFullscreenStatus } from '../../../hooks/useFullscreen';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport StatusButton from './StatusButton';\nimport Toggle from '../../ui/Toggle';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'archiveSettings'>\n  & Pick<TabState, 'canInstall'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  onSearchQuery,\n  isClosingSearch,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  canInstall,\n  archiveSettings,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n    openUrl,\n    updatePerformanceSettings,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid')\n    : 'min';\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={WEBK_VERSION_URL}\n          onClick={handleSwitchToWebK}\n        >\n          Switch to K Version\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  ), [\n    animationLevelValue, archivedUnreadChatsCount, canInstall, handleAnimationLevelChange, handleBugReportClick, lang,\n    handleChangelogClick, handleDarkModeToggle, handleOpenTipsChat, handleSelectSaved, handleSwitchToWebK,\n    onSelectArchived, onSelectContacts, onSelectSettings, theme, withOtherVersions, archiveSettings,\n  ]);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            chatOrUserId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          {menuItems}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      currentUserId, connectionState, isSyncing, archiveSettings,\n    } = global;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite } from '../../../api/types';\nimport type { SettingsScreens, LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../../global/types';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  archiveSettings,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={hasArchivedChats && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n      )}\n    >\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_ELECTRON } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\nimport ForumPanel from './ForumPanel';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { RefObject } from 'react';\nimport React, {\n  memo, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\n\nimport { IS_MAC_OS, IS_APP, LAYERS_ANIMATION_NAME } from '../../util/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isUpdateAvailable={isUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n    };\n  },\n)(LeftColumn));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinnedMessageBorder\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinned-message-border-wrapper-1\":\"QpNjYZM0KJrGrocs69__\",\"pinnedMessageBorderWrapper1\":\"QpNjYZM0KJrGrocs69__\",\"pinned-message-border-wrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinnedMessageBorderWrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinned-message-border-mark\":\"YX_iyQuDtga6uKXRQqR0\",\"pinnedMessageBorderMark\":\"YX_iyQuDtga6uKXRQqR0\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useLayoutEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TMOjo7XfD1ZiiuRtfpkm\",\"pinnedMessage\":\"uhn_g6FmUELuGJrCm45w\",\"messageText\":\"bSvmca5kaTIUh3yJBxnF\",\"loading\":\"d7XDT4Keip1KHh7mcCv9\",\"pinListIcon\":\"DusHAy2Lx0SlaPpVAb_o\",\"pinListIconHidden\":\"jSVbc8Hb7PjitJujB_dQ\",\"no-hover\":\"jeTsUEkDCkzGUVwy6lrL\",\"noHover\":\"jeTsUEkDCkzGUVwy6lrL\",\"messageTextTransition\":\"ugsKEK4Xb166oFMP8hHy\",\"withMedia\":\"FBCNFm307_rxATSHPSiN\",\"title\":\"q9_FnsHlndM1hZqZjxjM\",\"summary\":\"WRuyhyQK6mv28Mz8iK28\",\"inlineButton\":\"kXRuktM2s7UN91zOl0Tx\",\"pictogramTransition\":\"EK6juGhJwhsLLm4Aag2F\",\"pinnedThumb\":\"RFnmHP92f6CwfuR2Upaw\",\"pinnedThumbImage\":\"JfPOYkOcaMjS7Y5rsHZ4\",\"fade-in\":\"IkKnzordTRzWWtIbLHdD\",\"fadeIn\":\"IkKnzordTRzWWtIbLHdD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler\n          && <img className={styles.pinnedThumbImage} src={srcUrl} width={width} height={height} alt=\"\" />}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}>\n          <div className={styles.title} dir=\"auto\">\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                lang={lang}\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import { getAverageColor, getColorLuma } from './colors';\n\nconst LUMA_THRESHOLD = 240;\n\nexport function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      const averageColor = await getAverageColor(img.src);\n      const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx2D = canvas.getContext('2d')!;\n        ctx2D.fillStyle = fillColor;\n        ctx2D.fillRect(0, 0, canvas.width, canvas.height);\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          ctx2D.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nasync function steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  const averageColor = await getAverageColor(img.src);\n  const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n  ctx.fillStyle = fillColor;\n  ctx.globalCompositeOperation = 'destination-over';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectTabState, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\nimport useLastCallback from '../../hooks/useLastCallback';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash: accessHash! });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectTabState,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isComments?: boolean;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const { handleClick: handleHeaderClick, handleMouseDown: handleHeaderMouseDown } = useFastClick(() => {\n    openChatWithInfo({ id: chatId, threadId });\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage), undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              lang(isComments ? 'CommentsCount' : 'Replies', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div\n          className=\"chat-info-wrapper\"\n          onClick={handleHeaderClick}\n          onMouseDown={handleHeaderMouseDown}\n        >\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n        isComments: Boolean(threadInfo?.originChannelId),\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/useBackgroundMode';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions, REM } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isOwnMessage,\n  getMessageVideo,\n  getMessageWebPageVideo,\n} from '../../../../global/helpers';\n\nconst SMALL_IMAGE_THRESHOLD = 12;\nconst MIN_MESSAGE_LENGTH_FOR_BLUR = 40;\nexport const MIN_MEDIA_WIDTH_WITH_TEXT = 20 * REM;\nconst MIN_MEDIA_WIDTH = SMALL_IMAGE_THRESHOLD * REM;\nexport const MIN_MEDIA_HEIGHT = 5 * REM;\n\nexport function getMinMediaWidth(text?: string, hasCommentButton?: boolean) {\n  return (text?.length ?? 0) > MIN_MESSAGE_LENGTH_FOR_BLUR || hasCommentButton\n    ? MIN_MEDIA_WIDTH_WITH_TEXT\n    : MIN_MEDIA_WIDTH;\n}\n\nexport function calculateMediaDimensions(\n  message: ApiMessage, asForwarded?: boolean, noAvatars?: boolean, isMobile?: boolean,\n) {\n  const isOwn = isOwnMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, asForwarded, isWebPagePhoto, noAvatars, isMobile)\n    : calculateVideoDimensions(video!, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const messageText = getMessageText(message);\n  const minMediaWidth = getMinMediaWidth(messageText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { requestForcedReflow, requestMeasure, requestMutation } from '../../../../lib/fasterdom/fasterdom';\n\nimport type { FocusDirection } from '../../../../types';\n\nimport animateScroll from '../../../../util/animateScroll';\n\n// This is used when the viewport was replaced.\nconst BOTTOM_FOCUS_OFFSET = 500;\nconst RELOCATED_FOCUS_OFFSET = 750;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n  isJustAdded?: boolean,\n) {\n  const isRelocatedRef = useRef(!isJustAdded);\n\n  useLayoutEffect(() => {\n    const isRelocated = isRelocatedRef.current;\n    isRelocatedRef.current = false;\n\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n      // `noFocusHighlight` is always called with “scroll-to-bottom” buttons\n      const isToBottom = noFocusHighlight;\n\n      const exec = () => animateScroll(\n        messagesContainer,\n        elementRef.current!,\n        isToBottom ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? (isToBottom ? BOTTOM_FOCUS_OFFSET : RELOCATED_FOCUS_OFFSET) : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n        true,\n      );\n\n      if (isRelocated) {\n        // We need this to override scroll setting from Message List layout effect\n        requestForcedReflow(exec);\n      } else {\n        requestMeasure(() => {\n          requestMutation(exec()!);\n        });\n      }\n    }\n  }, [\n    elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer,\n  ]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { ChatTranslatedMessages } from '../../../../global/types';\nimport { throttle } from '../../../../util/schedulers';\n\nconst MESSAGE_LIMIT_PER_REQUEST = 20;\nconst THROTTLE_DELAY = 500;\nconst PENDING_TRANSLATIONS = new Map<string, Map<string, number[]>>();\n\nexport default function useMessageTranslation(\n  chatTranslations: ChatTranslatedMessages | undefined,\n  chatId?: string,\n  messageId?: number,\n  requestedLanguageCode?: string,\n) {\n  const messageTranslation = requestedLanguageCode && messageId\n    ? chatTranslations?.byLangCode[requestedLanguageCode]?.[messageId] : undefined;\n\n  const { isPending, text } = messageTranslation || {};\n\n  useEffect(() => {\n    if (!chatId || !messageId) return;\n\n    if (!text && isPending === undefined && requestedLanguageCode) {\n      addPendingTranslation(chatId, messageId, requestedLanguageCode);\n    }\n  }, [chatId, text, isPending, messageId, requestedLanguageCode]);\n\n  if (!chatId || !messageId) {\n    return {\n      isPending: false,\n      translatedText: undefined,\n    };\n  }\n\n  return {\n    isPending,\n    translatedText: text,\n  };\n}\n\nconst throttledProcessPending = throttle(processPending, THROTTLE_DELAY);\n\nfunction processPending() {\n  const { translateMessages } = getActions();\n  let hasUnprocessed = false;\n  PENDING_TRANSLATIONS.forEach((chats, toLanguageCode) => {\n    chats.forEach((messageIds, chatId) => {\n      const messageIdsToTranslate = messageIds.slice(0, MESSAGE_LIMIT_PER_REQUEST);\n\n      if (messageIdsToTranslate.length < messageIds.length) {\n        hasUnprocessed = true;\n      }\n\n      translateMessages({ chatId, messageIds: messageIdsToTranslate, toLanguageCode });\n\n      removePendingTranslations(chatId, messageIdsToTranslate, toLanguageCode);\n    });\n  });\n\n  if (hasUnprocessed) {\n    throttledProcessPending();\n  }\n}\n\nfunction addPendingTranslation(\n  chatId: string,\n  messageId: number,\n  toLanguageCode: string,\n) {\n  const languageTranslations = PENDING_TRANSLATIONS.get(toLanguageCode) || new Map<string, number[]>();\n  const messageIds = languageTranslations.get(chatId) || [];\n\n  if (messageIds.includes(messageId)) {\n    throttledProcessPending();\n    return;\n  }\n\n  messageIds.push(messageId);\n  languageTranslations.set(chatId, messageIds);\n  PENDING_TRANSLATIONS.set(toLanguageCode, languageTranslations);\n\n  getActions().markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  throttledProcessPending();\n}\n\nfunction removePendingTranslations(\n  chatId: string,\n  messageIds: number[],\n  toLanguageCode: string,\n) {\n  const languageTranslations = PENDING_TRANSLATIONS.get(toLanguageCode);\n  if (!languageTranslations?.size) {\n    PENDING_TRANSLATIONS.delete(toLanguageCode);\n    return;\n  }\n\n  const oldMessageIds = languageTranslations.get(chatId);\n  if (!oldMessageIds?.length) {\n    languageTranslations.delete(chatId);\n    return;\n  }\n\n  const newMessageIds = oldMessageIds.filter((id) => !messageIds.includes(id));\n\n  if (!newMessageIds?.length) {\n    languageTranslations.delete(chatId);\n    if (!languageTranslations.size) {\n      PENDING_TRANSLATIONS.delete(toLanguageCode);\n    }\n    return;\n  }\n\n  languageTranslations.set(chatId, newMessageIds);\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\nimport { createConnector } from './PostMessageConnector';\nimport Deferred from './Deferred';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","import { useState } from '../lib/teact/teact';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nimport useSyncEffect from './useSyncEffect';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useSyncEffect(() => {\n    if (text && !isDisabled) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text]);\n\n  return language;\n}\n","/**\n * A Map that has a limited size. When the limit is reached, the oldest entry is removed.\n * Ignores last access time, only cares about insertion order.\n */\nexport default class LimitedMap<K, V> {\n  private map: Map<K, V>;\n\n  private insertionQueue: Set<K>;\n\n  constructor(private limit: number) {\n    this.map = new Map();\n    this.insertionQueue = new Set<K>();\n  }\n\n  public get(key: K): V | undefined {\n    return this.map.get(key);\n  }\n\n  public set(key: K, value: V): this {\n    if (this.map.size === this.limit) {\n      const keyToRemove = Array.from(this.insertionQueue).shift();\n      if (keyToRemove) {\n        this.map.delete(keyToRemove);\n        this.insertionQueue.delete(keyToRemove);\n      }\n    }\n\n    this.map.set(key, value);\n    this.insertionQueue.add(key);\n\n    return this;\n  }\n\n  public delete(key: K): boolean {\n    const result = this.map.delete(key);\n    if (result) {\n      this.insertionQueue.delete(key);\n    }\n    return result;\n  }\n\n  public clear(): void {\n    this.map.clear();\n    this.insertionQueue.clear();\n  }\n\n  public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n    this.map.forEach(callbackfn, thisArg);\n  }\n\n  public get size(): number {\n    return this.map.size;\n  }\n\n  public get [Symbol.toStringTag](): string {\n    return this.map[Symbol.toStringTag];\n  }\n\n  public [Symbol.iterator](): IterableIterator<[K, V]> {\n    return this.map[Symbol.iterator]();\n  }\n\n  public entries(): IterableIterator<[K, V]> {\n    return this.map.entries();\n  }\n\n  public keys(): IterableIterator<K> {\n    return this.map.keys();\n  }\n\n  public values(): IterableIterator<V> {\n    return this.map.values();\n  }\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../../config';\nimport { getActions } from '../../../../global';\nimport useTextLanguage from '../../../../hooks/useTextLanguage';\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(message: ApiMessage, isDisabled?: boolean) {\n  const canProcess = !isDisabled && message.chatId !== SERVICE_NOTIFICATIONS_USER_ID;\n\n  const isTranslatable = Boolean(message.content.text?.text.length);\n  const detectedLanguage = useTextLanguage(message.content.text?.text, !canProcess);\n\n  if (!canProcess) return;\n\n  processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default ContextMenuContainerAsync;\n","import React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage } from '../../api/types';\nimport type { TextPart } from '../../types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { getMessageMediaHash } from '../../global/helpers';\nimport * as mediaLoader from '../../util/mediaLoader';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Avatar from '../common/Avatar';\nimport CropModal from '../ui/CropModal';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ntype OwnProps = {\n  message: ApiMessage;\n  renderContent: () => TextPart | undefined;\n};\n\nconst ActionMessageSuggestedAvatar: FC<OwnProps> = ({\n  message,\n  renderContent,\n}) => {\n  const {\n    openMediaViewer, uploadProfilePhoto, showNotification,\n  } = getActions();\n\n  const { isOutgoing } = message;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n  const suggestedPhotoUrl = useMedia(getMessageMediaHash(message, 'full'));\n  const isVideo = message.content.action!.photo?.isVideo;\n\n  const showAvatarNotification = useLastCallback(() => {\n    showNotification({\n      title: lang('ApplyAvatarHintTitle'),\n      message: lang('ApplyAvatarHint'),\n      action: {\n        action: 'requestNextSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  });\n\n  const handleSetSuggestedAvatar = useLastCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  });\n\n  const handleCloseCropModal = useLastCallback(() => {\n    setCropModalBlob(undefined);\n  });\n\n  const handleSetVideo = useLastCallback(async () => {\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const photo = message.content.action!.photo!;\n    const blobUrl = await mediaLoader.fetch(`videoAvatar${photo.id}?size=u`, ApiMediaFormat.BlobUrl);\n    const blob = await fetch(blobUrl).then((r) => r.blob());\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  });\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetch(suggestedPhotoUrl).then((r) => r.blob()));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        mediaId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <span className=\"action-message-suggested-avatar\" tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        photo={message.content.action!.photo}\n        loopIndefinitely\n        withVideo={isVideo}\n        size=\"jumbo\"\n      />\n      <span>{renderContent()}</span>\n\n      <span className=\"action-message-button\">{lang(isVideo ? 'ViewVideoAction' : 'ViewPhotoAction')}</span>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('SuggestedVideo')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        textParts={renderContent()}\n      />\n    </span>\n  );\n};\n\nexport default memo(ActionMessageSuggestedAvatar);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTopic, ApiUser,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectTabState,\n  selectTopicFromMessage,\n  selectUser,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\nimport ActionMessageSuggestedAvatar from './ActionMessageSuggestedAvatar';\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId?: number;\n  messageListType?: MessageListType;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isJustAdded?: boolean;\n  isLastInList?: boolean;\n  isInsideTopic?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n  onPinnedIntersectionChange?: PinnedIntersectionChangedCallback;\n};\n\ntype StateProps = {\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  topic?: ApiTopic;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  isEmbedded,\n  appearanceOrder = 0,\n  isJustAdded,\n  isLastInList,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  isInsideTopic,\n  topic,\n  memoFirstUnreadIdRef,\n  canPlayAnimatedEmojis,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onPinnedIntersectionChange,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight, isJustAdded);\n\n  useEffect(() => {\n    if (!message.isPinned) return undefined;\n\n    return () => {\n      onPinnedIntersectionChange?.({ viewportPinnedIdsToRemove: [message.id], isUnmount: true });\n    };\n  }, [onPinnedIntersectionChange, message.isPinned, message.id]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n  const isSuggestedAvatar = message.content.action?.type === 'suggestProfilePhoto' && message.content.action!.photo;\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const renderContent = useCallback(() => {\n    return renderActionMessageText(\n      lang,\n      message,\n      senderUser,\n      senderChat,\n      targetUsers,\n      targetMessage,\n      targetChatId,\n      topic,\n      { isEmbedded },\n      observeIntersectionForLoading,\n      observeIntersectionForPlaying,\n    );\n  }, [\n    isEmbedded, lang, message, observeIntersectionForLoading, observeIntersectionForPlaying,\n    senderChat, senderUser, targetChatId, targetMessage, targetUsers, topic,\n  ]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  // TODO Refactoring for action rendering\n  const shouldSkipRender = isInsideTopic && message.content.action?.text === 'TopicWasCreatedAction';\n  if (shouldSkipRender) {\n    return <span ref={ref} />;\n  }\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{renderContent()}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play={canPlayAnimatedEmojis}\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    (isGift || isSuggestedAvatar) && 'centered-action',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    !isGift && !isSuggestedAvatar && 'in-one-row',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      data-is-pinned={message.isPinned || undefined}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isSuggestedAvatar && <span className=\"action-message-content\">{renderContent()}</span>}\n      {isGift && renderGift()}\n      {isSuggestedAvatar && (\n        <ActionMessageSuggestedAvatar\n          message={message}\n          renderContent={renderContent}\n        />\n      )}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, threadId }): StateProps => {\n    const {\n      chatId, senderId, replyToMessageId, content,\n    } = message;\n\n    const userId = senderId;\n    const { targetUserIds, targetChatId } = content.action || {};\n    const targetMessageId = replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = threadId ? selectIsMessageFocused(global, message, threadId) : false;\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n    } = (isFocused && selectTabState(global).focusedMessage) || {};\n\n    const chat = selectChat(global, chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n    const topic = selectTopicFromMessage(global, message);\n\n    return {\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      topic,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n      }),\n    };\n  },\n)(ActionMessage));\n","import React, { useRef } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiUser, ApiMessage, ApiChat,\n} from '../../api/types';\nimport type { ChatTranslatedMessages } from '../../global/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n  getMessageIsSpoiler,\n  isMessageTranslatable,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useMessageTranslation from '../middle/message/hooks/useMessageTranslation';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\nimport MediaSpoiler from './MediaSpoiler';\nimport Skeleton from '../ui/Skeleton';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  requestedChatTranslationLanguage?: string;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  chatTranslations,\n  requestedChatTranslationLanguage,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n  const isSpoiler = Boolean(message && getMessageIsSpoiler(message));\n\n  const shouldTranslate = message && isMessageTranslatable(message);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, message?.chatId, shouldTranslate ? message?.id : undefined, requestedChatTranslationLanguage,\n  );\n\n  const {\n    shouldRender: shouldRenderLoader,\n    transitionClassNames,\n  } = useShowTransition(isTranslationPending || (!message && !customText));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message && handleClick}\n      onMouseDown={message && handleMouseDown}\n    >\n      {shouldRenderLoader && <Skeleton className={buildClassName('embed-loading', transitionClassNames)} />}\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected, isSpoiler)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              translatedText={translatedText}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n  isSpoiler?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className={buildClassName('embedded-thumb', isRoundVideo && 'round')}>\n      {!isSpoiler && (\n        <img\n          src={srcUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className=\"pictogram\"\n          draggable={false}\n        />\n      )}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, undefined, lang.timeFormat);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon icon-reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <i className=\"icon icon-pinned-message message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getActions } from '../../../global';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {hasEffect && withEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport { IS_ELECTRON } from '../../../config';\n\nimport safePlay from '../../../util/safePlay';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../../util/windowEnvironment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nexport default function useBlurredMediaThumbRef(\n  message: ApiMessage,\n  isDisabled?: boolean | string,\n  forcedUri?: string,\n) {\n  const { isMobile } = useAppLayout();\n\n  const dataUri = forcedUri || getMessageMediaThumbDataUri(message);\n\n  return useCanvasBlur(\n    dataUri,\n    Boolean(isDisabled),\n    isMobile && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import React, { useRef, useState } from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions, MIN_MEDIA_HEIGHT } from './helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  forcedWidth?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  asForwarded?: boolean;\n  nonInteractive?: boolean;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  forcedWidth,\n  size = 'inline',\n  dimensions,\n  asForwarded,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n\n  const withBlurredBackground = Boolean(forcedWidth);\n  const [withThumb] = useState(!fullMediaData);\n  const noThumb = Boolean(fullMediaData);\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground);\n  const thumbClassNames = useMediaTransition(!noThumb);\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(photo.isSpoiler);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'), !isDownloading, getMessageMediaFormat(message, 'download'),\n  );\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useLastCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  });\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [shouldAffectAppendix, fullMediaData, isOwn, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, asForwarded, noAvatars, isMobile);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n    height < MIN_MEDIA_HEIGHT && 'fix-min-height',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = size === 'inline' ? `height: ${height}px;${dimensionsStyle}` : undefined;\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n      <img\n        src={fullMediaData}\n        className={buildClassName('full-media', withBlurredBackground && 'with-blurred-bg')}\n        alt=\"\"\n        style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n        draggable={!isProtected}\n      />\n      {withThumb && (\n        <canvas ref={thumbRef} className={buildClassName('thumbnail', thumbClassNames)} />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton\n        && <i className={buildClassName('icon', 'icon-download', downloadButtonClassNames)} />}\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import React, { useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { MIN_MEDIA_HEIGHT } from './helpers/mediaDimensions';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport * as mediaLoader from '../../../util/mediaLoader';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  forcedWidth?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  forcedWidth,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(video.isSpoiler);\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(Boolean(canAutoPlay && !isSpoilerShown));\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'),\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n  const hasThumb = Boolean(thumbDataUri);\n  const withBlurredBackground = Boolean(forcedWidth);\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  });\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const handleClick = useLastCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  });\n\n  const className = buildClassName(\n    'media-inner dark',\n    !isUploading && 'interactive',\n    height < MIN_MEDIA_HEIGHT && 'fix-min-height',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className={buildClassName('full-media', withBlurredBackground && 'with-blurred-bg')}\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n          style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames, withBlurredBackground && 'with-blurred-bg')}\n        alt=\"\"\n        style={forcedWidth ? `width: ${forcedWidth}px;` : undefined}\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon', 'icon-large-play', playButtonClassNames)} />\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar\n        size=\"large\"\n        peer={user}\n        text={firstName || lastName}\n      />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    const user = selectUser(global, contact.userId);\n\n    return {\n      user,\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  useEffect,\n  useLayoutEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { LangFn } from '../../../hooks/useLang';\nimport type {\n  ApiMessage, ApiPoll, ApiPollAnswer, ApiChat, ApiUser,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [closePeriod, summary]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    return recentVoterIds ? recentVoterIds.reduce((result: (ApiChat | ApiUser)[], id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      } else if (chat) {\n        result.push(chat);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"micro\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { getWebpageButtonText } from './helpers/webpageType';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Button from '../../ui/Button';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const { openTelegramLink } = getActions();\n  const webPage = getMessageWebPage(message);\n  const { isMobile } = useAppLayout();\n\n  const lang = useLang();\n\n  const handleMediaClick = useLastCallback(() => {\n    onMediaClick!();\n  });\n\n  const handleQuickButtonClick = useLastCallback(() => {\n    if (!webPage) return;\n    openTelegramLink({\n      url: webPage.url,\n    });\n  });\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n    type,\n  } = webPage;\n  const quickButtonLangKey = !inPreview ? getWebpageButtonText(type) : undefined;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message, undefined, undefined, isMobile);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n    quickButtonLangKey && 'with-quick-button',\n  );\n\n  function renderQuickButton(langKey: string) {\n    return (\n      <Button\n        className=\"WebPage--quick-button\"\n        size=\"tiny\"\n        color=\"translucent-bordered\"\n        onClick={handleQuickButtonClick}\n      >\n        {lang(langKey)}\n      </Button>\n    );\n  }\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      <div className=\"WebPage--content\">\n        {photo && !video && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersection}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoad}\n            size={isSquarePhoto ? 'pictogram' : 'inline'}\n            asForwarded={asForwarded}\n            nonInteractive={!isMediaInteractive}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onClick={isMediaInteractive ? handleMediaClick : undefined}\n            onCancelUpload={onCancelMediaTransfer}\n          />\n        )}\n        {isArticle && (\n          <div className=\"WebPage-text\">\n            <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n            {!inPreview && title && (\n              <p className=\"site-title\">{renderText(title)}</p>\n            )}\n            {truncatedDescription && (\n              <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n            )}\n          </div>\n        )}\n        {!inPreview && video && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersection!}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoad}\n            canAutoPlay={canAutoPlay}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            onClick={isMediaInteractive ? handleMediaClick : undefined}\n            onCancelUpload={onCancelMediaTransfer}\n          />\n        )}\n      </div>\n      {quickButtonLangKey && renderQuickButton(quickButtonLangKey)}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","// https://github.com/telegramdesktop/tdesktop/blob/3da787791f6d227f69b32bf4003bc6071d05e2ac/Telegram/SourceFiles/history/view/history_view_view_button.cpp#L51\nexport function getWebpageButtonText(type?: string) {\n  switch (type) {\n    case 'telegram_channel_request':\n    case 'telegram_megagroup_request':\n    case 'telegram_chat_request':\n      return 'lng_view_button_request_join';\n    case 'telegram_message':\n      return 'lng_view_button_message';\n    case 'telegram_bot':\n      return 'lng_view_button_bot';\n    case 'telegram_voicechat':\n      return 'lng_view_button_voice_chat';\n    case 'telegram_livestream':\n      return 'lng_view_button_voice_chat_channel';\n    case 'telegram_megagroup':\n    case 'telegram_chat':\n      return 'lng_view_button_group';\n    case 'telegram_channel':\n      return 'lng_view_button_channel';\n    case 'telegram_user':\n      return 'lng_view_button_user';\n    case 'telegram_botapp':\n      return 'lng_view_button_bot_app';\n    case 'telegram_chatlist':\n      return 'ViewChatList';\n    default:\n      return undefined;\n  }\n}\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport buildStyle from '../../../util/buildStyle';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground, photoUrl);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { useMemo, memo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds?: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useLastCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const isScheduled = album.mainMessage.isScheduled;\n\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds: isScheduled ? activeDownloads?.scheduledIds : activeDownloads?.ids,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useSignal from '../../../hooks/useSignal';\nimport { useThrottledSignal } from '../../../hooks/useAsyncResolvers';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  isDownloading?: boolean;\n};\n\nconst PROGRESS_CENTER = ROUND_VIDEO_DIMENSIONS_PX / 2;\nconst PROGRESS_MARGIN = 6;\nconst PROGRESS_CIRCUMFERENCE = (PROGRESS_CENTER - PROGRESS_MARGIN) * 2 * Math.PI;\nconst PROGRESS_THROTTLE = 16; // Min period needed for `playerEl.currentTime` to update\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const circleRef = useRef<SVGCircleElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState(false);\n\n  const [getProgress, setProgress] = useSignal(0);\n  const getThrottledProgress = useThrottledSignal(getProgress, PROGRESS_THROTTLE);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [setProgress, isActivated, getThrottledProgress]);\n\n  useLayoutEffect(() => {\n    if (!isActivated || !circleRef.current) {\n      return;\n    }\n\n    const strokeDashOffset = PROGRESS_CIRCUMFERENCE - getThrottledProgress() * PROGRESS_CIRCUMFERENCE;\n    circleRef.current.setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n  }, [isActivated, getThrottledProgress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useLastCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n  });\n\n  const capturePlaying = useLastCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  });\n\n  const handleTimeUpdate = useLastCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  });\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\">\n        {isActivated && (\n          <svg width={ROUND_VIDEO_DIMENSIONS_PX} height={ROUND_VIDEO_DIMENSIONS_PX}>\n            <circle\n              ref={circleRef}\n              cx={PROGRESS_CENTER}\n              cy={PROGRESS_CENTER}\n              r={PROGRESS_CENTER - PROGRESS_MARGIN}\n              className=\"progress-circle\"\n              transform={`rotate(-90, ${PROGRESS_CENTER}, ${PROGRESS_CENTER})`}\n              stroke-dasharray={PROGRESS_CIRCUMFERENCE}\n              stroke-dashoffset={PROGRESS_CIRCUMFERENCE}\n            />\n          </svg>\n        )}\n      </div>\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiThreadInfo,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openComments } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openComments({ id: chatId, threadId, originChannelId });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmojiEffect from './CustomEmojiEffect';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  withEffects?: boolean;\n};\n\nconst CENTER_ICON_SIZE = 2.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n  withEffects,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const { customEmoji } = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(withEffects && activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useLastCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  });\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomEmojiEffect reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceOnHeavyAnimation\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport AvatarList from '../../common/AvatarList';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  withEffects?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  withEffects,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.peerId] || chatsById[recentReaction.peerId])\n      .filter(Boolean) as (ApiChat | ApiUser)[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useLastCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  });\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n        withEffects={withEffects}\n      />\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} className=\"counter\" />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n  withEffects?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n  noRecentReactors,\n  withEffects,\n}) => {\n  const lang = useLang();\n\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n          withEffects={withEffects}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"canceled\":\"Q7dh9ssyXXCzatPRmIDv\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\nimport type {\n  ActiveEmojiInteraction,\n  ActiveReaction,\n  ChatTranslatedMessages,\n  MessageListType,\n} from '../../../global/types';\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiReaction,\n  ApiStickerSet,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiUser,\n  ApiUsername,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { FocusDirection, IAlbum, ISettings } from '../../../types';\nimport { AudioOrigin } from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\n\nimport { IS_ANDROID, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID, IS_ELECTRON } from '../../../config';\nimport {\n  selectAllowedMessageActions,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentTextSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsDownloading,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPerformanceSettingsValue,\n  selectReplySender,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport {\n  areReactionsEmpty,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageHtmlId,\n  getMessageLocation,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  hasMessageText,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useAuthorWidth from '../hooks/useAuthorWidth';\nimport { dispatchHeavyAnimationEvent } from '../../../hooks/useHeavyAnimationCheck';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport TopicChip from '../../common/TopicChip';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withReactionEffects?: boolean;\n  withStickerEffects?: boolean;\n  isConnected: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withReactionEffects,\n  withStickerEffects,\n  isConnected,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuPosition,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, isTouchScreen && isInSelectMode, !IS_ELECTRON, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(\n    isShown || isJustAdded,\n    undefined,\n    noAppearanceAnimation && !isJustAdded,\n    false,\n  );\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    Boolean(requestedChatTranslationLanguage),\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item text-selection',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    isJustAdded && 'is-just-added',\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  useDetectChatLanguage(message, !shouldDetectChatLanguage);\n\n  const detectedLanguage = useTextLanguage(areTranslationsEnabled ? text?.text : undefined);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video || (location && location.type === 'geo')) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n\n  useFocusMessage(\n    ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, isJustAdded,\n  );\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  useAuthorWidth(ref, signature);\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    dispatchHeavyAnimationEvent(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let reactionsMaxWidth;\n  let contentWidth: number | undefined;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        asForwarded,\n        noAvatars,\n        isMobile,\n      }).width;\n    }\n\n    if (width) {\n      if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n        contentWidth = width;\n      }\n      calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n      if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(\n      getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n    );\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n    reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n  } else if (sticker && !hasSubheader) {\n    const { width } = getStickerDimensions(sticker, isMobile);\n    style = `width: ${width + extraPadding}px`;\n    reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n  }\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    return (\n      <MessageText\n        message={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    activeReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        withEffects={withReactionEffects}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            withEffect={withStickerEffects}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded && !isOwn) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.views !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            maxWidth={reactionsMaxWidth}\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            withEffects={withReactionEffects}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction MessageAppendix({ isOwn } : { isOwn: boolean }) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, repliesThreadInfo, forwardInfo,\n      transcriptionId, isPinned,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const isLocation = Boolean(getMessageLocation(message));\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && activeReactions[reactionMessage.id],\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      senderAdminMember,\n      messageTopic,\n      genericEffects: global.genericEmojiEffects,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withReactionEffects: selectPerformanceSettingsValue(global, 'reactionEffects'),\n      withStickerEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      isConnected,\n      ...((canShowSender || isLocation) && { sender }),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n      }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type {\n  ApiChat, ApiTopic, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n  isTranslatingChat?: boolean,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n    openChatLanguageModal,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId!,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n      noForumTopicPanel: true,\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId!,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { RefObject } from 'react';\nimport { useLayoutEffect } from '../../../lib/teact/teact';\nimport { requestForcedReflow } from '../../../lib/fasterdom/fasterdom';\n\nexport default function useAuthorWidth(\n  containerRef: RefObject<HTMLDivElement>,\n  signature?: string,\n) {\n  useLayoutEffect(() => {\n    if (!signature) return;\n\n    requestForcedReflow(() => {\n      const width = containerRef.current!.querySelector<HTMLDivElement>('.message-signature')?.offsetWidth;\n      if (!width) return undefined;\n\n      return () => {\n        containerRef.current!.style.setProperty('--meta-safe-author-width', `${width}px`);\n      };\n    });\n  }, [containerRef, signature]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  });\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.text.text,\n                entities: message.text.entities,\n              })}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiBotInfo } from '../../api/types';\n\nimport { DPR } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\nimport {\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n} from '../../global/helpers';\nimport buildStyle from '../../util/buildStyle';\nimport buildClassName from '../../util/buildClassName';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useLang();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const { width, height } = botInfoRealDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={botInfoRealDimensions && (\n            `width: ${botInfoRealDimensions.width}px`\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              src={botInfoPhotoUrl}\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n            />\n          )}\n          {botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Lsq8MNpDNQOesVld_hE2\",\"bot-info\":\"QDlMH9oNVNDnHBMnbvhw\",\"botInfo\":\"QDlMH9oNVNDnHBMnbvhw\",\"bot-info-description\":\"qhxnNXJM8_CyuUQ0pxo7\",\"botInfoDescription\":\"qhxnNXJM8_CyuUQ0pxo7\",\"bot-info-title\":\"mdOWgfW0GwJTT3vqO5_M\",\"botInfoTitle\":\"mdOWgfW0GwJTT3vqO5_M\"};","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport type { Signal } from '../../util/signals';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePrevious(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        const isTopicTopMessage = message.id === threadTopMessageId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\n\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\nimport { isLocalMessageId } from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = isLocalMessageId(messageIds[0]);\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback((selectedSticker: ApiSticker) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker, messageList: currentMessageList });\n  });\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(ContactGreeting));\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageListType } from '../../global/types';\nimport type { ApiTopic } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { requestForcedReflow, forceMeasure, requestMeasure } from '../../lib/fasterdom/fasterdom';\n\nimport type { FC } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\nimport type {\n  ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\n\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { LoadMoreDirection } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectBot,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium,\n  selectLastScrollOffset,\n  selectThreadInfo,\n  selectTabState,\n  selectChatFullInfo,\n  selectPerformanceSettingsValue,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  isLocalMessageId,\n  getMessageHtmlId,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll from '../../util/resetScroll';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport { isBackgroundModeActive } from '../../hooks/useBackgroundMode';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport MessageListBotInfo from './MessageListBotInfo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isComments?: boolean;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  threadTopMessageId?: number;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  threadTopMessageId,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  onPinnedIntersectionChange,\n  getForceNextPinnedInHeader,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages = messageIds.map((id) => messagesById[id]).filter(Boolean);\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, orderRule), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.repliesThreadInfo?.isComments\n      || messagesById[id]?.views !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      isComments: Boolean(threadInfo?.originChannelId),\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      threadTopMessageId,\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport animateScroll from '../../util/animateScroll';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useLastCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst MAX_THUMB_IMG_SIZE = 40; // px\nconst MAX_ASPECT_RATIO = 20;\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n  let shouldSendAsFile;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    const img = await preloadImage(blobUrl);\n    const { width, height } = img;\n    shouldSendAsFile = !validateAspectRatio(width, height);\n\n    const shouldShrink = Math.max(width, height) > MAX_QUICK_IMG_SIZE;\n    const isGif = mimeType === GIF_MIME_TYPE;\n\n    if (!shouldSendAsFile) {\n      if (!options?.compressedBlobUrl && !isGif && (shouldShrink || mimeType !== 'image/jpeg')) {\n        const resizedUrl = await scaleImage(\n          blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n        );\n        URL.revokeObjectURL(blobUrl);\n        return buildAttachment(filename, blob, {\n          compressedBlobUrl: resizedUrl,\n        });\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    }\n\n    const shouldShrinkPreview = Math.max(width, height) > MAX_THUMB_IMG_SIZE;\n    if (shouldShrinkPreview) {\n      previewBlobUrl = await scaleImage(\n        blobUrl, MAX_THUMB_IMG_SIZE / Math.max(width, height), 'image/jpeg',\n      );\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    shouldSendAsFile = !validateAspectRatio(width, height);\n\n    if (!shouldSendAsFile) {\n      quick = { width, height, duration };\n    }\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    shouldSendAsFile: shouldSendAsFile || undefined,\n    uniqueId: `${Date.now()}-${Math.random()}`,\n    ...options,\n  };\n}\n\nexport function prepareAttachmentsToSend(\n  attachments: ApiAttachment[], shouldSendCompressed?: boolean,\n): ApiAttachment[] {\n  return attachments.map((attach) => {\n    if (shouldSendCompressed) {\n      if (attach.compressedBlobUrl) {\n        return {\n          ...attach,\n          blobUrl: attach.compressedBlobUrl,\n        };\n      }\n      return attach;\n    }\n\n    return {\n      ...attach,\n      shouldSendAsFile: !attach.voice ? true : undefined,\n      shouldSendAsSpoiler: undefined,\n    };\n  });\n}\n\nfunction validateAspectRatio(width: number, height: number) {\n  const maxAspectRatio = Math.max(width, height) / Math.min(width, height);\n  return maxAspectRatio <= MAX_ASPECT_RATIO;\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { IS_IOS } from '../../../../util/windowEnvironment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/windowEnvironment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport twemojiRegex from '../../../../lib/twemojiRegex';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst MAX_LENGTH = 8;\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const getSingleEmoji = useDerivedSignal(() => {\n    const html = getHtml();\n    if (!isEnabled || !html || (IS_EMOJI_SUPPORTED && html.length > MAX_LENGTH)) return undefined;\n\n    const hasEmoji = html.match(IS_EMOJI_SUPPORTED ? twemojiRegex : EMOJI_IMG_REGEX);\n    if (!hasEmoji) return undefined;\n\n    const cleanHtml = prepareForRegExp(html);\n    const isSingleEmoji = cleanHtml && (\n      (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n      || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n    );\n\n    return isSingleEmoji\n      ? (IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!)\n      : undefined;\n  }, [getHtml, isEnabled]);\n\n  const isActive = useDerivedState(() => Boolean(getSingleEmoji()), [getSingleEmoji]);\n  const hasStickers = Boolean(stickers?.length);\n\n  useEffect(() => {\n    if (!isEnabled) return;\n\n    const singleEmoji = getSingleEmoji();\n    if (singleEmoji) {\n      if (!hasStickers) {\n        loadStickersForEmoji({ emoji: singleEmoji });\n      }\n    } else {\n      clearStickersForEmoji();\n    }\n  }, [isEnabled, getSingleEmoji, hasStickers, loadStickersForEmoji, clearStickersForEmoji]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isStickerTooltipOpen: Boolean(isActive && hasStickers && !isManuallyClosed),\n    closeStickerTooltip: markManuallyClosed,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\nimport { requestMeasure } from '../lib/fasterdom/fasterdom';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestMeasure(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","// Utility for cleaning html code from Google Docs.\n// Original source from DocsSoap:\n// https://www.npmjs.com/package/docs-soap\n\nconst GDOCS_ELEMENT_ID_REGEXP = /id=\"docs-internal-guid/i;\n\nconst GDOCS_STYLES = {\n  BOLD: '700',\n  ITALIC: 'italic',\n  UNDERLINE: 'underline',\n  STRIKETHROUGH: 'line-through',\n  SUPERSCRIPT: 'super',\n  SUBSCRIPT: 'sub',\n};\n\nconst ELEMENTS = {\n  ANCHOR: 'a',\n  BOLD: 'strong',\n  ITALIC: 'em',\n  UNDERLINE: 'u',\n  STRIKETHROUGH: 'del',\n  SUPERSCRIPT: 'sup',\n  SUBSCRIPT: 'sub',\n};\n\nconst headers = [\n  'H1',\n  'H2',\n  'H3',\n  'H4',\n  'H5',\n  'H6',\n];\n\nfunction parseHtml(html: string): HTMLElement {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, 'text/html');\n\n  return doc.body;\n}\n\nfunction wrapNodeAnchor(node: Node, href: string): HTMLAnchorElement {\n  const anchor = document.createElement(ELEMENTS.ANCHOR) as HTMLAnchorElement;\n  anchor.href = href;\n  anchor.appendChild(node.cloneNode(true));\n\n  return anchor;\n}\n\nfunction wrapNodeInline(node: Node, style: string): Node {\n  const el = document.createElement(style);\n  el.appendChild(node.cloneNode(true));\n\n  return el;\n}\n\nfunction wrapNode(inner: HTMLElement, result: Node): Node {\n  let newNode = result.cloneNode(true);\n  if (!inner) {\n    return newNode;\n  }\n  if (inner.style && inner.style.fontWeight === GDOCS_STYLES.BOLD) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.BOLD);\n  }\n  if (inner.style && inner.style.fontStyle === GDOCS_STYLES.ITALIC) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.ITALIC);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.UNDERLINE) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.UNDERLINE);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.STRIKETHROUGH) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.STRIKETHROUGH);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUPERSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUPERSCRIPT);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUBSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUBSCRIPT);\n  }\n\n  return newNode;\n}\n\nfunction applyBlockStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = document.createTextNode('') as Node;\n  if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n    styledNode = node.childNodes[0];\n  }\n  if (node.childNodes[0] && node.childNodes[0].nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode.cloneNode(true), (node.childNodes[0] as HTMLAnchorElement).href);\n    styledNode = node.childNodes[0].childNodes[0];\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction applyInlineStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = node;\n  if (node.nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode, (node as HTMLAnchorElement).href);\n    if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n      styledNode = node.childNodes[0];\n    }\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction getCleanNode(node: Node): Node[] {\n  if (node.childNodes && (node.childNodes.length <= 1 || node.nodeName === 'OL' || node.nodeName === 'UL')) {\n    let newWrapper: Node | undefined;\n    let newNode = document.createTextNode(node.textContent || '') as Node;\n    if (node.nodeName === 'UL' || node.nodeName === 'OL' || node.nodeName === 'LI') {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = document.createDocumentFragment();\n      const items = [];\n      for (let i = 0; i < node.childNodes.length; i++) {\n        items.push(...getCleanNode(node.childNodes[i]));\n      }\n      items.map((i: Node): Node => newNode.appendChild(i));\n    } else if (headers.indexOf(node.nodeName) !== -1) {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = applyInlineStyles(node.childNodes[0]);\n    } else if (node.nodeName === 'P') {\n      newWrapper = document.createElement('p');\n      newNode = applyBlockStyles(node);\n    } else if (node.nodeName === 'BR') {\n      newNode = node;\n    } else {\n      newWrapper = document.createElement('span');\n      newNode = applyInlineStyles(node);\n    }\n    if (newWrapper) {\n      newWrapper.appendChild(newNode);\n      return [newWrapper];\n    }\n\n    return [node.cloneNode(true)];\n  }\n\n  if (node.childNodes) {\n    const nodes = [];\n    for (let i = 0; i < node.childNodes.length; i++) {\n      nodes.push(...getCleanNode(node.childNodes[i]));\n    }\n    return nodes;\n  }\n\n  return [node];\n}\n\nfunction filterNode(node: Node): boolean {\n  return node.nodeType !== 8; // Node.COMMENT_NODE = 8\n}\n\nfunction getCleanDocument(dirty: HTMLElement): HTMLElement {\n  const body = document.createElement('body');\n  const nodes = dirty.childNodes;\n  const filteredNodes = Array.from(nodes).filter(filterNode);\n  const cleanNodes = [];\n\n  for (const node of filteredNodes) {\n    cleanNodes.push(...getCleanNode(node));\n  }\n\n  for (let i = 0; i < cleanNodes.length; i++) {\n    body.appendChild(cleanNodes[i].cloneNode(true));\n  }\n\n  return body;\n}\n\nexport default function cleanDocsHtml(clipboardContent: string): string {\n  if (!clipboardContent.match(GDOCS_ELEMENT_ID_REGEXP)) {\n    return parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, '')).innerHTML;\n  }\n\n  return getCleanDocument(parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, ''))).innerHTML;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { StateHookSetter } from '../../../../lib/teact/teact';\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { DEBUG, EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport cleanDocsHtml from '../../../../lib/cleanDocsHtml';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\nconst TYPE_HTML = 'text/html';\nconst DOCUMENT_TYPE_WORD = 'urn:schemas-microsoft-com:office:word';\nconst NAMESPACE_PREFIX_WORD = 'xmlns:w';\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  try {\n    html = cleanDocsHtml(html);\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  setNextText: StateHookSetter<ApiFormattedText | undefined>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] | undefined = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (!files?.length && !pastedText) {\n        return;\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      let isWordDocument = false;\n      try {\n        const parser = new DOMParser();\n        const parsedDocument = parser.parseFromString(html, TYPE_HTML);\n        isWordDocument = parsedDocument.documentElement\n          .getAttribute(NAMESPACE_PREFIX_WORD) === DOCUMENT_TYPE_WORD;\n      } catch (err: any) {\n        // Ignore\n      }\n\n      const hasText = textToPaste && textToPaste.text;\n      const shouldSetAttachments = files?.length && !editedMessage && !isWordDocument;\n\n      if (shouldSetAttachments) {\n        const newAttachments = await Promise.all(files!.map((file) => {\n          return buildAttachment(file.name, file);\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      if (hasText) {\n        if (shouldSetAttachments) {\n          setNextText(textToPaste);\n        } else {\n          insertTextAndUpdateCursor(textToPaste, input?.id);\n        }\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n    setNextText,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport { requestMeasure, requestNextMutation } from '../../../../lib/fasterdom/fasterdom';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\nimport type { Signal } from '../../../../util/signals';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useDebouncedResolver } from '../../../../hooks/useAsyncResolvers';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst URL_ENTITIES = new Set<string>([ApiMessageEntityTypes.TextUrl, ApiMessageEntityTypes.Url]);\nconst DEBOUNCE_MS = 300;\n\nconst useEditing = (\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n  replyingToId?: number,\n): [VoidFunction, VoidFunction, boolean] => {\n  const { editMessage, setEditingDraft, toggleMessageWebPage } = getActions();\n  const [shouldForceShowEditing, setShouldForceShowEditing] = useState(false);\n\n  useEffectWithPrevDeps(([prevEditedMessage, prevReplyingToId]) => {\n    if (!editedMessage) {\n      return;\n    }\n\n    if (replyingToId && prevReplyingToId !== replyingToId) {\n      setHtml('');\n      setShouldForceShowEditing(false);\n      return;\n    }\n\n    if (prevEditedMessage?.id === editedMessage.id && replyingToId === prevReplyingToId) {\n      return;\n    }\n\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n\n    setHtml(html);\n    setShouldForceShowEditing(true);\n\n    requestNextMutation(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, replyingToId, editingDraft, setHtml]);\n\n  useEffect(() => {\n    if (!editedMessage) {\n      return;\n    }\n\n    const shouldSetNoWebPage = !('webPage' in editedMessage.content)\n      && editedMessage.content.text?.entities?.some((entity) => URL_ENTITIES.has(entity.type));\n\n    toggleMessageWebPage({\n      chatId,\n      threadId,\n      noWebPage: shouldSetNoWebPage,\n    });\n  }, [chatId, threadId, editedMessage]);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      const edited = parseMessageInput(getHtml());\n      const update = edited.text.length ? edited : undefined;\n\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    if (!editedMessage) return false;\n\n    const edited = parseMessageInput(getHtml());\n    return !('webPage' in editedMessage.content)\n      && editedMessage.content.text?.entities?.some((entity) => URL_ENTITIES.has(entity.type))\n      && !(edited.entities?.some((entity) => URL_ENTITIES.has(entity.type)));\n  }, [editedMessage, getHtml], DEBOUNCE_MS, true);\n\n  const getShouldResetNoWebPageDebounced = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage || prevEditedMessage?.id !== editedMessage.id) {\n      return;\n    }\n\n    if (getShouldResetNoWebPageDebounced()) {\n      toggleMessageWebPage({\n        chatId,\n        threadId,\n        noWebPage: false,\n      });\n    }\n  }, [editedMessage, chatId, getHtml, threadId, getShouldResetNoWebPageDebounced]);\n\n  const restoreNewDraftAfterEditing = useLastCallback(() => {\n    if (!draft) return;\n\n    // Run one frame after editing draft reset\n    requestMeasure(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n\n      // Wait one more frame until new HTML is rendered\n      requestNextMutation(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    });\n  });\n\n  const handleEditCancel = useLastCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  });\n\n  const handleEditComplete = useLastCallback(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageList: { chatId, threadId, type },\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  });\n\n  const handleBlur = useLastCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(getHtml());\n    const update = edited.text.length ? edited : undefined;\n\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  });\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel, shouldForceShowEditing];\n};\n\nexport default useEditing;\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { InlineBotSettings } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport memoized from '../../../../util/memoized';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useSyncEffect from '../../../../hooks/useSyncEffect';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst THROTTLE = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isEnabled: boolean,\n  chatId: string,\n  getHtml: Signal<string>,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot, resetAllInlineBots } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const extractBotQueryThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('@') ? parseBotQuery(html) : MEMO_NO_RESULT;\n  }, [getHtml, isEnabled], THROTTLE);\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDerivedState(extractBotQueryThrottled, [extractBotQueryThrottled, getHtml], true);\n\n  useSyncEffect(([prevUsername]) => {\n    if (prevUsername) {\n      resetInlineBot({ username: prevUsername });\n    }\n  }, [username, resetInlineBot]);\n\n  useEffect(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query,\n    });\n  }, [chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  const {\n    id: botId,\n    switchPm,\n    switchWebview,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = (usernameLowered && inlineBots?.[usernameLowered]) || {};\n\n  const isOpen = Boolean((results?.length || switchPm) && !isManuallyClosed);\n\n  useEffect(() => {\n    if (!isOpen && !username) {\n      resetAllInlineBots();\n    }\n  }, [isOpen, resetAllInlineBots, username]);\n\n  const loadMore = useLastCallback(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  });\n\n  return {\n    isOpen,\n    botId,\n    isGallery,\n    switchPm,\n    switchWebview,\n    results,\n    closeTooltip: markManuallyClosed,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nconst buildQueryStateMemo = memoized((username: string, query: string, canShowHelp: boolean) => ({\n  username,\n  query,\n  canShowHelp,\n  usernameLowered: username.toLowerCase(),\n}));\n\nfunction parseBotQuery(html: string) {\n  if (!html.startsWith('@')) {\n    return MEMO_NO_RESULT;\n  }\n\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return buildQueryStateMemo(result[1], result[2], result[2] === '' && !text.match(HAS_NEW_LINE));\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst RE_COMMAND = /^\\/([\\w@]{1,32})?$/i;\n\nconst THROTTLE = 300;\n\nexport default function useBotCommandTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const detectCommandThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('/') ? prepareForRegExp(html).match(RE_COMMAND)?.[0].trim() : undefined;\n  }, [getHtml, isEnabled], THROTTLE);\n\n  const getCommand = useDerivedSignal(\n    detectCommandThrottled, [detectCommandThrottled, getHtml], true,\n  );\n\n  useEffect(() => {\n    const command = getCommand();\n    const commands = botCommands || chatBotCommands;\n    if (!command || !commands) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const filter = command.substring(1);\n    const nextFilteredBotCommands = commands.filter((c) => !filter || c.command.startsWith(filter));\n\n    setFilteredBotCommands(\n      nextFilteredBotCommands?.length ? nextFilteredBotCommands : undefined,\n    );\n  }, [getCommand, botCommands, chatBotCommands]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isOpen: Boolean(filteredBotCommands?.length && !isManuallyClosed),\n    close: markManuallyClosed,\n    filteredBotCommands,\n  };\n}\n","import { useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiAttachment } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useAttachmentModal({\n  attachments,\n  fileSizeLimit,\n  setHtml,\n  setAttachments,\n  chatId,\n  canSendAudios,\n  canSendVideos,\n  canSendPhotos,\n  canSendDocuments,\n  insertNextText,\n}: {\n  attachments: ApiAttachment[];\n  fileSizeLimit: number;\n  setHtml: (html: string) => void;\n  setAttachments: (attachments: ApiAttachment[]) => void;\n  chatId: string;\n  canSendAudios?: boolean;\n  canSendVideos?: boolean;\n  canSendPhotos?: boolean;\n  canSendDocuments?: boolean;\n  insertNextText: VoidFunction;\n}) {\n  const { openLimitReachedModal, showAllowedMessageTypesNotification } = getActions();\n  const [shouldForceAsFile, setShouldForceAsFile] = useState<boolean>(false);\n  const [shouldForceCompression, setShouldForceCompression] = useState<boolean>(false);\n  const [shouldSuggestCompression, setShouldSuggestCompression] = useState<boolean | undefined>(undefined);\n\n  const handleClearAttachments = useLastCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n    insertNextText();\n  });\n\n  const handleSetAttachments = useLastCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (!newAttachments.length) {\n        handleClearAttachments();\n        return;\n      }\n\n      if (newAttachments.some((attachment) => {\n        const type = getAttachmentType(attachment);\n\n        return (type === 'audio' && !canSendAudios && !canSendDocuments)\n          || (type === 'video' && !canSendVideos && !canSendDocuments)\n          || (type === 'image' && !canSendPhotos && !canSendDocuments)\n          || (type === 'file' && !canSendDocuments);\n      })) {\n        showAllowedMessageTypesNotification({ chatId });\n      } else if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n        const shouldForce = newAttachments.some((attachment) => {\n          const type = getAttachmentType(attachment);\n\n          return (type === 'audio' && !canSendAudios)\n            || (type === 'video' && !canSendVideos)\n            || (type === 'image' && !canSendPhotos);\n        });\n\n        setShouldForceAsFile(Boolean(shouldForce && canSendDocuments));\n        setShouldForceCompression(!canSendDocuments);\n      }\n    },\n  );\n\n  const handleAppendFiles = useLastCallback(async (files: File[], isSpoiler?: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => (\n        buildAttachment(file.name, file, { shouldSendAsSpoiler: isSpoiler || undefined })\n      ))),\n    ]);\n  });\n\n  const handleFileSelect = useLastCallback(async (files: File[], suggestCompression?: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file))));\n    setShouldSuggestCompression(suggestCompression);\n  });\n\n  return {\n    shouldSuggestCompression,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate: setHtml,\n    handleClearAttachments,\n    handleSetAttachments,\n    shouldForceCompression,\n    shouldForceAsFile,\n  };\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  if (attachment.shouldSendAsFile) return 'file';\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'image';\n  }\n\n  if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'video';\n  }\n\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'audio';\n  }\n\n  return 'file';\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { requestMeasure, requestNextMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../../global';\n\nimport type { ApiDraft } from '../../../../global/types';\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { ApiMessageEntityTypes } from '../../../../api/types';\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useStateRef } from '../../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useRunDebounced from '../../../../hooks/useRunDebounced';\n\nlet isFrozen = false;\n\nfunction freeze() {\n  isFrozen = true;\n\n  requestMeasure(() => {\n    isFrozen = false;\n  });\n}\n\nconst useDraft = (\n  draft: ApiDraft | undefined,\n  chatId: string,\n  threadId: number,\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n\n  const isEditing = Boolean(editedMessage);\n\n  const updateDraft = useLastCallback((prevState: { chatId?: string; threadId?: number } = {}, shouldForce = false) => {\n    if (isEditing) return;\n\n    const html = getHtml();\n\n    if (html) {\n      saveDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        draft: parseMessageInput(html),\n        shouldForce,\n      });\n    } else {\n      clearDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        shouldForce,\n      });\n    }\n  });\n\n  const updateDraftRef = useStateRef(updateDraft);\n  const runDebouncedForSaveDraft = useRunDebounced(DRAFT_DEBOUNCE, true, undefined, [chatId, threadId]);\n\n  // Restore draft on chat change\n  useEffectWithPrevDeps(([prevChatId, prevThreadId, prevDraft]) => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n\n      if (!draft?.shouldForce) {\n        return;\n      }\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestNextMutation(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, editedMessage, loadCustomEmojis]);\n\n  // Save draft on chat change\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      if (!isEditing) {\n        // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n        updateDraftRef.current({ chatId, threadId });\n      }\n\n      freeze();\n    };\n  }, [chatId, threadId, isEditing, updateDraftRef]);\n\n  const chatIdRef = useStateRef(chatId);\n  const threadIdRef = useStateRef(threadId);\n  useEffect(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    if (!getHtml()) {\n      updateDraftRef.current();\n\n      return;\n    }\n\n    const scopedShatId = chatIdRef.current;\n    const scopedThreadId = threadIdRef.current;\n\n    runDebouncedForSaveDraft(() => {\n      if (chatIdRef.current === scopedShatId && threadIdRef.current === scopedThreadId) {\n        updateDraftRef.current();\n      }\n    });\n  }, [chatIdRef, getHtml, runDebouncedForSaveDraft, threadIdRef, updateDraftRef]);\n\n  function forceUpdateDraft() {\n    updateDraft(undefined, true);\n  }\n\n  useBackgroundMode(forceUpdateDraft);\n  useBeforeUnload(forceUpdateDraft);\n};\n\nexport default useDraft;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useMedia from '../../../hooks/useMedia';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const { isTouchScreen } = useAppLayout();\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((path) => {\n      path.style.stroke = color;\n      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, 'icon', !isTouchScreen && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, !isTouchScreen && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  threadId?: number;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  threadId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useLastCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  });\n\n  const handleCloseMenu = useLastCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  });\n\n  const handleCloseAnimationEnd = useLastCallback(() => {\n    setMenuPosition(undefined);\n  });\n\n  const handleRemoveBot = useLastCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  });\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        bot,\n        chatId,\n        threadId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW, DEBUG_LOG_FILENAME, SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { validateFiles } from '../../../util/files';\nimport { getDebugLogs } from '../../../util/debugConsole';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  canSendPhotos: boolean;\n  canSendVideos: boolean;\n  canSendDocuments: boolean;\n  canSendAudios: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  shouldCollectDebugLogs?: boolean;\n  onFileSelect: (files: File[], shouldSuggestCompression?: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  canSendPhotos,\n  canSendVideos,\n  canSendDocuments,\n  canSendAudios,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n  shouldCollectDebugLogs,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const canSendVideoAndPhoto = canSendPhotos && canSendVideos;\n  const canSendVideoOrPhoto = canSendPhotos || canSendVideos;\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useLastCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  });\n\n  const handleFileSelect = useLastCallback((e: Event, shouldSuggestCompression?: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileSelect(validatedFiles, shouldSuggestCompression);\n    }\n  });\n\n  const handleQuickSelect = useLastCallback(() => {\n    openSystemFilesDialog(\n      Array.from(canSendVideoAndPhoto ? CONTENT_TYPES_WITH_PREVIEW : (\n        canSendPhotos ? SUPPORTED_IMAGE_CONTENT_TYPES : SUPPORTED_VIDEO_CONTENT_TYPES\n      )).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  });\n\n  const handleDocumentSelect = useLastCallback(() => {\n    openSystemFilesDialog(!canSendDocuments && canSendAudios\n      ? Array.from(SUPPORTED_AUDIO_CONTENT_TYPES).join(',') : (\n        '*'\n      ), (e) => handleFileSelect(e, false));\n  });\n\n  const handleSendLogs = useLastCallback(() => {\n    const file = new File([getDebugLogs()], DEBUG_LOG_FILENAME, { type: 'text/plain' });\n    onFileSelect([file]);\n  });\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            {canSendVideoOrPhoto && (\n              <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n                {lang(canSendVideoAndPhoto ? 'AttachmentMenu.PhotoOrVideo'\n                  : (canSendPhotos ? 'InputAttach.Popover.Photo' : 'InputAttach.Popover.Video'))}\n              </MenuItem>\n            )}\n            {(canSendDocuments || canSendAudios)\n              && (\n                <MenuItem icon=\"document\" onClick={handleDocumentSelect}>\n                  {lang(!canSendDocuments && canSendAudios ? 'InputAttach.Popover.Music' : 'AttachDocument')}\n                </MenuItem>\n              )}\n            {canSendDocuments && shouldCollectDebugLogs && (\n              <MenuItem icon=\"bug\" onClick={handleSendLogs}>\n                {lang('DebugSendLogs')}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            threadId={threadId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default InlineBotTooltipAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default MentionTooltipAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default StickerTooltipAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default BotCommandTooltipAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectCanAnimateInterface,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n  shouldForceShowEditing?: boolean;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  shouldForceShowEditing,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useLastCallback(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  });\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useLastCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id, noForumTopicPanel: true });\n  });\n\n  const handleClearClick = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  });\n\n  const handleChangeRecipientClick = useLastCallback(() => {\n    changeForwardRecipient();\n  });\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!);\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'));\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  useEffect(() => {\n    if (!shouldRender) handleContextMenuClose();\n  }, [handleContextMenuClose, shouldRender]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId, shouldForceShowEditing]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div className=\"ComposerEmbeddedMessage_inner\">\n        <div className=\"embedded-left-icon\">\n          <i className={buildClassName('icon', leftIcon)} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: false,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: true,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: false,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: true,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { shouldForceShowEditing }): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = selectTabState(global);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = selectCanAnimateInterface(global);\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId && !shouldForceShowEditing) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message && !shouldForceShowEditing) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default AttachmentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default BotCommandMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default PollModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default DropAreaAsync;\nexport { DropAreaState } from './DropArea';\n","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiFormattedText, ApiMessage, ApiMessageEntityTextUrl, ApiWebPage,\n} from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { Signal } from '../../../util/signals';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectTabState, selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport parseMessageInput from '../../../util/parseMessageInput';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport { useDebouncedResolver } from '../../../hooks/useAsyncResolvers';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  getHtml: Signal<string>;\n  isDisabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  getHtml,\n  isDisabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const formattedTextWithLinkRef = useRef<ApiFormattedText>();\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    const formattedText = parseMessageInput(getHtml());\n    const linkEntity = formattedText.entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n\n    formattedTextWithLinkRef.current = formattedText;\n\n    return linkEntity?.url || formattedText.text.match(RE_LINK)?.[0];\n  }, [getHtml], DEBOUNCE_MS, true);\n\n  const getLink = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffect(() => {\n    const link = getLink();\n    const formattedText = formattedTextWithLinkRef.current;\n\n    if (link) {\n      loadWebPagePreview({ text: formattedText! });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [getLink, chatId, threadId]);\n\n  useSyncEffect(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId, clearWebPagePreview, threadId, toggleMessageWebPage]);\n\n  const isShown = useDerivedState(() => {\n    return Boolean(webPagePreview && getHtml() && !noWebPage && !isDisabled);\n  }, [isDisabled, getHtml, noWebPage, webPagePreview]);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useLastCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  });\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div className=\"WebPagePreview_inner\">\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: selectTabState(global).webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default SendAsMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  TabState, MessageListType, GlobalState, ApiDraft, MessageList,\n} from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n  ApiAttachMenuPeerType,\n  ApiChatFullInfo,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_UPLOAD_FILEPART_SIZE,\n  EDITABLE_INPUT_MODAL_ID,\n  SCHEDULED_WHEN_ONLINE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_IOS } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectBot,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatType,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingMessage,\n  selectEditingScheduledDraft,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectReplyingToId,\n  selectRequestedDraftFiles,\n  selectRequestedDraftText,\n  selectScheduledIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  isChatAdmin,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment, { prepareAttachmentsToSend } from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport { insertHtmlInSelection } from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { buildCustomEmojiHtml } from './helpers/customEmoji';\nimport { processMessageInputForCustomEmoji } from '../../../util/customEmojiManager';\nimport { getTextWithEntitiesAsHtml } from '../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAttachmentModal from './hooks/useAttachmentModal';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useDraft from './hooks/useDraft';\nimport useTimeout from '../../../hooks/useTimeout';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  isMobile?: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    isOnActiveTab: boolean;\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiDraft;\n    currentMessageList?: MessageList;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    replyingToId?: number;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: TabState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    contentToBeScheduled?: TabState['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n    attachmentSettings: GlobalState['attachmentSettings'];\n    slowMode?: ApiChatFullInfo['slowMode'];\n    shouldUpdateStickerSetOrder?: boolean;\n    shouldCollectDebugLogs?: boolean;\n  };\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = TabState['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\nconst MOUNT_ANIMATION_DURATION = 430;\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  isOnActiveTab,\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  isMobile,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  currentMessageList,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  replyingToId,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  attachmentSettings,\n  theme,\n  slowMode,\n  shouldUpdateStickerSetOrder,\n  shouldCollectDebugLogs,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    addRecentCustomEmoji,\n    showNotification,\n    showAllowedMessageTypesNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const [getHtml, setHtml] = useSignal('');\n  const [isMounted, setIsMounted] = useState(false);\n  const getSelectionRange = useGetSelectionRange(EDITABLE_INPUT_CSS_SELECTOR);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  useEffect(processMessageInputForCustomEmoji, [getHtml]);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, cancelForceShowSymbolMenu);\n\n  useTimeout(() => {\n    setIsMounted(true);\n  }, MOUNT_ANIMATION_DURATION);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useSyncEffect(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n  const hasAttachments = Boolean(attachments.length);\n  const [nextText, setNextText] = useState<ApiFormattedText | undefined>(undefined);\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n    canSendVoices, canSendPlainText, canSendAudios, canSendVideos, canSendPhotos, canSendDocuments,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isComposerBlocked = !canSendPlainText && !editingMessage;\n\n  const insertHtmlAndUpdateCursor = useLastCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    if (inputId === EDITABLE_INPUT_ID && isComposerBlocked) return;\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${getHtml()}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestNextMutation(() => {\n      focusEditableElement(messageInput);\n    });\n  });\n\n  const insertTextAndUpdateCursor = useLastCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  });\n\n  const insertFormattedTextAndUpdateCursor = useLastCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  });\n\n  const insertCustomEmojiAndUpdateCursor = useLastCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  });\n\n  const insertNextText = useLastCallback(() => {\n    if (!nextText) return;\n    insertFormattedTextAndUpdateCursor(nextText, EDITABLE_INPUT_ID);\n    setNextText(undefined);\n  });\n\n  const {\n    shouldSuggestCompression,\n    shouldForceCompression,\n    shouldForceAsFile,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate,\n    handleClearAttachments,\n    handleSetAttachments,\n  } = useAttachmentModal({\n    attachments,\n    setHtml,\n    setAttachments,\n    fileSizeLimit,\n    chatId,\n    canSendAudios,\n    canSendVideos,\n    canSendPhotos,\n    canSendDocuments,\n    insertNextText,\n  });\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const isEditingRef = useStateRef(Boolean(editingMessage));\n  useEffect(() => {\n    if (getHtml() && !isEditingRef.current) {\n      sendMessageAction({ type: 'typing' });\n    }\n  }, [getHtml, isEditingRef, sendMessageAction]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(isReady && isOnActiveTab && isForCurrentMessageList && shouldSuggestStickers && !hasAttachments),\n    getHtml,\n    setHtml,\n    undefined,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    closeCustomEmojiTooltip,\n    insertCustomEmoji,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isOnActiveTab && isForCurrentMessageList && shouldSuggestCustomEmoji && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isStickerTooltipOpen,\n    closeStickerTooltip,\n  } = useStickerTooltip(\n    Boolean(isReady\n      && isOnActiveTab\n      && isForCurrentMessageList\n      && shouldSuggestStickers\n      && canSendStickers\n      && !hasAttachments),\n    getHtml,\n    stickersForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    botId: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    switchWebview: inlineBotSwitchWebview,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments),\n    chatId,\n    getHtml,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean(isReady && isForCurrentMessageList && ((botCommands && botCommands?.length) || chatBotCommands?.length)),\n    getHtml,\n    botCommands,\n    chatBotCommands,\n  );\n\n  useDraft(draft, chatId, threadId, getHtml, setHtml, editingMessage);\n\n  const resetComposer = useLastCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n\n    setAttachments(MEMO_EMPTY_ARRAY);\n    setNextText(undefined);\n\n    closeEmojiTooltip();\n    closeCustomEmojiTooltip();\n    closeStickerTooltip();\n    closeMentionTooltip();\n\n    if (isMobile) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  });\n\n  const [handleEditComplete, handleEditCancel, shouldForceShowEditing] = useEditing(\n    getHtml,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n    replyingToId,\n  );\n\n  // Handle chat change (should be placed after `useDraft` and `useEditing`)\n  const resetComposerRef = useStateRef(resetComposer);\n  const stopRecordingVoiceRef = useStateRef(stopRecordingVoice);\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      stopRecordingVoiceRef.current();\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      resetComposerRef.current();\n    };\n  }, [chatId, threadId, resetComposerRef, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useLastCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: {\n          action: 'openChat',\n          payload: { id: currentUserId, shouldReplaceHistory: true },\n        },\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  });\n\n  const mainButtonState = useDerivedState(() => {\n    if (editingMessage && shouldForceShowEditing) {\n      return MainButtonState.Edit;\n    }\n\n    if (IS_VOICE_RECORDING_SUPPORTED && !activeVoiceRecording && !isForwarding && !(getHtml() && !hasAttachments)) {\n      return MainButtonState.Record;\n    }\n\n    if (shouldSchedule) {\n      return MainButtonState.Schedule;\n    }\n\n    return MainButtonState.Send;\n  }, [\n    activeVoiceRecording, editingMessage, getHtml, hasAttachments, isForwarding, shouldForceShowEditing, shouldSchedule,\n  ]);\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    setNextText,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useLastCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  });\n\n  const validateTextLength = useLastCallback((text: string, isAttachmentModal?: boolean) => {\n    const maxLength = isAttachmentModal ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength.toString(),\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return false;\n    }\n    return true;\n  });\n\n  const checkSlowMode = useLastCallback(() => {\n    if (slowMode && !isAdmin) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n      const nowSeconds = getServerTime();\n      const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n        && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n      const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n      if (\n        (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n        || nextSendDateNotReached\n      ) {\n        const secondsRemaining = nextSendDateNotReached\n          ? slowMode.nextSendDate! - nowSeconds\n          : slowMode.seconds - secondsSinceLastMessage!;\n        showDialog({\n          data: {\n            message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n            isSlowMode: true,\n            hasErrorKey: false,\n          },\n        });\n\n        messageInput?.blur();\n\n        return false;\n      }\n    }\n    return true;\n  });\n\n  const sendAttachments = useLastCallback(({\n    attachments: attachmentsToSend,\n    sendCompressed = attachmentSettings.shouldCompress,\n    sendGrouped = attachmentSettings.shouldSendGrouped,\n    isSilent,\n    scheduledAt,\n  }: {\n    attachments: ApiAttachment[];\n    sendCompressed?: boolean;\n    sendGrouped?: boolean;\n    isSilent?: boolean;\n    scheduledAt?: number;\n  }) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n    if (!text && !attachmentsToSend.length) {\n      return;\n    }\n    if (!validateTextLength(text, true)) return;\n    if (!checkSlowMode()) return;\n\n    sendMessage({\n      messageList: currentMessageList,\n      text,\n      entities,\n      scheduledAt,\n      isSilent,\n      shouldUpdateStickerSetOrder,\n      attachments: prepareAttachmentsToSend(attachmentsToSend, sendCompressed),\n      shouldGroupMessages: sendGrouped,\n    });\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestMeasure(() => {\n      resetComposer();\n    });\n  });\n\n  const handleSendAttachments = useLastCallback((\n    sendCompressed: boolean,\n    sendGrouped: boolean,\n    isSilent?: boolean,\n    scheduledAt?: number,\n  ) => {\n    sendAttachments({\n      attachments,\n      sendCompressed,\n      sendGrouped,\n      isSilent,\n      scheduledAt,\n    });\n  });\n\n  const handleSend = useLastCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (currentAttachments.length) {\n      sendAttachments({\n        attachments: currentAttachments,\n      });\n      return;\n    }\n\n    if (!text && !isForwarding) {\n      return;\n    }\n\n    if (!validateTextLength(text)) return;\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (text) {\n      if (!checkSlowMode()) return;\n\n      sendMessage({\n        messageList: currentMessageList,\n        text,\n        entities,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetOrder,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestMeasure(() => {\n      resetComposer();\n    });\n  });\n\n  const handleClickBotMenu = useLastCallback(() => {\n    if (botMenuButton?.type !== 'webApp') {\n      return;\n    }\n\n    callAttachBot({\n      chatId, url: botMenuButton.url, threadId,\n    });\n  });\n\n  const handleActivateBotCommandMenu = useLastCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  });\n\n  const handleMessageSchedule = useLastCallback((\n    args: ScheduledMessageArgs, scheduledAt: number, messageList: MessageList,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n        messageList,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else if (args.sendCompressed !== undefined || args.sendGrouped !== undefined) {\n      const { sendCompressed = false, sendGrouped = false } = args;\n      void handleSendAttachments(sendCompressed, sendGrouped, isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        messageList,\n        scheduledAt,\n      });\n    }\n  });\n\n  useEffectWithPrevDeps(([prevContentToBeScheduled]) => {\n    if (currentMessageList && contentToBeScheduled && contentToBeScheduled !== prevContentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt, currentMessageList);\n      });\n    }\n  }, [contentToBeScheduled, currentMessageList, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n\n      requestNextMutation(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      void handleFileSelect(requestedDraftFiles);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker, inputId?: string) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji, inputId);\n  });\n\n  const handleCustomEmojiSelectAttachmentModal = useLastCallback((emoji: ApiSticker) => {\n    handleCustomEmojiSelect(emoji, EDITABLE_INPUT_MODAL_ID);\n  });\n\n  const handleGifSelect = useLastCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt, currentMessageList);\n        requestMeasure(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ messageList: currentMessageList, gif, isSilent });\n      requestMeasure(() => {\n        resetComposer(true);\n      });\n    }\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt, currentMessageList);\n        requestMeasure(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && canUpdateStickerSetsOrder,\n      });\n      requestMeasure(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  });\n\n  const handleInlineBotSelect = useLastCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt, currentMessageList);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n        messageList: currentMessageList,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestMeasure(() => {\n      resetComposer();\n    });\n  });\n\n  const handleBotCommandSelect = useLastCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestMeasure(() => {\n      resetComposer();\n    });\n  });\n\n  const handlePollSend = useLastCallback((poll: ApiNewPoll) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt, currentMessageList);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ messageList: currentMessageList, poll });\n      closePollModal();\n    }\n  });\n\n  const sendSilent = useLastCallback((additionalArgs?: ScheduledMessageArgs) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ ...additionalArgs, isSilent: true }, scheduledAt, currentMessageList!);\n      });\n    } else if (additionalArgs && ('sendCompressed' in additionalArgs || 'sendGrouped' in additionalArgs)) {\n      const { sendCompressed = false, sendGrouped = false } = additionalArgs;\n      void handleSendAttachments(sendCompressed, sendGrouped, true);\n    } else {\n      void handleSend(true);\n    }\n  });\n\n  const handleSendAsMenuOpen = useLastCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!isMobile || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  });\n\n  useEffect(() => {\n    if (!isComposerBlocked) return;\n\n    setHtml('');\n  }, [isComposerBlocked, setHtml, attachments]);\n\n  const insertTextAndUpdateCursorAttachmentModal = useLastCallback((text: string) => {\n    insertTextAndUpdateCursor(text, EDITABLE_INPUT_MODAL_ID);\n  });\n\n  const removeSymbol = useLastCallback((inputId = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(getHtml()));\n  });\n\n  const removeSymbolAttachmentModal = useLastCallback(() => {\n    removeSymbol(EDITABLE_INPUT_MODAL_ID);\n  });\n\n  const handleAllScheduledClick = useLastCallback(() => {\n    openChat({\n      id: chatId, threadId, type: 'scheduled', noForumTopicPanel: true,\n    });\n  });\n\n  useEffect(() => {\n    if (isRightColumnShown && isMobile) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu, isMobile]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy || !canSendVoices);\n\n  const mainButtonHandler = useLastCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        void handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          } else if (!canSendVoices) {\n            showAllowedMessageTypesNotification({ chatId });\n          }\n        } else {\n          void startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        if (!currentMessageList) {\n          return;\n        }\n\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt, currentMessageList!);\n        });\n        break;\n      default:\n        break;\n    }\n  });\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n    isMounted && 'mounted',\n  );\n\n  const handleSendScheduled = useLastCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt, currentMessageList!);\n    });\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    sendSilent();\n  });\n\n  const handleSendWhenOnline = useLastCallback(() => {\n    handleMessageSchedule({}, SCHEDULED_WHEN_ONLINE, currentMessageList!);\n  });\n\n  const handleSendScheduledAttachments = useLastCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({ sendCompressed, sendGrouped }, scheduledAt, currentMessageList!);\n    });\n  });\n\n  const handleSendSilentAttachments = useLastCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    sendSilent({ sendCompressed, sendGrouped });\n  });\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const withBotMenuButton = isChatWithBot && botMenuButton?.type === 'webApp' && !editingMessage;\n  const isBotMenuButtonOpen = useDerivedState(() => {\n    return withBotMenuButton && !getHtml() && !activeVoiceRecording;\n  }, [withBotMenuButton, getHtml, activeVoiceRecording]);\n\n  const withBotCommands = isChatWithBot && botMenuButton?.type === 'commands' && !editingMessage\n    && botCommands !== false && !activeVoiceRecording;\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        getHtml={getHtml}\n        isReady={isReady}\n        shouldSuggestCompression={shouldSuggestCompression}\n        shouldForceCompression={shouldForceCompression}\n        shouldForceAsFile={shouldForceAsFile}\n        isForCurrentMessageList={isForCurrentMessageList}\n        shouldSchedule={shouldSchedule}\n        onCaptionUpdate={onCaptionUpdate}\n        onSendSilent={handleSendSilentAttachments}\n        onSend={handleSendAttachments}\n        onSendScheduled={handleSendScheduledAttachments}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachments}\n        onAttachmentsUpdate={handleSetAttachments}\n        onCustomEmojiSelect={handleCustomEmojiSelectAttachmentModal}\n        onRemoveSymbol={removeSymbolAttachmentModal}\n        onEmojiSelect={insertTextAndUpdateCursorAttachmentModal}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filteredUsers={mentionFilteredUsers}\n        onInsertUserName={insertMention}\n        onClose={closeMentionTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        getHtml={getHtml}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <svg className=\"svg-appendix\" width=\"9\" height=\"20\">\n          <defs>\n            <filter\n              x=\"-50%\"\n              y=\"-14.7%\"\n              width=\"200%\"\n              height=\"141.2%\"\n              filterUnits=\"objectBoundingBox\"\n              id=\"composerAppendix\"\n            >\n              <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n              <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n              <feColorMatrix\n                values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n                in=\"shadowBlurOuter1\"\n              />\n            </filter>\n          </defs>\n          <g fill=\"none\" fill-rule=\"evenodd\">\n            <path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#composerAppendix)\" />\n            <path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" className=\"corner\" />\n          </g>\n        </svg>\n\n        <InlineBotTooltip\n          isOpen={isInlineBotTooltipOpen}\n          botId={inlineBotId}\n          isGallery={isInlineBotTooltipGallery}\n          inlineBotResults={inlineBotResults}\n          switchPm={inlineBotSwitchPm}\n          switchWebview={inlineBotSwitchWebview}\n          loadMore={loadMoreForInlineBot}\n          isSavedMessages={isChatWithSelf}\n          canSendGifs={canSendGifs}\n          isCurrentUserPremium={isCurrentUserPremium}\n          onSelectResult={handleInlineBotSelect}\n          onClose={closeInlineBotTooltip}\n        />\n        <ComposerEmbeddedMessage\n          onClear={handleEmbeddedClear}\n          shouldForceShowEditing={Boolean(shouldForceShowEditing && editingMessage)}\n        />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          getHtml={getHtml}\n          isDisabled={!canAttachEmbedLinks || hasAttachments}\n        />\n        <div className=\"message-input-wrapper\">\n          {withBotMenuButton && (\n            <BotMenuButton\n              isOpen={isBotMenuButtonOpen}\n              text={botMenuButton.text}\n              isDisabled={Boolean(activeVoiceRecording)}\n              onClick={handleClickBotMenu}\n            />\n          )}\n          {withBotCommands && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                peer={sendAsUser || sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {(!isComposerBlocked || canSendGifs || canSendStickers) && (\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              canSendStickers={canSendStickers}\n              canSendGifs={canSendGifs}\n              onGifSelect={handleGifSelect}\n              onStickerSelect={handleStickerSelect}\n              onCustomEmojiSelect={handleCustomEmojiSelect}\n              onRemoveSymbol={removeSymbol}\n              onEmojiSelect={insertTextAndUpdateCursor}\n              closeBotCommandMenu={closeBotCommandMenu}\n              closeSendAsMenu={closeSendAsMenu}\n              isSymbolMenuForced={isSymbolMenuForced}\n              canSendPlainText={!isComposerBlocked}\n            />\n          )}\n          <MessageInput\n            ref={inputRef}\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            canSendPlainText={!isComposerBlocked}\n            threadId={threadId}\n            isReady={isReady}\n            isActive={!hasAttachments}\n            getHtml={getHtml}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : (!isComposerBlocked\n                  ? (botKeyboardPlaceholder || lang('Message'))\n                  : lang('Chat.PlaceholderTextNotAllowed'))\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && isForCurrentMessageList && !hasAttachments}\n            noFocusInterception={hasAttachments}\n            shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon icon-schedule\" />\n            </Button>\n          )}\n          {Boolean(botKeyboardMessageId) && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && Boolean(currentRecordTime) && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            threadId={threadId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            canSendPhotos={canSendPhotos}\n            canSendVideos={canSendVideos}\n            canSendDocuments={canSendDocuments}\n            canSendAudios={canSendAudios}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            shouldCollectDebugLogs={shouldCollectDebugLogs}\n            theme={theme}\n          />\n          {Boolean(botKeyboardMessageId) && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n            onClose={closeStickerTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        noFastClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon icon-send\" />\n        <i className=\"icon icon-schedule\" />\n        <i className=\"icon icon-microphone-alt\" />\n        <i className=\"icon icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          canScheduleUntilOnline={canScheduleUntilOnline}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onSendWhenOnline={handleSendWhenOnline}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChatWithUser = isUserId(chatId);\n    const chatBotFullInfo = isChatWithBot ? selectUserFullInfo(global, chatBot.id) : undefined;\n    const chatFullInfo = !isChatWithUser ? selectChatFullInfo(global, chatId) : undefined;\n    const messageWithActualBotKeyboard = (isChatWithBot || !isChatWithUser)\n      && selectNewestMessageWithBotKeyboardButtons(global, chatId, threadId);\n    const scheduledIds = selectScheduledIds(global, chatId, threadId);\n    const {\n      language, shouldSuggestStickers, shouldSuggestCustomEmoji, shouldUpdateStickerSetOrder,\n    } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chatFullInfo ? chatFullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId && (\n      chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId)\n        ? defaultSendAsId\n        : (chat?.adminRights?.anonymous ? chat?.id : undefined)\n    );\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !selectUserFullInfo(global, user.id)?.noVoiceMessages) ?? true;\n    const slowMode = chatFullInfo?.slowMode;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n\n    const tabState = selectTabState(global);\n\n    return {\n      isOnActiveTab: !tabState.isBlurred,\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      replyingToId,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === tabState.forwardMessages.toChatId,\n      pollModal: tabState.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chatFullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      contentToBeScheduled: tabState.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      shouldUpdateStickerSetOrder,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: tabState.inlineBots.byUsername,\n      isInlineBotLoading: tabState.inlineBots.isLoading,\n      chatBotCommands: chatFullInfo?.botCommands,\n      botCommands: chatBotFullInfo ? (chatBotFullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBotFullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n      attachmentSettings: global.attachmentSettings,\n      slowMode,\n      currentMessageList,\n      shouldCollectDebugLogs: global.settings.byKey.shouldCollectDebugLogs,\n    };\n  },\n)(Composer));\n","import { useEffect, useRef, useState } from '../../../../lib/teact/teact';\nimport { requestMutation } from '../../../../lib/fasterdom/fasterdom';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/windowEnvironment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype ActiveVoiceRecording =\n  { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction }\n  | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useLastCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            requestMutation(() => {\n              recordButtonRef.current!.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n            });\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  });\n\n  const pauseRecordingVoice = useLastCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    requestMutation(() => {\n      if (recordButtonRef.current) {\n        recordButtonRef.current!.style.boxShadow = 'none';\n      }\n    });\n\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  });\n\n  const stopRecordingVoice = useLastCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n\n    requestMutation(() => {\n      if (recordButtonRef.current) {\n        recordButtonRef.current!.style.boxShadow = 'none';\n      }\n    });\n\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  });\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default MobileSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default GiftPremiumModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import React, {\n  useEffect, useState, memo, useMemo,\n} from '../../lib/teact/teact';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { ThemeKey } from '../../types';\n\nimport {\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  ANIMATION_END_DELAY,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  GENERAL_TOPIC_ID,\n  TMP_CHAT_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n} from '../../config';\nimport {\n  IS_ANDROID, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectBot,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat,\n  getMessageSendingRestrictionReason,\n  getForumComposerPlaceholder,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n  getHasAdminRight,\n} from '../../global/helpers';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport { useResize } from '../../hooks/useResize';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport ChatLanguageModal from './ChatLanguageModal.async';\n\nimport './MiddleColumn.scss';\n\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  topMessageId?: number;\n  canUnpin?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  topMessageId,\n  canUnpin,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds, topMessageId);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown!}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      chatLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isComments);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !selectChatFullInfo(global, chat.id),\n    );\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !replyingToId && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !chat?.isForum;\n    const topMessageId = isCommentThread ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      topMessageId,\n      canUnpin,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { getGlobal } from '../../../global';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\nimport cycleRestrict from '../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: number, pinnedIds?: number[], topMessageId?: number,\n) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useLastCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  });\n\n  const onFocusPinnedMessage = useLastCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) {\n      // Focusing on a post in comments\n      return topMessageId === messageId;\n    }\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  });\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useState, useEffect, useLayoutEffect } from '../lib/teact/teact';\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\n\nimport useLastCallback from './useLastCallback';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleMessageSearchQueryChange = useLastCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader);\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n","import React, {\n  useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloadIds?: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloadIds,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel, topicId]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    topicId,\n  );\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    loadProfilePhotos({ profileId });\n  }, [profileId]);\n\n  const handleSelectMedia = useLastCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds?.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloadIds: activeDownloads?.ids,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\nimport { requestMutation, requestMeasure } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default RightSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './CreateTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './EditTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectChat,\n  selectCurrentMessageList, selectTabState,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}`}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return (\n          <RightSearch\n            key={`right_search_${chatId!}`}\n            chatId={chatId!}\n            threadId={threadId!}\n            onClose={close}\n            isActive={isOpen && isActive}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { GlobalState, TabState } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\nimport { compact } from '../../util/iteratees';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  messages?: GlobalState['messages']['byChatId'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useLastCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    // No need for expensive global updates on messages, so we avoid them\n    const messages = getGlobal().messages.byChatId;\n    const scheduledMessages = getGlobal().scheduledMessages.byChatId;\n\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, chatActiveDownloads]) => {\n      const chatMessages = chatActiveDownloads.ids?.map((id) => messages[chatId]?.byId[id]);\n      const chatScheduledMessages = chatActiveDownloads.scheduledIds?.map((id) => scheduledMessages[chatId]?.byId[id]);\n\n      return compact([...chatMessages || [], ...chatScheduledMessages || []]);\n    }).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { createLocationHash } from '../../util/routing';\nimport { selectTabState } from '../../global/selectors';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\nimport { selectTabState } from '../../global/selectors';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../util/moduleLoader';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ninterface LocalOwnProps {\n  shouldLoad?: boolean;\n}\n\nconst ReactionPickerAsync: FC<OwnProps & LocalOwnProps> = (props) => {\n  const { isOpen, shouldLoad } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen && !shouldLoad);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import React, {\n  useEffect, memo, useState, useRef, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { LangCode } from '../../types';\nimport type {\n  ApiAttachBot,\n  ApiChat,\n  ApiChatFolder,\n  ApiMessage,\n  ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, IS_ELECTRON,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/windowEnvironment';\nimport {\n  selectChatMessage,\n  selectTabState,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n  selectIsReactionPickerOpen,\n  selectPerformanceSettingsValue,\n  selectCanAnimateInterface,\n  selectChatFolder,\n} from '../../global/selectors';\nimport { getUserFullName } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport updateIcon from '../../util/updateIcon';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport ReactionPicker from '../middle/message/ReactionPicker.async';\nimport ChatlistModal from '../modals/chatlist/ChatlistModal.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUserName?: string;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isCurrentUserPremium?: boolean;\n  chatlistModal?: TabState['chatlistModal'];\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\nconst REACTION_PICKER_LOADING_DELAY_MS = 7000; // 7 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUserName,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  chatlistModal,\n  noRightColumnAnimation,\n  isSynced,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadFeaturedEmojiStickers,\n    setIsAppUpdateAvailable,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const [shouldLoadReactionPicker, markShouldLoadReactionPicker] = useFlag(false);\n  useTimeout(markShouldLoadReactionPicker, REACTION_PICKER_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, (isMasterTab && !IS_ELECTRON) ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateDownloadedListener = window.electron!.on(ElectronEvent.UPDATE_DOWNLOADED, () => {\n      setIsAppUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsAppUpdateAvailable(false);\n      removeUpdateDownloadedListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateDownloadedListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadFeaturedEmojiStickers();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    openChat({\n      id: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, []);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUserName={currentUserName} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <ChatlistModal info={chatlistModal} />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} shouldLoad={shouldLoadReactionPicker} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n      chatlistModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUserName: getUserFullName(currentUser),\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      chatlistModal,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","currentReactions","reactions","results","currentSendAs","selectSendAs","chatId","map","current","isReactionChosen","chosenOrder","undefined","count","filter","_ref","forEach","reaction","i","existingIndex","findIndex","r","isSameReaction","push","recentReactions","length","_ref2","isOwn","peerId","currentUserId","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","updateReactions","chat","isOutgoing","areDeepEqual","alreadyHasUnreadReaction","unreadReactions","includes","checkIfHasUnreadReactions","unreadReactionsCount","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","updateWithLocalMedia","messageUpdate","isScheduled","arguments","currentMessage","selectScheduledMessage","content","photo","video","sticker","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","actions","isDeleting","threadInfo","selectThreadByMessage","replyToMessageId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","selectChat","unreadCount","selectListedIds","MAIN_THREAD_ID","isMessageLocal","updateListedIds","threadId","Object","values","byTabId","_ref6","tabId","selectIsViewportNewest","addViewportId","replaceThreadParam","isActionMessage","updateThreadInfo","messagesCount","_ref7","firstUnreadId","selectFirstUnreadId","candidateGlobal","newViewportIds","selectViewportIds","updateChatLastMessage","force","chats","byId","currentLastMessage","lastMessage","topic","isForum","selectTopicFromMessage","updateTopic","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","newLastMessage","clearMessageTranslation","topics","deleteTopic","requestChatUpdate","threadIdsToUpdate","selectThreadIdFromMessage","setGlobal","setTimeout","getGlobal","deleteChatMessages","unique","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","addActionHandler","shouldForceReply","repliesThreadInfo","isTopicReply","loadTopicById","topicId","isLocal","selectIsMessageInCurrentMessageList","action","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","selectIsChatListed","loadTopChats","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","keys","selectChatScheduledMessages","Number","sort","a","b","localId","deleteChatScheduledMessages","thread","_ref3","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messageIds","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","_ref4","pinnedIds","selectPinnedIds","newPinnedIds","concat","currentThreadInfo","selectThreadInfo","newThreadInfo","topMessageId","lastReadInboxMessageIdInThread","messagesById","isUserId","getCurrentTabId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","channelId","pollId","pollUpdate","selectChatMessageByPollId","poll","oldResults","newResults","isMin","result","isChosen","find","option","updatedPoll","options","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","createServiceNotification","media","preview","invoice","extendedMedia","transcriptionId","isPending","transcriptions","error","match","_ref5","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","lastSendMessageDeferred","Deferred","runDebouncedForMarkRead","debounce","cb","async","offsetId","direction","isOutlying","isBudgetPreload","_len2","Array","_key2","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","round","callApi","limit","users","repliesThreadInfos","localMessages","allMessages","buildCollectionByKey","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","addUsers","addChats","updateThreadInfos","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","replyingToTopId","delete","resolve","payload","shouldForceRender","isRestricted","viewportIds","Boolean","_len","_key","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","type","omit","scheduledAt","contentToBeScheduled","replyingToId","selectReplyingToId","replyingToMessage","replyToTopMessageId","noWebPage","selectNoWebPage","sendAs","setReplyingToId","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","groupedId","isFirst","messageListType","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","apiUpdate","draft","shouldForce","user","selectUser","isDeletedUser","draftDate","replyToMsgId","localOnly","selectDraft","newDraft","isUnpin","isOneSide","isSilent","selectCurrentChat","topId","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","showNotification","translate","connectionState","isUserBot","isUnread","minId","readCount","l","countSortedIds","newTopicUnreadCount","webPagePreview","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","realMessages","m","isServiceNotificationMessage","promise","replaceScheduledMessages","scheduledPerThread","scheduledInThread","originChannelId","selectThreadOriginChat","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","url","shouldSkipModal","urlWithProtocol","ensureProtocol","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","showDialog","data","getUserFullName","selectForwardsCanBeSentToChat","isModalShown","closeMediaViewer","exitMessageSelectMode","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","shouldIncrement","shouldSendAsFile","mimeType","GIF_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","Set","add","views","forwards","repliesChatId","recentReplierIds","readMaxId","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","title","langProvider","toString","className","newGifs","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","updateGlobalSearch","foundTopicIds","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","globalSearch","localChats","localUsers","globalChats","globalUsers","localResults","chatIds","userIds","globalResults","date","timestampPlusDay","resultsByType","foundIds","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","timestamp","management","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","userId","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","editingDraft","selectEditingDraft","activeThreadId","currentChat","lastReadInboxId","newCurrentChatId","currentChatMessages","topicLastMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","otherChatId","otherThreadId","updateChats","updateUsers","loadTopics","shouldCloseChatOnError","threads","updateThread","_ref8","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isSynced","initFolderManager","addCallback","authState","isMasterTab","sync","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","newUser","newFullInfo","avatarHash","profilePhoto","fallbackPhoto","personalPhoto","photos","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","updateUser","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","closeNewContactDialog","isPrivate","userOrChat","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","expires","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","isWriteAllowed","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","botId","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","_len3","_key3","openUrl","openGame","alert","isError","buildQueryString","k","join","getPaymentForm","inputInvoice","form","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","_len4","_key4","shippingOptions","setRequestInfoId","updateShippingOptions","button","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","senderId","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","selectBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","webApp","isFromBotMenu","reply","appName","startApp","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","requestedAttachBotInstall","botUser","actionPayload","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","payment","isPaymentModalOpen","status","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","closeInvoice","step","isClosed","premiumModal","isOpen","isClosing","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","promo","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","emoticon","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","some","userReaction","newUserReactions","selectMaxUserReactions","selectPerformanceSettingsValue","newActiveReactions","activeReactions","active","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","fetchUnreadReactions","fromEntries","unread","topReactions","isGroup","selectChatFullInfo","dcId","statisticsDcId","stats","recentTopMessages","msgId","updateStatistics","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","closeLocalTextSearch","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","replaceTabThreadParam","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","isChatInfoShown","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActions","canCopy","message1","message2","resultHtml","resultText","sender","selectSender","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","groupedMessageIds","selectedMessages","openForwardMenu","cancelMessageMediaDownload","addActiveMessageMediaDownload","canDownload","downloadMessageMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseMessageInput","serviceChat","fractionalPart","serviceNotification","reactorModal","seenByModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","fetchingStatus","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","stickerSearch","newContact","isByPhoneNumber","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","newStickers","s","order","isCustomEmoji","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","top","left","height","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isHidden","isMinimized","APP_VERSION_REGEX","then","trim","test","isUpdateAvailable","catch","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","byKey","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","clearPayment","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","noLockOnUnload","onBeforeUnload","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","_global$passcode$inva","timeoutUntil","reactionPicker","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","updateUserFullInfo","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedContact","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","lastCallback","useLastCallback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","props","StickerSetModal","useModuleLoader","Bundles","React","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","isLottie","stickerHash","getStickerPreviewHash","previewMediaData","useMedia","paths","useMemo","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","buildClassName","path","style","CustomEmoji","styles","withSharedAnimation","src","alt","StatusPickerMenu","withGlobal","setEmojiStatus","loadCurrentUser","buttonRef","useRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","useCallback","handleEmojiStatusClick","CustomEmojiEffect","ref","ripple","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","onClose","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","animationLevel","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","canSetPasscode","selectCanSetPasscode","shouldHideSearch","contactsFilter","onSearchQuery","isClosingSearch","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","skipLockOnUnload","updatePerformanceSettings","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","archivedUnreadChatsCount","chatsCount","handleLockScreenHotkey","stopPropagation","useHotkeys","IS_APP","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ariaLabel","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","ANIMATION_LEVEL_MAX","ANIMATION_LEVEL_MIN","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","localStorage","setItem","clearWebsync","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","animationLevelValue","isFullscreen","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","menuItems","MenuItem","icon","Switcher","label","checked","noAnimation","Toggle","isCharIcon","getPromptInstall","searchContent","PickerSelectedItem","canClose","clickArg","chatOrUserId","DropdownMenu","trigger","footer","APP_NAME","positionX","transformOriginX","IS_MAC_OS","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","orderedFolderIds","folderInvitesById","archived","shouldSkipHistoryAnimations","hasArchivedChats","maxFolders","maxFolderInvites","maxChatLists","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","allChatsFolder","ALL_FOLDER_ID","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","isBadgeActive","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","renderCount","LeftSearch","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionY","autoClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","installUpdate","reload","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","fluid","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","useSyncEffect","handleSettingsScreenSelect","renderContent","currentScreen","onScreenSelect","isChannel","LeftMain","LAYERS_ANIMATION_NAME","drawRect","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","useLayoutEffect","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","EMOJI_SIZE","customTitle","onUnpinMessage","onAllPinnedClick","isFullWidth","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","getMessageMediaHash","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleClick","handleMouseDown","useFastClick","ConfirmDialog","confirmLabel","confirmHandler","onMouseDown","PinnedMessageNavigation","thumbDataUri","spoiler","getPictogramDimensions","srcUrl","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","renderText","MessageSummary","noEmoji","emojiSize","RippleEffect","shouldStopPropagation","LUMA_THRESHOLD","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","averageColor","getAverageColor","fillColor","getColorLuma","res","canvas","createElement","ctx2D","getContext","fillStyle","fillRect","ctx","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","globalCompositeOperation","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onContextMenu","volumeIcon","renderAudio","subtitle","renderVoice","disabled","RangeSlider","bold","forceOpen","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","confirmIsDestructive","Checkbox","onCheck","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","selectIsChatWithSelf","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","selectForwardedSender","canUnpin","isComments","firstPinnedMessage","isReady","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","useDerivedState","waitingForPinnedId","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handleHeaderMouseDown","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","usePrevious","canRevealTools","componentEl","classList","requestMutation","remove","renderBackButton","asClose","withUnreadCounter","UnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","emojiStatusSize","noRtl","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderPinnedMessage","ChatReportPanel","AudioPlayer","getMessageKey","HeaderActions","canExpandActions","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","senderUserId","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","MIN_MEDIA_WIDTH_WITH_TEXT","MIN_MEDIA_WIDTH","MIN_MEDIA_HEIGHT","getMinMediaWidth","hasCommentButton","_text$length","calculateMediaDimensions","asForwarded","noAvatars","isOwnMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","isWebPageVideo","getMessageWebPageVideo","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","useFocusMessage","elementRef","isFocused","focusDirection","noFocusHighlight","isJustAdded","isRelocatedRef","isRelocated","messagesContainer","closest","isToBottom","exec","animateScroll","requestForcedReflow","requestMeasure","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","startedAt","excludedClosestSelector","onRelease","preventMessageInputBlur","target","contains","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","PENDING_TRANSLATIONS","useMessageTranslation","chatTranslations","requestedLanguageCode","messageTranslation","byLangCode","languageTranslations","throttledProcessPending","addPendingTranslation","translatedText","translateMessages","hasUnprocessed","messageIdsToTranslate","oldMessageIds","newMessageIds","removePendingTranslations","worker","initializationDeferred","useTextLanguage","setLanguage","threshold","args","detectLanguage","IS_TRANSLATION_SUPPORTED","createConnector","Worker","Symbol","toStringTag","_Symbol$iterator","iterator","LimitedMap","_defineProperty","insertionQueue","keyToRemove","shift","clear","callbackfn","thisArg","_Symbol$toStringTag","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","metadata","isTranslatable","detectedLanguage","occurrences","ContextMenuContainer","openMediaViewer","uploadProfilePhoto","cropModalBlob","setCropModalBlob","isVideoModalOpen","openVideoModal","closeVideoModal","suggestedPhotoUrl","showAvatarNotification","actionText","handleSetSuggestedAvatar","handleCloseCropModal","handleSetVideo","File","videoTs","videoSizes","videoStartTs","role","MediaViewerOrigin","Avatar","loopIndefinitely","withVideo","CropModal","textParts","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","premiumGiftSticker","canPlayAnimatedEmojis","selectCanPlayAnimatedEmojis","isEmbedded","appearanceOrder","isLastInList","isInsideTopic","memoFirstUnreadIdRef","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","onPinnedIntersectionChange","requestConfetti","useOnIntersect","viewportPinnedIdsToRemove","isUnmount","noAppearanceAnimation","markShown","isSuggestedAvatar","useIsIntersecting","shouldShowConfettiRef","usersById","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","handlePremiumGiftClick","AnimatedIconFromSticker","play","noLoop","nonInteractive","ActionMessageSuggestedAvatar","anchor","customText","noUserColors","hasContextMenu","requestedChatTranslationLanguage","isIntersecting","isRoundVideo","getMessageRoundVideo","shouldTranslate","isMessageTranslatable","isTranslationPending","shouldRenderLoader","getUserColorKey","Skeleton","draggable","ActionMessage","outgoingStatus","signature","withReactionOffset","renderQuickReactionButton","noReplies","isTranslated","onTranslationClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","formatDateTimeToString","timeFormat","editDateTime","isEdited","editDate","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","observeIntersection","shouldLoop","shouldPlayEffect","withEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","AnimatedSticker","tgsUrl","isLowPriority","onEnded","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","container","performance","interactionMessageId","withEffects","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","forceLoadPreview","quality","forcePreview","LIKE_STICKER_ID","customEmojiId","getCustomEmojiSize","isBig","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","crossOrigin","getImageData","getAppendixColorFromImage","useBlurredMediaThumbRef","forcedUri","dataUri","getMessageMediaThumbDataUri","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","canAutoLoad","uploadProgress","forcedWidth","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","fullMediaData","withBlurredBackground","withThumb","noThumb","thumbRef","blurredBackgroundRef","thumbClassNames","useMediaTransition","isSpoilerShown","hideSpoiler","downloadProgress","getMessageMediaFormat","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","MESSAGE_CONTENT_SELECTOR","CUSTOM_APPENDIX_ATTRIBUTE","contentEl","appendixBg","setProperty","dimensionsStyle","ProgressSpinner","withAnimation","canAutoPlay","videoRef","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","isPlayerReady","markPlayerReady","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","isInline","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","isRegistered","formatPhoneNumberWithCode","getPercentage","total","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","isCorrect","answers","hidden","quiz","chosen","strokeDashOffset","timer","recentVoters","chatsById","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","cx","cy","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","PollOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","handleQuickButtonClick","siteName","displayUrl","quickButtonLangKey","getWebpageButtonText","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","Photo","SafeLink","Video","langKey","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","forceAspectRatio","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","VENUE_COLORS","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","PinSvg","viewBox","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","timeLeft","formatCountdownShort","textContent","long","prepareMapUrl","pinClassName","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","VideoWithSelect","activeDownloads","selectActiveDownloads","uploadsById","activeDownloadIds","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","selectCanAutoLoadMedia","selectCanAutoPlayMedia","PROGRESS_CENTER","ROUND_VIDEO_DIMENSIONS_PX","PROGRESS_CIRCUMFERENCE","stopPrevious","playerRef","circleRef","shouldSpinnerRender","setIsActivated","getProgress","setProgress","useSignal","getThrottledProgress","useThrottledSignal","playerEl","shouldPlay","stopPlaying","capturePlaying","paused","stopCurrentAudio","renderIcon","openComments","recentRepliers","hasUnread","commentsText","CENTER_ICON_SIZE","EFFECT_SIZE","genericEffects","stopActiveReaction","centerIconId","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","onLoad","withRecentReactors","recentReactors","recentReaction","ReactionAnimatedEmoji","AvatarList","peers","isOutside","metaChildren","noRecentReactors","ReactionButton","getReactionUniqueKey","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","MessageAppendix","filterUnits","dy","in","stdDeviation","fill","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","chatFullInfo","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","isLocation","selectChatTranslations","requestedTranslationLanguage","areTranslationsEnabled","canTranslate","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withReactionEffects","withStickerEffects","selectOutgoingStatus","observeIntersectionForBottom","noComments","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","isTouchScreen","contextMenuTarget","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","isTranslatingChat","openAudioPlayer","sendPollVote","focusMessageInComments","openChatLanguageModal","channelPostId","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","canProcess","previousMetadata","processMessageMetadata","useDetectChatLanguage","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","hasText","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","metaPosition","reactionsPosition","quickReactionPosition","postAuthorTitle","offsetWidth","useAuthorWidth","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","dispatchHeavyAnimationEvent","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","calculatedWidth","reactionsMaxWidth","contentWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","isForAnimation","MessageText","withTranslucentThumbs","renderReactionsAndMeta","meta","MessageMeta","Reactions","forwardAuthor","chatUsername","c","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","fakeType","FakeIcon","renderSenderName","TopicChip","EmbeddedMessage","Sticker","AnimatedCustomEmoji","AnimatedEmoji","Album","MessagePhoneCall","RoundVideo","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","Contact","Poll","Game","InvoiceMediaPreview","DotAnimation","WebPage","Invoice","Location","CommentButton","InlineButtons","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","chatBot","isLoadingBotInfo","chatBotFullInfo","isInMessageList","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","isBotInfoEmpty","messageGroups","getContainerHeight","isViewportNewest","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isSchedule","shouldRenderBotInfo","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","isLocalMessageId","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","isTopicTopMessage","Message","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","MessageListBotInfo","SponsoredMessage","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isCreator","noMessageSendingAnimation","isServiceNotificationsChat","hasTools","canPost","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","parentElement","prevContainerHeightRef","isComposerVisible","setContainerHeight","currentNormalHeight","normalHeight","String","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","useStateRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","ContactGreeting","NoMessages","MessageListContent","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","ScrollDownButton","FILE_EXT_REGEX","buildAttachment","filename","quick","preloadImage","validateAspectRatio","shouldShrink","compressedBlobUrl","resizedUrl","videoWidth","videoHeight","preloadVideo","createPosterForVideo","coverUrl","fetchFromUrl","selectCover","common","picture","format","cover","parseAudioMetadata","uniqueId","prepareAttachmentsToSend","shouldSendCompressed","attach","shouldSendAsSpoiler","deleteLastCharacterOutsideSelection","html","tempInput","contentEditable","appendChild","lastChild","textLength","range","createRange","selection","getSelection","setStart","setEnd","removeAllRanges","addRange","execCommand","removeChild","resetInput","applyIosAutoCapitalizationFix","inputEl","STARTS_ENDS_ON_EMOJI_IMG_REGEX","RegExp","EMOJI_IMG_REGEX","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","subscribeToAnalyzer","reject","onstop","onerror","delayStop","GDOCS_ELEMENT_ID_REGEXP","parseHtml","DOMParser","parseFromString","wrapNodeAnchor","node","cloneNode","wrapNodeInline","wrapNode","inner","newNode","fontWeight","fontStyle","textDecoration","verticalAlign","applyInlineStyles","dirty","createTextNode","styledNode","nodeName","childNodes","getCleanNode","newWrapper","createDocumentFragment","items","applyBlockStyles","nodes","filterNode","nodeType","STYLE_TAG_REGEX","useClipboardPaste","insertTextAndUpdateCursor","setAttachments","setNextText","editedMessage","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_ID","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","pastedFormattedText","fragment","clipboardContent","filteredNodes","cleanNodes","getCleanDocument","textContents","getElementsByTagName","HTMLElement","tagName","replaceWith","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","innerText","ApiMessageEntityTypes","trimEnd","preparePastedHtml","containsCustomEmoji","stripCustomEmoji","getFilesFromDataTransferItems","textToPaste","isWordDocument","documentElement","shouldSetAttachments","newAttachments","URL_ENTITIES","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","buildQueryStateMemo","memoized","RE_COMMAND","isFrozen","DeleteMessageModal","COLOR_REPLACE_PATTERN","iconSvg","mediaDataWithReplacedColors","doc","stroke","strokeWidth","outerHTML","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","menuPosition","setMenuPosition","rect","right","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","AttachBotIcon","Portal","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","shouldCollectDebugLogs","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","canSendVideoAndPhoto","canSendVideoOrPhoto","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","shouldSuggestCompression","validatedFiles","validateFiles","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","handleSendLogs","getDebugLogs","DEBUG_LOG_FILENAME","ResponsiveHoverButton","onActivate","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","AttachBotItem","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","keyboardButtons","noCompact","shouldForceShowEditing","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginY","menuStyle","useMenuPosition","leftIcon","strippedMessage","strippedText","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","getHtml","loadWebPagePreview","toggleMessageWebPage","formattedTextWithLinkRef","detectLinkDebounced","useDebouncedResolver","linkEntity","entity","getLink","useDerivedSignal","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","VOICE_RECORDING_FILENAME","REPLIES_USER_ID","isChatWithUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","shouldUpdateStickerSetOrder","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","adminRights","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","slowMode","selectEditingScheduledDraft","isOnActiveTab","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","dropAreaState","onDropHide","clearDraft","closePollModal","loadScheduledHistory","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","inputRef","setHtml","isMounted","setIsMounted","getSelectionRange","useGetSelectionRange","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","processMessageInputForCustomEmoji","customEmojiNotificationNumber","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","hasAttachments","nextText","canSendGifs","canAttachEmbedLinks","isComposerBlocked","insertHtmlAndUpdateCursor","newHtml","messageInput","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","requestNextMutation","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","insertNextText","shouldForceCompression","shouldForceAsFile","handleAppendFiles","onCaptionUpdate","handleClearAttachments","handleSetAttachments","setShouldForceAsFile","setShouldForceCompression","setShouldSuggestCompression","newValue","suggestCompression","useAttachmentModal","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","useVoiceRecording","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","SEND_MESSAGE_ACTION_INTERVAL","isEditingRef","isChatAdmin","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","useEmojiTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isStickerTooltipOpen","closeStickerTooltip","loadStickersForEmoji","clearStickersForEmoji","isManuallyClosed","markManuallyClosed","unmarkManuallyClosed","getSingleEmoji","IS_EMOJI_SUPPORTED","twemojiRegex","cleanHtml","prepareForRegExp","parseEmojiOnlyString","hasStickers","useStickerTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotSwitchWebview","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetAllInlineBots","extractBotQueryThrottled","useThrottledResolver","getPlainText","parseBotQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","detectCommandThrottled","getCommand","nextFilteredBotCommands","useBotCommandTooltip","useDraft","saveDraft","isEditing","updateDraft","prevState","_prevState$chatId","_prevState$threadId","_prevState$chatId2","_prevState$threadId2","updateDraftRef","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevDraft","customEmojiIds","chatIdRef","threadIdRef","forceUpdateDraft","scopedShatId","scopedThreadId","resetComposer","shouldPreserveInput","handleEditComplete","handleEditCancel","useEditing","editMessage","setEditingDraft","setShouldForceShowEditing","prevEditedMessage","prevReplyingToId","shouldSetNoWebPage","edited","getShouldResetNoWebPageDebounced","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","resetComposerRef","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isCustomSendMenuOpen","handleEmbeddedClear","validateTextLength","isAttachmentModal","maxLength","extraLength","textParams","checkSlowMode","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","sendAttachments","attachmentsToSend","sendCompressed","sendGrouped","handleSendAttachments","handleSend","currentAttachments","record","handleClickBotMenu","handleActivateBotCommandMenu","handleMessageSchedule","restArgs","prevContentToBeScheduled","handleCustomEmojiSelect","isFree","handleCustomEmojiSelectAttachmentModal","handleGifSelect","isScheduleRequested","canUpdateStickerSetsOrder","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","sendSilent","additionalArgs","handleSendAsMenuOpen","insertTextAndUpdateCursorAttachmentModal","removeSymbol","removeSymbolAttachmentModal","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","handleSendScheduled","handleSendSilent","handleSendWhenOnline","handleSendScheduledAttachments","handleSendSilentAttachments","onSend","withBotMenuButton","isBotMenuButtonOpen","withBotCommands","DropAreaState","withQuick","onSendSilent","onSendScheduled","onFileAppend","onAttachmentsUpdate","onCustomEmojiSelect","onRemoveSymbol","onEmojiSelect","shouldBeAnonymous","selectedSendAsId","filteredUsers","onInsertUserName","withUsername","isSavedMessages","onSelectResult","ComposerEmbeddedMessage","WebPagePreview","BotMenuButton","SymbolMenuButton","onGifSelect","onStickerSelect","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","AttachMenu","BotKeyboardMenu","CustomEmojiTooltip","EmojiTooltip","allowDisabledClick","noFastClick","CustomSendMenu","onSendSchedule","onSendWhenOnline","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","ChatLanguageModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","shouldLoadFullChat","shouldBlockSendInForum","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","isDesktop","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","useResize","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","customBackgroundValue","useCustomBackground","settingValue","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onMouseUp","onDragEnter","MiddleHeader","onStop","MessageList","Composer","FloatingActionButtons","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","selectCanManage","isEditingInvite","canViewStatistics","_useCurrentOrPrev","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","ManagementScreens","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","CreateTopic","EditTopic","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","renderingActiveTab","tabType","resultType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","isFirstTab","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","StickerSearchAsync","GifSearchAsync","PollResultsAsync","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","RightHeader","MediaViewer","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","activeMessages","chatActiveDownloads","chatScheduledMessages","downloadHash","download","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createLocationHash","_extends","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","CONFETTI_COLORS","pick","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","beginPath","ellipse","hideTimeout","prevConfettiTime","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","ReactionPicker","info","ChatlistModal","DEBUG_isLogged","wasTimeFormatSetManually","currentUser","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","currentUserName","isPremiumModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadTopReactions","loadFeaturedEmojiStickers","setIsAppUpdateAvailable","loadBundle","shouldLoadReactionPicker","markShouldLoadReactionPicker","removeUpdateDownloadedListener","on","ElectronEvent","removeUpdateErrorListener","langCode","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","parentNode","childElementCount","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","AnimatedIconWithPreview","LOCAL_TGS_URLS","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}