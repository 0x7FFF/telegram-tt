{"version":3,"file":"5769.0abf0fcacb5d1ea8bb33.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/util/permanentWebVersion.ts","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessageSuggestedAvatar.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/CustomReactionAnimation.module.scss?e66e","webpack://telegram-t/./src/components/middle/message/CustomReactionAnimation.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useAttachmentModal.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n\n  window.open(createMessageHashUrl(chatId, 'thread', MAIN_THREAD_ID), '_blank');\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('openDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\nimport type {\n  TabState, GlobalState, ActionReturnType,\n} from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  replaceTabThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectChatScheduledMessages,\n  selectTabState,\n} from '../../selectors';\nimport { compact, findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate,\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: undefined,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      threadId,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  global = replaceTabThreadParam(global, chatId, threadId, 'outlyingIds', undefined, tabId);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const byChatId = tabState.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  const byChatId = selectTabState(global, tabId).activeDownloads.byChatId;\n  const newByChatId: TabState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return updateTabState(global, {\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: [...(tabState.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (selectTabState(global, tabId).shouldShowContextMenuHint) {\n    actions.disableContextMenuHint({ tabId });\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (!selectTabState(global, tabId).shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    shouldShowContextMenuHint: false,\n  }, tabId);\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  const resultText = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyHtmlToClipboard(result.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport default function updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  APP_VERSION, DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState, selectIsTrustedBot,\n} from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { unique } from '../../../util/iteratees';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport updateIcon from '../../../util/updateIcon';\nimport updatePageTitle from '../../../util/updatePageTitle';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { addCallback } from '../../../lib/teact/teactn';\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isChatInfoShown: force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown,\n  }, tabId);\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  const { animationLevel } = global.settings.byKey;\n  if (animationLevel === 0) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: NodeJS.Timeout | undefined;\n\nconst NOTIFICATION_INTERVAL = 1000;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred } = payload;\n  const token = getCurrentTabId();\n\n  if (!isBlurred) {\n    actions.updateIsOnline(true);\n  }\n\n  const blurredTabTokens = unique(isBlurred\n    ? [...global.blurredTabTokens, token]\n    : global.blurredTabTokens.filter((t) => t !== token));\n\n  if (blurredTabTokens.length === getAllMultitabTokens().length) {\n    actions.updateIsOnline(false);\n  }\n\n  const isNewlyBlurred = isBlurred && blurredTabTokens.length === 1;\n\n  if (isNewlyBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = setInterval(() => {\n      global = getGlobal();\n      global = {\n        ...global,\n        notificationIndex: (global.notificationIndex || 0) + 1,\n        allNotificationsCount: getAllNotificationsCount(),\n      };\n      setGlobal(global);\n    }, NOTIFICATION_INTERVAL);\n  }\n\n  if (!blurredTabTokens.length && notificationInterval) {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n    global = {\n      ...global,\n      notificationIndex: undefined,\n    };\n  }\n\n  return {\n    ...global,\n    blurredTabTokens,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddCallback((global: GlobalState) => {\n  if (global.notificationIndex === undefined || global.allNotificationsCount === undefined) return;\n\n  const index = global.notificationIndex;\n  const allNotificationsCount = global.allNotificationsCount;\n\n  if (document.title.includes(INACTIVE_MARKER) || !global.initialUnreadNotifications) {\n    updateIcon(false);\n    updatePageTitle(PAGE_TITLE);\n    return;\n  }\n\n  if (index % 2 === 0) {\n    const newUnread = allNotificationsCount - global.initialUnreadNotifications;\n    if (newUnread > 0) {\n      updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n    } else {\n      updatePageTitle(PAGE_TITLE);\n      updateIcon(false);\n    }\n  } else {\n    updatePageTitle(PAGE_TITLE);\n    updateIcon(false);\n  }\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: playbackRate || tabState.mediaViewer.playbackRate,\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, setupPasscode,\n} from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport type { ActionReturnType } from '../../types';\nimport { signalPasscodeHash } from '../../../util/establishMultitabRole';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  signalPasscodeHash();\n  global = getGlobal();\n  global = updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  });\n  setGlobal(global);\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: (global.passcode?.invalidAttemptsCount ?? 0) + 1,\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n  updateTopic,\n  updateThreadInfo,\n  replaceTabThreadParam,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectIsCurrentUserPremium,\n  selectForwardsContainVoiceMessages,\n  selectTabState,\n  selectThreadIdFromMessage,\n} from '../../selectors';\nimport {\n  debounce, onTickEnd, rafPromise,\n} from '../../../util/schedulers';\nimport {\n  getMessageOriginalId, getUserFullName, isDeletedUser, isServiceNotificationMessage, isUserBot,\n} from '../../helpers';\nimport { translate } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId, tabId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const replyingToTopId = chat.isForum ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    replyingToTopId,\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    }, tabId);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        }, tabId);\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          }, tabId);\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      }, tabId);\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      }, tabId);\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const { text, entities, tabId = getCurrentTabId() } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (!result) {\n    draft.isLocal = true;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId, tabId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { message: text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const { isSilent, scheduledAt, tabId = getCurrentTabId() } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      toThreadId,\n      messages: realMessages,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyingToTopId: toThreadId,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      }, tabId);\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  global = getGlobal();\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(global, chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids, tabId)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId, tabId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceTabThreadParam(global, chatId, threadId, 'outlyingIds', undefined, tabId);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n  groupedId?: string;\n},\n...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  global = getGlobal();\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && threadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, threadId, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByUserIds: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    if (!user.fullInfo) {\n      const { accessHash } = user;\n      user = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n    }\n\n    if (user?.fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type { ApiStickerSetInfo } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { onTickEnd, pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets, updateStickerSearch,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectTabState, selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { translate } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetInfo },\n  );\n  global = getGlobal();\n\n  if (!stickerSet) {\n    onTickEnd(() => {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n    });\n\n    if ('shortName' in stickerSetInfo\n      && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n      global = updateTabState(global, {\n        openedStickerSetShortName: undefined,\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    actions.showNotification({\n      message: translate('StickerPack.ErrorNotFound'),\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiChat, ApiTopic, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateTopics,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery, selectTabState } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        localChats, localUsers, globalChats, globalUsers,\n      } = result;\n\n      if (localChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n      }\n\n      if (localUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: localChats.map(({ id }) => id),\n          userIds: localUsers.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateListedIds,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  global = updateListedIds(global, chat.id, threadId, newFoundIds);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal, setGlobal, getActions,\n} from '../../index';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type {\n  ActionReturnType, GlobalState, Thread,\n} from '../../types';\n\nimport {\n  DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  updateUsers,\n  updateChats,\n  updateThreadInfos,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n  updateThread,\n} from '../../reducers';\nimport {\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectEditingId,\n  selectEditingDraft,\n  selectChatMessages,\n  selectTabState,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport { updateTabState } from '../../reducers/tabs';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    // TODO Fix comments chat id, or refetch chat thread here\n    const activeCurrentChatId = threadInfo?.originChannelId || currentChatId;\n    // Memoize drafts\n    const draftChatIds = Object.keys(global.messages.byChatId);\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    const draftsByChatId = draftChatIds.reduce<Record<string, Partial<Thread>>>((acc, chatId) => {\n      acc[chatId] = {};\n      acc[chatId].draft = selectDraft(global, chatId, activeThreadId);\n      acc[chatId].editingId = selectEditingId(global, chatId, activeThreadId);\n      acc[chatId].editingDraft = selectEditingDraft(global, chatId, activeThreadId);\n\n      return acc;\n    }, {});\n\n    const currentChat = activeCurrentChatId ? global.chats.byId[activeCurrentChatId] : undefined;\n    if (activeCurrentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, activeCurrentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages, topicLastMessages);\n        const byId = buildCollectionByKey(allMessages, 'id');\n        const listedIds = Object.keys(byId).map(Number);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, activeCurrentChatId, byId);\n        global = updateListedIds(global, activeCurrentChatId, activeThreadId, listedIds);\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === activeCurrentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, activeCurrentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        global = updateThreadInfos(global, activeCurrentChatId, result.repliesThreadInfos);\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    // Restore drafts\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.keys(draftsByChatId).forEach((chatId) => {\n      global = updateThread(global, chatId, activeThreadId, draftsByChatId[chatId]);\n    });\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: activeCurrentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: activeCurrentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n\n    setGlobal(global);\n  }\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) return;\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { migrateChat } from './chats';\nimport { getUserFirstOrLastName, isChatBasicGroup } from '../../helpers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/langProvider';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(global, actions, chat, tabId);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id, tabId });\n  }\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { translate } from '../../../util/langProvider';\nimport { addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) return;\n\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = user.fullInfo?.profilePhoto?.id !== newUser.fullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = user.fullInfo?.fallbackPhoto?.id !== newUser.fullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = user.fullInfo?.personalPhoto?.id !== newUser.fullInfo?.personalPhoto?.id;\n  if ((hasChangedAvatarHash || hasChangedProfilePhoto || hasChangedFallbackPhoto || hasChangedPersonalPhoto)\n    && user.photos?.length) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  if (user && !user?.fullInfo) {\n    const { id, accessHash } = user;\n    user = await callApi('fetchFullUser', { id, accessHash });\n    if (!user) return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n  const fallbackPhoto = user?.fullInfo?.fallbackPhoto;\n  const personalPhoto = user?.fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n","import type { GlobalState, TabArgs } from '../types';\nimport type { InlineBotSettings } from '../../types';\nimport { updateTabState } from './tabs';\nimport { selectTabState } from '../selectors';\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import { IS_ANDROID, IS_IOS } from './environment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser, selectThreadTopMessageId,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedContact(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, currentUserId, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, message.viaBotId || message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n  const replyingTo = selectReplyingToId(global, chatId, threadId);\n  let replyingToTopId: number | undefined;\n\n  if (replyingTo && threadId !== MAIN_THREAD_ID) {\n    replyingToTopId = selectThreadTopMessageId(global, chatId, threadId)!;\n  }\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  let bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n  if (!bot.fullInfo) await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n  global = getGlobal();\n  bot = selectUser(global, botId)!;\n  if (bot.fullInfo?.isBlocked) await callApi('unblockContact', bot.id, bot.accessHash);\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action](callbackPayload);\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  await loadAttachBots(global, hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(global, bot, isEnabled, isWriteAllowed);\n});\n\nasync function toggleAttachBot<T extends GlobalState>(\n  global: T, bot: ApiUser, isEnabled: boolean, isWriteAllowed?: boolean,\n) {\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n  global = getGlobal();\n  await loadAttachBots(global);\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, bot, url, startParam, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isFromBotMenu = !bot;\n  if (!isFromBotMenu && !global.attachMenu.bots[bot.id]) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload,\n        },\n      },\n    }, tabId);\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId, threadId, tabId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId: isFromBotMenu ? chatId : bot.id,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n    tabId,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  await toggleAttachBot(global, botUser, true, isWriteAllowed);\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, currentUserId: string, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice, selectTabState,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\nimport { selectTabState } from '../selectors';\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ userId }) => userId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      userId: currentUserId!,\n      reaction,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat, selectTabState,\n  selectDefaultReaction,\n  selectLocalAnimatedEmojiEffectByName,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectCurrentMessageList,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isSameReaction, getUserReactions, isMessageLocal } from '../../helpers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, localEffect, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji || localEffect,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions, localEffect,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || (!emoji && !localEffect) || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji || selectLocalAnimatedEmojiEffectByName(localEffect!)!,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', (global, actions, payload): ActionReturnType => {\n  const { chatId, reaction, tabId = getCurrentTabId() } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n\n  const reactions = newUserReactions.slice(-limit);\n\n  void callApi('sendReaction', { chat, messageId, reactions });\n\n  const { animationLevel } = global.settings.byKey;\n\n  const tabState = selectTabState(global, tabId);\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    const newActiveReactions = hasReaction ? omit(tabState.activeReactions, [messageId]) : {\n      ...tabState.activeReactions,\n      [messageId]: [\n        ...(tabState.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = updateTabState(global, {\n      activeReactions: newActiveReactions,\n    }, tabId);\n  }\n\n  return addMessageReaction(global, message, reactions);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  if (currentChatId === id) return global;\n\n  return updateTabState(global, {\n    activeReactions: {},\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { messageId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = tabState.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [messageId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  updateStatistics, updateMessageStatistics, updateStatisticsGraph, addUsers,\n} from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat, updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectThreadParam,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport type { ActionReturnType } from '../../types';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum } = selectChat(global, update.id) || {};\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        // The property `isForum` was changed in another client\n        if (currentChatId === update.id && 'isForum' in update.chat && prevIsForum !== update.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction, ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  deleteTopic,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsServiceChatReady,\n  selectLocalAnimatedEmojiEffect,\n  selectLocalAnimatedEmoji,\n  selectThreadIdFromMessage,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action)) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const localEmoji = selectLocalAnimatedEmoji(global, update.emoji);\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: tabState.activeEmojiInteractions?.length || 0,\n            animatedEffect: localEmoji ? selectLocalAnimatedEmojiEffect(localEmoji) : update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n          if (currentChatId !== chatId || thread.threadInfo?.threadId !== currentThreadId) return;\n\n          actions.markMessageListRead({ maxId: message.id, tabId });\n        });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId: getCurrentTabId() });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: (threadInfo.messagesCount || 0) + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID, tabId);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUser } from '../../selectors';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium && !selectIsCurrentUserPremium(global)) {\n          actions.openPremiumModal({ isSuccess: true, tabId });\n        }\n      });\n\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(global, update.id);\n      } else {\n        return removeBlockedContact(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder':\n      actions.reorderStickerSets({ order: update.order, isCustomEmoji: update.isCustomEmoji });\n      break;\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.setReplyingToId({ messageId: undefined, tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport {\n  addNotifyException, updateChat, updateTopic, updateNotifySettings,\n} from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSoundsForSafari } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        void initializeSoundsForSafari();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/environment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage, selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { ApiChat } from '../../../api/types';\nimport type { TabState, GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME, APP_VERSION,\n  BETA_CHANGELOG_URL,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport { IS_PWA } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport { selectCurrentMessageList, selectTabState, selectTheme } from '../../../global/selectors';\nimport { isChatArchived } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing'> & Pick<TabState, 'canInstall'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  onSearchQuery,\n  isClosingSearch,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canInstall,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n    openUrl,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  }, [hasPasscode, lockScreen, requestNextSettingsScreen]);\n\n  useHotkeys({\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  });\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleSwitchToLegacy = useCallback(() => {\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleBugReportClick = useCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  }, [openUrl]);\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      <MenuItem\n        icon=\"archive\"\n        onClick={onSelectArchived}\n      >\n        <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n        {archivedUnreadChatsCount > 0 && (\n          <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n        )}\n      </MenuItem>\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Switcher\n          id=\"animations\"\n          label=\"Toggle Animations\"\n          checked={animationLevel > 0}\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <>\n          <MenuItem\n            icon=\"char-K\"\n            href={WEBK_VERSION_URL}\n            onClick={handleSwitchToWebK}\n          >\n            Switch to K Version\n          </MenuItem>\n          <MenuItem\n            icon=\"char-W\"\n            href={LEGACY_VERSION_URL}\n            onClick={handleSwitchToLegacy}\n          >\n            Switch to Old Version\n          </MenuItem>\n        </>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  ), [\n    animationLevel, archivedUnreadChatsCount, canInstall, handleAnimationLevelChange, handleBugReportClick,\n    handleChangelogClick, handleDarkModeToggle, handleOpenTipsChat, handleSelectSaved, handleSwitchToLegacy,\n    handleSwitchToWebK, lang, onSelectArchived, onSelectContacts, onSelectSettings, theme, withOtherVersions,\n  ]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          {menuItems}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className=\"passcode-lock\"\n          >\n            <i className=\"icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const { currentUserId, connectionState, isSyncing } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(tabState.canInstall),\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectTabState, selectIsForumPanelOpen } from '../../../global/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  shouldHideFolderTabs?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  isForumPanelOpen?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onScreenSelect,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  shouldHideFolderTabs,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && !orderedFolderIds) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders, orderedFolderIds]);\n\n  const allChatsFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n    };\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map(({ id, title }, i) => {\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n\n      return ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n      });\n    });\n  }, [displayedFolders, folderCountersById, maxFolders]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        lastSyncTime={lastSyncTime}\n        foldersDispatch={foldersDispatch}\n        onScreenSelect={onScreenSelect}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n      )}\n    >\n      {shouldRenderFolders ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} areFolders />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n      },\n      currentUserId,\n      lastSyncTime,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      isForumPanelOpen: selectIsForumPanelOpen(global),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\nimport ForumPanel from './ForumPanel';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const { shouldRenderForumPanel, handleForumPanelAnimationEnd } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && content === LeftColumnContent.ChatList;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleUpdateClick = useCallback(() => {\n    window.location.reload();\n  }, []);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onScreenSelect={onScreenSelect}\n                  foldersDispatch={foldersDispatch}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelVisible}\n          onTopicSearch={onTopicSearch}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectTabState, selectCurrentChat, selectIsForumPanelOpen } from '../../global/selectors';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useOnChange from '../../hooks/useOnChange';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  isChatOpen,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, isFirstChatFolderActive, setGlobalSearchClosing, resetChatCreation, setGlobalSearchQuery,\n    setGlobalSearchDate, setGlobalSearchChatId, settingsScreen, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  const handleTopicSearch = useCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  }, [forumPanelChatId, setGlobalSearchChatId, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || (isFirstChatFolderActive && !isChatOpen && !isForumPanelOpen)\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    'Mod+0': handleHotkeySavedMessages,\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useOnChange(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n  }, [nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onTopicSearch={handleTopicSearch}\n                  isForumPanelOpen={isForumPanelOpen}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  isClosingSearch={isClosingSearch}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                  isUpdateAvailable={isUpdateAvailable}\n                  isForumPanelOpen={isForumPanelOpen}\n                  onTopicSearch={handleTopicSearch}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n    } = tabState;\n    const {\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isUpdateAvailable,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      isChatOpen,\n      isUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport {\n  useState, useEffect, useLayoutEffect, useCallback,\n} from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  const setElementStyle = useCallback((width?: number) => {\n    if (!elementRef.current) {\n      return;\n    }\n\n    const widthPx = width ? `${width}px` : '';\n    elementRef.current.style.width = widthPx;\n    if (cssPropertyName) {\n      elementRef.current.style.setProperty(cssPropertyName, widthPx);\n    }\n  }, [cssPropertyName, elementRef]);\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\nimport MediaSpoiler from '../common/MediaSpoiler';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName('HeaderPinnedMessage', noHoverColor && 'no-hover')}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isSpoiler)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle ? renderText(customTitle) : `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">\n            <MessageSummary lang={lang} message={message} noEmoji={Boolean(mediaThumbnail)} />\n          </p>\n          <RippleEffect />\n        </div>\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className=\"inline-button\"\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string, isSpoiler?: boolean) {\n  const { width, height } = getPictogramDimensions();\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className=\"pinned-thumb\">\n      {!isSpoiler && <img className=\"pinned-thumb-image\" src={srcUrl} width={width} height={height} alt=\"\" />}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n    </div>\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import { getAverageColor, getColorLuma } from './colors';\n\nconst LUMA_THRESHOLD = 240;\n\nexport function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      const averageColor = await getAverageColor(img.src);\n      const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx2D = canvas.getContext('2d')!;\n        ctx2D.fillStyle = fillColor;\n        ctx2D.fillRect(0, 0, canvas.width, canvas.height);\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          ctx2D.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nasync function steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  const averageColor = await getAverageColor(img.src);\n  const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n  ctx.fillStyle = fillColor;\n  ctx.globalCompositeOperation = 'destination-over';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useCallback, useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectTabState, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const updatePlaybackRate = useCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  }, [setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const handlePlaybackClick = useCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  }, [handleContextMenuClose, isPlaybackRateActive, playbackRate, updatePlaybackRate]);\n\n  const PlaybackRateButton = useCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  }, [\n    handleBeforeContextMenu, handleContextMenu, handleContextMenuClose, handlePlaybackClick, isContextMenuOpen,\n    isMobile, isPlaybackRateActive, playbackRate,\n  ]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash: accessHash! });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectTabState,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (lastSyncTime && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady, isForum]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n  }, [openChatWithInfo, chatId, threadId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  }, [pinMessage]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({\n        chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id, noForumTopicPanel: true,\n      });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  }, [openChat, chatId, threadId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (isMobile || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive, isMobile,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (lang('CommentsCount', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isPinnedMessagesFullWidth && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMentionsRead, animateUnreadReaction } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isOwnMessage,\n  getMessageVideo,\n  getMessageWebPageVideo,\n} from '../../../../global/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(\n  message: ApiMessage, asForwarded?: boolean, noAvatars?: boolean, isMobile?: boolean,\n) {\n  const isOwn = isOwnMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, asForwarded, isWebPagePhoto, noAvatars, isMobile)\n    : calculateVideoDimensions(video!, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\nlet fontFamily: string | undefined;\nexport default function calculateAuthorWidth(text: string) {\n  if (!fontFamily) {\n    fontFamily = getComputedStyle(document.documentElement).getPropertyValue('--font-family');\n  }\n\n  if (!element) {\n    element = document.createElement('span');\n    element.style.font = `400 12px ${fontFamily}`;\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.textContent = text;\n\n  return element.offsetWidth;\n}\n","import type { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage } from '../../api/types';\nimport type { TextPart } from '../../types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { getMessageMediaHash } from '../../global/helpers';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Avatar from '../common/Avatar';\nimport CropModal from '../ui/CropModal';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ntype OwnProps = {\n  message: ApiMessage;\n  content?: TextPart;\n};\n\nconst ActionMessageSuggestedAvatar: FC<OwnProps> = ({\n  message,\n  content,\n}) => {\n  const {\n    openMediaViewer, uploadProfilePhoto, showNotification,\n  } = getActions();\n\n  const { isOutgoing } = message;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n  const suggestedPhotoUrl = useMedia(getMessageMediaHash(message, 'full'));\n  const isVideo = message.content.action!.photo?.isVideo;\n\n  const showAvatarNotification = useCallback(() => {\n    showNotification({\n      title: lang('ApplyAvatarHintTitle'),\n      message: lang('ApplyAvatarHint'),\n      action: {\n        action: 'requestNextSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  }, [lang, showNotification]);\n\n  const handleSetSuggestedAvatar = useCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  }, [showAvatarNotification, uploadProfilePhoto]);\n\n  const handleCloseCropModal = useCallback(() => {\n    setCropModalBlob(undefined);\n  }, []);\n\n  const handleSetVideo = useCallback(async () => {\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const photo = message.content.action!.photo!;\n    const blobUrl = await mediaLoader.fetch(`videoAvatar${photo.id}?size=u`, ApiMediaFormat.BlobUrl);\n    const blob = await fetch(blobUrl).then((r) => r.blob());\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  }, [closeVideoModal, message.content.action, showAvatarNotification, uploadProfilePhoto]);\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetch(suggestedPhotoUrl).then((r) => r.blob()));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        mediaId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <span className=\"action-message-suggested-avatar\" tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        photo={message.content.action!.photo}\n        showVideoOverwrite\n        loopIndefinitely\n        withVideo={isVideo}\n        size=\"jumbo\"\n      />\n      <span>{content}</span>\n\n      <span className=\"action-message-button\">{lang(isVideo ? 'ViewVideoAction' : 'ViewPhotoAction')}</span>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('SuggestedVideo')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        textParts={content}\n      />\n    </span>\n  );\n};\n\nexport default memo(ActionMessageSuggestedAvatar);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker, ApiTopic,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\nimport ActionMessageSuggestedAvatar from './ActionMessageSuggestedAvatar';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n  isInsideTopic?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  topic?: ApiTopic;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  isInsideTopic,\n  topic,\n  memoFirstUnreadIdRef,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n  const isSuggestedAvatar = message.content.action?.type === 'suggestProfilePhoto' && message.content.action!.photo;\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    topic,\n    { isEmbedded },\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  // TODO: Refactoring for action rendering\n  const shouldSkipRender = isInsideTopic && message.content.action?.text === 'TopicWasCreatedAction';\n  if (shouldSkipRender) {\n    return <span ref={ref} />;\n  }\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{content}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    (isGift || isSuggestedAvatar) && 'centered-action',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isSuggestedAvatar && <span>{content}</span>}\n      {isGift && renderGift()}\n      {isSuggestedAvatar && (\n        <ActionMessageSuggestedAvatar\n          message={message}\n          content={content}\n        />\n      )}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n    } = (isFocused && selectTabState(global).focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n    const topic = selectTopicFromMessage(global, message);\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      topic,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat,\n} from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n  getMessageIsSpoiler,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\nimport MediaSpoiler from './MediaSpoiler';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n  const isSpoiler = Boolean(message && getMessageIsSpoiler(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected, isSpoiler)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n  isSpoiler?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className={buildClassName('embedded-thumb', isRoundVideo && 'round')}>\n      {!isSpoiler && (\n        <img\n          src={srcUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className=\"pictogram\"\n          draggable={false}\n        />\n      )}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  };\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  useEffect(() => {\n    if (hasEffect && canPlay && shouldPlayEffect) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, startPlayingEffect]);\n\n  const openModal = useCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet, sticker]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [\n    hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect,\n    sticker.stickerSetInfo,\n  ]);\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n        cacheBuster={lastSyncTime}\n      />\n      {hasEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport safePlay from '../../../util/safePlay';\nimport { selectLocalAnimatedEmojiEffectByName } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  localEffect?: string,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  const hasEffect = localEffect || emoji;\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, (emoji || localEffect) && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      localEffect,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, localEffect, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!hasEffect || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      localEffect,\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [\n    chatId, emoji, hasEffect, interactWithAnimatedEmoji, isOwn,\n    localEffect, messageId, play, sendInteractionBunch, size,\n  ]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: localEffect ? selectLocalAnimatedEmojiEffectByName(localEffect)! : emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [\n    activeEmojiInteractions, chatId, emoji, isOwn, localEffect, messageId, play, sendWatchingEmojiInteraction, size,\n  ]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectLocalAnimatedEmoji,\n  selectLocalAnimatedEmojiEffect,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  localSticker?: keyof typeof LOCAL_TGS_URLS;\n  localEffect?: string;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  localSticker,\n  localEffect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, localEffect, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return localSticker ? (\n    <AnimatedIconWithPreview\n      tgsUrl={LOCAL_TGS_URLS[localSticker]}\n      size={size}\n      quality={QUALITY}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className=\"AnimatedEmoji media-inner\"\n      style={style}\n      onClick={handleClick}\n    />\n  ) : (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  const localSticker = selectLocalAnimatedEmoji(global, emoji);\n\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n    localSticker,\n    localEffect: localSticker && withEffects ? selectLocalAnimatedEmojiEffect(localSticker) : undefined,\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, undefined, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n  };\n})(AnimatedCustomEmoji));\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, isDisabled?: boolean | string) {\n  const { isMobile } = useAppLayout();\n\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(isDisabled),\n    isMobile && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import React, {\n  useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  asForwarded?: boolean;\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  asForwarded,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n\n  const [withThumb] = useState(!fullMediaData);\n  const noThumb = Boolean(fullMediaData);\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(photo.isSpoiler);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'), !isDownloading, getMessageMediaFormat(message, 'download'),\n  );\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [fullMediaData, hideSpoiler, isSpoilerShown, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [shouldAffectAppendix, fullMediaData, isOwn, isInSelectMode, isSelected, theme] as const);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, asForwarded, noAvatars, isMobile);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = size === 'inline' ? `height: ${height}px;${dimensionsStyle}` : undefined;\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <img\n        src={fullMediaData}\n        className=\"full-media\"\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {withThumb && (\n        <canvas ref={thumbRef} className={buildClassName('thumbnail', thumbClassNames)} />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(video.isSpoiler);\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay && !isSpoilerShown);\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'), lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n  const hasThumb = Boolean(thumbDataUri);\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading && lastSyncTime;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview, undefined, lastSyncTime);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [\n    isUploading, isDownloading, fullMediaData, isPlayAllowed, isSpoilerShown, onClick, message, onCancelUpload,\n    hideSpoiler,\n  ]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className=\"full-media\"\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon-large-play', playButtonClassNames)} />\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n  animationLevel: AnimationLevel;\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, animationLevel,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} animationLevel={animationLevel} withVideo />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useState, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + getServerTimeOffset(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n  const { isMobile } = useAppLayout();\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message, undefined, undefined, isMobile);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          asForwarded={asForwarded}\n          nonInteractive={!isMediaInteractive}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      {isArticle && (\n        <div className=\"WebPage-text\">\n          <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n          {!inPreview && title && (\n            <p className=\"site-title\">{renderText(title)}</p>\n          )}\n          {truncatedDescription && (\n            <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n          )}\n        </div>\n      )}\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersectionForLoading={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          asForwarded={asForwarded}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme] as const);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n            crossOrigin=\"anonymous\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton width={photo.dimensions?.width} height={photo.dimensions?.height} forceAspectRatio />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  lastSyncTime,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  }, [chatId, id, loadExtendedMedia]);\n\n  useInterval(refreshExtendedMedia, lastSyncTime ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  }, [chatId, id, openInvoice]);\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffectWithPrevDeps(([prevShouldRenderText]) => {\n    if (shouldRenderText) {\n      if (!prevShouldRenderText) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (mapBlobUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldRenderText, isOwn, isInSelectMode, isSelected, theme, mapBlobUrl] as const);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={iconSrc} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TaAutZxIFX4go5HmM7Cg\",\"particle\":\"b5KMGtz_lQAs58tR80GG\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\n\nimport styles from './CustomReactionAnimation.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomReactionAnimation: FC<OwnProps> = ({\n  reaction,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(stickerHash);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData) return undefined;\n\n  return (\n    <div className={styles.root}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomReactionAnimation);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"is-custom-emoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"isCustomEmoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomReactionAnimation from './CustomReactionAnimation';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n};\n\nconst CENTER_ICON_SIZE = 2.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const customEmoji = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomReactionAnimation reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceOnHeavyAnimation\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, toggleReaction]);\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n  noRecentReactors,\n}) => {\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestMasterAndRequestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon-lock\" />}\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ActiveEmojiInteraction, ActiveReaction, MessageListType } from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n  ApiChatMember,\n  ApiUsername,\n  ApiTopic,\n  ApiReaction,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type {\n  AnimationLevel, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { AudioOrigin } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectLocalAnimatedEmoji,\n  selectIsCurrentUserPremium,\n  selectIsChatProtected,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n  getMessageSingleCustomEmoji,\n  hasMessageText,\n  isChatGroup,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport {\n  calculateDimensionsForMessageMedia,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { isAnimatingScroll } from '../../../util/fastSmoothScroll';\n\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport TopicChip from '../../common/TopicChip';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n    memoFirstUnreadIdRef: { current: number | undefined };\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  animationLevel: AnimationLevel;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  animationLevel,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime()),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !hasAnimatedEmoji) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  const shouldFocusOnResize = isLastInGroup;\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.target.clientHeight;\n    messageHeightRef.current = newHeight;\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage]);\n\n  useResizeObserver(shouldFocusOnResize ? ref : undefined, handleResize, true);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        asForwarded,\n        noAvatars,\n        isMobile,\n      }).width;\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n        observeIntersection={observeIntersectionForLoading}\n        animationLevel={animationLevel}\n        withVideo\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        onClick={handleMetaClick}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !hasThread;\n    const textContentClass = buildClassName(\n      'text-content',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            <MessageText\n              message={message}\n              emojiSize={emojiSize}\n              highlight={highlight}\n              isProtected={isProtected}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n              withTranslucentThumbs={isCustomShape}\n            />\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji\n                reaction={defaultReaction}\n                size={QUICK_REACTION_SIZE}\n                availableReactions={availableReactions}\n                observeIntersection={observeIntersectionForPlaying}\n              />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, repliesThreadInfo, forwardInfo,\n      transcriptionId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chat.fullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && (\n      selectAnimatedEmoji(global, singleEmoji) || selectLocalAnimatedEmoji(global, singleEmoji)\n    ) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      lastSyncTime,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && activeReactions[reactionMessage.id],\n      activeEmojiInteractions,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      senderAdminMember,\n      messageTopic,\n      genericEffects: global.genericEmojiEffects,\n      hasTopicChip,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type {\n  ApiChat, ApiTopic, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId!,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n      noForumTopicPanel: true,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId!,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  const handleTopicChipClick = useCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  }, [chatId, focusMessage, isChatWithRepliesBot, messageTopic, messageId, replyToChatId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getActions } from '../../global';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageListType } from '../../global/types';\nimport type { ApiTopic } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon topic={topic} size={ICON_SIZE} className=\"icon topic-icon\" />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium, selectLastScrollOffset,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/environment';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useResizeObserver from '../../hooks/useResizeObserver';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: AnimationLevel;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n  topic?: ApiTopic;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread'\n    && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0);\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useOnChange(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && threadFirstMessageId !== threadTopMessageId\n      && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  }, []);\n  useResizeObserver(containerRef, handleResize);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {!botInfo && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <OptimizedVideo\n                  canPlay\n                  src={botInfoGifUrl}\n                  loop\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botInfo = chatBot.fullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    const topic = chat.topics?.[threadId];\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      topic,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    const img = await preloadImage(blobUrl);\n    const { width, height } = img;\n    const shouldShrink = Math.max(width, height) > MAX_QUICK_IMG_SIZE;\n    const isGif = mimeType === GIF_MIME_TYPE;\n\n    if (!options?.compressedBlobUrl && !isGif && (shouldShrink || mimeType !== 'image/jpeg')) {\n      const resizedUrl = await scaleImage(\n        blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n      );\n      URL.revokeObjectURL(blobUrl);\n      return buildAttachment(filename, blob, {\n        compressedBlobUrl: resizedUrl,\n      });\n    }\n\n    if (mimeType === 'image/jpeg') {\n      filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n    }\n\n    quick = { width, height };\n    previewBlobUrl = blobUrl;\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    uniqueId: `${Date.now()}-${Math.random()}`,\n    ...options,\n  };\n}\n\nexport function prepareAttachmentsToSend(\n  attachments: ApiAttachment[], shouldSendCompressed?: boolean,\n): ApiAttachment[] {\n  return attachments.map((attach) => {\n    if (shouldSendCompressed) {\n      if (attach.compressedBlobUrl) {\n        return {\n          ...attach,\n          blobUrl: attach.compressedBlobUrl,\n        };\n      }\n      return attach;\n    }\n\n    return {\n      ...attach,\n      shouldSendAsFile: !attach.voice ? true : undefined,\n      shouldSendAsSpoiler: undefined,\n    };\n  });\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n  );\n  const hasStickers = Boolean(stickers?.length) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({\n        emoji: IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!,\n      });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] | undefined = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (!files?.length && !pastedText) {\n        return;\n      }\n\n      if (files?.length && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file);\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      if (textToPaste) {\n        insertTextAndUpdateCursor(textToPaste, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nconst useDraft = (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  lastSyncTime?: number,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n  const prevDraft = usePrevious(draft);\n\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    const currentHtml = htmlRef.current;\n    if (currentHtml === undefined || editedMessage || !lastSyncTime) return;\n    if (currentHtml.length) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(currentHtml!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, lastSyncTime, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n      return;\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n  }, [\n    chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId, editedMessage, prevDraft, loadCustomEmojis,\n  ]);\n\n  const html = htmlRef.current;\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n\nexport default useDraft;\n","import { useCallback, useRef, useState } from '../lib/teact/teact';\n\nimport useRunDebounced from './useRunDebounced';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck, { isHeavyAnimating } from './useHeavyAnimationCheck';\nimport useForceUpdate from './useForceUpdate';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const [value, setValue] = useState<R>();\n  const { isFrozen, updateWhenUnfrozen } = useHeavyAnimationFreeze();\n  const runDebounced = useRunDebounced(ms, true);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      updateWhenUnfrozen();\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n\nfunction useHeavyAnimationFreeze() {\n  const isPending = useRef(false);\n\n  const updateWhenUnfrozen = useCallback(() => {\n    isPending.current = true;\n  }, []);\n\n  const forceUpdate = useForceUpdate();\n  const handleUnfreeze = useCallback(() => {\n    if (!isPending.current) {\n      return;\n    }\n\n    isPending.current = false;\n    forceUpdate();\n  }, [forceUpdate]);\n  useHeavyAnimationCheck(noop, handleUnfreeze);\n\n  return {\n    isFrozen: isHeavyAnimating(),\n    updateWhenUnfrozen,\n  };\n}\n\nfunction noop() {\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useDebouncedMemo from '../../../../hooks/useDebouncedMemo';\n\nconst DEBOUNCE_MS = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot, resetAllInlineBots } = getActions();\n\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDebouncedMemo(() => parseBotQuery(html), DEBOUNCE_MS, [html]) || {};\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = usernameLowered ? inlineBots?.[usernameLowered] : undefined;\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (!isOpen && !username) {\n      resetAllInlineBots();\n    }\n  }, [isOpen, resetAllInlineBots, username]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query: query! });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({\n        chatId, username: usernameLowered, query: query!, offset,\n      });\n    }\n  }, [isAllowed, usernameLowered, chatId, queryInlineBot, query, offset]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername! });\n  }\n\n  return {\n    isOpen,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: unmarkIsOpen,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nfunction parseBotQuery(html: string) {\n  if (!html.startsWith('@')) {\n    return MEMO_NO_RESULT;\n  }\n\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n    usernameLowered: result[1].toLowerCase(),\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      setFilteredBotCommands(undefined);\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length && html.length > 0) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, html.length, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef, useCallback, memo } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport type { OwnProps as ButtonProps } from './Button';\nimport Button from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  const handleClick = useCallback(() => {\n    isMouseInside.current = true;\n    onActivate();\n  }, [onActivate]);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={!IS_TOUCH_ENV ? onActivate : handleClick}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((path) => {\n      path.style.stroke = color;\n      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  threadId?: number;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  threadId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleAttachBot]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        bot,\n        chatId,\n        threadId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { validateFiles } from '../../../util/files';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], shouldSuggestCompression?: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, shouldSuggestCompression?: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileSelect(validatedFiles, shouldSuggestCompression);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            <MenuItem icon=\"photo\" onClick={handleQuickSelect}>{lang('AttachmentMenu.PhotoOrVideo')}</MenuItem>\n            <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            threadId={threadId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectTabState,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n  shouldForceShowEditing?: boolean;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  shouldForceShowEditing,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [\n    replyingToId, shouldForceShowEditing, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId,\n    exitForwardMode,\n  ]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id, noForumTopicPanel: true });\n  }, [focusMessage, isForwarding, message]);\n\n  const handleClearClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  }, [clearEmbedded]);\n\n  const handleChangeRecipientClick = useCallback(() => {\n    changeForwardRecipient();\n  }, [changeForwardRecipient]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getRootElement = useCallback(() => ref.current!, []);\n  const getMenuElement = useCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'), []);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId, shouldForceShowEditing]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div>\n        <div className=\"embedded-left-icon\">\n          <i className={leftIcon} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: false,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: true,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: false,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: true,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { shouldForceShowEditing }): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = selectTabState(global);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId && !shouldForceShowEditing) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message && !shouldForceShowEditing) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageEntityTextUrl, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectTabState, selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDebouncedMemo from '../../../hooks/useDebouncedMemo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const link = useDebouncedMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, DEBOUNCE_MS, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: selectTabState(global).webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState, MessageListType, GlobalState } from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n  ApiAttachMenuPeerType,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR, MAX_UPLOAD_FILEPART_SIZE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_IOS } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatMessage,\n  selectUser,\n  selectCanScheduleUntilOnline,\n  selectEditingScheduledDraft,\n  selectEditingDraft,\n  selectRequestedDraftText,\n  selectTheme,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectChatType,\n  selectRequestedDraftFiles,\n  selectTabState,\n  selectReplyingToId,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment, { prepareAttachmentsToSend } from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport { insertHtmlInSelection } from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { buildCustomEmojiHtml } from './helpers/customEmoji';\nimport { processMessageInputForCustomEmoji } from '../../../util/customEmojiManager';\nimport { getTextWithEntitiesAsHtml } from '../../common/helpers/renderTextWithEntities';\n\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useOnChange from '../../../hooks/useOnChange';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAttachmentModal from './hooks/useAttachmentModal';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  isMobile?: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    replyingToId?: number;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: TabState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: TabState['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n    attachmentSettings: GlobalState['attachmentSettings'];\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = TabState['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  isMobile,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  replyingToId,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  attachmentSettings,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    addRecentCustomEmoji,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setInnerHtml] = useState<string>('');\n  const htmlRef = useStateRef(html);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const setHtml = useCallback((newHtml: string) => {\n    setInnerHtml(newHtml);\n    requestAnimationFrame(() => {\n      processMessageInputForCustomEmoji();\n    });\n  }, []);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useOnChange(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const {\n    shouldSuggestCompression,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate,\n    handleClearAttachments,\n    handleSetAttachments,\n  } = useAttachmentModal({\n    attachments,\n    setHtml,\n    setAttachments,\n    fileSizeLimit,\n  });\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  useEffect(() => {\n    if (!html || editingMessage) return;\n    sendMessageAction({ type: 'typing' });\n  }, [editingMessage, html, sendMessageAction]);\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    EDITABLE_INPUT_CSS_SELECTOR,\n    setHtml,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const { isCustomEmojiTooltipOpen, closeCustomEmojiTooltip, insertCustomEmoji } = useCustomEmojiTooltip(\n    Boolean(shouldSuggestCustomEmoji && !attachments.length),\n    EDITABLE_INPUT_CSS_SELECTOR,\n    html,\n    setHtml,\n    customEmojiForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    insertCustomEmoji: insertCustomEmojiFromEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    htmlRef,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertHtmlAndUpdateCursor = useCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [htmlRef, setHtml]);\n\n  const insertFormattedTextAndUpdateCursor = useCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertCustomEmojiAndUpdateCursor = useCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, [htmlRef, setHtml]);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments(MEMO_EMPTY_ARRAY);\n    closeStickerTooltip();\n    closeCustomEmojiTooltip();\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (isMobile) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [\n    closeStickerTooltip, closeCustomEmojiTooltip, closeMentionTooltip, closeEmojiTooltip,\n    closeSymbolMenu, setHtml, isMobile,\n  ]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, threadId, resetComposer, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: {\n          action: 'openChat',\n          payload: { id: currentUserId, shouldReplaceHistory: true },\n        },\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  }, [currentUserId, lang, showNotification]);\n\n  const [handleEditComplete, handleEditCancel, shouldForceShowEditing] = useEditing(\n    htmlRef,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n    replyingToId,\n  );\n\n  const mainButtonState = useMemo(() => {\n    if (editingMessage && shouldForceShowEditing) {\n      return MainButtonState.Edit;\n    }\n\n    if (IS_VOICE_RECORDING_SUPPORTED && !activeVoiceRecording && !(html && !attachments.length) && !isForwarding) {\n      return MainButtonState.Record;\n    }\n\n    if (shouldSchedule) {\n      return MainButtonState.Schedule;\n    }\n\n    return MainButtonState.Send;\n  }, [\n    activeVoiceRecording, attachments.length, editingMessage, html, isForwarding, shouldForceShowEditing,\n    shouldSchedule,\n  ]);\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  useDraft(draft, chatId, threadId, htmlRef, setHtml, editingMessage, lastSyncTime);\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const validateTextLength = useCallback((text: string, isAttachmentModal?: boolean) => {\n    const maxLength = isAttachmentModal ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength.toString(),\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return false;\n    }\n    return true;\n  }, [captionLimit, showDialog]);\n\n  const checkSlowMode = useCallback(() => {\n    if (slowMode && !isAdmin) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n      const nowSeconds = getServerTime();\n      const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n        && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n      const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n      if (\n        (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n        || nextSendDateNotReached\n      ) {\n        const secondsRemaining = nextSendDateNotReached\n          ? slowMode.nextSendDate! - nowSeconds\n          : slowMode.seconds - secondsSinceLastMessage!;\n        showDialog({\n          data: {\n            message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n            isSlowMode: true,\n            hasErrorKey: false,\n          },\n        });\n\n        messageInput?.blur();\n\n        return false;\n      }\n    }\n    return true;\n  }, [isAdmin, lang, showDialog, slowMode]);\n\n  const sendAttachments = useCallback(({\n    attachments: attachmentsToSend,\n    sendCompressed = attachmentSettings.shouldCompress,\n    sendGrouped = attachmentSettings.shouldSendGrouped,\n    isSilent,\n    scheduledAt,\n  } : {\n    attachments: ApiAttachment[];\n    sendCompressed?: boolean;\n    sendGrouped?: boolean;\n    isSilent?: boolean;\n    scheduledAt?: number;\n  }) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n    if (!text && !attachmentsToSend.length) {\n      return;\n    }\n    if (!validateTextLength(text, true)) return;\n    if (!checkSlowMode()) return;\n\n    sendMessage({\n      text,\n      entities,\n      scheduledAt,\n      isSilent,\n      shouldUpdateStickerSetsOrder: true,\n      attachments: prepareAttachmentsToSend(attachmentsToSend, sendCompressed),\n      shouldGroupMessages: sendGrouped,\n    });\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    attachmentSettings, connectionState, htmlRef, validateTextLength, checkSlowMode, sendMessage, clearDraft, chatId,\n    resetComposer,\n  ]);\n\n  const handleSendAttachments = useCallback((\n    sendCompressed: boolean,\n    sendGrouped: boolean,\n    isSilent?: boolean,\n    scheduledAt?: number,\n  ) => {\n    sendAttachments({\n      attachments,\n      sendCompressed,\n      sendGrouped,\n      isSilent,\n      scheduledAt,\n    });\n  }, [attachments, sendAttachments]);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (currentAttachments.length) {\n      sendAttachments({\n        attachments: currentAttachments,\n      });\n      return;\n    }\n\n    if (!text && !isForwarding) {\n      return;\n    }\n\n    if (!validateTextLength(text)) return;\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (text) {\n      if (!checkSlowMode()) return;\n\n      sendMessage({\n        text,\n        entities,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetsOrder: true,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, htmlRef, isForwarding, validateTextLength, clearDraft,\n    chatId, stopRecordingVoice, sendAttachments, checkSlowMode, sendMessage, forwardMessages, resetComposer,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') {\n      return;\n    }\n\n    callAttachBot({\n      chatId, url: botMenuButton.url, threadId,\n    });\n  }, [botMenuButton, callAttachBot, chatId, threadId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    closeSendAsMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, closeSendAsMenu, openSymbolMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else if (args.sendCompressed !== undefined || args.sendGrouped !== undefined) {\n      const { sendCompressed = false, sendGrouped = false } = args;\n      void handleSendAttachments(sendCompressed, sendGrouped, isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSendAttachments, handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      handleFileSelect(requestedDraftFiles);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji);\n  }, [insertCustomEmojiAndUpdateCursor, isChatWithSelf, isCurrentUserPremium, showCustomEmojiPremiumNotification]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const sendSilent = useCallback((additionalArgs?: ScheduledMessageArgs) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ ...additionalArgs, isSilent: true }, scheduledAt);\n      });\n    } else if (additionalArgs && ('sendCompressed' in additionalArgs || 'sendGrouped' in additionalArgs)) {\n      const { sendCompressed = false, sendGrouped = false } = additionalArgs;\n      void handleSendAttachments(sendCompressed, sendGrouped, true);\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, handleSendAttachments, requestCalendar, shouldSchedule]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!isMobile || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu, isMobile]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!isMobile || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu, isMobile]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({\n      id: chatId, threadId, type: 'scheduled', noForumTopicPanel: true,\n    });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && isMobile) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu, isMobile]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          }\n        } else {\n          startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, handleEditComplete, activeVoiceRecording, requestCalendar, areVoiceMessagesNotAllowed,\n    canSendVoiceByPrivacy, showNotification, lang, chat?.title, startRecordingVoice, pauseRecordingVoice,\n    handleMessageSchedule,\n  ]);\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilent = useCallback(() => {\n    sendSilent();\n  }, [sendSilent]);\n\n  const handleSendScheduledAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({ sendCompressed, sendGrouped }, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilentAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    sendSilent({ sendCompressed, sendGrouped });\n  }, [sendSilent]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const isBotMenuButtonCommands = botMenuButton && botMenuButton?.type === 'commands';\n  const shouldDisplayBotCommands = isChatWithBot && isBotMenuButtonCommands && botCommands !== false\n    && !activeVoiceRecording && !editingMessage;\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        isReady={isReady}\n        shouldSuggestCompression={shouldSuggestCompression}\n        onCaptionUpdate={onCaptionUpdate}\n        onSendSilent={handleSendSilentAttachments}\n        onSend={handleSendAttachments}\n        onSendScheduled={handleSendScheduledAttachments}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachments}\n        onAttachmentsUpdate={handleSetAttachments}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n        isSavedMessages={isChatWithSelf}\n        canSendGifs={canSendGifs}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage\n          onClear={handleEmbeddedClear}\n          shouldForceShowEditing={Boolean(shouldForceShowEditing && editingMessage)}\n        />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botMenuButton && botMenuButton.type === 'webApp' && !editingMessage\n            && (\n              <BotMenuButton\n                isOpen={!html && !activeVoiceRecording}\n                onClick={handleClickBotMenu}\n                text={botMenuButton.text}\n                isDisabled={Boolean(activeVoiceRecording)}\n              />\n            )}\n          {shouldDisplayBotCommands && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {isMobile ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={buildClassName('symbol-menu-button', isSymbolMenuOpen && 'activated')}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            threadId={threadId}\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && !attachments.length}\n            noFocusInterception={attachments.length > 0}\n            shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {Boolean(botKeyboardMessageId) && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && Boolean(currentRecordTime) && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            threadId={threadId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {Boolean(botKeyboardMessageId) && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n            onCustomEmojiSelect={insertCustomEmojiFromEmojiTooltip}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <SymbolMenu\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isSymbolMenuOpen || isSymbolMenuForced}\n            canSendGifs={canSendGifs}\n            canSendStickers={canSendStickers}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId, threadId);\n    const { language, shouldSuggestStickers, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId\n      && chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId) ? defaultSendAsId\n      : (chat?.adminRights?.anonymous ? chat?.id : undefined);\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !user.fullInfo?.noVoiceMessages) ?? true;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n\n    const tabState = selectTabState(global);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      replyingToId,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === tabState.forwardMessages.toChatId,\n      pollModal: tabState.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: tabState.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: tabState.inlineBots.byUsername,\n      isInlineBotLoading: tabState.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n      attachmentSettings: global.attachmentSettings,\n    };\n  },\n)(Composer));\n","import { useCallback, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiAttachment } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\n\nexport default function useAttachmentModal({\n  attachments,\n  fileSizeLimit,\n  setHtml,\n  setAttachments,\n}: {\n  attachments: ApiAttachment[];\n  fileSizeLimit: number;\n  setHtml: (html: string) => void;\n  setAttachments: (attachments: ApiAttachment[]) => void;\n}) {\n  const { openLimitReachedModal } = getActions();\n  const [shouldSuggestCompression, setShouldSuggestCompression] = useState<boolean | undefined>(undefined);\n\n  const handleClearAttachments = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, [setAttachments]);\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (!newAttachments.length) {\n        setAttachments(MEMO_EMPTY_ARRAY);\n        return;\n      }\n\n      if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n      }\n    }, [attachments, fileSizeLimit, openLimitReachedModal, setAttachments],\n  );\n\n  const handleAppendFiles = useCallback(async (files: File[], isSpoiler?: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => (\n        buildAttachment(file.name, file, { shouldSendAsSpoiler: isSpoiler || undefined })\n      ))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleFileSelect = useCallback(async (files: File[], suggestCompression?: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file))));\n    setShouldSuggestCompression(suggestCompression);\n  }, [handleSetAttachments]);\n\n  return {\n    shouldSuggestCompression,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate: setHtml,\n    handleClearAttachments,\n    handleSetAttachments,\n  };\n}\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n  replyingToId?: number,\n): [VoidFunction, VoidFunction, boolean] => {\n  const { editMessage, setEditingDraft } = getActions();\n  const [shouldForceShowEditing, setShouldForceShowEditing] = useState<boolean>();\n\n  useEffectWithPrevDeps(([prevEditedMessage, prevReplyingToId]) => {\n    if (!editedMessage) {\n      return;\n    }\n\n    if (replyingToId && prevReplyingToId !== replyingToId) {\n      setHtml('');\n      setShouldForceShowEditing(false);\n      return;\n    }\n\n    if (prevEditedMessage?.id === editedMessage.id && replyingToId === prevReplyingToId) {\n      return;\n    }\n\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n    setHtml(html);\n    setShouldForceShowEditing(true);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, replyingToId, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const edited = parseMessageInput(htmlRef.current!);\n      const update = edited.text.length ? edited : undefined;\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(htmlRef.current!);\n    const update = edited.text.length ? edited : undefined;\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel, shouldForceShowEditing];\n};\n\nexport default useEditing;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  GENERAL_TOPIC_ID,\n} from '../../config';\nimport { MASK_IMAGE_DISABLED } from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTheme,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat,\n  getMessageSendingRestrictionReason,\n  getForumComposerPlaceholder,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOnChange from '../../hooks/useOnChange';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? 450 + ANIMATION_END_DELAY : undefined;\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useOnChange(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, threadId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n              isMobile={isMobile}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {isMobile\n                  && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest)) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chats: { listIds }, lastSyncTime } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(chat && isChatGroup(chat) && !chat.fullInfo && lastSyncTime);\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !replyingToId && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        (threadId !== MAIN_THREAD_ID && !chat?.isForum)\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useOnChange(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch, selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, getCanManageTopic, isChatAdmin, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const toggleEditTopic = useCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  }, [chatId, openEditTopicPanel, threadId]);\n\n  const handleToggleManagement = useCallback(() => {\n    toggleManagement();\n  }, [toggleManagement]);\n\n  const handleToggleStatistics = useCallback(() => {\n    toggleStatistics();\n  }, [toggleStatistics]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  lastSyncTime?: number,\n  topicId?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  isFirstTab?: boolean,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType, prevIsFirstTab]) => {\n    if (isFirstTab === prevIsFirstTab) {\n      return;\n    }\n\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, isFirstTab, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n  selectListedIds,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport { pickTruthy } from '../../util/iteratees';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  messageIds?: number[];\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  messageIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel, topicId]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n\n  const chatMessages = useMemo(() => {\n    return messageIds && messagesById ? pickTruthy(messagesById, messageIds) : {};\n  }, [messagesById, messageIds]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages,\n    foundIds,\n    lastSyncTime,\n    topicId,\n  );\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange, isFirstTab);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !chatMessages) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !chatMessages[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !chatMessages[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n    const messageIds = selectListedIds(global, chatId, topicId || MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      messageIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './CreateTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default memo(CreateTopicAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './EditTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default memo(EditTopicAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectChat,\n  selectCurrentMessageList, selectTabState,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n    closeCreateTopicPanel, closeEditTopicPanel,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { Thread } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { createLocationHash } from '../../util/routing';\nimport { selectTabState } from '../../global/selectors';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default memo(AttachBotInstallModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\nimport { selectTabState } from '../../global/selectors';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useOnChange from '../../hooks/useOnChange';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  function generateConfetti(w: number, h: number, amount = defaultConfettiAmount) {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }\n\n  const updateCanvas = () => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestAnimationFrame(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  };\n\n  useOnChange(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestAnimationFrame(updateCanvas);\n      }\n    }\n    return () => {\n      if (hideTimeout) {\n        clearTimeout(hideTimeout);\n      }\n    };\n  }, [lastConfettiTime, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { deleteFolderDialogId } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !deleteFolderDialogId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(DraftRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(AttachBotRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { AnimationLevel, LangCode } from '../../types';\nimport type {\n  ApiAttachBot,\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/environment';\nimport {\n  selectChatMessage,\n  selectTabState,\n  selectCurrentMessageList,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport { fastRaf } from '../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport updatePageTitle from '../../util/updatePageTitle';\nimport updateIcon from '../../util/updateIcon';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: AnimationLevel;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUser?: ApiUser;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialogId?: number;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  lastSyncTime,\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  deleteFolderDialogId,\n  isMasterTab,\n}) => {\n  const {\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // If you open the chat in the mobile version, switch to the desktop version, close the chat and\n  // switch back to the mobile version, you get a blank screen\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isMiddleColumnOpen && !isLeftColumnOpen && !isDesktop) {\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachBots, loadContactList,\n    loadPremiumGifts, checkAppVersion, loadConfig, loadGenericEmojiEffects, loadDefaultTopicIcons, isMasterTab,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime && isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime, isMasterTab] as const);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [\n    lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds,\n    isMasterTab,\n  ]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (lastSyncTime && parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [lastSyncTime]);\n\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    if (!prevLastSyncTime && lastSyncTime) {\n      openChat({\n        id: parsedLocationHash.chatId,\n        threadId: parsedLocationHash.threadId,\n        type: parsedLocationHash.type,\n      });\n    }\n  }, [lastSyncTime] as const);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useOnChange(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useOnChange(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined) {\n      return;\n    }\n\n    if (animationLevel === 0) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isRightColumnOpen]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  }, [onTabFocusChange]);\n\n  const handleFocus = useCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [onTabFocusChange]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    closeStickerSetModal();\n  }, [closeStickerSetModal]);\n\n  const handleCustomEmojiSetsModalClose = useCallback(() => {\n    closeCustomEmojiSets();\n  }, [closeCustomEmojiSets]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className}>\n      <LeftColumn />\n      <MiddleColumn isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequestBot} type={botTrustRequest?.type} />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog deleteFolderDialogId={deleteFolderDialogId} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          animationLevel, language, wasTimeFormatSetManually,\n        },\n      },\n      lastSyncTime,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n\n    return {\n      lastSyncTime,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUser,\n      urlAuth,\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialogId: deleteFolderDialogModal,\n      isMasterTab,\n      requestedDraft,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 180000; // 3 minutes\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(\n    resetInvalidUnlockAttempts,\n    invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? TIMEOUT_RESET_INVALID_ATTEMPTS_MS\n      : undefined,\n  );\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [invalidAttemptsCount, lang, logInvalidUnlockAttempt, unlockScreen]);\n\n  useEffect(() => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [invalidAttemptsCount, lang]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { IS_MULTITAB_SUPPORTED } from '../util/environment';\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","tabId","getCurrentTabId","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","undefined","replaceLocalTextSearchResults","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","selectTabState","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","noForumTopicPanel","currentMessageList","tabState","premiumModal","promo","isOpen","updateTabState","replaceTabThreadParam","exitMessageSelectMode","isStatisticsShown","contentToBeScheduled","forwardMessages","toChatId","selectChat","isForum","openForumPanel","forumPanelChatId","closeForumPanel","updateCurrentMessageList","window","open","createMessageHashUrl","isChatInfoShown","setGlobal","openChat","text","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","folderId","deleteFolderDialogModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectChatScheduledMessages","selectChatMessages","messages","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","result","reduce","acc","sender","selectSender","push","getSenderTitle","emoji","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","join","getMessageSummaryDescription","renderMessageSummaryHtml","resultText","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","replaceThreadParam","messageId","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","lastMessage","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","isPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","getIsMobile","pollResults","voters","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","RELEASE_DATETIME","Date","now","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","content","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","chat","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","isClosing","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickerSearch","resultIds","gifSearch","offset","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","updateIcon","asUnread","document","querySelectorAll","link","href","replace","updatePageTitle","nextTitle","title","notificationInterval","force","leftColumnWidth","management","isActive","screen","nextScreen","getIsTablet","isLeftColumnShown","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","sticker","recent","stickers","hash","newStickers","s","documentId","recentCustomEmojis","order","isCustomEmoji","added","setIds","customEmojis","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","selectIsTrustedBot","botTrustRequest","onConfirm","action","openedGame","top","left","width","height","animationLevel","settings","byKey","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","topicId","editTopicPanel","APP_VERSION_REGEX","fetch","then","response","trim","test","isUpdateAvailable","catch","DEBUG","console","error","multitabNextAction","reestablishMasterToSelf","isBlurred","token","updateIsOnline","blurredTabTokens","t","getAllMultitabTokens","clearInterval","setInterval","notificationIndex","allNotificationsCount","getAllNotificationsCount","initialUnreadNotifications","addCallback","index","INACTIVE_MARKER","PAGE_TITLE","newUnread","status","payment","clearPayment","closeInvoice","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","isHidden","noLockOnUnload","onBeforeUnload","passcode","hasPasscode","byTabId","clearStoredSession","async","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","currentUserId","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","values","session","parse","storeSession","previousGlobal","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","isScreenLocked","invalidAttemptsCount","isMasterTab","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","offsetId","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","callApi","selectThreadOriginChat","users","repliesThreadInfos","localMessages","isDeleted","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","replyingToTopId","delete","getAttachmentType","shouldSendAsFile","mimeType","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","isRestricted","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","updateChatMessage","replyMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","omit","scheduledAt","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","arr","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","isFirst","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","draft","user","selectUser","isDeletedUser","replyToMsgId","isLocal","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","topId","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","translate","isUserBot","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","topics","topic","updateThreadInfo","lastReadInboxMessageId","newTopicUnreadCount","updateTopic","webPagePreview","options","poll","option","shouldResetVoters","offsets","nextOffset","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","selectThreadIdFromMessage","scheduledInThread","entries","scheduledIds","selectScheduledMessage","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","customEmoji","seenByUserIds","sendAsId","sendAsChat","fullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","URL","autologinDomains","hostname","searchParams","autologinToken","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","showDialog","getUserFullName","closeMediaViewer","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchWords","updateStickerSearch","config","gifSearchUsername","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","searchMessagesGlobal","offsetRate","maxDate","minDate","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","searchSharedMedia","SHARED_MEDIA_SLICE","topMessageId","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","releaseStatusTimeout","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","timestampPlusDay","foundIds","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","timestamp","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","isChatBasicGroup","migrateChat","invite","editingInvite","update","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","currentChatId","currentThreadId","activeThreadId","threadInfo","activeCurrentChatId","originChannelId","draftsByChatId","editingDraft","selectEditingDraft","currentChat","lastReadInboxId","newCurrentChatId","currentChatMessages","topicLastMessages","otherTabId","tabThreads","otherChatId","otherThreadId","updateChats","updateUsers","updateThread","loadTopics","loadTopicById","shouldCloseChatOnError","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","connectionState","authState","getActions","sync","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","newUser","hasChangedAvatarHash","avatarHash","hasChangedProfilePhoto","profilePhoto","hasChangedFallbackPhoto","fallbackPhoto","hasChangedPersonalPhoto","personalPhoto","photos","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","isPrivate","isUserId","userOrChat","userSearch","updateUserSearchFetchingStatus","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","isWriteAllowed","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","openUrl","openGame","alert","isError","buildQueryString","k","getPaymentForm","inputInvoice","form","invoice","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","button","openPollModal","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","slug","trustedBotIds","newTrustedBotIds","add","Array","callbackPayload","requestedAttachBotInstall","botUser","actionPayload","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","isPaymentModalOpen","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","step","isClosed","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","localEffect","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","selectLocalAnimatedEmojiEffectByName","timestamps","reaction","selectDefaultReaction","isMessageLocal","toggleReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","userReactions","getUserReactions","hasReaction","some","userReaction","isSameReaction","newUserReactions","selectMaxUserReactions","reactions","ANIMATION_LEVEL_MAX","newActiveReactions","activeReactions","currentReactions","isReactionChosen","chosenOrder","existingIndex","r","recentReactions","addMessageReaction","active","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","isGroup","stats","recentTopMessages","msgId","updateStatistics","views","forwards","dcId","statisticsDcId","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","prevIsForum","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","ANIMATION_DELAY","updateReactions","areDeepEqual","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","messagesCount","firstUnreadId","candidateGlobal","updateChatLastMessage","currentLastMessage","selectTopicFromMessage","findLastMessage","deleteMessages","newLastMessage","deleteTopic","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","repliesThreadInfo","isTopicReply","selectIsMessageInCurrentMessageList","getMessageText","localEmoji","selectLocalAnimatedEmoji","selectLocalAnimatedEmojiEffect","selectScheduledIds","threadScheduledIds","deleteChatScheduledMessages","thread","markMessageListRead","pickTruthy","updatePerThread","currentUpdatedInThread","pinnedIds","selectPinnedIds","newPinnedIds","newThreadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","isChosen","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","media","preview","extendedMedia","isPending","transcriptions","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","loadFullUser","emojiStatus","statusUpdate","targetUser","botInfo","menuButton","addBlockedContact","loadFavoriteStickers","oldOrder","newOrder","reorderStickerSets","loadStickerSets","loadSavedGifs","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSoundsForSafari","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isMinimized","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","ANIMATION_LEVEL_OPTIONS","withGlobal","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","shouldHideSearch","contactsFilter","onSearchQuery","isClosingSearch","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","isMobile","useAppLayout","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","total","isChatArchived","handleLockScreenHotkey","useCallback","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ripple","ariaLabel","buildClassName","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","newTheme","shouldUseSystemTheme","switchTheme","handleAnimationLevelChange","newLevel","_","classList","toggle","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","localStorage","setItem","clearWebsync","handleSwitchToLegacy","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","menuItems","MenuItem","icon","Switcher","label","checked","noAnimation","getPromptInstall","DropdownMenu","trigger","footer","APP_NAME","positionX","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","shouldSkipHistoryAnimations","activeChatFolder","isForumPanelOpen","selectIsForumPanelOpen","maxFolders","foldersDispatch","onScreenSelect","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","transitionRef","useRef","allChatsFolder","ALL_FOLDER_ID","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","forceOnHeavyAnimation","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","shouldRenderFolders","TabList","tabs","activeTab","onSwitchTab","areFolders","ref","renderCount","LeftSearch","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderForumPanel","handleForumPanelAnimationEnd","useForumPanelRender","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","reload","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","ForumPanel","onCloseAnimationEnd","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","nextSettingsScreen","isFirstChatFolderActive","isChatOpen","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleTopicSearch","handleHotkeySearch","handleHotkeySavedMessages","handleHotkeySettings","IS_MAC_OS","useOnChange","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","useFlag","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","style","setProperty","remove","useLayoutEffect","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","drawRect","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","isSpoiler","getMessageIsSpoiler","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","srcUrl","src","alt","MediaSpoiler","isVisible","renderPictogram","renderText","MessageSummary","noEmoji","RippleEffect","shouldStopPropagation","LUMA_THRESHOLD","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","averageColor","getAverageColor","fillColor","getColorLuma","res","canvas","createElement","ctx2D","getContext","fillStyle","fillRect","ctx","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","globalCompositeOperation","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","fileName","artist","performer","album","getChatTitle","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onContextMenu","volumeIcon","renderAudio","subtitle","renderVoice","disabled","RangeSlider","bold","forceOpen","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","confirmIsDestructive","Checkbox","onCheck","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatChannel","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","selectIsChatWithSelf","currentTransitionKey","hasButtonInHeader","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","usePrevious","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","withVideoAvatar","emojiStatusSize","noRtl","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","getMessageKey","HeaderActions","canExpandActions","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","asForwarded","noAvatars","isOwn","isOwnMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","isWebPageVideo","getMessageWebPageVideo","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","fontFamily","calculateAuthorWidth","getComputedStyle","documentElement","getPropertyValue","font","whiteSpace","opacity","appendChild","textContent","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","target","contains","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","getBoundingClientRect","isVisibleX","isVisibleY","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","ContextMenuContainer","openMediaViewer","uploadProfilePhoto","cropModalBlob","setCropModalBlob","isVideoModalOpen","openVideoModal","closeVideoModal","suggestedPhotoUrl","showAvatarNotification","actionText","handleSetSuggestedAvatar","handleCloseCropModal","handleSetVideo","File","videoTs","videoSizes","videoStartTs","role","MediaViewerOrigin","Avatar","showVideoOverwrite","loopIndefinitely","withVideo","CropModal","textParts","usersById","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","premiumGiftSticker","isEmbedded","appearanceOrder","isLastInList","isInsideTopic","memoFirstUnreadIdRef","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","requestConfetti","useOnIntersect","noAppearanceAnimation","markShown","isSuggestedAvatar","useIsIntersecting","shouldShowConfettiRef","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","AnimatedIconFromSticker","play","noLoop","nonInteractive","anchor","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","outgoingStatus","signature","withReactionOffset","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","observeIntersection","shouldLoop","shouldPlayEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","openModal","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","withSharedAnimation","cacheBuster","AnimatedSticker","tgsUrl","isLowPriority","onEnded","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","performance","interactionMessageId","withEffects","localSticker","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","forceLoadPreview","AnimatedIconWithPreview","LOCAL_TGS_URLS","quality","forcePreview","LIKE_STICKER_ID","customEmojiId","getCustomEmojiSize","CustomEmoji","isBig","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","crossOrigin","getImageData","getAppendixColorFromImage","useBlurredMediaThumbRef","useCanvasBlur","getMessageMediaThumbDataUri","IS_CANVAS_FILTER_SUPPORTED","canAutoLoad","uploadProgress","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","fullMediaData","withThumb","noThumb","thumbRef","thumbClassNames","useMediaTransition","isSpoilerShown","hideSpoiler","downloadProgress","getMessageMediaFormat","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","MESSAGE_CONTENT_SELECTOR","CUSTOM_APPENDIX_ATTRIBUTE","contentEl","appendixBg","dimensionsStyle","ProgressSpinner","withAnimation","canAutoPlay","videoRef","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","isPlayerReady","markPlayerReady","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","isInline","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","cancelMessageMediaDownload","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","isRegistered","formatPhoneNumberWithCode","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","getServerTimeOffset","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","siteName","displayUrl","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","SafeLink","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","Skeleton","forceAspectRatio","loadExtendedMedia","refreshExtendedMedia","useInterval","dataUri","VENUE_COLORS","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","prevShouldRenderText","long","useTimeout","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","playerRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","shouldPlay","stopPlaying","fastRaf","capturePlaying","paused","stopCurrentAudio","renderIcon","recentReplierIds","recentRepliers","hasUnread","commentsText","AnimatedCounter","stickerHash","getStickerPreviewHash","previewMediaData","paths","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","path","CENTER_ICON_SIZE","EFFECT_SIZE","genericEffects","stopActiveReaction","centerIconId","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","onLoad","withRecentReactors","recentReactors","recentReaction","isOutside","metaChildren","noRecentReactors","getReactionUniqueKey","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","APPENDIX_OWN","APPENDIX_NOT_OWN","QUICK_REACTION_SIZE","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","isTranscribing","transcribedText","observeIntersectionForBottom","noComments","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","openAudioPlayer","sendPollVote","focusMessageInComments","replyToTopMessageId","channelPostId","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","clientHeight","isAnimatingScroll","resizeDiff","offsetHeight","scrollHeight","scrollTop","useResizeObserver","bottomMarker","isElementInViewport","calculatedWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","postAuthorTitle","metaSafeAuthorWidth","renderReactionsAndMeta","meta","forwardAuthor","chatUsername","c","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","fakeType","FakeIcon","renderSenderName","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","DotAnimation","MessageText","withTranslucentThumbs","renderContent","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","mentionIds","reactionIds","dataset","useBackgroundMode","margin","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","isChatLoaded","isChannelChat","isGroupChat","isCreator","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","withDefaultBg","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getDocumentMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","useStickyDates","handleScroll","parentElement","contentRect","windowHeight","normalHeight","String","preservedItemElements","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","patchChromiumScroll","resetScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","isEmptyTopic","onScroll","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","FILE_EXT_REGEX","buildAttachment","filename","quick","preloadImage","shouldShrink","GIF_MIME_TYPE","compressedBlobUrl","resizedUrl","videoWidth","videoHeight","preloadVideo","createPosterForVideo","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","uniqueId","prepareAttachmentsToSend","shouldSendCompressed","attach","shouldSendAsSpoiler","resetInput","applyIosAutoCapitalizationFix","inputEl","STARTS_ENDS_ON_EMOJI_IMG_REGEX","RegExp","EMOJI_IMG_REGEX","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","STYLE_TAG_REGEX","useDebouncedMemo","resolverFn","ms","dependencies","setValue","isFrozen","updateWhenUnfrozen","handleUnfreeze","useHeavyAnimationCheck","noop","isHeavyAnimating","useHeavyAnimationFreeze","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","runThrottled","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","COLOR_REPLACE_PATTERN","iconSvg","mediaDataWithReplacedColors","doc","DOMParser","parseFromString","stroke","strokeWidth","outerHTML","IS_COMPACT_MENU","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","menuPosition","setMenuPosition","rect","right","bottom","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","Portal","destructive","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","shouldSuggestCompression","validatedFiles","validateFiles","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","SymbolMenu","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","keyboardButtons","noCompact","shouldForceShowEditing","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useContextMenuPosition","leftIcon","strippedMessage","strippedText","stripCustomEmoji","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","messageText","loadWebPagePreview","toggleMessageWebPage","linkEntity","entity","ApiMessageEntityTypes","textMatch","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","VOICE_RECORDING_FILENAME","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","adminRights","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","selectEditingScheduledDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","dropAreaState","onDropHide","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","loadScheduledHistory","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","appendixRef","html","setInnerHtml","htmlRef","useStateRef","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","setHtml","newHtml","processMessageInputForCustomEmoji","customEmojiNotificationNumber","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","setAttachments","handleAppendFiles","onCaptionUpdate","handleClearAttachments","handleSetAttachments","setShouldSuggestCompression","newValue","newAttachments","suggestCompression","useAttachmentModal","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetAllInlineBots","markIsOpen","unmarkIsOpen","innerText","getPlainText","parseBotQuery","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","canSendStickers","canSendGifs","canAttachEmbedLinks","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","cleanHtml","loadStickersForEmoji","clearStickersForEmoji","isSingleEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","insertCustomEmojiFromEmojiTooltip","useEmojiTooltip","insertHtmlAndUpdateCursor","EDITABLE_INPUT_ID","selection","getSelection","messageInput","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertTextAndUpdateCursor","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","removeSymbol","execCommand","tempInput","contentEditable","lastChild","textLength","range","createRange","setStart","setEnd","removeAllRanges","addRange","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","handleEditComplete","handleEditCancel","editedMessage","editMessage","setEditingDraft","setShouldForceShowEditing","prevEditedMessage","prevReplyingToId","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","useEditing","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isCustomSendMenuOpen","saveDraft","prevDraft","updateDraft","draftChatId","draftThreadId","currentHtml","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","customEmojiIds","prevHtml","useDraft","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","pastedFormattedText","fragment","textContents","getElementsByTagName","node","HTMLElement","tagName","replaceWith","createTextNode","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","trimEnd","preparePastedHtml","containsCustomEmoji","items","getFilesFromDataTransferItems","textToPaste","useClipboardPaste","handleEmbeddedClear","validateTextLength","isAttachmentModal","maxLength","extraLength","textParams","checkSlowMode","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","sendAttachments","attachmentsToSend","sendCompressed","sendGrouped","shouldUpdateStickerSetsOrder","handleSendAttachments","handleSend","currentAttachments","record","handleClickBotMenu","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleMessageSchedule","args","restArgs","handleCustomEmojiSelect","isFree","isScheduleRequested","handleGifSelect","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","sendSilent","additionalArgs","handleSearchOpen","handleSymbolMenuOpen","handleSendAsMenuOpen","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","handleSendScheduled","handleSendSilent","handleSendScheduledAttachments","handleSendSilentAttachments","onSend","shouldDisplayBotCommands","DropAreaState","withQuick","caption","onSendSilent","onSendScheduled","onFileAppend","onAttachmentsUpdate","shouldBeAnonymous","selectedSendAsId","onInsertUserName","filteredUsers","onSelectResult","isSavedMessages","withUsername","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onCustomEmojiSelect","onStickerSelect","onEmojiSelect","onGifSelect","onRemoveSymbol","onSearchOpen","allowDisabledClick","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","isImage","kind","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","shouldJoinToSend","isJoinToSend","shouldLoadFullChat","shouldBlockSendInForum","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","unpinAllMessages","loadUser","joinChannel","restartBot","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","isEditingInvite","canViewStatistics","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","ManagementScreens","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","CreateTopic","EditTopic","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","renderingActiveTab","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","isFirstTab","prevTabType","prevIsFirstTab","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","resetCacheBuster","useCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","adminMember","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewer","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createLocationHash","messageList","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","CONFETTI_COLORS","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","pos","velocity","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","beginPath","ellipse","fill","hideTimeout","prevConfettiTime","leftSide","randomX","randomColor","generateConfetti","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","deleteFolderDialogId","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","DEBUG_isLogged","wasTimeFormatSetManually","currentUser","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","isPremiumModalOpen","limitReached","isReceiptModalOpen","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","isDesktop","langCode","prevLastSyncTime","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","usePreventPinchZoomGesture","stickerSetShortName","passcodeSettings","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}