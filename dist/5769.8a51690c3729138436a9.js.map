{"version":3,"file":"5769.8a51690c3729138436a9.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/util/permanentWebVersion.ts","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/hooks/useLayoutEffectWithPrevDeps.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessageSuggestedAvatar.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/CustomReactionAnimation.module.scss?e66e","webpack://telegram-t/./src/components/middle/message/CustomReactionAnimation.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/lib/cleanDocsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useAttachmentModal.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n\n  window.open(createMessageHashUrl(chatId, 'thread', MAIN_THREAD_ID), '_blank');\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('openDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\nimport type {\n  TabState, GlobalState, ActionReturnType,\n} from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  replaceTabThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage, updateFocusedMessageReached,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectChatScheduledMessages,\n  selectTabState,\n} from '../../selectors';\nimport { compact, findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('setReachedFocusedMessage', (global, actions, payload): ActionReturnType => {\n  const { hasReached = false, tabId = getCurrentTabId() } = payload;\n\n  return updateFocusedMessageReached(global, hasReached, tabId);\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      threadId,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  global = replaceTabThreadParam(global, chatId, threadId, 'outlyingIds', undefined, tabId);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const byChatId = tabState.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  const byChatId = selectTabState(global, tabId).activeDownloads.byChatId;\n  const newByChatId: TabState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return updateTabState(global, {\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: [...(tabState.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (selectTabState(global, tabId).shouldShowContextMenuHint) {\n    actions.disableContextMenuHint({ tabId });\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (!selectTabState(global, tabId).shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    shouldShowContextMenuHint: false,\n  }, tabId);\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  const resultText = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyHtmlToClipboard(result.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport default function updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  APP_VERSION, DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState, selectIsTrustedBot,\n} from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { unique } from '../../../util/iteratees';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport updateIcon from '../../../util/updateIcon';\nimport updatePageTitle from '../../../util/updatePageTitle';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { addCallback } from '../../../lib/teact/teactn';\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  const { animationLevel } = global.settings.byKey;\n  if (animationLevel === 0) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: NodeJS.Timeout | undefined;\n\nconst NOTIFICATION_INTERVAL = 1000;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred } = payload;\n  const token = getCurrentTabId();\n\n  if (!isBlurred) {\n    actions.updateIsOnline(true);\n  }\n\n  const blurredTabTokens = unique(isBlurred\n    ? [...global.blurredTabTokens, token]\n    : global.blurredTabTokens.filter((t) => t !== token));\n\n  if (blurredTabTokens.length === getAllMultitabTokens().length) {\n    actions.updateIsOnline(false);\n  }\n\n  const isNewlyBlurred = isBlurred && blurredTabTokens.length === 1;\n\n  if (isNewlyBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = setInterval(() => {\n      global = getGlobal();\n      global = {\n        ...global,\n        notificationIndex: (global.notificationIndex || 0) + 1,\n        allNotificationsCount: getAllNotificationsCount(),\n      };\n      setGlobal(global);\n    }, NOTIFICATION_INTERVAL);\n  }\n\n  if (!blurredTabTokens.length && notificationInterval) {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n    global = {\n      ...global,\n      notificationIndex: undefined,\n    };\n  }\n\n  return {\n    ...global,\n    blurredTabTokens,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddCallback((global: GlobalState) => {\n  if (global.notificationIndex === undefined || global.allNotificationsCount === undefined) return;\n\n  const index = global.notificationIndex;\n  const allNotificationsCount = global.allNotificationsCount;\n\n  if (document.title.includes(INACTIVE_MARKER) || !global.initialUnreadNotifications) {\n    updateIcon(false);\n    updatePageTitle(PAGE_TITLE);\n    return;\n  }\n\n  if (index % 2 === 0) {\n    const newUnread = allNotificationsCount - global.initialUnreadNotifications;\n    if (newUnread > 0) {\n      updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n    } else {\n      updatePageTitle(PAGE_TITLE);\n      updateIcon(false);\n    }\n  } else {\n    updatePageTitle(PAGE_TITLE);\n    updateIcon(false);\n  }\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: playbackRate || tabState.mediaViewer.playbackRate || global.mediaViewer.lastPlaybackRate,\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, setupPasscode,\n} from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport type { ActionReturnType } from '../../types';\nimport { signalPasscodeHash } from '../../../util/establishMultitabRole';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  signalPasscodeHash();\n  global = getGlobal();\n  global = updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  });\n  setGlobal(global);\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: (global.passcode?.invalidAttemptsCount ?? 0) + 1,\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n  updateTopic,\n  updateThreadInfo,\n  replaceTabThreadParam,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectIsCurrentUserPremium,\n  selectForwardsContainVoiceMessages,\n  selectTabState,\n  selectThreadIdFromMessage,\n} from '../../selectors';\nimport {\n  debounce, onTickEnd, rafPromise,\n} from '../../../util/schedulers';\nimport {\n  getMessageOriginalId, getUserFullName, isDeletedUser, isServiceNotificationMessage, isUserBot,\n} from '../../helpers';\nimport { translate } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId, tabId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const replyingToTopId = chat.isForum ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    replyingToTopId,\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    }, tabId);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        }, tabId);\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          }, tabId);\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      }, tabId);\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      }, tabId);\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const { text, entities, tabId = getCurrentTabId() } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (!result) {\n    draft.isLocal = true;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId, tabId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { message: text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const { isSilent, scheduledAt, tabId = getCurrentTabId() } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      toThreadId,\n      messages: realMessages,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyingToTopId: toThreadId,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      }, tabId);\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  global = getGlobal();\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(global, chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids, tabId)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId, tabId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceTabThreadParam(global, chatId, threadId, 'outlyingIds', undefined, tabId);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n  groupedId?: string;\n},\n...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  global = getGlobal();\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && threadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, threadId, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByUserIds: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    if (!user.fullInfo) {\n      const { accessHash } = user;\n      user = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n    }\n\n    if (user?.fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets, updateStickerSearch,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectTabState, selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { translate } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiChat, ApiTopic, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateTopics,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery, selectTabState } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        localChats, localUsers, globalChats, globalUsers,\n      } = result;\n\n      if (localChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n      }\n\n      if (localUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: localChats.map(({ id }) => id),\n          userIds: localUsers.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateListedIds,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  global = updateListedIds(global, chat.id, threadId, newFoundIds);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal, setGlobal, getActions,\n} from '../../index';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type {\n  ActionReturnType, GlobalState, Thread,\n} from '../../types';\n\nimport {\n  DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  updateUsers,\n  updateChats,\n  updateThreadInfos,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n  updateThread,\n} from '../../reducers';\nimport {\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectEditingId,\n  selectEditingDraft,\n  selectChatMessages,\n  selectTabState,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport { updateTabState } from '../../reducers/tabs';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    // TODO Fix comments chat id, or refetch chat thread here\n    const activeCurrentChatId = threadInfo?.originChannelId || currentChatId;\n    // Memoize drafts\n    const draftChatIds = Object.keys(global.messages.byChatId);\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    const draftsByChatId = draftChatIds.reduce<Record<string, Partial<Thread>>>((acc, chatId) => {\n      acc[chatId] = {};\n      acc[chatId].draft = selectDraft(global, chatId, activeThreadId);\n      acc[chatId].editingId = selectEditingId(global, chatId, activeThreadId);\n      acc[chatId].editingDraft = selectEditingDraft(global, chatId, activeThreadId);\n\n      return acc;\n    }, {});\n\n    const currentChat = activeCurrentChatId ? global.chats.byId[activeCurrentChatId] : undefined;\n    if (activeCurrentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, activeCurrentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages, topicLastMessages);\n        const byId = buildCollectionByKey(allMessages, 'id');\n        const listedIds = Object.keys(byId).map(Number);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, activeCurrentChatId, byId);\n        global = updateListedIds(global, activeCurrentChatId, activeThreadId, listedIds);\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === activeCurrentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, activeCurrentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        global = updateThreadInfos(global, activeCurrentChatId, result.repliesThreadInfos);\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    // Restore drafts\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.keys(draftsByChatId).forEach((chatId) => {\n      global = updateThread(global, chatId, activeThreadId, draftsByChatId[chatId]);\n    });\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: activeCurrentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: activeCurrentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n\n    setGlobal(global);\n  }\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) return;\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { migrateChat } from './chats';\nimport { getUserFirstOrLastName, isChatBasicGroup } from '../../helpers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/langProvider';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(global, actions, chat, tabId);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id, tabId });\n  }\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { translate } from '../../../util/langProvider';\nimport { addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) return;\n\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = user.fullInfo?.profilePhoto?.id !== newUser.fullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = user.fullInfo?.fallbackPhoto?.id !== newUser.fullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = user.fullInfo?.personalPhoto?.id !== newUser.fullInfo?.personalPhoto?.id;\n  if ((hasChangedAvatarHash || hasChangedProfilePhoto || hasChangedFallbackPhoto || hasChangedPersonalPhoto)\n    && user.photos?.length) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  if (user && !user?.fullInfo) {\n    const { id, accessHash } = user;\n    user = await callApi('fetchFullUser', { id, accessHash });\n    if (!user) return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n  const fallbackPhoto = user?.fullInfo?.fallbackPhoto;\n  const personalPhoto = user?.fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n","import type { GlobalState, TabArgs } from '../types';\nimport type { InlineBotSettings } from '../../types';\nimport { updateTabState } from './tabs';\nimport { selectTabState } from '../selectors';\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import { IS_ANDROID, IS_IOS } from './environment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser, selectThreadTopMessageId,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, threadId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedContact(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, MAIN_THREAD_ID, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, message.viaBotId || message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n  const replyingTo = selectReplyingToId(global, chatId, threadId);\n  let replyingToTopId: number | undefined;\n\n  if (replyingTo && threadId !== MAIN_THREAD_ID) {\n    replyingToTopId = selectThreadTopMessageId(global, chatId, threadId)!;\n  }\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  let bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n  if (!bot.fullInfo) await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n  global = getGlobal();\n  bot = selectUser(global, botId)!;\n  if (bot.fullInfo?.isBlocked) await callApi('unblockContact', bot.id, bot.accessHash);\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action](callbackPayload);\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  await loadAttachBots(global, hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(global, bot, isEnabled, isWriteAllowed);\n});\n\nasync function toggleAttachBot<T extends GlobalState>(\n  global: T, bot: ApiUser, isEnabled: boolean, isWriteAllowed?: boolean,\n) {\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n  global = getGlobal();\n  await loadAttachBots(global);\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, bot, url, startParam, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isFromBotMenu = !bot;\n  if (!isFromBotMenu && !global.attachMenu.bots[bot.id]) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload,\n        },\n      },\n    }, tabId);\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId, threadId, tabId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId: isFromBotMenu ? chatId : bot.id,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n    tabId,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  await toggleAttachBot(global, botUser, true, isWriteAllowed);\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, threadId = MAIN_THREAD_ID, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyingToTopId: threadId,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice, selectTabState,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\nimport { selectTabState } from '../selectors';\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ userId }) => userId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      userId: currentUserId!,\n      reaction,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat, selectTabState,\n  selectDefaultReaction,\n  selectLocalAnimatedEmojiEffectByName,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectCurrentMessageList,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isSameReaction, getUserReactions, isMessageLocal } from '../../helpers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, localEffect, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji || localEffect,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions, localEffect,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || (!emoji && !localEffect) || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji || selectLocalAnimatedEmojiEffectByName(localEffect!)!,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', (global, actions, payload): ActionReturnType => {\n  const { chatId, reaction, tabId = getCurrentTabId() } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n\n  const reactions = newUserReactions.slice(-limit);\n\n  void callApi('sendReaction', { chat, messageId, reactions });\n\n  const { animationLevel } = global.settings.byKey;\n\n  const tabState = selectTabState(global, tabId);\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    const newActiveReactions = hasReaction ? omit(tabState.activeReactions, [messageId]) : {\n      ...tabState.activeReactions,\n      [messageId]: [\n        ...(tabState.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = updateTabState(global, {\n      activeReactions: newActiveReactions,\n    }, tabId);\n  }\n\n  return addMessageReaction(global, message, reactions);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  if (currentChatId === id) return global;\n\n  return updateTabState(global, {\n    activeReactions: {},\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { messageId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = tabState.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [messageId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  updateStatistics, updateMessageStatistics, updateStatisticsGraph, addUsers,\n} from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat, updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectThreadParam,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport type { ActionReturnType } from '../../types';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum } = selectChat(global, update.id) || {};\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        // The property `isForum` was changed in another client\n        if (currentChatId === update.id && 'isForum' in update.chat && prevIsForum !== update.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction, ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  deleteTopic,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsServiceChatReady,\n  selectLocalAnimatedEmojiEffect,\n  selectLocalAnimatedEmoji,\n  selectThreadIdFromMessage,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action)) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const localEmoji = selectLocalAnimatedEmoji(global, update.emoji);\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: tabState.activeEmojiInteractions?.length || 0,\n            animatedEffect: localEmoji ? selectLocalAnimatedEmojiEffect(localEmoji) : update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId: getCurrentTabId() });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: (threadInfo.messagesCount || 0) + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID, tabId);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUser } from '../../selectors';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium && !selectIsCurrentUserPremium(global)) {\n          actions.openPremiumModal({ isSuccess: true, tabId });\n        }\n      });\n\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(global, update.id);\n      } else {\n        return removeBlockedContact(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder':\n      actions.reorderStickerSets({ order: update.order, isCustomEmoji: update.isCustomEmoji });\n      break;\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.setReplyingToId({ messageId: undefined, tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport {\n  addNotifyException, updateChat, updateTopic, updateNotifySettings,\n} from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSoundsForSafari } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        void initializeSoundsForSafari();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/environment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage, selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { ApiChat } from '../../../api/types';\nimport type { TabState, GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME, APP_VERSION,\n  BETA_CHANGELOG_URL,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport { IS_PWA } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport { selectCurrentMessageList, selectTabState, selectTheme } from '../../../global/selectors';\nimport { isChatArchived } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing'> & Pick<TabState, 'canInstall'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  onSearchQuery,\n  isClosingSearch,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canInstall,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n    openUrl,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  }, [hasPasscode, lockScreen, requestNextSettingsScreen]);\n\n  useHotkeys({\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  });\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleSwitchToLegacy = useCallback(() => {\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleBugReportClick = useCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  }, [openUrl]);\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      <MenuItem\n        icon=\"archive\"\n        onClick={onSelectArchived}\n      >\n        <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n        {archivedUnreadChatsCount > 0 && (\n          <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n        )}\n      </MenuItem>\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Switcher\n          id=\"animations\"\n          label=\"Toggle Animations\"\n          checked={animationLevel > 0}\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <>\n          <MenuItem\n            icon=\"char-K\"\n            href={WEBK_VERSION_URL}\n            onClick={handleSwitchToWebK}\n          >\n            Switch to K Version\n          </MenuItem>\n          <MenuItem\n            icon=\"char-W\"\n            href={LEGACY_VERSION_URL}\n            onClick={handleSwitchToLegacy}\n          >\n            Switch to Old Version\n          </MenuItem>\n        </>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  ), [\n    animationLevel, archivedUnreadChatsCount, canInstall, handleAnimationLevelChange, handleBugReportClick,\n    handleChangelogClick, handleDarkModeToggle, handleOpenTipsChat, handleSelectSaved, handleSwitchToLegacy,\n    handleSwitchToWebK, lang, onSelectArchived, onSelectContacts, onSelectSettings, theme, withOtherVersions,\n  ]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          {menuItems}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className=\"passcode-lock\"\n          >\n            <i className=\"icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const { currentUserId, connectionState, isSyncing } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(tabState.canInstall),\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectTabState, selectIsForumPanelOpen } from '../../../global/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  shouldHideFolderTabs?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  isForumPanelOpen?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onScreenSelect,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  shouldHideFolderTabs,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && !orderedFolderIds) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders, orderedFolderIds]);\n\n  const allChatsFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n    };\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map(({ id, title }, i) => {\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n\n      return ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n      });\n    });\n  }, [displayedFolders, folderCountersById, maxFolders]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        lastSyncTime={lastSyncTime}\n        foldersDispatch={foldersDispatch}\n        onScreenSelect={onScreenSelect}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n      )}\n    >\n      {shouldRenderFolders ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} areFolders />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n      },\n      currentUserId,\n      lastSyncTime,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      isForumPanelOpen: selectIsForumPanelOpen(global),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\nimport ForumPanel from './ForumPanel';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const { shouldRenderForumPanel, handleForumPanelAnimationEnd } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && content === LeftColumnContent.ChatList;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleUpdateClick = useCallback(() => {\n    window.location.reload();\n  }, []);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onScreenSelect={onScreenSelect}\n                  foldersDispatch={foldersDispatch}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelVisible}\n          onTopicSearch={onTopicSearch}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectTabState, selectCurrentChat, selectIsForumPanelOpen } from '../../global/selectors';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  isChatOpen,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, isFirstChatFolderActive, setGlobalSearchClosing, resetChatCreation, setGlobalSearchQuery,\n    setGlobalSearchDate, setGlobalSearchChatId, settingsScreen, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  const handleTopicSearch = useCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  }, [forumPanelChatId, setGlobalSearchChatId, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || (isFirstChatFolderActive && !isChatOpen && !isForumPanelOpen)\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    'Mod+0': handleHotkeySavedMessages,\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n  }, [nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onTopicSearch={handleTopicSearch}\n                  isForumPanelOpen={isForumPanelOpen}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  isClosingSearch={isClosingSearch}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                  isUpdateAvailable={isUpdateAvailable}\n                  isForumPanelOpen={isForumPanelOpen}\n                  onTopicSearch={handleTopicSearch}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n    } = tabState;\n    const {\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isUpdateAvailable,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      isChatOpen,\n      isUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport {\n  useState, useEffect, useLayoutEffect, useCallback,\n} from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  const setElementStyle = useCallback((width?: number) => {\n    if (!elementRef.current) {\n      return;\n    }\n\n    const widthPx = width ? `${width}px` : '';\n    elementRef.current.style.width = widthPx;\n    if (cssPropertyName) {\n      elementRef.current.style.setProperty(cssPropertyName, widthPx);\n    }\n  }, [cssPropertyName, elementRef]);\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\nimport MediaSpoiler from '../common/MediaSpoiler';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName('HeaderPinnedMessage', noHoverColor && 'no-hover')}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isSpoiler)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle ? renderText(customTitle) : `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">\n            <MessageSummary lang={lang} message={message} noEmoji={Boolean(mediaThumbnail)} />\n          </p>\n          <RippleEffect />\n        </div>\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className=\"inline-button\"\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string, isSpoiler?: boolean) {\n  const { width, height } = getPictogramDimensions();\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className=\"pinned-thumb\">\n      {!isSpoiler && <img className=\"pinned-thumb-image\" src={srcUrl} width={width} height={height} alt=\"\" />}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n    </div>\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import { getAverageColor, getColorLuma } from './colors';\n\nconst LUMA_THRESHOLD = 240;\n\nexport function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      const averageColor = await getAverageColor(img.src);\n      const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx2D = canvas.getContext('2d')!;\n        ctx2D.fillStyle = fillColor;\n        ctx2D.fillRect(0, 0, canvas.width, canvas.height);\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          ctx2D.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nasync function steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  const averageColor = await getAverageColor(img.src);\n  const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n  ctx.fillStyle = fillColor;\n  ctx.globalCompositeOperation = 'destination-over';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useCallback, useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectTabState, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const updatePlaybackRate = useCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  }, [setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const handlePlaybackClick = useCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  }, [handleContextMenuClose, isPlaybackRateActive, playbackRate, updatePlaybackRate]);\n\n  const PlaybackRateButton = useCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  }, [\n    handleBeforeContextMenu, handleContextMenu, handleContextMenuClose, handlePlaybackClick, isContextMenuOpen,\n    isMobile, isPlaybackRateActive, playbackRate,\n  ]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash: accessHash! });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectTabState,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  hasReachedFocusedMessage?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  hasReachedFocusedMessage,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    setReachedFocusedMessage,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const [isWaitingForPinnedMessageFocus, setWaitingForPinnedMessageFocus] = useState(false);\n  const { isTablet } = useAppLayout();\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (lastSyncTime && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady, isForum]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n    setWaitingForPinnedMessageFocus(false);\n  }, [pinnedMessageIds]);\n\n  useEffect(() => {\n    if (hasReachedFocusedMessage && isWaitingForPinnedMessageFocus) {\n      setReachedFocusedMessage({ hasReached: false });\n      setWaitingForPinnedMessageFocus(false);\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [\n    hasReachedFocusedMessage, isWaitingForPinnedMessageFocus, pinnedMessageIndex, pinnedMessagesCount,\n    setReachedFocusedMessage,\n  ]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n  }, [openChatWithInfo, chatId, threadId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  }, [pinMessage]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({\n        chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id, noForumTopicPanel: true,\n      });\n\n      setWaitingForPinnedMessageFocus(true);\n    }\n  }, [pinnedMessage, focusMessage, threadId]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  }, [openChat, chatId, threadId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (isMobile || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive, isMobile,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (lang('CommentsCount', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isPinnedMessagesFullWidth && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n    const focusedMessage = selectTabState(global).focusedMessage;\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      hasReachedFocusedMessage: !focusedMessage || focusedMessage.hasReachedMessage,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { useLayoutEffect } from '../lib/teact/teact';\nimport usePrevious from './usePrevious';\n\nconst useLayoutEffectWithPrevDeps = <T extends readonly any[]>(\n  cb: (args: T | readonly []) => void, dependencies: T, debugKey?: string,\n) => {\n  const prevDeps = usePrevious<T>(dependencies);\n  return useLayoutEffect(() => {\n    return cb(prevDeps || []);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, dependencies, debugKey);\n};\n\nexport default useLayoutEffectWithPrevDeps;\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMentionsRead, animateUnreadReaction } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isOwnMessage,\n  getMessageVideo,\n  getMessageWebPageVideo,\n} from '../../../../global/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(\n  message: ApiMessage, asForwarded?: boolean, noAvatars?: boolean, isMobile?: boolean,\n) {\n  const isOwn = isOwnMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, asForwarded, isWebPagePhoto, noAvatars, isMobile)\n    : calculateVideoDimensions(video!, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\nlet fontFamily: string | undefined;\nexport default function calculateAuthorWidth(text: string) {\n  if (!fontFamily) {\n    fontFamily = getComputedStyle(document.documentElement).getPropertyValue('--font-family');\n  }\n\n  if (!element) {\n    element = document.createElement('span');\n    element.style.font = `400 12px ${fontFamily}`;\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.textContent = text;\n\n  return element.offsetWidth;\n}\n","import { getActions } from '../../../../global';\n\nimport type { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  const { setReachedFocusedMessage } = getActions();\n\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      setReachedFocusedMessage({\n        hasReached: true,\n      });\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [\n    elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, setReachedFocusedMessage,\n  ]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage } from '../../api/types';\nimport type { TextPart } from '../../types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { getMessageMediaHash } from '../../global/helpers';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Avatar from '../common/Avatar';\nimport CropModal from '../ui/CropModal';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ntype OwnProps = {\n  message: ApiMessage;\n  content?: TextPart;\n};\n\nconst ActionMessageSuggestedAvatar: FC<OwnProps> = ({\n  message,\n  content,\n}) => {\n  const {\n    openMediaViewer, uploadProfilePhoto, showNotification,\n  } = getActions();\n\n  const { isOutgoing } = message;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n  const suggestedPhotoUrl = useMedia(getMessageMediaHash(message, 'full'));\n  const isVideo = message.content.action!.photo?.isVideo;\n\n  const showAvatarNotification = useCallback(() => {\n    showNotification({\n      title: lang('ApplyAvatarHintTitle'),\n      message: lang('ApplyAvatarHint'),\n      action: {\n        action: 'requestNextSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  }, [lang, showNotification]);\n\n  const handleSetSuggestedAvatar = useCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  }, [showAvatarNotification, uploadProfilePhoto]);\n\n  const handleCloseCropModal = useCallback(() => {\n    setCropModalBlob(undefined);\n  }, []);\n\n  const handleSetVideo = useCallback(async () => {\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const photo = message.content.action!.photo!;\n    const blobUrl = await mediaLoader.fetch(`videoAvatar${photo.id}?size=u`, ApiMediaFormat.BlobUrl);\n    const blob = await fetch(blobUrl).then((r) => r.blob());\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  }, [closeVideoModal, message.content.action, showAvatarNotification, uploadProfilePhoto]);\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetch(suggestedPhotoUrl).then((r) => r.blob()));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        mediaId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <span className=\"action-message-suggested-avatar\" tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        photo={message.content.action!.photo}\n        showVideoOverwrite\n        loopIndefinitely\n        withVideo={isVideo}\n        size=\"jumbo\"\n      />\n      <span>{content}</span>\n\n      <span className=\"action-message-button\">{lang(isVideo ? 'ViewVideoAction' : 'ViewPhotoAction')}</span>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('SuggestedVideo')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        textParts={content}\n      />\n    </span>\n  );\n};\n\nexport default memo(ActionMessageSuggestedAvatar);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker, ApiTopic,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\nimport ActionMessageSuggestedAvatar from './ActionMessageSuggestedAvatar';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n  isInsideTopic?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  topic?: ApiTopic;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  isInsideTopic,\n  topic,\n  memoFirstUnreadIdRef,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n  const isSuggestedAvatar = message.content.action?.type === 'suggestProfilePhoto' && message.content.action!.photo;\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    topic,\n    { isEmbedded },\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  // TODO Refactoring for action rendering\n  const shouldSkipRender = isInsideTopic && message.content.action?.text === 'TopicWasCreatedAction';\n  if (shouldSkipRender) {\n    return <span ref={ref} />;\n  }\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{content}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    (isGift || isSuggestedAvatar) && 'centered-action',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isSuggestedAvatar && <span className=\"action-message-content\">{content}</span>}\n      {isGift && renderGift()}\n      {isSuggestedAvatar && (\n        <ActionMessageSuggestedAvatar\n          message={message}\n          content={content}\n        />\n      )}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n    } = (isFocused && selectTabState(global).focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n    const topic = selectTopicFromMessage(global, message);\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      topic,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat,\n} from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n  getMessageIsSpoiler,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\nimport MediaSpoiler from './MediaSpoiler';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n  const isSpoiler = Boolean(message && getMessageIsSpoiler(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected, isSpoiler)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n  isSpoiler?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className={buildClassName('embedded-thumb', isRoundVideo && 'round')}>\n      {!isSpoiler && (\n        <img\n          src={srcUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className=\"pictogram\"\n          draggable={false}\n        />\n      )}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  };\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  useEffect(() => {\n    if (hasEffect && canPlay && shouldPlayEffect) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, startPlayingEffect]);\n\n  const openModal = useCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet, sticker]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [\n    hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect,\n    sticker.stickerSetInfo,\n  ]);\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n        cacheBuster={lastSyncTime}\n      />\n      {hasEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport safePlay from '../../../util/safePlay';\nimport { selectLocalAnimatedEmojiEffectByName } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  localEffect?: string,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  const hasEffect = localEffect || emoji;\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, (emoji || localEffect) && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      localEffect,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, localEffect, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!hasEffect || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      localEffect,\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [\n    chatId, emoji, hasEffect, interactWithAnimatedEmoji, isOwn,\n    localEffect, messageId, play, sendInteractionBunch, size,\n  ]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: localEffect ? selectLocalAnimatedEmojiEffectByName(localEffect)! : emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [\n    activeEmojiInteractions, chatId, emoji, isOwn, localEffect, messageId, play, sendWatchingEmojiInteraction, size,\n  ]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectLocalAnimatedEmoji,\n  selectLocalAnimatedEmojiEffect,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  localSticker?: keyof typeof LOCAL_TGS_URLS;\n  localEffect?: string;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  localSticker,\n  localEffect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, localEffect, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return localSticker ? (\n    <AnimatedIconWithPreview\n      tgsUrl={LOCAL_TGS_URLS[localSticker]}\n      size={size}\n      quality={QUALITY}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className=\"AnimatedEmoji media-inner\"\n      style={style}\n      onClick={handleClick}\n    />\n  ) : (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  const localSticker = selectLocalAnimatedEmoji(global, emoji);\n\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n    localSticker,\n    localEffect: localSticker && withEffects ? selectLocalAnimatedEmojiEffect(localSticker) : undefined,\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, undefined, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n  };\n})(AnimatedCustomEmoji));\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, isDisabled?: boolean | string) {\n  const { isMobile } = useAppLayout();\n\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(isDisabled),\n    isMobile && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import React, {\n  useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  asForwarded?: boolean;\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  asForwarded,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n\n  const [withThumb] = useState(!fullMediaData);\n  const noThumb = Boolean(fullMediaData);\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(photo.isSpoiler);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'), !isDownloading, getMessageMediaFormat(message, 'download'),\n  );\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [fullMediaData, hideSpoiler, isSpoilerShown, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [shouldAffectAppendix, fullMediaData, isOwn, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, asForwarded, noAvatars, isMobile);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = size === 'inline' ? `height: ${height}px;${dimensionsStyle}` : undefined;\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <img\n        src={fullMediaData}\n        className=\"full-media\"\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {withThumb && (\n        <canvas ref={thumbRef} className={buildClassName('thumbnail', thumbClassNames)} />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(video.isSpoiler);\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay && !isSpoilerShown);\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'), lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n  const hasThumb = Boolean(thumbDataUri);\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading && lastSyncTime;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview, undefined, lastSyncTime);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [\n    isUploading, isDownloading, fullMediaData, isPlayAllowed, isSpoilerShown, onClick, message, onCancelUpload,\n    hideSpoiler,\n  ]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className=\"full-media\"\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon-large-play', playButtonClassNames)} />\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n  animationLevel: AnimationLevel;\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, animationLevel,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} animationLevel={animationLevel} withVideo />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useState, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + getServerTimeOffset(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n  const { isMobile } = useAppLayout();\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message, undefined, undefined, isMobile);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          asForwarded={asForwarded}\n          nonInteractive={!isMediaInteractive}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      {isArticle && (\n        <div className=\"WebPage-text\">\n          <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n          {!inPreview && title && (\n            <p className=\"site-title\">{renderText(title)}</p>\n          )}\n          {truncatedDescription && (\n            <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n          )}\n        </div>\n      )}\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersectionForLoading={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          asForwarded={asForwarded}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n            crossOrigin=\"anonymous\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton width={photo.dimensions?.width} height={photo.dimensions?.height} forceAspectRatio />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  lastSyncTime,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  }, [chatId, id, loadExtendedMedia]);\n\n  useInterval(refreshExtendedMedia, lastSyncTime ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  }, [chatId, id, openInvoice]);\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffectWithPrevDeps(([prevShouldRenderText]) => {\n    if (shouldRenderText) {\n      if (!prevShouldRenderText) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (mapBlobUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldRenderText, isOwn, isInSelectMode, isSelected, theme, mapBlobUrl]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={iconSrc} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TaAutZxIFX4go5HmM7Cg\",\"particle\":\"b5KMGtz_lQAs58tR80GG\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\n\nimport styles from './CustomReactionAnimation.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomReactionAnimation: FC<OwnProps> = ({\n  reaction,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(stickerHash);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData) return undefined;\n\n  return (\n    <div className={styles.root}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomReactionAnimation);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"is-custom-emoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"isCustomEmoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomReactionAnimation from './CustomReactionAnimation';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n};\n\nconst CENTER_ICON_SIZE = 2.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const customEmoji = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomReactionAnimation reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceOnHeavyAnimation\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, toggleReaction]);\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n  noRecentReactors,\n}) => {\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestMasterAndRequestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon-lock\" />}\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ActiveEmojiInteraction, ActiveReaction, MessageListType } from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n  ApiChatMember,\n  ApiUsername,\n  ApiTopic,\n  ApiReaction,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type {\n  AnimationLevel, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { AudioOrigin } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectLocalAnimatedEmoji,\n  selectIsCurrentUserPremium,\n  selectIsChatProtected,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n  getMessageSingleCustomEmoji,\n  hasMessageText,\n  isChatGroup,\n  getMessageLocation,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport {\n  calculateDimensionsForMessageMedia,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { isAnimatingScroll } from '../../../util/fastSmoothScroll';\n\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport TopicChip from '../../common/TopicChip';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n    memoFirstUnreadIdRef: { current: number | undefined };\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  animationLevel: AnimationLevel;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  animationLevel,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime()),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !hasAnimatedEmoji) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  const shouldFocusOnResize = isLastInGroup;\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.target.clientHeight;\n    messageHeightRef.current = newHeight;\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage]);\n\n  useResizeObserver(shouldFocusOnResize ? ref : undefined, handleResize, true);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        asForwarded,\n        noAvatars,\n        isMobile,\n      }).width;\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n        observeIntersection={observeIntersectionForLoading}\n        animationLevel={animationLevel}\n        withVideo\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        onClick={handleMetaClick}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !hasThread;\n    const textContentClass = buildClassName(\n      'text-content',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            <MessageText\n              message={message}\n              emojiSize={emojiSize}\n              highlight={highlight}\n              isProtected={isProtected}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n              withTranslucentThumbs={isCustomShape}\n            />\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji\n                reaction={defaultReaction}\n                size={QUICK_REACTION_SIZE}\n                availableReactions={availableReactions}\n                observeIntersection={observeIntersectionForPlaying}\n              />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, repliesThreadInfo, forwardInfo,\n      transcriptionId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chat.fullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && (\n      selectAnimatedEmoji(global, singleEmoji) || selectLocalAnimatedEmoji(global, singleEmoji)\n    ) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const isLocation = Boolean(getMessageLocation(message));\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      lastSyncTime,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && activeReactions[reactionMessage.id],\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      senderAdminMember,\n      messageTopic,\n      genericEffects: global.genericEmojiEffects,\n      hasTopicChip,\n      ...((canShowSender || isLocation) && { sender }),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type {\n  ApiChat, ApiTopic, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId!,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n      noForumTopicPanel: true,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId!,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  const handleTopicChipClick = useCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  }, [chatId, focusMessage, isChatWithRepliesBot, messageTopic, messageId, replyToChatId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getActions } from '../../global';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  const toggleScrollToolsRef = useRef<typeof toggleScrollTools>();\n  toggleScrollToolsRef.current = toggleScrollTools;\n  useSyncEffect(() => {\n    if (isReady) {\n      toggleScrollToolsRef.current!();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [freezeForFab, freezeForNotch, messageIds, unfreezeForFab, unfreezeForNotch]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageListType } from '../../global/types';\nimport type { ApiTopic } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon topic={topic} size={ICON_SIZE} className=\"icon topic-icon\" />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium, selectLastScrollOffset,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/environment';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useResizeObserver from '../../hooks/useResizeObserver';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: AnimationLevel;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n  topic?: ApiTopic;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread'\n    && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0);\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime, loadSponsoredMessages]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && threadFirstMessageId !== threadTopMessageId\n      && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  }, []);\n  useResizeObserver(containerRef, handleResize);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useSyncEffect(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useSyncEffect` above\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- `as const` not yet supported by linter\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <OptimizedVideo\n                  canPlay\n                  src={botInfoGifUrl}\n                  loop\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botInfo = chatBot.fullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    const topic = chat.topics?.[threadId];\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      topic,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    const img = await preloadImage(blobUrl);\n    const { width, height } = img;\n    const shouldShrink = Math.max(width, height) > MAX_QUICK_IMG_SIZE;\n    const isGif = mimeType === GIF_MIME_TYPE;\n\n    if (!options?.compressedBlobUrl && !isGif && (shouldShrink || mimeType !== 'image/jpeg')) {\n      const resizedUrl = await scaleImage(\n        blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n      );\n      URL.revokeObjectURL(blobUrl);\n      return buildAttachment(filename, blob, {\n        compressedBlobUrl: resizedUrl,\n      });\n    }\n\n    if (mimeType === 'image/jpeg') {\n      filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n    }\n\n    quick = { width, height };\n    previewBlobUrl = blobUrl;\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    uniqueId: `${Date.now()}-${Math.random()}`,\n    ...options,\n  };\n}\n\nexport function prepareAttachmentsToSend(\n  attachments: ApiAttachment[], shouldSendCompressed?: boolean,\n): ApiAttachment[] {\n  return attachments.map((attach) => {\n    if (shouldSendCompressed) {\n      if (attach.compressedBlobUrl) {\n        return {\n          ...attach,\n          blobUrl: attach.compressedBlobUrl,\n        };\n      }\n      return attach;\n    }\n\n    return {\n      ...attach,\n      shouldSendAsFile: !attach.voice ? true : undefined,\n      shouldSendAsSpoiler: undefined,\n    };\n  });\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport twemojiRegex from '../../../../lib/twemojiRegex';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst MAX_LENGTH = 8;\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const getSingleEmoji = useDerivedSignal(() => {\n    const html = getHtml();\n    if (!isEnabled || !html || (IS_EMOJI_SUPPORTED && html.length > MAX_LENGTH)) return undefined;\n\n    const hasEmoji = html.match(IS_EMOJI_SUPPORTED ? twemojiRegex : EMOJI_IMG_REGEX);\n    if (!hasEmoji) return undefined;\n\n    const cleanHtml = prepareForRegExp(html);\n    const isSingleEmoji = cleanHtml && (\n      (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n      || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n    );\n\n    return isSingleEmoji\n      ? (IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!)\n      : undefined;\n  }, [getHtml, isEnabled]);\n\n  const isActive = useDerivedState(() => Boolean(getSingleEmoji()), [getSingleEmoji]);\n  const hasStickers = Boolean(stickers?.length);\n\n  useEffect(() => {\n    if (!isEnabled) return;\n\n    const singleEmoji = getSingleEmoji();\n    if (singleEmoji) {\n      if (!hasStickers) {\n        loadStickersForEmoji({ emoji: singleEmoji });\n      }\n    } else {\n      clearStickersForEmoji();\n    }\n  }, [isEnabled, getSingleEmoji, hasStickers, loadStickersForEmoji, clearStickersForEmoji]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isStickerTooltipOpen: Boolean(isActive && hasStickers && !isManuallyClosed),\n    closeStickerTooltip: markManuallyClosed,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","// Utility for cleaning html code from Google Docs.\n// Original source from DocsSoap:\n// https://www.npmjs.com/package/docs-soap\n\nconst GDOCS_ELEMENT_ID_REGEXP = /id=\"docs-internal-guid/i;\n\nconst GDOCS_STYLES = {\n  BOLD: '700',\n  ITALIC: 'italic',\n  UNDERLINE: 'underline',\n  STRIKETHROUGH: 'line-through',\n  SUPERSCRIPT: 'super',\n  SUBSCRIPT: 'sub',\n};\n\nconst ELEMENTS = {\n  ANCHOR: 'a',\n  BOLD: 'strong',\n  ITALIC: 'em',\n  UNDERLINE: 'u',\n  STRIKETHROUGH: 'del',\n  SUPERSCRIPT: 'sup',\n  SUBSCRIPT: 'sub',\n};\n\nconst headers = [\n  'H1',\n  'H2',\n  'H3',\n  'H4',\n  'H5',\n  'H6',\n];\n\nfunction parseHtml(html: string): HTMLElement {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, 'text/html');\n\n  return doc.body;\n}\n\nfunction wrapNodeAnchor(node: Node, href: string): HTMLAnchorElement {\n  const anchor = document.createElement(ELEMENTS.ANCHOR) as HTMLAnchorElement;\n  anchor.href = href;\n  anchor.appendChild(node.cloneNode(true));\n\n  return anchor;\n}\n\nfunction wrapNodeInline(node: Node, style: string): Node {\n  const el = document.createElement(style);\n  el.appendChild(node.cloneNode(true));\n\n  return el;\n}\n\nfunction wrapNode(inner: HTMLElement, result: Node): Node {\n  let newNode = result.cloneNode(true);\n  if (!inner) {\n    return newNode;\n  }\n  if (inner.style && inner.style.fontWeight === GDOCS_STYLES.BOLD) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.BOLD);\n  }\n  if (inner.style && inner.style.fontStyle === GDOCS_STYLES.ITALIC) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.ITALIC);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.UNDERLINE) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.UNDERLINE);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.STRIKETHROUGH) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.STRIKETHROUGH);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUPERSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUPERSCRIPT);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUBSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUBSCRIPT);\n  }\n\n  return newNode;\n}\n\nfunction applyBlockStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = document.createTextNode('') as Node;\n  if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n    styledNode = node.childNodes[0];\n  }\n  if (node.childNodes[0] && node.childNodes[0].nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode.cloneNode(true), (node.childNodes[0] as HTMLAnchorElement).href);\n    styledNode = node.childNodes[0].childNodes[0];\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction applyInlineStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = node;\n  if (node.nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode, (node as HTMLAnchorElement).href);\n    if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n      styledNode = node.childNodes[0];\n    }\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction getCleanNode(node: Node): Node[] {\n  if (node.childNodes && (node.childNodes.length <= 1 || node.nodeName === 'OL' || node.nodeName === 'UL')) {\n    let newWrapper: Node | undefined;\n    let newNode = document.createTextNode(node.textContent || '') as Node;\n    if (node.nodeName === 'UL' || node.nodeName === 'OL' || node.nodeName === 'LI') {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = document.createDocumentFragment();\n      const items = [];\n      for (let i = 0; i < node.childNodes.length; i++) {\n        items.push(...getCleanNode(node.childNodes[i]));\n      }\n      items.map((i: Node): Node => newNode.appendChild(i));\n    } else if (headers.indexOf(node.nodeName) !== -1) {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = applyInlineStyles(node.childNodes[0]);\n    } else if (node.nodeName === 'P') {\n      newWrapper = document.createElement('p');\n      newNode = applyBlockStyles(node);\n    } else if (node.nodeName === 'BR') {\n      newNode = node;\n    } else {\n      newWrapper = document.createElement('span');\n      newNode = applyInlineStyles(node);\n    }\n    if (newWrapper) {\n      newWrapper.appendChild(newNode);\n      return [newWrapper];\n    }\n\n    return [node.cloneNode(true)];\n  }\n\n  if (node.childNodes) {\n    const nodes = [];\n    for (let i = 0; i < node.childNodes.length; i++) {\n      nodes.push(...getCleanNode(node.childNodes[i]));\n    }\n    return nodes;\n  }\n\n  return [node];\n}\n\nfunction filterNode(node: Node): boolean {\n  return node.nodeType !== 8; // Node.COMMENT_NODE = 8\n}\n\nfunction getCleanDocument(dirty: HTMLElement): HTMLElement {\n  const body = document.createElement('body');\n  const nodes = dirty.childNodes;\n  const filteredNodes = Array.from(nodes).filter(filterNode);\n  const cleanNodes = [];\n\n  for (const node of filteredNodes) {\n    cleanNodes.push(...getCleanNode(node));\n  }\n\n  for (let i = 0; i < cleanNodes.length; i++) {\n    body.appendChild(cleanNodes[i].cloneNode(true));\n  }\n\n  return body;\n}\n\nexport default function cleanDocsHtml(clipboardContent: string): string {\n  if (!clipboardContent.match(GDOCS_ELEMENT_ID_REGEXP)) {\n    return parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, '')).innerHTML;\n  }\n\n  return getCleanDocument(parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, ''))).innerHTML;\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { DEBUG, EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport cleanDocsHtml from '../../../../lib/cleanDocsHtml';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  try {\n    html = cleanDocsHtml(html);\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] | undefined = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (!files?.length && !pastedText) {\n        return;\n      }\n\n      if (files?.length && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file);\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      if (textToPaste) {\n        insertTextAndUpdateCursor(textToPaste, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { ApiMessageEntityTypes } from '../../../../api/types';\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useStateRef } from '../../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useRunDebounced from '../../../../hooks/useRunDebounced';\n\nlet isFrozen = false;\n\nfunction freeze() {\n  isFrozen = true;\n  requestAnimationFrame(() => {\n    isFrozen = false;\n  });\n}\n\nconst useDraft = (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  lastSyncTime?: number,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n\n  const isEditing = Boolean(editedMessage);\n\n  const updateDraft = useCallback((prevState: { chatId?: string; threadId?: number } = {}) => {\n    if (isEditing || !lastSyncTime) return;\n\n    const html = getHtml();\n\n    if (html) {\n      saveDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        draft: parseMessageInput(html),\n      });\n    } else {\n      clearDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n      });\n    }\n  }, [chatId, threadId, isEditing, lastSyncTime, getHtml, saveDraft, clearDraft]);\n\n  const updateDraftRef = useStateRef(updateDraft);\n  const runDebouncedForSaveDraft = useRunDebounced(DRAFT_DEBOUNCE, true, undefined, [chatId, threadId]);\n\n  // Restore draft on chat change\n  useEffectWithPrevDeps(([prevChatId, prevThreadId, prevDraft]) => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n\n      return;\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    chatId, threadId, draft, setHtml, editedMessage, loadCustomEmojis,\n  ] as const);\n\n  // Save draft on chat change\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      if (!isEditing) {\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        updateDraftRef.current({ chatId, threadId });\n      }\n\n      freeze();\n    };\n  }, [chatId, threadId, isEditing, updateDraftRef]);\n\n  const chatIdRef = useStateRef(chatId);\n  const threadIdRef = useStateRef(threadId);\n  useEffect(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    if (!getHtml()) {\n      updateDraftRef.current();\n\n      return;\n    }\n\n    const scopedShatId = chatIdRef.current;\n    const scopedThreadId = threadIdRef.current;\n\n    runDebouncedForSaveDraft(() => {\n      if (chatIdRef.current === scopedShatId && threadIdRef.current === scopedThreadId) {\n        updateDraftRef.current();\n      }\n    });\n  }, [chatIdRef, getHtml, runDebouncedForSaveDraft, threadIdRef, updateDraftRef]);\n\n  useBackgroundMode(updateDraft);\n  useBeforeUnload(updateDraft);\n};\n\nexport default useDraft;\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { InlineBotSettings } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport memoized from '../../../../util/memoized';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useSyncEffect from '../../../../hooks/useSyncEffect';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst THROTTLE = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isEnabled: boolean,\n  chatId: string,\n  getHtml: Signal<string>,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot, resetAllInlineBots } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const extractBotQueryThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('@') ? parseBotQuery(html) : MEMO_NO_RESULT;\n  }, [getHtml, isEnabled], THROTTLE);\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDerivedState(extractBotQueryThrottled, [extractBotQueryThrottled, getHtml], true);\n\n  useSyncEffect(([prevUsername]) => {\n    if (prevUsername) {\n      resetInlineBot({ username: prevUsername });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [username, resetInlineBot] as const);\n\n  useEffect(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query,\n    });\n  }, [chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = (usernameLowered && inlineBots?.[usernameLowered]) || {};\n\n  const isOpen = Boolean((results?.length || switchPm) && !isManuallyClosed);\n\n  useEffect(() => {\n    if (!isOpen && !username) {\n      resetAllInlineBots();\n    }\n  }, [isOpen, resetAllInlineBots, username]);\n\n  const loadMore = useCallback(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [chatId, offset, query, queryInlineBot, usernameLowered]);\n\n  return {\n    isOpen,\n    botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: markManuallyClosed,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nconst buildQueryStateMemo = memoized((username: string, query: string, canShowHelp: boolean) => ({\n  username,\n  query,\n  canShowHelp,\n  usernameLowered: username.toLowerCase(),\n}));\n\nfunction parseBotQuery(html: string) {\n  if (!html.startsWith('@')) {\n    return MEMO_NO_RESULT;\n  }\n\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return buildQueryStateMemo(result[1], result[2], result[2] === '' && !text.match(HAS_NEW_LINE));\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst RE_COMMAND = /^\\/([\\w@]{1,32}\\s?)?/i;\n\nconst THROTTLE = 300;\n\nexport default function useBotCommandTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const detectCommandThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('/') ? prepareForRegExp(html).match(RE_COMMAND)?.[0].trim() : undefined;\n  }, [getHtml, isEnabled], THROTTLE);\n\n  const getCommand = useDerivedSignal(\n    detectCommandThrottled, [detectCommandThrottled, getHtml], true,\n  );\n\n  useEffect(() => {\n    const command = getCommand();\n    const commands = botCommands || chatBotCommands;\n    if (!command || !commands) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const filter = command.substring(1);\n    const nextFilteredBotCommands = commands.filter((c) => !filter || c.command.includes(filter));\n\n    setFilteredBotCommands(\n      nextFilteredBotCommands?.length ? nextFilteredBotCommands : undefined,\n    );\n  }, [getCommand, botCommands, chatBotCommands]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isOpen: Boolean(filteredBotCommands?.length && !isManuallyClosed),\n    close: markManuallyClosed,\n    filteredBotCommands,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef, useCallback, memo } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport type { OwnProps as ButtonProps } from './Button';\nimport Button from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  const handleClick = useCallback(() => {\n    isMouseInside.current = true;\n    onActivate();\n  }, [onActivate]);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={!IS_TOUCH_ENV ? onActivate : handleClick}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((path) => {\n      path.style.stroke = color;\n      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  threadId?: number;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  threadId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleAttachBot]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        bot,\n        chatId,\n        threadId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { validateFiles } from '../../../util/files';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], shouldSuggestCompression?: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, shouldSuggestCompression?: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileSelect(validatedFiles, shouldSuggestCompression);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            <MenuItem icon=\"photo\" onClick={handleQuickSelect}>{lang('AttachmentMenu.PhotoOrVideo')}</MenuItem>\n            <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            threadId={threadId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectTabState,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n  shouldForceShowEditing?: boolean;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  shouldForceShowEditing,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [\n    replyingToId, shouldForceShowEditing, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId,\n    exitForwardMode,\n  ]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id, noForumTopicPanel: true });\n  }, [focusMessage, isForwarding, message]);\n\n  const handleClearClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  }, [clearEmbedded]);\n\n  const handleChangeRecipientClick = useCallback(() => {\n    changeForwardRecipient();\n  }, [changeForwardRecipient]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getRootElement = useCallback(() => ref.current!, []);\n  const getMenuElement = useCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'), []);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId, shouldForceShowEditing]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div>\n        <div className=\"embedded-left-icon\">\n          <i className={leftIcon} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: false,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: true,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: false,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: true,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { shouldForceShowEditing }): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = selectTabState(global);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId && !shouldForceShowEditing) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message && !shouldForceShowEditing) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { Signal } from '../../../util/signals';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageEntityTextUrl, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectTabState, selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport { useDebouncedResolver } from '../../../hooks/useAsyncResolvers';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  getHtml: Signal<string>;\n  isDisabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  getHtml,\n  isDisabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n    const linkEntity = entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n\n    return linkEntity?.url || text.match(RE_LINK)?.[0];\n  }, [getHtml], DEBOUNCE_MS, true);\n\n  const getLink = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffect(() => {\n    const link = getLink();\n\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [getLink, chatId, threadId, clearWebPagePreview, loadWebPagePreview, toggleMessageWebPage]);\n\n  useSyncEffect(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId, clearWebPagePreview, threadId, toggleMessageWebPage]);\n\n  const isShown = useDerivedState(() => {\n    return Boolean(webPagePreview && getHtml() && !noWebPage && !isDisabled);\n  }, [isDisabled, getHtml, noWebPage, webPagePreview]);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: selectTabState(global).webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState, MessageListType, GlobalState } from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n  ApiAttachMenuPeerType,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_UPLOAD_FILEPART_SIZE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_IOS } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatMessage,\n  selectUser,\n  selectCanScheduleUntilOnline,\n  selectEditingScheduledDraft,\n  selectEditingDraft,\n  selectRequestedDraftText,\n  selectTheme,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectChatType,\n  selectRequestedDraftFiles,\n  selectTabState,\n  selectReplyingToId,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatSuperGroup,\n  isChatChannel,\n  isUserId,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment, { prepareAttachmentsToSend } from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport { insertHtmlInSelection } from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { buildCustomEmojiHtml } from './helpers/customEmoji';\nimport { processMessageInputForCustomEmoji } from '../../../util/customEmojiManager';\nimport { getTextWithEntitiesAsHtml } from '../../common/helpers/renderTextWithEntities';\n\nimport useSignal from '../../../hooks/useSignal';\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAttachmentModal from './hooks/useAttachmentModal';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport { useStateRef } from '../../../hooks/useStateRef';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  isMobile?: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    replyingToId?: number;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: TabState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: TabState['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n    attachmentSettings: GlobalState['attachmentSettings'];\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = TabState['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  isMobile,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  replyingToId,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  attachmentSettings,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    addRecentCustomEmoji,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const [getHtml, setHtml] = useSignal('');\n  const getSelectionRange = useGetSelectionRange(EDITABLE_INPUT_CSS_SELECTOR);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  useEffect(processMessageInputForCustomEmoji, [getHtml]);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useSyncEffect(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n  const hasAttachments = Boolean(attachments.length);\n\n  const {\n    shouldSuggestCompression,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate,\n    handleClearAttachments,\n    handleSetAttachments,\n  } = useAttachmentModal({\n    attachments,\n    setHtml,\n    setAttachments,\n    fileSizeLimit,\n  });\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const isEditingRef = useStateRef(Boolean(editingMessage));\n  useEffect(() => {\n    if (getHtml() && !isEditingRef.current) {\n      sendMessageAction({ type: 'typing' });\n    }\n  }, [getHtml, isEditingRef, sendMessageAction]);\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestStickers && !hasAttachments),\n    getHtml,\n    setHtml,\n    undefined,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    closeCustomEmojiTooltip,\n    insertCustomEmoji,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestCustomEmoji && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isStickerTooltipOpen,\n    closeStickerTooltip,\n  } = useStickerTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestStickers && canSendStickers && !hasAttachments),\n    getHtml,\n    stickersForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    botId: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments && lastSyncTime),\n    chatId,\n    getHtml,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean(isReady && isForCurrentMessageList && ((botCommands && botCommands?.length) || chatBotCommands?.length)),\n    getHtml,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const insertHtmlAndUpdateCursor = useCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${getHtml()}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [getHtml, setHtml]);\n\n  const insertFormattedTextAndUpdateCursor = useCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertCustomEmojiAndUpdateCursor = useCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(getHtml()));\n  }, [getHtml, setHtml]);\n\n  useDraft(draft, chatId, threadId, getHtml, setHtml, editingMessage, lastSyncTime);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n\n    setAttachments(MEMO_EMPTY_ARRAY);\n\n    closeEmojiTooltip();\n    closeCustomEmojiTooltip();\n    closeStickerTooltip();\n    closeMentionTooltip();\n\n    if (isMobile) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [\n    setHtml, isMobile, closeStickerTooltip, closeCustomEmojiTooltip, closeMentionTooltip, closeEmojiTooltip,\n    closeSymbolMenu,\n  ]);\n\n  const [handleEditComplete, handleEditCancel, shouldForceShowEditing] = useEditing(\n    getHtml,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n    replyingToId,\n  );\n\n  // Handle chat change (should be placed after `useDraft` and `useEditing`)\n  const resetComposerRef = useStateRef(resetComposer);\n  const stopRecordingVoiceRef = useStateRef(stopRecordingVoice);\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      stopRecordingVoiceRef.current();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      resetComposerRef.current();\n    };\n  }, [chatId, threadId, resetComposerRef, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: {\n          action: 'openChat',\n          payload: { id: currentUserId, shouldReplaceHistory: true },\n        },\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  }, [currentUserId, lang, showNotification]);\n\n  const mainButtonState = useDerivedState(() => {\n    if (editingMessage && shouldForceShowEditing) {\n      return MainButtonState.Edit;\n    }\n\n    if (IS_VOICE_RECORDING_SUPPORTED && !activeVoiceRecording && !isForwarding && !(getHtml() && !hasAttachments)) {\n      return MainButtonState.Record;\n    }\n\n    if (shouldSchedule) {\n      return MainButtonState.Schedule;\n    }\n\n    return MainButtonState.Send;\n  }, [\n    activeVoiceRecording, editingMessage, getHtml, hasAttachments, isForwarding, shouldForceShowEditing, shouldSchedule,\n  ]);\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const validateTextLength = useCallback((text: string, isAttachmentModal?: boolean) => {\n    const maxLength = isAttachmentModal ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength.toString(),\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return false;\n    }\n    return true;\n  }, [captionLimit, showDialog]);\n\n  const checkSlowMode = useCallback(() => {\n    if (slowMode && !isAdmin) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n      const nowSeconds = getServerTime();\n      const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n        && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n      const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n      if (\n        (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n        || nextSendDateNotReached\n      ) {\n        const secondsRemaining = nextSendDateNotReached\n          ? slowMode.nextSendDate! - nowSeconds\n          : slowMode.seconds - secondsSinceLastMessage!;\n        showDialog({\n          data: {\n            message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n            isSlowMode: true,\n            hasErrorKey: false,\n          },\n        });\n\n        messageInput?.blur();\n\n        return false;\n      }\n    }\n    return true;\n  }, [isAdmin, lang, showDialog, slowMode]);\n\n  const sendAttachments = useCallback(({\n    attachments: attachmentsToSend,\n    sendCompressed = attachmentSettings.shouldCompress,\n    sendGrouped = attachmentSettings.shouldSendGrouped,\n    isSilent,\n    scheduledAt,\n  }: {\n    attachments: ApiAttachment[];\n    sendCompressed?: boolean;\n    sendGrouped?: boolean;\n    isSilent?: boolean;\n    scheduledAt?: number;\n  }) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n    if (!text && !attachmentsToSend.length) {\n      return;\n    }\n    if (!validateTextLength(text, true)) return;\n    if (!checkSlowMode()) return;\n\n    sendMessage({\n      text,\n      entities,\n      scheduledAt,\n      isSilent,\n      shouldUpdateStickerSetsOrder: true,\n      attachments: prepareAttachmentsToSend(attachmentsToSend, sendCompressed),\n      shouldGroupMessages: sendGrouped,\n    });\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    attachmentSettings.shouldCompress, attachmentSettings.shouldSendGrouped, connectionState, getHtml,\n    validateTextLength, checkSlowMode, sendMessage, clearDraft, chatId, resetComposer,\n  ]);\n\n  const handleSendAttachments = useCallback((\n    sendCompressed: boolean,\n    sendGrouped: boolean,\n    isSilent?: boolean,\n    scheduledAt?: number,\n  ) => {\n    sendAttachments({\n      attachments,\n      sendCompressed,\n      sendGrouped,\n      isSilent,\n      scheduledAt,\n    });\n  }, [attachments, sendAttachments]);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (currentAttachments.length) {\n      sendAttachments({\n        attachments: currentAttachments,\n      });\n      return;\n    }\n\n    if (!text && !isForwarding) {\n      return;\n    }\n\n    if (!validateTextLength(text)) return;\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (text) {\n      if (!checkSlowMode()) return;\n\n      sendMessage({\n        text,\n        entities,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetsOrder: true,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, getHtml, isForwarding, validateTextLength, clearDraft,\n    chatId, stopRecordingVoice, sendAttachments, checkSlowMode, sendMessage, forwardMessages, resetComposer,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') {\n      return;\n    }\n\n    callAttachBot({\n      chatId, url: botMenuButton.url, threadId,\n    });\n  }, [botMenuButton, callAttachBot, chatId, threadId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    closeSendAsMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, closeSendAsMenu, openSymbolMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else if (args.sendCompressed !== undefined || args.sendGrouped !== undefined) {\n      const { sendCompressed = false, sendGrouped = false } = args;\n      void handleSendAttachments(sendCompressed, sendGrouped, isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSendAttachments, handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      handleFileSelect(requestedDraftFiles);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji);\n  }, [insertCustomEmojiAndUpdateCursor, isChatWithSelf, isCurrentUserPremium, showCustomEmojiPremiumNotification]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const sendSilent = useCallback((additionalArgs?: ScheduledMessageArgs) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ ...additionalArgs, isSilent: true }, scheduledAt);\n      });\n    } else if (additionalArgs && ('sendCompressed' in additionalArgs || 'sendGrouped' in additionalArgs)) {\n      const { sendCompressed = false, sendGrouped = false } = additionalArgs;\n      void handleSendAttachments(sendCompressed, sendGrouped, true);\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, handleSendAttachments, requestCalendar, shouldSchedule]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!isMobile || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu, isMobile]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!isMobile || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu, isMobile]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({\n      id: chatId, threadId, type: 'scheduled', noForumTopicPanel: true,\n    });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && isMobile) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu, isMobile]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          }\n        } else {\n          startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, handleEditComplete, activeVoiceRecording, requestCalendar, areVoiceMessagesNotAllowed,\n    canSendVoiceByPrivacy, showNotification, lang, chat?.title, startRecordingVoice, pauseRecordingVoice,\n    handleMessageSchedule,\n  ]);\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilent = useCallback(() => {\n    sendSilent();\n  }, [sendSilent]);\n\n  const handleSendScheduledAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({ sendCompressed, sendGrouped }, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilentAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    sendSilent({ sendCompressed, sendGrouped });\n  }, [sendSilent]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const withBotMenuButton = isChatWithBot && botMenuButton?.type === 'webApp' && !editingMessage;\n  const isBotMenuButtonOpen = useDerivedState(() => {\n    return withBotMenuButton && !getHtml() && !activeVoiceRecording;\n  }, [withBotMenuButton, getHtml, activeVoiceRecording]);\n\n  const withBotCommands = isChatWithBot && botMenuButton?.type === 'commands' && !editingMessage\n    && botCommands !== false && !activeVoiceRecording;\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        getHtml={getHtml}\n        isReady={isReady}\n        shouldSuggestCompression={shouldSuggestCompression}\n        isForCurrentMessageList={isForCurrentMessageList}\n        onCaptionUpdate={onCaptionUpdate}\n        onSendSilent={handleSendSilentAttachments}\n        onSend={handleSendAttachments}\n        onSendScheduled={handleSendScheduledAttachments}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachments}\n        onAttachmentsUpdate={handleSetAttachments}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filteredUsers={mentionFilteredUsers}\n        onInsertUserName={insertMention}\n        onClose={closeMentionTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n\n        <InlineBotTooltip\n          isOpen={isInlineBotTooltipOpen}\n          botId={inlineBotId}\n          isGallery={isInlineBotTooltipGallery}\n          inlineBotResults={inlineBotResults}\n          switchPm={inlineBotSwitchPm}\n          loadMore={loadMoreForInlineBot}\n          isSavedMessages={isChatWithSelf}\n          canSendGifs={canSendGifs}\n          isCurrentUserPremium={isCurrentUserPremium}\n          onSelectResult={handleInlineBotSelect}\n          onClose={closeInlineBotTooltip}\n        />\n        <ComposerEmbeddedMessage\n          onClear={handleEmbeddedClear}\n          shouldForceShowEditing={Boolean(shouldForceShowEditing && editingMessage)}\n        />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          getHtml={getHtml}\n          isDisabled={!canAttachEmbedLinks || hasAttachments}\n        />\n        <div className=\"message-input-wrapper\">\n          {withBotMenuButton && (\n            <BotMenuButton\n              isOpen={isBotMenuButtonOpen}\n              text={botMenuButton.text}\n              isDisabled={Boolean(activeVoiceRecording)}\n              onClick={handleClickBotMenu}\n            />\n          )}\n          {withBotCommands && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {isMobile ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={buildClassName('symbol-menu-button', isSymbolMenuOpen && 'activated')}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            ref={inputRef}\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            threadId={threadId}\n            isActive={!hasAttachments}\n            getHtml={getHtml}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && isForCurrentMessageList && !hasAttachments}\n            noFocusInterception={hasAttachments}\n            shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {Boolean(botKeyboardMessageId) && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && Boolean(currentRecordTime) && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            threadId={threadId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {Boolean(botKeyboardMessageId) && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n            onClose={closeStickerTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <SymbolMenu\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isSymbolMenuOpen || isSymbolMenuForced}\n            canSendGifs={canSendGifs}\n            canSendStickers={canSendStickers}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChatWithUser = isUserId(chatId);\n    const messageWithActualBotKeyboard = (isChatWithBot || !isChatWithUser)\n      && selectNewestMessageWithBotKeyboardButtons(global, chatId, threadId);\n    const scheduledIds = selectScheduledIds(global, chatId, threadId);\n    const { language, shouldSuggestStickers, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId && (\n      chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId)\n        ? defaultSendAsId\n        : (chat?.adminRights?.anonymous ? chat?.id : undefined)\n    );\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !user.fullInfo?.noVoiceMessages) ?? true;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n\n    const tabState = selectTabState(global);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      replyingToId,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === tabState.forwardMessages.toChatId,\n      pollModal: tabState.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: tabState.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: tabState.inlineBots.byUsername,\n      isInlineBotLoading: tabState.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n      attachmentSettings: global.attachmentSettings,\n    };\n  },\n)(Composer));\n","import { useCallback, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiAttachment } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\n\nexport default function useAttachmentModal({\n  attachments,\n  fileSizeLimit,\n  setHtml,\n  setAttachments,\n}: {\n  attachments: ApiAttachment[];\n  fileSizeLimit: number;\n  setHtml: (html: string) => void;\n  setAttachments: (attachments: ApiAttachment[]) => void;\n}) {\n  const { openLimitReachedModal } = getActions();\n  const [shouldSuggestCompression, setShouldSuggestCompression] = useState<boolean | undefined>(undefined);\n\n  const handleClearAttachments = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, [setAttachments]);\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (!newAttachments.length) {\n        setAttachments(MEMO_EMPTY_ARRAY);\n        return;\n      }\n\n      if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n      }\n    }, [attachments, fileSizeLimit, openLimitReachedModal, setAttachments],\n  );\n\n  const handleAppendFiles = useCallback(async (files: File[], isSpoiler?: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => (\n        buildAttachment(file.name, file, { shouldSendAsSpoiler: isSpoiler || undefined })\n      ))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleFileSelect = useCallback(async (files: File[], suggestCompression?: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file))));\n    setShouldSuggestCompression(suggestCompression);\n  }, [handleSetAttachments]);\n\n  return {\n    shouldSuggestCompression,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate: setHtml,\n    handleClearAttachments,\n    handleSetAttachments,\n  };\n}\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n  replyingToId?: number,\n): [VoidFunction, VoidFunction, boolean] => {\n  const { editMessage, setEditingDraft } = getActions();\n  const [shouldForceShowEditing, setShouldForceShowEditing] = useState<boolean>();\n\n  useEffectWithPrevDeps(([prevEditedMessage, prevReplyingToId]) => {\n    if (!editedMessage) {\n      return;\n    }\n\n    if (replyingToId && prevReplyingToId !== replyingToId) {\n      setHtml('');\n      setShouldForceShowEditing(false);\n      return;\n    }\n\n    if (prevEditedMessage?.id === editedMessage.id && replyingToId === prevReplyingToId) {\n      return;\n    }\n\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n\n    setHtml(html);\n    setShouldForceShowEditing(true);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- `as const` not yet supported by linter\n  }, [editedMessage, replyingToId, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      const edited = parseMessageInput(getHtml());\n      const update = edited.text.length ? edited : undefined;\n\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, getHtml, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(getHtml());\n    const update = edited.text.length ? edited : undefined;\n\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel, shouldForceShowEditing];\n};\n\nexport default useEditing;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  GENERAL_TOPIC_ID,\n} from '../../config';\nimport { MASK_IMAGE_DISABLED } from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTheme,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat,\n  getMessageSendingRestrictionReason,\n  getForumComposerPlaceholder,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? 450 + ANIMATION_END_DELAY : undefined;\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, threadId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n              isMobile={isMobile}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {isMobile\n                  && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest)) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chats: { listIds }, lastSyncTime } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(chat && isChatGroup(chat) && !chat.fullInfo && lastSyncTime);\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !replyingToId && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        (threadId !== MAIN_THREAD_ID && !chat?.isForum)\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch, selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, getCanManageTopic, isChatAdmin, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const toggleEditTopic = useCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  }, [chatId, openEditTopicPanel, threadId]);\n\n  const handleToggleManagement = useCallback(() => {\n    toggleManagement();\n  }, [toggleManagement]);\n\n  const handleToggleStatistics = useCallback(() => {\n    toggleStatistics();\n  }, [toggleStatistics]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  lastSyncTime?: number,\n  topicId?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n  selectListedIds,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport { pickTruthy } from '../../util/iteratees';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  messageIds?: number[];\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  messageIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel, topicId]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n\n  const chatMessages = useMemo(() => {\n    return messageIds && messagesById ? pickTruthy(messagesById, messageIds) : {};\n  }, [messagesById, messageIds]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages,\n    foundIds,\n    lastSyncTime,\n    topicId,\n  );\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !chatMessages) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !chatMessages[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !chatMessages[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n    const messageIds = selectListedIds(global, chatId, topicId || MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      messageIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './CreateTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default memo(CreateTopicAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './EditTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default memo(EditTopicAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectChat,\n  selectCurrentMessageList, selectTabState,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n    closeCreateTopicPanel, closeEditTopicPanel,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { Thread } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { createLocationHash } from '../../util/routing';\nimport { selectTabState } from '../../global/selectors';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default memo(AttachBotInstallModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\nimport { selectTabState } from '../../global/selectors';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestAnimationFrame(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestAnimationFrame(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { deleteFolderDialogId } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !deleteFolderDialogId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(DraftRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(AttachBotRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { AnimationLevel, LangCode } from '../../types';\nimport type {\n  ApiAttachBot,\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/environment';\nimport {\n  selectChatMessage,\n  selectTabState,\n  selectCurrentMessageList,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport { fastRaf } from '../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport updatePageTitle from '../../util/updatePageTitle';\nimport updateIcon from '../../util/updateIcon';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: AnimationLevel;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUser?: ApiUser;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialogId?: number;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  lastSyncTime,\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  deleteFolderDialogId,\n  isMasterTab,\n}) => {\n  const {\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // If you open the chat in the mobile version, switch to the desktop version, close the chat and\n  // switch back to the mobile version, you get a blank screen\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isMiddleColumnOpen && !isLeftColumnOpen && !isDesktop) {\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachBots, loadContactList,\n    loadPremiumGifts, checkAppVersion, loadConfig, loadGenericEmojiEffects, loadDefaultTopicIcons, isMasterTab,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime && isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime, isMasterTab, loadCustomEmojis]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [\n    lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds,\n    isMasterTab,\n  ]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (lastSyncTime && parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [lastSyncTime]);\n\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    if (!prevLastSyncTime && lastSyncTime) {\n      openChat({\n        id: parsedLocationHash.chatId,\n        threadId: parsedLocationHash.threadId,\n        type: parsedLocationHash.type,\n      });\n    }\n  }, [lastSyncTime, openChat]);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [animationLevel, forceUpdate, isLeftColumnOpen]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useSyncEffect(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (animationLevel === 0) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [animationLevel, forceUpdate, isRightColumnOpen]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  }, [onTabFocusChange]);\n\n  const handleFocus = useCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [onTabFocusChange]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    closeStickerSetModal();\n  }, [closeStickerSetModal]);\n\n  const handleCustomEmojiSetsModalClose = useCallback(() => {\n    closeCustomEmojiSets();\n  }, [closeCustomEmojiSets]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className}>\n      <LeftColumn />\n      <MiddleColumn isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequestBot} type={botTrustRequest?.type} />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog deleteFolderDialogId={deleteFolderDialogId} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          animationLevel, language, wasTimeFormatSetManually,\n        },\n      },\n      lastSyncTime,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n\n    return {\n      lastSyncTime,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUser,\n      urlAuth,\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialogId: deleteFolderDialogModal,\n      isMasterTab,\n      requestedDraft,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 180000; // 3 minutes\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(\n    resetInvalidUnlockAttempts,\n    invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? TIMEOUT_RESET_INVALID_ATTEMPTS_MS\n      : undefined,\n  );\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [invalidAttemptsCount, lang, logInvalidUnlockAttempt, unlockScreen]);\n\n  useEffect(() => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [invalidAttemptsCount, lang]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { IS_MULTITAB_SUPPORTED } from '../util/environment';\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","tabId","getCurrentTabId","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","undefined","replaceLocalTextSearchResults","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","selectTabState","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","noForumTopicPanel","currentMessageList","tabState","premiumModal","promo","isOpen","updateTabState","replaceTabThreadParam","exitMessageSelectMode","isStatisticsShown","contentToBeScheduled","forwardMessages","toChatId","selectChat","isForum","openForumPanel","forumPanelChatId","closeForumPanel","updateCurrentMessageList","window","open","createMessageHashUrl","isChatInfoShown","lastIsChatInfoShown","setGlobal","openChat","text","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","folderId","deleteFolderDialogModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectChatScheduledMessages","selectChatMessages","messages","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","result","reduce","acc","sender","selectSender","push","getSenderTitle","emoji","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","join","getMessageSummaryDescription","renderMessageSummaryHtml","resultText","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","replaceThreadParam","messageId","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","lastMessage","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","getIsMobile","pollResults","voters","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","hasReached","updateFocusedMessageReached","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","RELEASE_DATETIME","Date","now","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","content","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","chat","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","isClosing","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickerSearch","resultIds","gifSearch","offset","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","updateIcon","asUnread","document","querySelectorAll","link","href","replace","updatePageTitle","nextTitle","title","notificationInterval","force","leftColumnWidth","management","isActive","screen","nextScreen","getIsTablet","isLeftColumnShown","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","sticker","recent","stickers","hash","newStickers","s","documentId","recentCustomEmojis","order","isCustomEmoji","added","setIds","customEmojis","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","selectIsTrustedBot","botTrustRequest","onConfirm","action","openedGame","top","left","width","height","animationLevel","settings","byKey","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","topicId","editTopicPanel","APP_VERSION_REGEX","fetch","then","response","trim","test","isUpdateAvailable","catch","DEBUG","console","error","multitabNextAction","reestablishMasterToSelf","isBlurred","token","updateIsOnline","blurredTabTokens","t","getAllMultitabTokens","clearInterval","setInterval","notificationIndex","allNotificationsCount","getAllNotificationsCount","initialUnreadNotifications","addCallback","index","INACTIVE_MARKER","PAGE_TITLE","newUnread","status","payment","clearPayment","closeInvoice","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","isHidden","noLockOnUnload","onBeforeUnload","passcode","hasPasscode","byTabId","clearStoredSession","async","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","currentUserId","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","values","session","parse","storeSession","previousGlobal","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","isScreenLocked","invalidAttemptsCount","isMasterTab","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","offsetId","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","callApi","selectThreadOriginChat","users","repliesThreadInfos","localMessages","isDeleted","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","replyingToTopId","delete","getAttachmentType","shouldSendAsFile","mimeType","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","isRestricted","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","updateChatMessage","replyMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","omit","scheduledAt","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","arr","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","isFirst","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","draft","user","selectUser","isDeletedUser","replyToMsgId","isLocal","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","topId","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","translate","isUserBot","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","topics","topic","updateThreadInfo","lastReadInboxMessageId","newTopicUnreadCount","updateTopic","webPagePreview","options","poll","option","shouldResetVoters","offsets","nextOffset","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","selectThreadIdFromMessage","scheduledInThread","entries","scheduledIds","selectScheduledMessage","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","customEmoji","seenByUserIds","sendAsId","sendAsChat","fullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","URL","autologinDomains","hostname","searchParams","autologinToken","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","showDialog","getUserFullName","closeMediaViewer","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchWords","updateStickerSearch","config","gifSearchUsername","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","searchMessagesGlobal","offsetRate","maxDate","minDate","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","searchSharedMedia","SHARED_MEDIA_SLICE","topMessageId","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","releaseStatusTimeout","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","timestampPlusDay","foundIds","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","timestamp","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","isChatBasicGroup","migrateChat","invite","editingInvite","update","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","currentChatId","currentThreadId","activeThreadId","threadInfo","activeCurrentChatId","originChannelId","draftsByChatId","editingDraft","selectEditingDraft","currentChat","lastReadInboxId","newCurrentChatId","currentChatMessages","topicLastMessages","otherTabId","tabThreads","otherChatId","otherThreadId","updateChats","updateUsers","updateThread","loadTopics","loadTopicById","shouldCloseChatOnError","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","connectionState","authState","getActions","sync","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","newUser","hasChangedAvatarHash","avatarHash","hasChangedProfilePhoto","profilePhoto","hasChangedFallbackPhoto","fallbackPhoto","hasChangedPersonalPhoto","personalPhoto","photos","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","isPrivate","isUserId","userOrChat","userSearch","updateUserSearchFetchingStatus","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","isWriteAllowed","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","openUrl","openGame","alert","isError","buildQueryString","k","getPaymentForm","inputInvoice","form","invoice","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","button","openPollModal","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","slug","trustedBotIds","newTrustedBotIds","add","Array","callbackPayload","requestedAttachBotInstall","botUser","actionPayload","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","isPaymentModalOpen","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","step","isClosed","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","localEffect","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","selectLocalAnimatedEmojiEffectByName","timestamps","reaction","selectDefaultReaction","isMessageLocal","toggleReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","userReactions","getUserReactions","hasReaction","some","userReaction","isSameReaction","newUserReactions","selectMaxUserReactions","reactions","ANIMATION_LEVEL_MAX","newActiveReactions","activeReactions","currentReactions","isReactionChosen","chosenOrder","existingIndex","r","recentReactions","addMessageReaction","active","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","isGroup","stats","recentTopMessages","msgId","updateStatistics","views","forwards","dcId","statisticsDcId","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","prevIsForum","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","ANIMATION_DELAY","updateReactions","areDeepEqual","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","messagesCount","firstUnreadId","candidateGlobal","updateChatLastMessage","currentLastMessage","selectTopicFromMessage","findLastMessage","deleteMessages","newLastMessage","deleteTopic","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","repliesThreadInfo","isTopicReply","selectIsMessageInCurrentMessageList","getMessageText","localEmoji","selectLocalAnimatedEmoji","selectLocalAnimatedEmojiEffect","selectScheduledIds","threadScheduledIds","deleteChatScheduledMessages","thread","markMessageListRead","pickTruthy","updatePerThread","currentUpdatedInThread","pinnedIds","selectPinnedIds","newPinnedIds","currentThreadInfo","newThreadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","isChosen","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","media","preview","extendedMedia","isPending","transcriptions","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","loadFullUser","emojiStatus","statusUpdate","targetUser","botInfo","menuButton","addBlockedContact","loadFavoriteStickers","oldOrder","newOrder","reorderStickerSets","loadStickerSets","loadSavedGifs","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSoundsForSafari","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isMinimized","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","ANIMATION_LEVEL_OPTIONS","withGlobal","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","shouldHideSearch","contactsFilter","onSearchQuery","isClosingSearch","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","isMobile","useAppLayout","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","total","isChatArchived","handleLockScreenHotkey","useCallback","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ripple","ariaLabel","buildClassName","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","newTheme","shouldUseSystemTheme","switchTheme","handleAnimationLevelChange","newLevel","_","classList","toggle","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","localStorage","setItem","clearWebsync","handleSwitchToLegacy","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","menuItems","MenuItem","icon","Switcher","label","checked","noAnimation","getPromptInstall","DropdownMenu","trigger","footer","APP_NAME","positionX","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","shouldSkipHistoryAnimations","activeChatFolder","isForumPanelOpen","selectIsForumPanelOpen","maxFolders","foldersDispatch","onScreenSelect","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","transitionRef","useRef","allChatsFolder","ALL_FOLDER_ID","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","forceOnHeavyAnimation","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","shouldRenderFolders","TabList","tabs","activeTab","onSwitchTab","areFolders","ref","renderCount","LeftSearch","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderForumPanel","handleForumPanelAnimationEnd","useForumPanelRender","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","reload","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","ForumPanel","onCloseAnimationEnd","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","nextSettingsScreen","isFirstChatFolderActive","isChatOpen","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleTopicSearch","handleHotkeySearch","handleHotkeySavedMessages","handleHotkeySettings","IS_MAC_OS","useSyncEffect","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","useFlag","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","style","setProperty","remove","useLayoutEffect","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","drawRect","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","isSpoiler","getMessageIsSpoiler","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","srcUrl","src","alt","MediaSpoiler","isVisible","renderPictogram","renderText","MessageSummary","noEmoji","RippleEffect","shouldStopPropagation","LUMA_THRESHOLD","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","averageColor","getAverageColor","fillColor","getColorLuma","res","canvas","createElement","ctx2D","getContext","fillStyle","fillRect","ctx","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","globalCompositeOperation","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","fileName","artist","performer","album","getChatTitle","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onContextMenu","volumeIcon","renderAudio","subtitle","renderVoice","disabled","RangeSlider","bold","forceOpen","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","confirmIsDestructive","Checkbox","onCheck","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatChannel","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","focusedMessage","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","selectIsChatWithSelf","currentTransitionKey","hasButtonInHeader","hasReachedFocusedMessage","hasReachedMessage","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","pinMessage","openPreviousChat","setReachedFocusedMessage","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isWaitingForPinnedMessageFocus","setWaitingForPinnedMessageFocus","isTablet","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","cycleRestrict","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","handleAllPinnedClick","setBackButtonActive","handleBackClick","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","usePrevious","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","withVideoAvatar","emojiStatusSize","noRtl","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","getMessageKey","HeaderActions","canExpandActions","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","dependencies","debugKey","prevDeps","INTERSECTION_THROTTLE_FOR_MEDIA","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","asForwarded","noAvatars","isOwn","isOwnMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","isWebPageVideo","getMessageWebPageVideo","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","fontFamily","calculateAuthorWidth","getComputedStyle","documentElement","getPropertyValue","font","whiteSpace","opacity","appendChild","textContent","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","target","contains","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","getBoundingClientRect","isVisibleX","isVisibleY","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","ContextMenuContainer","openMediaViewer","uploadProfilePhoto","cropModalBlob","setCropModalBlob","isVideoModalOpen","openVideoModal","closeVideoModal","suggestedPhotoUrl","showAvatarNotification","actionText","handleSetSuggestedAvatar","handleCloseCropModal","handleSetVideo","File","videoTs","videoSizes","videoStartTs","role","MediaViewerOrigin","Avatar","showVideoOverwrite","loopIndefinitely","withVideo","CropModal","textParts","usersById","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","isChat","senderUser","senderChat","premiumGiftSticker","isEmbedded","appearanceOrder","isLastInList","isInsideTopic","memoFirstUnreadIdRef","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","requestConfetti","useOnIntersect","noAppearanceAnimation","markShown","isSuggestedAvatar","useIsIntersecting","shouldShowConfettiRef","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","AnimatedIconFromSticker","play","noLoop","nonInteractive","anchor","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","outgoingStatus","signature","withReactionOffset","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","observeIntersection","shouldLoop","shouldPlayEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","openModal","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","withSharedAnimation","cacheBuster","AnimatedSticker","tgsUrl","isLowPriority","onEnded","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","performance","interactionMessageId","withEffects","localSticker","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","forceLoadPreview","AnimatedIconWithPreview","LOCAL_TGS_URLS","quality","forcePreview","LIKE_STICKER_ID","customEmojiId","getCustomEmojiSize","CustomEmoji","isBig","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","crossOrigin","getImageData","getAppendixColorFromImage","useBlurredMediaThumbRef","useCanvasBlur","getMessageMediaThumbDataUri","IS_CANVAS_FILTER_SUPPORTED","canAutoLoad","uploadProgress","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","fullMediaData","withThumb","noThumb","thumbRef","thumbClassNames","useMediaTransition","isSpoilerShown","hideSpoiler","downloadProgress","getMessageMediaFormat","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","MESSAGE_CONTENT_SELECTOR","CUSTOM_APPENDIX_ATTRIBUTE","contentEl","appendixBg","dimensionsStyle","ProgressSpinner","withAnimation","canAutoPlay","videoRef","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","isPlayerReady","markPlayerReady","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","isInline","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","cancelMessageMediaDownload","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","isRegistered","formatPhoneNumberWithCode","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","getServerTimeOffset","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","siteName","displayUrl","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","SafeLink","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","Skeleton","forceAspectRatio","loadExtendedMedia","refreshExtendedMedia","useInterval","dataUri","VENUE_COLORS","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","prevShouldRenderText","long","useTimeout","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","playerRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","shouldPlay","stopPlaying","fastRaf","capturePlaying","paused","stopCurrentAudio","renderIcon","recentReplierIds","recentRepliers","hasUnread","commentsText","AnimatedCounter","stickerHash","getStickerPreviewHash","previewMediaData","paths","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","path","CENTER_ICON_SIZE","EFFECT_SIZE","genericEffects","stopActiveReaction","centerIconId","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","onLoad","withRecentReactors","recentReactors","recentReaction","isOutside","metaChildren","noRecentReactors","getReactionUniqueKey","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","APPENDIX_OWN","APPENDIX_NOT_OWN","QUICK_REACTION_SIZE","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","isLocation","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","selectOutgoingStatus","observeIntersectionForBottom","noComments","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","openAudioPlayer","sendPollVote","focusMessageInComments","replyToTopMessageId","channelPostId","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","clientHeight","isAnimatingScroll","resizeDiff","offsetHeight","scrollHeight","scrollTop","useResizeObserver","bottomMarker","isElementInViewport","calculatedWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","postAuthorTitle","metaSafeAuthorWidth","renderReactionsAndMeta","meta","forwardAuthor","chatUsername","c","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","fakeType","FakeIcon","renderSenderName","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","DotAnimation","MessageText","withTranslucentThumbs","renderContent","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","mentionIds","reactionIds","dataset","useBackgroundMode","margin","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","toggleScrollToolsRef","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","isChatLoaded","isChannelChat","isGroupChat","isCreator","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","withDefaultBg","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getDocumentMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","useStickyDates","handleScroll","parentElement","contentRect","windowHeight","normalHeight","String","preservedItemElements","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","patchChromiumScroll","resetScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","isEmptyTopic","isBotInfoEmpty","onScroll","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","FILE_EXT_REGEX","buildAttachment","filename","quick","preloadImage","shouldShrink","GIF_MIME_TYPE","compressedBlobUrl","resizedUrl","videoWidth","videoHeight","preloadVideo","createPosterForVideo","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","uniqueId","prepareAttachmentsToSend","shouldSendCompressed","attach","shouldSendAsSpoiler","resetInput","applyIosAutoCapitalizationFix","inputEl","STARTS_ENDS_ON_EMOJI_IMG_REGEX","RegExp","EMOJI_IMG_REGEX","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","GDOCS_ELEMENT_ID_REGEXP","parseHtml","html","DOMParser","parseFromString","wrapNodeAnchor","node","cloneNode","wrapNodeInline","wrapNode","inner","newNode","fontWeight","fontStyle","textDecoration","verticalAlign","applyInlineStyles","dirty","createTextNode","styledNode","nodeName","childNodes","getCleanNode","newWrapper","createDocumentFragment","items","applyBlockStyles","nodes","filterNode","nodeType","STYLE_TAG_REGEX","insertTextAndUpdateCursor","setAttachments","editedMessage","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_ID","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","pastedFormattedText","fragment","clipboardContent","filteredNodes","cleanNodes","getCleanDocument","textContents","getElementsByTagName","HTMLElement","tagName","replaceWith","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","innerText","ApiMessageEntityTypes","trimEnd","preparePastedHtml","containsCustomEmoji","stripCustomEmoji","getFilesFromDataTransferItems","newAttachments","textToPaste","isFrozen","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","buildQueryStateMemo","memoized","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","COLOR_REPLACE_PATTERN","iconSvg","mediaDataWithReplacedColors","doc","stroke","strokeWidth","outerHTML","IS_COMPACT_MENU","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","menuPosition","setMenuPosition","rect","right","bottom","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","Portal","destructive","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","shouldSuggestCompression","validatedFiles","validateFiles","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","SymbolMenu","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","keyboardButtons","noCompact","shouldForceShowEditing","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useContextMenuPosition","leftIcon","strippedMessage","strippedText","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","getHtml","loadWebPagePreview","toggleMessageWebPage","detectLinkDebounced","useDebouncedResolver","linkEntity","entity","getLink","useDerivedSignal","useDerivedState","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","VOICE_RECORDING_FILENAME","REPLIES_USER_ID","isChatWithUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","adminRights","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","selectEditingScheduledDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","dropAreaState","onDropHide","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","loadScheduledHistory","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","appendixRef","inputRef","setHtml","useSignal","getSelectionRange","useGetSelectionRange","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","processMessageInputForCustomEmoji","customEmojiNotificationNumber","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","hasAttachments","handleAppendFiles","onCaptionUpdate","handleClearAttachments","handleSetAttachments","setShouldSuggestCompression","newValue","suggestCompression","useAttachmentModal","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","isEditingRef","useStateRef","canSendStickers","canSendGifs","canAttachEmbedLinks","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","useEmojiTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isStickerTooltipOpen","closeStickerTooltip","loadStickersForEmoji","clearStickersForEmoji","isManuallyClosed","markManuallyClosed","unmarkManuallyClosed","getSingleEmoji","IS_EMOJI_SUPPORTED","twemojiRegex","cleanHtml","prepareForRegExp","parseEmojiOnlyString","hasStickers","useStickerTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetAllInlineBots","extractBotQueryThrottled","useThrottledResolver","getPlainText","parseBotQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","detectCommandThrottled","getCommand","nextFilteredBotCommands","useBotCommandTooltip","insertHtmlAndUpdateCursor","newHtml","selection","getSelection","messageInput","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","removeSymbol","execCommand","tempInput","contentEditable","lastChild","textLength","range","createRange","setStart","setEnd","removeAllRanges","addRange","removeChild","deleteLastCharacterOutsideSelection","saveDraft","isEditing","updateDraft","prevState","updateDraftRef","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevDraft","customEmojiIds","chatIdRef","threadIdRef","scopedShatId","scopedThreadId","useDraft","resetComposer","shouldPreserveInput","handleEditComplete","handleEditCancel","editMessage","setEditingDraft","setShouldForceShowEditing","prevEditedMessage","prevReplyingToId","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","useEditing","resetComposerRef","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isCustomSendMenuOpen","useClipboardPaste","handleEmbeddedClear","validateTextLength","isAttachmentModal","maxLength","extraLength","textParams","checkSlowMode","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","sendAttachments","attachmentsToSend","sendCompressed","sendGrouped","shouldUpdateStickerSetsOrder","handleSendAttachments","handleSend","currentAttachments","record","handleClickBotMenu","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleMessageSchedule","args","restArgs","handleCustomEmojiSelect","isFree","isScheduleRequested","handleGifSelect","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","sendSilent","additionalArgs","handleSearchOpen","handleSymbolMenuOpen","handleSendAsMenuOpen","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","handleSendScheduled","handleSendSilent","handleSendScheduledAttachments","handleSendSilentAttachments","onSend","withBotMenuButton","isBotMenuButtonOpen","withBotCommands","DropAreaState","withQuick","onSendSilent","onSendScheduled","onFileAppend","onAttachmentsUpdate","shouldBeAnonymous","selectedSendAsId","filteredUsers","onInsertUserName","withUsername","isSavedMessages","onSelectResult","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onCustomEmojiSelect","onStickerSelect","onEmojiSelect","onGifSelect","onRemoveSymbol","onSearchOpen","allowDisabledClick","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","isImage","kind","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","shouldJoinToSend","isJoinToSend","shouldLoadFullChat","shouldBlockSendInForum","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","unpinAllMessages","loadUser","joinChannel","restartBot","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","customBackgroundValue","settingValue","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","isEditingInvite","canViewStatistics","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","ManagementScreens","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","CreateTopic","EditTopic","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","renderingActiveTab","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","isFirstTab","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","resetCacheBuster","setCacheBuster","useCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","adminMember","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewer","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createLocationHash","messageList","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","CONFETTI_COLORS","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","beginPath","ellipse","fill","hideTimeout","prevConfettiTime","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","deleteFolderDialogId","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","DEBUG_isLogged","wasTimeFormatSetManually","currentUser","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","isPremiumModalOpen","limitReached","isReceiptModalOpen","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","isDesktop","langCode","prevLastSyncTime","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","usePreventPinchZoomGesture","stickerSetShortName","passcodeSettings","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}