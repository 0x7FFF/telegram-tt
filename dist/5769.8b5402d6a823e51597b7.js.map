{"version":3,"file":"5769.8b5402d6a823e51597b7.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.module.scss?16ed","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/util/permanentWebVersion.ts","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/util/primitives/LimitedMap.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/common/EmbeddedStory.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/hooks/useAuthorWidth.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/modals/mapModal/MapModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\nimport { selectSendAs, selectTabState } from '../selectors';\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat, ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction, ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { omit, pickTruthy, unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  deleteTopic,\n  updateMessageTranslations,\n  clearMessageTranslation,\n  removeChatFromChatLists,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsServiceChatReady,\n  selectThreadIdFromMessage,\n  selectTopicFromMessage,\n  selectTabState,\n  selectSendAs,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions, isActionMessage,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !message.replyToStoryId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo && !isLocal) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageLocalId: omit(global.fileUploads.byMessageLocalId, [localId.toString()]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (threadInfo.topMessageId === threadId && !chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = newThreadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const currentSendAs = selectSendAs(global, message.chatId);\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(peerId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (currentSendAs?.id === peerId || peerId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message) && !isActionMessage(message)) {\n      global = updateThreadInfo(global, chatId, threadInfo.threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiTypeReplyTo,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceSettings,\n  replaceThreadParam,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectTranslationLanguage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStory,\n  selectViewportIds,\n} from '../../selectors';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport {\n  getMessageOriginalId,\n  getUserFullName, isChatChannel,\n  isDeletedUser, isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport { translate } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, userId: storyUserId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyUserId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyUserId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const replyingToId = !isStoryReply ? selectReplyingToId(global, chatId!, threadId!) : undefined;\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId!, replyingToId) : undefined;\n\n  const replyingToTopId = chat.isForum\n    ? selectThreadTopMessageId(global, chatId!, threadId!)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n  const replyingTo: ApiTypeReplyTo | undefined = replyingToId\n    ? { replyingTo: replyingToId, replyingToTopId }\n    : (isStoryReply ? { userId: storyUserId!, storyId: storyId! } : undefined);\n\n  const params = {\n    ...payload,\n    chat,\n    currentThreadId: threadId!,\n    replyingTo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n  };\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        });\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          });\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyingTo: replyingToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyingTo: replyingToForFirstMessage,\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, draft, shouldForce,\n  } = payload;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  draft.isLocal = true;\n  draft.shouldForce = shouldForce;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (result) {\n    draft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, localOnly, shouldForce,\n  } = payload;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  const newDraft: ApiDraft | undefined = shouldForce ? { shouldForce, text: '' } : undefined;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n      });\n    })();\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyingTo: toThreadId ? { replyingTo: toThreadId, replyingToTopId: toThreadId } : undefined,\n        currentThreadId: toThreadId || MAIN_THREAD_ID,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const originChannelId = selectThreadOriginChat(global, chatId, threadId)?.id;\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, chatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId) || {};\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(threadId);\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingList! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: ApiTypeReplyTo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  currentThreadId: number;\n  groupedId?: string;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  if (params.currentThreadId === undefined) {\n    return;\n  }\n\n  if (params.currentThreadId !== MAIN_THREAD_ID) {\n    if (!params.replyingTo || !('replyingTo' in params.replyingTo)) {\n      params.replyingTo = {\n        replyingTo: params.currentThreadId,\n      };\n    }\n\n    if (!params.replyingTo.replyingTo) {\n      params.replyingTo.replyingTo = params.currentThreadId;\n    }\n    if (params.replyingTo.replyingTo && !params.replyingTo.replyingToTopId) {\n      params.replyingTo.replyingToTopId = params.currentThreadId;\n    }\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n  const isStoriesViewerOpen = Boolean(selectTabState(global, tabId).storyViewer.userId);\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    if (isStoriesViewerOpen) {\n      actions.closeStoryViewer({ tabId });\n    }\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      if (isStoriesViewerOpen) {\n        actions.closeStoryViewer({ tabId });\n      }\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    let fullInfo = selectUserFullInfo(global, chatId);\n    if (!fullInfo) {\n      const { accessHash } = user;\n      const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n      user = result?.user;\n      fullInfo = result?.fullInfo;\n    }\n\n    if (fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectUserStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    currentThreadId: MAIN_THREAD_ID,\n    text,\n    entities,\n    story,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      views: update.views,\n      forwards: update.forwards,\n    });\n\n    const message = selectChatMessage(global, chatId, update.id);\n    if (!message) return;\n\n    const repliesChatId = message.repliesThreadInfo?.chatId;\n    const threadId = message.repliesThreadInfo?.threadId;\n    if (!repliesChatId || !threadId) return;\n\n    global = updateThreadInfo(global, repliesChatId, threadId, {\n      messagesCount: update.messagesCount,\n      recentReplierIds: update.recentReplierIds,\n      lastMessageId: update.maxId,\n      lastReadInboxMessageId: update.readMaxId,\n    });\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectTabState, selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { translate } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiChat, ApiTopic, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateTopics,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery, selectTabState } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        localChats, localUsers, globalChats, globalUsers,\n      } = result;\n\n      if (localChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n      }\n\n      if (localUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: localChats.map(({ id }) => id),\n          userIds: localUsers.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport { MAIN_THREAD_ID, type ApiChat } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/langProvider';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread, updateThreadInfo,\n  updateThreadInfos,\n  updateUsers,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId, selectReplyingToId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport { updateTabState } from '../../reducers/tabs';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = {\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n          replyingToId: selectReplyingToId(global, chatId, Number(threadId)),\n        };\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = allMessages.map(({ id }) => id);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        if (threadInfo?.originChannelId) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, threadInfo);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        if (result.repliesThreadInfos.length) {\n          global = updateThreadInfos(global, result.repliesThreadInfos);\n        }\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { translate } from '../../../util/langProvider';\nimport { addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatarHash\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  setGlobal(global);\n  if (withPhotos || (user.photos?.length && hasChangedPhoto)) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadUserStories({ userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, profileId);\n  if (user && !fullInfo?.profilePhoto) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n\n    user = result.user;\n    fullInfo = result.fullInfo;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n\n  const fallbackPhoto = fullInfo?.fallbackPhoto;\n  const personalPhoto = fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload!;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n","import type { GlobalState, TabArgs } from '../types';\nimport type { InlineBotSettings } from '../../types';\nimport { updateTabState } from './tabs';\nimport { selectTabState } from '../selectors';\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState, selectBot,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser, selectThreadTopMessageId, selectUserFullInfo,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedUser } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { translate } from '../../../util/langProvider';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, threadId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, MAIN_THREAD_ID, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    botId = message.viaBotId || message.senderId;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n  const replyingToTopId = (chat.isForum || threadId !== MAIN_THREAD_ID)\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: replyingToId || replyingToTopId,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: translate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive && !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  await loadAttachBots(global, hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(global, bot, isEnabled, isWriteAllowed);\n});\n\nasync function toggleAttachBot<T extends GlobalState>(\n  global: T, bot: ApiUser, isEnabled: boolean, isWriteAllowed?: boolean,\n) {\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n  global = getGlobal();\n  await loadAttachBots(global);\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, bot, url, startParam, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isFromBotMenu = !bot;\n  if (!isFromBotMenu && !global.attachMenu.bots[bot.id]) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload,\n        },\n      },\n    }, tabId);\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId, threadId, tabId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId: isFromBotMenu ? chatId : bot.id,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n    tabId,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  await toggleAttachBot(global, botUser, true, isWriteAllowed);\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, threadId = MAIN_THREAD_ID, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyingTo: replyingTo ? {\n      replyingTo,\n      replyingToTopId: threadId,\n    } : undefined,\n    text: command,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice, selectTabState,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  isSameReaction, getUserReactions, isMessageLocal, getDocumentMediaHash,\n} from '../../helpers';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation), ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const tabState = selectTabState(global, tabId);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    const newActiveReactions = hasReaction ? omit(tabState.activeReactions, [messageId]) : {\n      ...tabState.activeReactions,\n      [messageId]: [\n        ...(tabState.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = updateTabState(global, {\n      activeReactions: newActiveReactions,\n    }, tabId);\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { messageId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = tabState.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [messageId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: [],\n  };\n  setGlobal(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  updateStatistics, updateMessageStatistics, updateStatisticsGraph, addUsers,\n} from '../../reducers';\nimport { selectChatMessages, selectChat, selectChatFullInfo } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType } from '../../types';\n\nimport { DEBUG, PREVIEW_AVATAR_COUNT } from '../../../config';\nimport {\n  addStories,\n  addStoriesForUser,\n  addUsers,\n  removeUserStory,\n  toggleUserStoriesHidden,\n  updateLastReadStoryForUser,\n  updateLastViewedStoryForUser,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n  updateUser,\n  updateUserPinnedStory,\n  updateUserStory,\n  updateUsersWithStories,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  selectUser, selectUserStories, selectUserStory,\n} from '../../selectors';\nimport { getServerTime } from '../../../util/serverTime';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { translate } from '../../../util/langProvider';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('userStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addStories(global, result.userStories);\n      global = updateUsersWithStories(global, result.userStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('userStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addStories(global, result.userStories);\n      global = updateUsersWithStories(global, result.userStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadUserSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  const userStories = selectUserStories(global, userId);\n  if (!user || !userStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(userStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchUserStoriesByIds', {\n    user,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addStoriesForUser(global, userId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { userId, storyId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, userId);\n  const story = selectUserStory(global, userId, storyId);\n  if (!user || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForUser(global, userId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isPinned) {\n    void callApi('viewStory', { user, storyId });\n  }\n\n  const isUnread = (global.stories.byUserId[userId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    user,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForUser(global, userId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { storyId } = payload;\n\n  const result = await callApi('deleteStory', { storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeUserStory(global, global.currentUserId!, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryPinned', async (global, actions, payload): Promise<void> => {\n  const { storyId, isPinned } = payload;\n\n  const story = selectUserStory(global, global.currentUserId!, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isPinned : undefined;\n  global = updateUserStory(global, global.currentUserId!, storyId, { isPinned });\n  global = updateUserPinnedStory(global, global.currentUserId!, storyId, isPinned);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryPinned', { storyId, isPinned });\n  if (!result) {\n    global = getGlobal();\n    global = updateUserStory(global, global.currentUserId!, storyId, { isPinned: currentIsPinned });\n    global = updateUserPinnedStory(global, global.currentUserId!, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadUserStories', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUserStories', { user });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addStoriesForUser(global, userId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForUser(global, userId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadUserPinnedStories', async (global, actions, payload): Promise<void> => {\n  const { userId, offsetId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUserPinnedStories', { user, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addStoriesForUser(global, userId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { offsetId } = payload;\n  const currentUserId = global.currentUserId!;\n\n  const result = await callApi('fetchStoriesArchive', { currentUserId, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addStoriesForUser(global, currentUserId, result.stories, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadUserStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { userId, storyIds } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUserStoriesByIds', { user, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addStoriesForUser(global, userId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const {\n    storyId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isPreload = 'isPreload' in payload;\n  const {\n    offset, areReactionsFirst, areJustContacts, query, limit,\n  } = isPreload ? {\n    offset: undefined,\n    areReactionsFirst: undefined,\n    areJustContacts: undefined,\n    query: undefined,\n    limit: PREVIEW_AVATAR_COUNT,\n  } : payload;\n\n  if (!isPreload) {\n    global = updateStoryViewsLoading(global, true, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('fetchStoryViewList', {\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const viewsById = buildCollectionByKey(result.views, 'userId');\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  if (!isPreload) global = updateStoryViews(global, storyId, viewsById, result.nextOffset, tabId);\n\n  if (isPreload && result.views?.length) {\n    const recentViewerIds = result.views.map((view) => view.userId);\n    global = updateUserStory(global, global.currentUserId!, storyId, {\n      recentViewerIds,\n      viewsCount: result.viewsCount,\n      reactionsCount: result.reactionsCount,\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    userId,\n    storyId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('reportStory', {\n    user,\n    storyId,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    storyId,\n    privacy,\n  } = payload;\n\n  const allowedUserList = privacy.allowUserIds?.map((userId) => selectUser(global, userId)).filter(Boolean);\n  const deniedUserList = privacy.blockUserIds?.map((userId) => selectUser(global, userId)).filter(Boolean);\n  void callApi('editStoryPrivacy', {\n    id: storyId,\n    visibility: privacy.visibility,\n    allowedUserList,\n    deniedUserList,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { userId, isHidden } = payload;\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  const result = await callApi('toggleStoriesHidden', { user, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = toggleUserStoriesHidden(global, userId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n  const users = userIds.map((userId) => selectUser(global, userId)).filter(Boolean);\n  if (!users.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { users });\n  if (!result) return;\n\n  const userIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const user = users[i];\n    global = updateUser(global, user.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n    if (maxId !== 0) {\n      userIdsToLoad.push(user.id);\n    }\n  });\n  setGlobal(global);\n\n  userIdsToLoad?.forEach((userId) => actions.loadUserStories({ userId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, storyId, reaction, shouldAddToRecent,\n  } = payload;\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  const story = selectUserStory(global, userId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateUserStory(global, userId, storyId, {\n    sentReaction: reaction,\n  });\n  setGlobal(global);\n\n  const result = await callApi('sendStoryReaction', {\n    user, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateUserStory(global, userId, storyId, {\n      sentReaction: previousReaction,\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { IS_ELECTRON } from '../../../config';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== id\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\nimport type {\n  GlobalState, ActionReturnType,\n} from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  replaceTabThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n  cancelMessageMediaDownload,\n  addActiveMessageMediaDownload,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectChatScheduledMessages,\n  selectTabState,\n  selectRequestedMessageTranslationLanguage,\n  selectPinnedIds,\n  selectRequestedChatTranslationLanguage,\n} from '../../selectors';\nimport { compact, findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle, isChatChannel } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      const chat = selectChat(global, chatId);\n\n      lastMessageId = chat?.lastMessage?.id;\n    }\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, threadId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openChat({\n      id: chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return cancelMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  for (const message of messages) {\n    global = cancelMessageMediaDownload(global, message, tabId);\n  }\n\n  return global;\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return addActiveMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { IS_ELECTRON } from '../config';\nimport { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE, IS_ELECTRON,\n} from '../../../config';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectTabState,\n} from '../../selectors';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport { compact, unique } from '../../../util/iteratees';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\nimport * as langProvider from '../../../util/langProvider';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  if (IS_ELECTRON) {\n    return;\n  }\n\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsAppUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : PAGE_TITLE);\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { DEFAULT_PLAYBACK_RATE } from '../../../config';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: (\n        playbackRate\n        || tabState.mediaViewer.playbackRate\n        || global.mediaViewer.lastPlaybackRate\n        || DEFAULT_PLAYBACK_RATE\n      ),\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { SettingsScreens } from '../../../types';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import { addActionHandler } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (id) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId: id,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    storyUserId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyUserId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyUserId: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType } from '../../types';\nimport type { ApiStoryView } from '../../../api/types';\n\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectTabState,\n  selectUser,\n  selectUserFirstStoryId,\n  selectUserFirstUnreadStoryId,\n  selectUserStories,\n} from '../../selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { fetchChatByUsername } from '../api/chats';\nimport { addStoriesForUser, addUsers } from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, storyId, isSingleUser, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const userStories = selectUserStories(global, userId);\n\n  if (storyId && (!userStories || !userStories.byId[storyId])) {\n    const result = await callApi('fetchUserStoriesByIds', { user, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addStoriesForUser(global, userId, result.stories);\n  }\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      userId,\n      storyId: storyId || selectUserFirstUnreadStoryId(global, userId) || selectUserFirstStoryId(global, userId),\n      isSingleUser,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    userId: chat.id,\n    storyId,\n    isSingleUser: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByUserIds: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedUserIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    userId, storyId, isSingleUser, isSingleStory, isPrivate, isArchive,\n  } = tabState.storyViewer;\n\n  if (isSingleStory) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  const { orderedUserIds: { active, archived } } = global.stories;\n  if (!userId || !storyId) {\n    return undefined;\n  }\n\n  const user = selectUser(global, userId);\n  const userStories = selectUserStories(global, userId);\n  if (!userStories || !user) {\n    return undefined;\n  }\n\n  const orderedUserIds = (user.areStoriesHidden ? archived : active) ?? [];\n  const storySourceProp = isArchive ? 'archiveIds' : isPrivate ? 'pinnedIds' : 'orderedIds';\n  const userStoryIds = userStories[storySourceProp] ?? [];\n  const currentStoryIndex = userStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousUserId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousUserId = userId;\n  } else {\n    const previousUserIdIndex = orderedUserIds.indexOf(userId) - 1;\n    if (isSingleUser || previousUserIdIndex < 0) {\n      return undefined;\n    }\n\n    previousUserId = orderedUserIds[previousUserIdIndex];\n    previousStoryIndex = (selectUserStories(global, previousUserId)?.orderedIds.length || 1) - 1;\n  }\n\n  const previousStoryId = selectUserStories(global, previousUserId)?.[storySourceProp]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      userId: previousUserId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    userId, storyId, isSingleUser, isSingleStory, isPrivate, isArchive,\n  } = tabState.storyViewer;\n  if (isSingleStory) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  const { orderedUserIds: { active, archived } } = global.stories;\n  if (!userId || !storyId) {\n    return undefined;\n  }\n\n  const user = selectUser(global, userId);\n  const userStories = selectUserStories(global, userId);\n  if (!userStories || !user) {\n    return undefined;\n  }\n\n  const orderedUserIds = (user.areStoriesHidden ? archived : active) ?? [];\n  const storySourceProp = isArchive ? 'archiveIds' : isPrivate ? 'pinnedIds' : 'orderedIds';\n  const userStoryIds = userStories[storySourceProp] ?? [];\n  const currentStoryIndex = userStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextUserId: string;\n\n  if (currentStoryIndex < userStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextUserId = userId;\n  } else {\n    const nextUserIdIndex = orderedUserIds.indexOf(userId) + 1;\n    if (isSingleUser || nextUserIdIndex > orderedUserIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextUserId = orderedUserIds[nextUserIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = selectUserStories(global, nextUserId)?.[storySourceProp]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      userId: nextUserId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { userId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const link = await callApi('fetchStoryLink', { userId, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.translate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, userId: storyUserId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyUserId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.translate(message),\n    actionText: langProvider.translate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyUserId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        viewsById: {},\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n\n  if (!viewModal?.viewsById?.[userId]) return global;\n\n  const updatedViewsById: Record<string, ApiStoryView> = {\n    ...viewModal.viewsById,\n    [userId]: {\n      ...viewModal.viewsById[userId],\n      isUserBlocked: isUserBlocked || undefined,\n      areStoriesBlocked: areStoriesBlocked || undefined,\n    },\n  };\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        viewsById: updatedViewsById,\n      },\n    },\n  }, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  leaveChat,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectThreadParam,\n  selectChatFullInfo,\n  selectTabState,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport {\n  deleteContact, replaceUserStatuses, toggleUserStoriesHidden, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUser, selectUserFullInfo } from '../../selectors';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const currentUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (currentUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = toggleUserStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedUser,\n  addStoriesForUser,\n  removeBlockedUser,\n  removeUserStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForUser,\n  updateStealthMode,\n  updateUserStory,\n  updateUsersWithStories,\n} from '../../reducers';\nimport { selectUserStories, selectUserStory } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.setReplyingToId({ messageId: undefined, tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForUser(global, update.userId, { [update.story.id]: update.story });\n      global = updateUsersWithStories(global, { [update.userId]: selectUserStories(global, update.userId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removeUserStory(global, update.userId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForUser(global, update.userId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { userId, storyId, reaction } = update;\n      const story = selectUserStory(global, userId, storyId);\n      if (!story) return global;\n      global = updateUserStory(global, userId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport {\n  addNotifyException, updateChat, updateTopic, updateNotifySettings,\n} from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/windowEnvironment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage, selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HAg4STRlxDV3frYuABYr\",\"particle\":\"HO3tML0GAC9vTH28baKB\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './CustomEmojiEffect.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji | ApiEmojiStatus;\n  className?: string;\n  isLottie?: boolean;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomEmojiEffect: FC<OwnProps> = ({\n  reaction,\n  isLottie,\n  className,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(!isLottie ? stickerHash : undefined);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData && !isLottie) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        if (isLottie) {\n          return (\n            <CustomEmoji\n              documentId={reaction.documentId}\n              className={styles.particle}\n              style={style}\n              withSharedAnimation\n            />\n          );\n        }\n\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiEffect);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useTimeout from '../../../hooks/useTimeout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport Button from '../../ui/Button';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../middle/message/CustomEmojiEffect';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  APP_NAME,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_ELECTRON,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport { IS_APP, IS_MAC_OS } from '../../../util/windowEnvironment';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\nimport { useFullscreenStatus } from '../../../hooks/useFullscreen';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport StatusButton from './StatusButton';\nimport Toggle from '../../ui/Toggle';\nimport StoryToggler from '../../story/StoryToggler';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference' | 'archiveSettings'>\n  & Pick<TabState, 'canInstall'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  onSearchQuery,\n  isClosingSearch,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  canInstall,\n  archiveSettings,\n}) => {\n  const {\n    openChat,\n    openChatWithInfo,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n    openUrl,\n    updatePerformanceSettings,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  useHotkeys(canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid')\n    : 'min';\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {lang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={WEBK_VERSION_URL}\n          onClick={handleSwitchToWebK}\n        >\n          Switch to K Version\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  ), [\n    animationLevelValue, archivedUnreadChatsCount, canInstall, handleAnimationLevelChange, handleBugReportClick, lang,\n    handleChangelogClick, handleDarkModeToggle, handleOpenTipsChat, handleSelectSaved, handleSwitchToWebK,\n    onSelectArchived, onSelectContacts, onSelectSettings, theme, withOtherVersions, archiveSettings,\n  ]);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            chatOrUserId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          {menuItems}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler canShow={!isSearchFocused && !selectedSearchDate && !globalSearchChatId} />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      currentUserId, connectionState, isSyncing, archiveSettings, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","// Handled by the legacy version. Cannot be updated\nconst PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite } from '../../../api/types';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../../global/types';\nimport type { TabWithProperties } from '../../ui/TabList';\nimport TabList from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport StoryRibbon from '../../story/StoryRibbon';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransition(isStoryRibbonShown, undefined, undefined, '');\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n        storyRibbonClassNames,\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedUserIds: {\n          archived: archivedStories,\n        },\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_ELECTRON } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\nimport ForumPanel from './ForumPanel';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { RefObject } from 'react';\nimport React, {\n  memo, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\n\nimport { IS_MAC_OS, IS_APP, LAYERS_ANIMATION_NAME } from '../../util/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isUpdateAvailable={isUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinnedMessageBorder\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinned-message-border-wrapper-1\":\"QpNjYZM0KJrGrocs69__\",\"pinnedMessageBorderWrapper1\":\"QpNjYZM0KJrGrocs69__\",\"pinned-message-border-wrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinnedMessageBorderWrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinned-message-border-mark\":\"YX_iyQuDtga6uKXRQqR0\",\"pinnedMessageBorderMark\":\"YX_iyQuDtga6uKXRQqR0\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useLayoutEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TMOjo7XfD1ZiiuRtfpkm\",\"pinnedMessage\":\"uhn_g6FmUELuGJrCm45w\",\"messageText\":\"bSvmca5kaTIUh3yJBxnF\",\"loading\":\"d7XDT4Keip1KHh7mcCv9\",\"pinListIcon\":\"DusHAy2Lx0SlaPpVAb_o\",\"pinListIconHidden\":\"jSVbc8Hb7PjitJujB_dQ\",\"no-hover\":\"jeTsUEkDCkzGUVwy6lrL\",\"noHover\":\"jeTsUEkDCkzGUVwy6lrL\",\"messageTextTransition\":\"ugsKEK4Xb166oFMP8hHy\",\"withMedia\":\"FBCNFm307_rxATSHPSiN\",\"title\":\"q9_FnsHlndM1hZqZjxjM\",\"summary\":\"WRuyhyQK6mv28Mz8iK28\",\"inlineButton\":\"kXRuktM2s7UN91zOl0Tx\",\"pictogramTransition\":\"EK6juGhJwhsLLm4Aag2F\",\"pinnedThumb\":\"RFnmHP92f6CwfuR2Upaw\",\"pinnedThumbImage\":\"JfPOYkOcaMjS7Y5rsHZ4\",\"fade-in\":\"IkKnzordTRzWWtIbLHdD\",\"fadeIn\":\"IkKnzordTRzWWtIbLHdD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler\n          && <img className={styles.pinnedThumbImage} src={srcUrl} width={width} height={height} alt=\"\" />}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}>\n          <div className={styles.title} dir=\"auto\">\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                lang={lang}\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectTabState, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\nimport useLastCallback from '../../hooks/useLastCallback';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { StoryViewerOrigin } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport {\n  getChatTitle,\n  getMessageKey,\n  getSenderTitle,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectTabState,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isComments?: boolean;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isSynced?: boolean;\n  isFetchingDifference?: boolean;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isSynced,\n  isFetchingDifference,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isSynced && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const {\n    handleClick: handleHeaderClick,\n    handleMouseDown: handleHeaderMouseDown,\n  } = useFastClick((e: React.MouseEvent<HTMLDivElement | HTMLButtonElement>) => {\n    if (e.type === 'mousedown' && (e.target as Element).closest('.title > .custom-emoji')) return;\n\n    openChatWithInfo({ id: chatId, threadId });\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleStatusClick = useLastCallback(() => {\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage), undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              lang(isComments ? 'CommentsCount' : 'Replies', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div\n          className=\"chat-info-wrapper\"\n          onClick={handleHeaderClick}\n          onMouseDown={handleHeaderMouseDown}\n        >\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isSynced: global.isSynced,\n      isFetchingDifference: global.isFetchingDifference,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n        isComments: Boolean(threadInfo?.originChannelId),\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/useBackgroundMode';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport type { Signal } from '../../../../util/signals';\n\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\nimport { createConnector } from './PostMessageConnector';\nimport Deferred from './Deferred';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","/**\n * A Map that has a limited size. When the limit is reached, the oldest entry is removed.\n * Ignores last access time, only cares about insertion order.\n */\nexport default class LimitedMap<K, V> {\n  private map: Map<K, V>;\n\n  private insertionQueue: Set<K>;\n\n  constructor(private limit: number) {\n    this.map = new Map();\n    this.insertionQueue = new Set<K>();\n  }\n\n  public get(key: K): V | undefined {\n    return this.map.get(key);\n  }\n\n  public set(key: K, value: V): this {\n    if (this.map.size === this.limit) {\n      const keyToRemove = Array.from(this.insertionQueue).shift();\n      if (keyToRemove) {\n        this.map.delete(keyToRemove);\n        this.insertionQueue.delete(keyToRemove);\n      }\n    }\n\n    this.map.set(key, value);\n    this.insertionQueue.add(key);\n\n    return this;\n  }\n\n  public delete(key: K): boolean {\n    const result = this.map.delete(key);\n    if (result) {\n      this.insertionQueue.delete(key);\n    }\n    return result;\n  }\n\n  public clear(): void {\n    this.map.clear();\n    this.insertionQueue.clear();\n  }\n\n  public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n    this.map.forEach(callbackfn, thisArg);\n  }\n\n  public get size(): number {\n    return this.map.size;\n  }\n\n  public get [Symbol.toStringTag](): string {\n    return this.map[Symbol.toStringTag];\n  }\n\n  public [Symbol.iterator](): IterableIterator<[K, V]> {\n    return this.map[Symbol.iterator]();\n  }\n\n  public entries(): IterableIterator<[K, V]> {\n    return this.map.entries();\n  }\n\n  public keys(): IterableIterator<K> {\n    return this.map.keys();\n  }\n\n  public values(): IterableIterator<V> {\n    return this.map.values();\n  }\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\nimport { useEffect } from '../../../../lib/teact/teact';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, undefined, lang.timeFormat);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon icon-reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <i className=\"icon icon-pinned-message message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getActions } from '../../../global';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {hasEffect && withEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport { IS_ELECTRON } from '../../../config';\n\nimport safePlay from '../../../util/safePlay';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar\n        size=\"large\"\n        peer={user}\n        text={firstName || lastName}\n      />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    const user = selectUser(global, contact.userId);\n\n    return {\n      user,\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  useEffect,\n  useLayoutEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { LangFn } from '../../../hooks/useLang';\nimport type {\n  ApiMessage, ApiPoll, ApiPollAnswer, ApiChat, ApiUser,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [closePeriod, summary]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    return recentVoterIds ? recentVoterIds.reduce((result: (ApiChat | ApiUser)[], id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      } else if (chat) {\n        result.push(chat);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"micro\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport buildStyle from '../../../util/buildStyle';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground, photoUrl);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { useMemo, memo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds?: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useLastCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const isScheduled = album.mainMessage.isScheduled;\n\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds: isScheduled ? activeDownloads?.scheduledIds : activeDownloads?.ids,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useSignal from '../../../hooks/useSignal';\nimport { useThrottledSignal } from '../../../hooks/useAsyncResolvers';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  isDownloading?: boolean;\n};\n\nconst PROGRESS_CENTER = ROUND_VIDEO_DIMENSIONS_PX / 2;\nconst PROGRESS_MARGIN = 6;\nconst PROGRESS_CIRCUMFERENCE = (PROGRESS_CENTER - PROGRESS_MARGIN) * 2 * Math.PI;\nconst PROGRESS_THROTTLE = 16; // Min period needed for `playerEl.currentTime` to update\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const circleRef = useRef<SVGCircleElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState(false);\n\n  const [getProgress, setProgress] = useSignal(0);\n  const getThrottledProgress = useThrottledSignal(getProgress, PROGRESS_THROTTLE);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [setProgress, isActivated, getThrottledProgress]);\n\n  useLayoutEffect(() => {\n    if (!isActivated || !circleRef.current) {\n      return;\n    }\n\n    const strokeDashOffset = PROGRESS_CIRCUMFERENCE - getThrottledProgress() * PROGRESS_CIRCUMFERENCE;\n    circleRef.current.setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n  }, [isActivated, getThrottledProgress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useLastCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n  });\n\n  const capturePlaying = useLastCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  });\n\n  const handleTimeUpdate = useLastCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  });\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\">\n        {isActivated && (\n          <svg width={ROUND_VIDEO_DIMENSIONS_PX} height={ROUND_VIDEO_DIMENSIONS_PX}>\n            <circle\n              ref={circleRef}\n              cx={PROGRESS_CENTER}\n              cy={PROGRESS_CENTER}\n              r={PROGRESS_CENTER - PROGRESS_MARGIN}\n              className=\"progress-circle\"\n              transform={`rotate(-90, ${PROGRESS_CENTER}, ${PROGRESS_CENTER})`}\n              stroke-dasharray={PROGRESS_CIRCUMFERENCE}\n              stroke-dashoffset={PROGRESS_CIRCUMFERENCE}\n            />\n          </svg>\n        )}\n      </div>\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiThreadInfo,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openComments } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openComments({ id: chatId, threadId, originChannelId });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmojiEffect from './CustomEmojiEffect';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  withEffects?: boolean;\n};\n\nconst CENTER_ICON_SIZE = 2.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n  withEffects,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const { customEmoji } = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(withEffects && activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useLastCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  });\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceAlways\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomEmojiEffect reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceAlways\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport AvatarList from '../../common/AvatarList';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  withEffects?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  withEffects,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.peerId] || chatsById[recentReaction.peerId])\n      .filter(Boolean) as (ApiChat | ApiUser)[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useLastCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  });\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n        withEffects={withEffects}\n      />\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} className=\"counter\" />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n  withEffects?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n  noRecentReactors,\n  withEffects,\n}) => {\n  const lang = useLang();\n\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n          withEffects={withEffects}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"canceled\":\"Q7dh9ssyXXCzatPRmIDv\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import React, { useRef } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser, ApiChat, ApiTypeStory } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getSenderTitle,\n  getUserColorKey,\n  getStoryMediaHash,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiUser | ApiChat;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p dir=\"auto\">\n          {isExpiredStory && (\n            <i className=\"icon icon-story-expired\" aria-hidden />\n          )}\n          {isFullStory && (\n            <i className=\"icon icon-story-reply\" aria-hidden />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectUserStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, userId } = message.content.storyData!;\n\n  return {\n    story: selectUserStory(global, userId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectUser, selectUserStories, selectUserStory,\n} from '../../../global/selectors';\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  user?: ApiUser;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, user, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      userId: story!.userId,\n      storyId: story!.id,\n      isSingleUser: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.userId, storyData!.id, story);\n\n  function getTitle() {\n    if (user?.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getUserFirstOrLastName(user));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, userId } = message.content.storyData!;\n  const lastReadId = selectUserStories(global, userId)?.lastReadId;\n\n  return {\n    story: selectUserStory(global, userId, id),\n    user: selectUser(global, userId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\nimport type {\n  ActiveEmojiInteraction,\n  ActiveReaction,\n  ChatTranslatedMessages,\n  MessageListType,\n} from '../../../global/types';\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiReaction,\n  ApiStickerSet,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n  ApiUsername,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { FocusDirection, IAlbum, ISettings } from '../../../types';\nimport { AudioOrigin } from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport type { Signal } from '../../../util/signals';\n\nimport { IS_ANDROID, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID, IS_ELECTRON } from '../../../config';\nimport {\n  selectAllowedMessageActions,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentTextSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsDownloading,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPerformanceSettingsValue,\n  selectReplySender,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n  selectUserStory,\n} from '../../../global/selectors';\nimport {\n  areReactionsEmpty,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageHtmlId,\n  getMessageLocation,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  hasMessageText,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useAuthorWidth from '../hooks/useAuthorWidth';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport { dispatchHeavyAnimationEvent } from '../../../hooks/useHeavyAnimationCheck';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport TopicChip from '../../common/TopicChip';\nimport EmbeddedStory from '../../common/EmbeddedStory';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n    getIsMessageListReady: Signal<boolean>;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiUser;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withReactionEffects?: boolean;\n  withStickerEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyStory,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withReactionEffects,\n  withStickerEffects,\n  webPageStory,\n  isConnected,\n  onPinnedIntersectionChange,\n  getIsMessageListReady,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuPosition,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(\n    isShown || isJustAdded,\n    undefined,\n    noAppearanceAnimation && !isJustAdded,\n    false,\n  );\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasStoryReply = Boolean(message.replyToStoryId);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  ) || Boolean(message.content.storyData && !message.content.storyData.isMention);\n  const isStoryMention = message.content.storyData?.isMention;\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply || hasStoryReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    Boolean(requestedChatTranslationLanguage),\n    replyStory && 'content' in replyStory ? replyStory : undefined,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    isJustAdded && 'is-just-added',\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n    isStoryMention && 'is-story-mention',\n  );\n\n  const {\n    text, photo, video, audio,\n    voice, document, sticker, contact,\n    poll, webPage, invoice, location,\n    action, game, storyData,\n  } = getMessageContent(message);\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video || storyData || (location && location.type === 'geo')) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n\n  useEnsureStory(\n    message.replyToStoryUserId ? message.replyToStoryUserId : chatId,\n    message.replyToStoryId,\n    replyStory,\n  );\n\n  useFocusMessage(\n    ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, isJustAdded,\n  );\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  useAuthorWidth(ref, signature);\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    dispatchHeavyAnimationEvent(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      } else if (video) {\n        if (video.isRound) {\n          width = ROUND_VIDEO_DIMENSIONS_PX;\n        } else {\n          width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, message, noAvatars, photo, sticker, text?.text, video,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    return (\n      <MessageText\n        messageOrStory={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    activeReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        withEffects={withReactionEffects}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            withEffect={withStickerEffects}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            story={webPageStory}\n            isConnected={isConnected}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded && !isOwn) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getSenderTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {asForwarded && (\n              <i className={`icon ${forwardInfo?.hiddenUserName ? 'icon-forward' : 'icon-share-filled'}`} />\n            )}\n            {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.views !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            maxWidth={reactionsMaxWidth}\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            withEffects={withReactionEffects}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction MessageAppendix({ isOwn } : { isOwn: boolean }) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, forwardInfo,\n      transcriptionId, isPinned, replyToStoryUserId, replyToStoryId, repliesThreadInfo,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectUserStory(global, webPageStoryData.userId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = replyToStoryId && replyToStoryUserId\n      ? selectUserStory(global, replyToStoryUserId, replyToStoryId)\n      : undefined;\n    const storySender = replyToStoryUserId ? selectUser(global, replyToStoryUserId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const isLocation = Boolean(getMessageLocation(message));\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyStory,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && activeReactions[reactionMessage.id],\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      senderAdminMember,\n      messageTopic,\n      genericEffects: global.genericEmojiEffects,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withReactionEffects: selectPerformanceSettingsValue(global, 'reactionEffects'),\n      withStickerEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      ...((canShowSender || isLocation) && { sender }),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n      }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { LangFn } from '../../../../hooks/useLang';\nimport type { IAlbum } from '../../../../types';\nimport type {\n  ApiChat, ApiTopic, ApiMessage, ApiUser, ApiStory,\n} from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n  isTranslatingChat?: boolean,\n  story?: ApiStory,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openStoryViewer, focusMessageInComments,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId!,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n      noForumTopicPanel: true,\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId!,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      userId: story.userId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice, storyData,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { RefObject } from 'react';\nimport { useLayoutEffect } from '../../../lib/teact/teact';\nimport { requestForcedReflow } from '../../../lib/fasterdom/fasterdom';\n\nexport default function useAuthorWidth(\n  containerRef: RefObject<HTMLDivElement>,\n  signature?: string,\n) {\n  useLayoutEffect(() => {\n    if (!signature) return;\n\n    requestForcedReflow(() => {\n      const width = containerRef.current!.querySelector<HTMLDivElement>('.message-signature')?.offsetWidth;\n      if (!width) return undefined;\n\n      return () => {\n        containerRef.current!.style.setProperty('--meta-safe-author-width', `${width}px`);\n      };\n    });\n  }, [containerRef, signature]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  });\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.text.text,\n                entities: message.text.entities,\n              })}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Lsq8MNpDNQOesVld_hE2\",\"bot-info\":\"QDlMH9oNVNDnHBMnbvhw\",\"botInfo\":\"QDlMH9oNVNDnHBMnbvhw\",\"bot-info-description\":\"qhxnNXJM8_CyuUQ0pxo7\",\"botInfoDescription\":\"qhxnNXJM8_CyuUQ0pxo7\",\"bot-info-title\":\"mdOWgfW0GwJTT3vqO5_M\",\"botInfoTitle\":\"mdOWgfW0GwJTT3vqO5_M\"};","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiBotInfo } from '../../api/types';\n\nimport { DPR } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\nimport {\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n} from '../../global/helpers';\nimport buildStyle from '../../util/buildStyle';\nimport buildClassName from '../../util/buildClassName';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useLang();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const { width, height } = botInfoRealDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={botInfoRealDimensions && (\n            `width: ${botInfoRealDimensions.width}px`\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              src={botInfoPhotoUrl}\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n            />\n          )}\n          {botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport type { Signal } from '../../util/signals';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport usePrevious from '../../hooks/usePrevious';\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsReady = useDerivedSignal(isReady);\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePrevious(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        const isTopicTopMessage = message.id === threadTopMessageId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\n\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\nimport { isLocalMessageId } from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = isLocalMessageId(messageIds[0]);\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\n\nimport StickerView from '../common/StickerView';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  return (\n    <div className=\"ContactGreeting\">\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div ref={containerRef} className=\"sticker\" onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(ContactGreeting));\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageListType } from '../../global/types';\nimport type { ApiTopic } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { requestForcedReflow, forceMeasure, requestMeasure } from '../../lib/fasterdom/fasterdom';\n\nimport type { FC } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\nimport type {\n  ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\n\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { LoadMoreDirection } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectBot,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium,\n  selectLastScrollOffset,\n  selectThreadInfo,\n  selectTabState,\n  selectChatFullInfo,\n  selectPerformanceSettingsValue,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  isLocalMessageId,\n  getMessageHtmlId,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll from '../../util/resetScroll';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport { isBackgroundModeActive } from '../../hooks/useBackgroundMode';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport MessageListBotInfo from './MessageListBotInfo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isComments?: boolean;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  threadTopMessageId?: number;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  threadTopMessageId,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  onPinnedIntersectionChange,\n  getForceNextPinnedInHeader,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadUserStoriesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages = messageIds.map((id) => messagesById[id]).filter(Boolean);\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, orderRule), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByUserIds = storyDataList.reduce((acc, storyData) => {\n      const { userId, id } = storyData!;\n      if (!acc[userId]) {\n        acc[userId] = [];\n      }\n      acc[userId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByUserIds).forEach(([userId, storyIds]) => {\n      loadUserStoriesByIds({ userId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.repliesThreadInfo?.isComments\n      || messagesById[id]?.views !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      isComments: Boolean(threadInfo?.originChannelId),\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      threadTopMessageId,\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport animateScroll from '../../util/animateScroll';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useLastCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default MobileSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default GiftPremiumModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import React, {\n  useEffect, useState, memo, useMemo,\n} from '../../lib/teact/teact';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { ThemeKey } from '../../types';\n\nimport {\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  ANIMATION_END_DELAY,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  GENERAL_TOPIC_ID,\n  TMP_CHAT_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  EDITABLE_INPUT_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  IS_ELECTRON,\n} from '../../config';\nimport {\n  IS_ANDROID, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectBot,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat,\n  getMessageSendingRestrictionReason,\n  getForumComposerPlaceholder,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n  getHasAdminRight,\n} from '../../global/helpers';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport { useResize } from '../../hooks/useResize';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport Composer from '../common/Composer';\n\nimport './MiddleColumn.scss';\n\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  topMessageId?: number;\n  canUnpin?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  topMessageId,\n  canUnpin,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds, topMessageId);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown!}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      chatLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isComments);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !selectChatFullInfo(global, chat.id),\n    );\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !replyingToId && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !chat?.isForum;\n    const topMessageId = isCommentThread ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      topMessageId,\n      canUnpin,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { getGlobal } from '../../../global';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\nimport cycleRestrict from '../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: number, pinnedIds?: number[], topMessageId?: number,\n) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useLastCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  });\n\n  const onFocusPinnedMessage = useLastCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) {\n      // Focusing on a post in comments\n      return topMessageId === messageId;\n    }\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  });\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useState, useEffect, useLayoutEffect } from '../lib/teact/teact';\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\n\nimport useLastCallback from './useLastCallback';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"draggable\":\"kIdhoMn_mbGnJc1YZpIK\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleMessageSearchQueryChange = useLastCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3>{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" aria-hidden />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.StoryList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader);\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  loadStories: AnyToVoidFunction,\n  loadStoriesArchive: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n  storyIds?: number[],\n  archiveStoryIds?: number[],\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, storyIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(\n          tabType === 'members'\n            ? ProfileState.MemberList\n            : (tabType === 'stories' ? ProfileState.StoryList : ProfileState.SharedMedia),\n        );\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : (tabType === 'stories' ? ProfileState.StoryList : ProfileState.SharedMedia);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ox1yTGx4NBVANs7q4Ste\",\"wrapper\":\"g34egFNlUSZiOR5Y9K9A\",\"media\":\"gyVqf8gGVz_cu2HCjifT\",\"expiredIcon\":\"eg5740UDe7iAc7dGlyex\",\"contextMenu\":\"rhvyma7da0HVZh3rYFnr\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useMenuPosition from '../../hooks/useMenuPosition';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isProtected?: boolean;\n  isArchive?: boolean;\n}\n\nfunction MediaStory({ story, isProtected, isArchive }: OwnProps) {\n  const {\n    openStoryViewer,\n    loadUserSkippedStories,\n    toggleStoryPinned,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const isFullyLoaded = story && 'content' in story;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadUserSkippedStories({ userId: story.userId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef);\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    getLayout,\n  );\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      userId: story.userId,\n      storyId: story.id,\n      isSingleUser: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.userId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handlePinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ storyId: story.id, isPinned: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleUnpinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ storyId: story.id, isPinned: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <i className={buildClassName(styles.expiredIcon, 'icon icon-story-expired')} aria-hidden />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} />\n        )}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && <MenuItem icon=\"pin\" onClick={handlePinClick}>{lang('StoryList.SaveToProfile')}</MenuItem>}\n          {!isArchive && (\n            <MenuItem icon=\"unpin\" onClick={handleUnpinClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(MediaStory);\n","import React, {\n  useEffect, useMemo, useRef, useState, memo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n  ApiTypeStory,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStories,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useUserStoriesPolling from '../../hooks/polling/useUserStoriesPolling';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport MediaStory from '../story/MediaStory';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloadIds?: number[];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloadIds,\n  isChatProtected,\n  nextProfileTab,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n    loadUserPinnedStories,\n    loadStoriesArchive,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasStoriesTab ? [{ type: 'stories', title: 'ProfileStories' }] : []),\n    ...(hasStoriesTab && currentUserId === chatId ? [{ type: 'storiesArchive', title: 'ProfileStoriesArchive' }] : []),\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [chatId, currentUserId, hasCommonChatsTab, hasMembersTab, hasStoriesTab, isChannel, topicId]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadUserStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadUserPinnedStories({ userId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ offsetId });\n  }, []);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    handleLoadUserStories,\n    handleLoadStoriesArchive,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    topicId,\n    storyIds,\n    archiveStoryIds,\n  );\n  const isFirstTab = (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  useUserStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    loadProfilePhotos({ profileId });\n  }, [profileId]);\n\n  const handleSelectMedia = useLastCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = lang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = lang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id) => storyByIds?.[id] && (\n            <MediaStory\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isProtected={isChatProtected}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds?.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n\n    let hasCommonChatsTab;\n    let hasStoriesTab;\n    let resolvedUserId;\n    let user;\n    let storyIds;\n    let archiveStoryIds;\n    let storyByIds;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      const userFullInfo = selectUserFullInfo(global, chatId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n      hasStoriesTab = user && (user.isSelf || (!user.areStoriesHidden && userFullInfo?.hasPinnedStories));\n      const userStories = hasStoriesTab ? selectUserStories(global, user!.id) : undefined;\n      storyIds = userStories?.pinnedIds;\n      storyByIds = userStories?.byId;\n      archiveStoryIds = userStories?.archiveIds;\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloadIds: activeDownloads?.ids,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\nimport { requestMutation, requestMeasure } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default RightSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './CreateTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './EditTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded, selectChat, selectCurrentMessageList, selectRightColumnContentKey, selectTabState,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}`}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return (\n          <RightSearch\n            key={`right_search_${chatId!}`}\n            chatId={chatId!}\n            threadId={threadId!}\n            onClose={close}\n            isActive={isOpen && isActive}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations, nextProfileTab } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { GlobalState, TabState } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\nimport { compact } from '../../util/iteratees';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  messages?: GlobalState['messages']['byChatId'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useLastCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    // No need for expensive global updates on messages, so we avoid them\n    const messages = getGlobal().messages.byChatId;\n    const scheduledMessages = getGlobal().scheduledMessages.byChatId;\n\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, chatActiveDownloads]) => {\n      const chatMessages = chatActiveDownloads.ids?.map((id) => messages[chatId]?.byId[id]);\n      const chatScheduledMessages = chatActiveDownloads.scheduledIds?.map((id) => scheduledMessages[chatId]?.byId[id]);\n\n      return compact([...chatMessages || [], ...chatScheduledMessages || []]);\n    }).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { createLocationHash } from '../../util/routing';\nimport { selectTabState } from '../../global/selectors';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\nimport { selectTabState } from '../../global/selectors';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../util/moduleLoader';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MapModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { geoPoint } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !geoPoint);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import React, {\n  useEffect, memo, useState, useRef, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { LangCode } from '../../types';\nimport type {\n  ApiAttachBot,\n  ApiChat,\n  ApiChatFolder,\n  ApiGeoPoint,\n  ApiMessage,\n  ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, IS_ELECTRON,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/windowEnvironment';\nimport {\n  selectChatMessage,\n  selectTabState,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n  selectIsReactionPickerOpen,\n  selectPerformanceSettingsValue,\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectIsStoryViewerOpen,\n} from '../../global/selectors';\nimport { getUserFullName } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport updateIcon from '../../util/updateIcon';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport ReactionPicker from '../middle/message/ReactionPicker.async';\nimport ChatlistModal from '../modals/chatlist/ChatlistModal.async';\nimport StoryViewer from '../story/StoryViewer.async';\nimport MapModal from '../modals/mapModal/MapModal.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  mapModalGeoPoint?: ApiGeoPoint;\n  mapModalZoom?: number;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUserName?: string;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isCurrentUserPremium?: boolean;\n  chatlistModal?: TabState['chatlistModal'];\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  mapModalGeoPoint,\n  mapModalZoom,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUserName,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  chatlistModal,\n  noRightColumnAnimation,\n  isSynced,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadFeaturedEmojiStickers,\n    setIsAppUpdateAvailable,\n    loadPremiumSetStickers,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, (isMasterTab && !IS_ELECTRON) ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateDownloadedListener = window.electron!.on(ElectronEvent.UPDATE_DOWNLOADED, () => {\n      setIsAppUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsAppUpdateAvailable(false);\n      removeUpdateDownloadedListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateDownloadedListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadFeaturedEmojiStickers();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n      loadPremiumSetStickers();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    openChat({\n      id: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, []);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <MapModal geoPoint={mapModalGeoPoint} zoom={mapModalZoom} />\n      <UrlAuthModal urlAuth={urlAuth} currentUserName={currentUserName} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <ChatlistModal info={chatlistModal} />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      mapModal,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n      chatlistModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      mapModalGeoPoint: mapModal?.point,\n      mapModalZoom: mapModal?.zoom,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUserName: getUserFullName(currentUser),\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      chatlistModal,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","currentReactions","reactions","results","currentSendAs","selectSendAs","chatId","map","current","isReactionChosen","chosenOrder","undefined","count","filter","_ref","forEach","reaction","i","existingIndex","findIndex","r","isSameReaction","push","recentReactions","length","_ref2","isOwn","peerId","currentUserId","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","updateReactions","chat","isOutgoing","areDeepEqual","alreadyHasUnreadReaction","unreadReactions","includes","checkIfHasUnreadReactions","unreadReactionsCount","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","updateWithLocalMedia","messageUpdate","isScheduled","arguments","currentMessage","selectScheduledMessage","content","photo","video","sticker","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","actions","isDeleting","threadInfo","selectThreadByMessage","replyToMessageId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","selectChat","unreadCount","selectListedIds","MAIN_THREAD_ID","isMessageLocal","updateListedIds","threadId","Object","values","byTabId","_ref6","tabId","selectIsViewportNewest","addViewportId","replaceThreadParam","isActionMessage","updateThreadInfo","messagesCount","_ref7","firstUnreadId","selectFirstUnreadId","candidateGlobal","newViewportIds","selectViewportIds","updateChatLastMessage","force","chats","byId","currentLastMessage","lastMessage","topic","isForum","selectTopicFromMessage","updateTopic","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","newLastMessage","clearMessageTranslation","topics","deleteTopic","requestChatUpdate","threadIdsToUpdate","selectThreadIdFromMessage","setGlobal","setTimeout","getGlobal","deleteChatMessages","unique","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","addActionHandler","shouldForceReply","repliesThreadInfo","isTopicReply","loadTopicById","topicId","isLocal","selectIsMessageInCurrentMessageList","action","replyToStoryId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","selectIsChatListed","loadTopChats","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","keys","selectChatScheduledMessages","Number","sort","a","b","localId","deleteChatScheduledMessages","fileUploads","byMessageLocalId","omit","toString","thread","_ref3","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messageIds","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","_ref4","pinnedIds","selectPinnedIds","newPinnedIds","concat","currentThreadInfo","selectThreadInfo","newThreadInfo","topMessageId","lastReadInboxMessageIdInThread","messagesById","isUserId","getCurrentTabId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","channelId","pollId","pollUpdate","selectChatMessageByPollId","poll","oldResults","newResults","isMin","result","isChosen","find","option","updatedPoll","options","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","createServiceNotification","media","preview","invoice","extendedMedia","transcriptionId","isPending","transcriptions","error","match","_ref5","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","offsetId","direction","isOutlying","isBudgetPreload","_len2","Array","_key2","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","round","callApi","limit","users","repliesThreadInfos","localMessages","allMessages","buildCollectionByKey","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","addUsers","addChats","updateThreadInfos","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","replyingTo","IS_IOS","rafPromise","replyingToTopId","delete","payload","shouldForceRender","isRestricted","viewportIds","Boolean","_len","_key","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyId","userId","storyUserId","selectCurrentViewedStory","isStoryReply","type","scheduledAt","contentToBeScheduled","replyingToId","selectReplyingToId","replyingToMessage","selectThreadTopMessageId","replyToTopMessageId","noWebPage","selectNoWebPage","sendAs","setReplyingToId","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","groupedId","isFirst","replyingToForFirstMessage","messageListType","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","apiUpdate","draft","shouldForce","user","selectUser","isDeletedUser","draftDate","replyToMsgId","localOnly","selectDraft","newDraft","isUnpin","isOneSide","isSilent","selectCurrentChat","topId","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","showNotification","translate","connectionState","isUserBot","isUnread","minId","readCount","l","countSortedIds","newTopicUnreadCount","webPagePreview","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","scheduledInThread","originChannelId","selectThreadOriginChat","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","url","shouldSkipModal","urlWithProtocol","ensureProtocol","isStoriesViewerOpen","storyViewer","RE_TME_LINK","RE_TG_LINK","closeStoryViewer","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","showDialog","data","getUserFullName","selectForwardsCanBeSentToChat","isModalShown","closeMediaViewer","exitMessageSelectMode","story","selectUserStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","shouldIncrement","shouldSendAsFile","mimeType","GIF_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","Set","add","views","forwards","repliesChatId","recentReplierIds","readMaxId","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","title","langProvider","className","newGifs","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","updateGlobalSearch","foundTopicIds","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","globalSearch","localChats","localUsers","globalChats","globalUsers","localResults","chatIds","userIds","globalResults","date","timestampPlusDay","resultsByType","foundIds","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","timestamp","management","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","editingDraft","selectEditingDraft","activeThreadId","currentChat","lastReadInboxId","newCurrentChatId","currentChatMessages","topicLastMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","otherChatId","otherThreadId","updateChats","updateUsers","loadTopics","shouldCloseChatOnError","threads","updateThread","_ref8","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isSynced","initFolderManager","addCallback","authState","isMasterTab","sync","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","withPhotos","newUser","newFullInfo","hasChangedPhoto","avatarHash","profilePhoto","fallbackPhoto","personalPhoto","updateUser","updateUserFullInfo","photos","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadUserStories","closeNewContactDialog","isPrivate","userOrChat","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","expires","isCloseFriend","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","isWriteAllowed","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","botId","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","_len3","_key3","openUrl","openGame","alert","isError","buildQueryString","k","join","getPaymentForm","inputInvoice","form","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","_len4","_key4","shippingOptions","setRequestInfoId","updateShippingOptions","button","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","senderId","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","selectBot","removeBlockedUser","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","webApp","isFromBotMenu","reply","appName","startApp","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","requestedAttachBotInstall","botUser","actionPayload","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","payment","isPaymentModalOpen","status","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","closeInvoice","step","isClosed","premiumModal","isOpen","isClosing","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","promo","closeReactionPicker","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","emoticon","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","some","userReaction","newUserReactions","selectMaxUserReactions","selectPerformanceSettingsValue","newActiveReactions","activeReactions","active","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","fetchUnreadReactions","fromEntries","unread","topReactions","isGroup","selectChatFullInfo","dcId","statisticsDcId","stats","recentTopMessages","msgId","updateStatistics","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","stories","hasNext","stateHash","isFirstRequest","state","addStories","userStories","updateUsersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectUserStories","skippedStoryIds","addStoriesForUser","updateLastViewedStoryForUser","serverTime","byUserId","lastReadId","updateLastReadStoryForUser","removeUserStory","currentIsPinned","updateUserStory","updateUserPinnedStory","lastReadStoryId","storyIds","isPreload","areReactionsFirst","areJustContacts","PREVIEW_AVATAR_COUNT","updateStoryViewsLoading","viewsById","updateStoryViews","recentViewerIds","view","viewsCount","reactionsCount","privacy","allowedUserList","allowUserIds","deniedUserList","blockUserIds","visibility","toggleUserStoriesHidden","userIdsToLoad","maxStoryId","hasStories","previousReaction","sentReaction","isForPast","isForFuture","closeLocalTextSearch","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","replaceTabThreadParam","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActions","canCopy","message1","message2","resultHtml","resultText","sender","selectSender","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","groupedMessageIds","selectedMessages","openForwardMenu","cancelMessageMediaDownload","addActiveMessageMediaDownload","canDownload","downloadMessageMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseMessageInput","serviceChat","fractionalPart","serviceNotification","reactorModal","seenByModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","fetchingStatus","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","stickerSearch","newContact","isByPhoneNumber","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","newStickers","s","order","isCustomEmoji","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","top","left","height","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","APP_VERSION_REGEX","then","trim","test","isUpdateAvailable","catch","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","byKey","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","clearPayment","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","DEFAULT_PLAYBACK_RATE","noLockOnUnload","onBeforeUnload","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","_global$passcode$inva","timeoutUntil","reactionPicker","sendAsMessage","isSingleUser","isSingleStory","isArchive","selectUserFirstUnreadStoryId","selectUserFirstStoryId","viewModal","fetchChatByUsername","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByUserIds","isShown","orderedUserIds","_userStories$storySou","archived","areStoriesHidden","storySourceProp","currentStoryIndex","previousStoryIndex","previousUserId","previousUserIdIndex","previousStoryId","_userStories$storySou2","userStoryIds","nextStoryIndex","nextUserId","nextUserIdIndex","nextStoryId","copyTextToClipboard","actionText","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViewsById","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","currentUser","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedUser","isBlockedFromStories","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","props","StickerSetModal","useModuleLoader","Bundles","React","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","isLottie","stickerHash","getStickerPreviewHash","previewMediaData","useMedia","paths","useMemo","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","buildClassName","path","style","CustomEmoji","styles","withSharedAnimation","src","alt","StatusPickerMenu","withGlobal","setEmojiStatus","loadCurrentUser","buttonRef","useRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","useCallback","handleEmojiStatusClick","CustomEmojiEffect","ref","ripple","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","onClose","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isFetchingDifference","isConnectionStatusMinimized","animationLevel","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","canSetPasscode","selectCanSetPasscode","shouldHideSearch","contactsFilter","onSearchQuery","isClosingSearch","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","skipLockOnUnload","updatePerformanceSettings","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","archivedUnreadChatsCount","chatsCount","handleLockScreenHotkey","useLastCallback","stopPropagation","handleOpenMyStories","useHotkeys","IS_APP","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ariaLabel","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","ANIMATION_LEVEL_MAX","ANIMATION_LEVEL_MIN","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","localStorage","setItem","clearWebsync","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","animationLevelValue","isFullscreen","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","menuItems","MenuItem","icon","Switcher","label","checked","noAnimation","Toggle","isCharIcon","getPromptInstall","searchContent","PickerSelectedItem","canClose","clickArg","chatOrUserId","DropdownMenu","trigger","footer","APP_NAME","positionX","transformOriginX","IS_MAC_OS","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","orderedFolderIds","folderInvitesById","archivedStories","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","shouldRender","shouldRenderStoryRibbon","transitionClassNames","storyRibbonClassNames","isStoryRibbonClosing","useShowTransition","allChatsFolder","ALL_FOLDER_ID","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","isBadgeActive","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRenderPlaceholder","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","renderCount","LeftSearch","Loading","ContactList","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionY","autoClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","installUpdate","reload","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","fluid","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","useSyncEffect","handleSettingsScreenSelect","renderContent","currentScreen","onScreenSelect","isChannel","LeftMain","LAYERS_ANIMATION_NAME","drawRect","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","useLayoutEffect","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","EMOJI_SIZE","customTitle","onUnpinMessage","onAllPinnedClick","isFullWidth","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","getMessageMediaHash","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleClick","handleMouseDown","useFastClick","ConfirmDialog","confirmLabel","confirmHandler","onMouseDown","PinnedMessageNavigation","thumbDataUri","spoiler","getPictogramDimensions","srcUrl","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","renderText","MessageSummary","noEmoji","emojiSize","RippleEffect","shouldStopPropagation","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onContextMenu","volumeIcon","renderAudio","subtitle","renderVoice","disabled","RangeSlider","bold","forceOpen","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","handleCloseReportPanel","handleChatReportSpam","isText","confirmIsDestructive","Checkbox","onCheck","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","selectIsChatWithSelf","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","selectForwardedSender","canUnpin","isComments","firstPinnedMessage","isReady","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","useDerivedState","waitingForPinnedId","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handleHeaderMouseDown","target","closest","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleStatusClick","handleBackClick","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","usePrevious","canRevealTools","componentEl","classList","requestMutation","remove","renderBackButton","asClose","withUnreadCounter","UnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderPinnedMessage","ChatReportPanel","AudioPlayer","getMessageKey","HeaderActions","canExpandActions","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","asForwarded","noAvatars","ratios","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","excludedClosestSelector","onRelease","preventMessageInputBlur","contains","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","Symbol","toStringTag","_Symbol$iterator","iterator","LimitedMap","_defineProperty","insertionQueue","keyToRemove","shift","clear","callbackfn","thisArg","_Symbol$toStringTag","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","metadata","isTranslatable","detectedLanguage","occurrences","outgoingStatus","signature","withReactionOffset","renderQuickReactionButton","noReplies","isTranslated","onTranslationClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","formatDateTimeToString","timeFormat","editDateTime","isEdited","editDate","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","observeIntersection","observeIntersectionForPlaying","shouldLoop","shouldPlayEffect","withEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","useIsIntersecting","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","onEnded","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","container","performance","interactionMessageId","withEffects","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","forceLoadPreview","isIntersecting","AnimatedIconFromSticker","quality","forcePreview","forceAlways","LIKE_STICKER_ID","customEmojiId","selectCanPlayAnimatedEmojis","getCustomEmojiSize","isBig","observeIntersectionForLoading","contact","countryList","phoneCodes","phoneCodeList","isRegistered","Avatar","formatPhoneNumberWithCode","getPercentage","total","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","usersById","onSendVote","openPollResults","requestConfetti","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","isCorrect","answers","hidden","quiz","chosen","strokeDashOffset","timer","recentVoters","chatsById","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","formatMediaDuration","cx","cy","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","PollOption","getReadableVotersCount","shouldAffectAppendix","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","Skeleton","forceAspectRatio","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","dataUri","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","scale","PinSvg","viewBox","openMapModal","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","timeLeft","formatCountdownShort","textContent","long","draggable","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","playsInline","muted","disablePictureInPicture","autoPlay","loop","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsById","activeDownloadIds","hasCustomAppendix","albumLayout","onMediaClick","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","getMessageHtmlId","onCancelUpload","isDownloading","PROGRESS_CENTER","ROUND_VIDEO_DIMENSIONS_PX","PROGRESS_CIRCUMFERENCE","stopPrevious","playerRef","circleRef","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","downloadProgress","isPlayerReady","markPlayerReady","noThumb","getMessageMediaThumbDataUri","thumbRef","thumbClassNames","useMediaTransition","isTransferring","wasLoadDisabled","shouldSpinnerRender","spinnerClassNames","setIsActivated","getProgress","setProgress","useSignal","getThrottledProgress","useThrottledSignal","playerEl","currentTime","shouldPlay","stopPlaying","capturePlaying","isAllowed","paused","stopCurrentAudio","handleTimeUpdate","OptimizedVideo","onTimeUpdate","onReady","ProgressSpinner","renderIcon","openComments","recentRepliers","hasUnread","commentsText","CENTER_ICON_SIZE","EFFECT_SIZE","genericEffects","stopActiveReaction","centerIconId","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","onLoad","withRecentReactors","recentReactors","recentReaction","ReactionAnimatedEmoji","AvatarList","peers","isOutside","metaChildren","noRecentReactors","ReactionButton","getReactionUniqueKey","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","noUserColors","isFullStory","isExpiredStory","isVideoStory","getStoryMediaHash","pictogramUrl","handleFastClick","getUserColorKey","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","role","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","MessageAppendix","filterUnits","dy","in","stdDeviation","fill","focusedMessage","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","replyToChatId","replyToStoryUserId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","chatFullInfo","webPageStoryData","webPage","webPageStory","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","isLocation","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withReactionEffects","withStickerEffects","selectOutgoingStatus","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onPinnedIntersectionChange","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","isTouchScreen","useOnIntersect","contextMenuPosition","contextMenuTarget","noAppearanceAnimation","markShown","viewportPinnedIdsToRemove","isUnmount","isOwnMessage","hasReply","isReplyMessage","hasStoryReply","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isMention","isStoryMention","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","focusMessageInComments","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","hasText","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","metaPosition","reactionsPosition","quickReactionPosition","useFocusMessage","postAuthorTitle","requestForcedReflow","offsetWidth","useAuthorWidth","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","dispatchHeavyAnimationEvent","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","renderReactionsAndMeta","meta","MessageMeta","Reactions","renderSenderName","senderColor","senderEmojiStatus","senderIsPremium","fakeType","FakeIcon","forwardAuthor","chatUsername","c","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","TopicChip","EmbeddedMessage","EmbeddedStory","Sticker","AnimatedCustomEmoji","AnimatedEmoji","Album","MessagePhoneCall","RoundVideo","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","Story","StoryMention","Contact","Poll","Game","InvoiceMediaPreview","DotAnimation","WebPage","onCancelMediaTransfer","Invoice","Location","CommentButton","InlineButtons","ContextMenuContainer","anchor","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","chatBot","isLoadingBotInfo","chatBotFullInfo","isInMessageList","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","isBotInfoEmpty","messageGroups","getContainerHeight","isViewportNewest","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isSchedule","shouldRenderBotInfo","onFabToggle","onNotchToggle","openHistoryCalendar","useDerivedSignal","observeIntersectionForReading","markMentionsRead","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","isLocalMessageId","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","isTopicTopMessage","Message","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","MessageListBotInfo","SponsoredMessage","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isCreator","noMessageSendingAnimation","isServiceNotificationsChat","hasTools","canPost","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadUserStoriesByIds","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","storyDataList","storiesByUserIds","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","parentElement","prevContainerHeightRef","isComposerVisible","setContainerHeight","currentNormalHeight","normalHeight","String","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","useStateRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","animateScroll","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","ContactGreeting","NoMessages","MessageListContent","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","elementRef","hasUnreadReactions","hasUnreadMentions","messagesContainer","messageElements","lastMessageElement","ScrollDownButton","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","ChatLanguageModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","shouldLoadFullChat","shouldBlockSendInForum","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","isDesktop","dropAreaState","setDropAreaState","DropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","customBackgroundValue","useCustomBackground","settingValue","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","Blob","blob","createObjectURL","preloadImage","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onMouseUp","onDragEnter","MiddleHeader","onStop","MessageList","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","FloatingActionButtons","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","selectCanManage","isEditingInvite","canViewStatistics","_useCurrentOrPrev","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","ManagementScreens","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","StoryList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","CreateTopic","EditTopic","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","loadUserSkippedStories","toggleStoryPinned","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","transformOriginY","menuStyle","useMenuPosition","preventMessageInputBlurWithBubbling","handlePinClick","handleUnpinClick","TABS","mediaSearchType","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","hasCommonChatsTab","hasStoriesTab","resolvedUserId","archiveStoryIds","storyByIds","userFullInfo","hasPinnedStories","archiveIds","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","loadUserPinnedStories","loadStoriesArchive","deletingUserId","setDeletingUserId","initialTab","setActiveTab","renderingActiveTab","tabType","handleLoadUserStories","handleLoadStoriesArchive","resultType","noProfileInfo","searchMessages","loadStories","groupChatMembers","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","useUserStoriesPolling","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","StickerSearchAsync","GifSearchAsync","PollResultsAsync","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","prevChatId","RightHeader","MediaViewer","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","activeMessages","chatActiveDownloads","chatScheduledMessages","downloadHash","download","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","filename","encodeURIComponent","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","event","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createLocationHash","_extends","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","CONFETTI_COLORS","pick","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","beginPath","ellipse","hideTimeout","prevConfettiTime","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","ReactionPicker","info","ChatlistModal","StoryViewer","MapModal","DEBUG_isLogged","wasTimeFormatSetManually","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","mapModalGeoPoint","mapModalZoom","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","currentUserName","isPremiumModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadTopReactions","loadFeaturedEmojiStickers","setIsAppUpdateAvailable","loadPremiumSetStickers","loadBundle","removeUpdateDownloadedListener","on","ElectronEvent","removeUpdateErrorListener","BASE_EMOJI_KEYWORD_LANG","langCode","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","parentNode","childElementCount","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","AnimatedIconWithPreview","LOCAL_TGS_URLS","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}