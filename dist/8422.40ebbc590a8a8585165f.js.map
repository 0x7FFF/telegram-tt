{"version":3,"file":"8422.40ebbc590a8a8585165f.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts"],"sourcesContent":["import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ApiChat, ApiUser, ApiError, ApiChatMember,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { NewChatMembersProgress, ChatCreationProgress, ManagementProgress } from '../../../types';\nimport type {\n  GlobalState, ActionReturnType, TabArgs,\n} from '../../types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TG_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TMP_CHAT_ID,\n  ALL_FOLDER_ID,\n  DEBUG,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n  TME_WEB_DOMAINS,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  replaceThreadParam,\n  updateChatListIds,\n  updateChats,\n  updateChat,\n  updateChatListSecondaryInfo,\n  updateManagementProgress,\n  leaveChat,\n  replaceUsers,\n  replaceUserStatuses,\n  replaceChats,\n  replaceChatListIds,\n  addChatMembers,\n  updateUser,\n  addMessages,\n  updateTopics,\n  deleteTopic,\n  updateTopic,\n  updateThreadInfo,\n  updateListedTopicIds,\n} from '../../reducers';\nimport {\n  selectChat, selectUser, selectChatListType, selectIsChatPinned,\n  selectChatFolder, selectSupportChat, selectChatByUsername,\n  selectCurrentMessageList, selectThreadInfo, selectCurrentChat, selectLastServiceNotification,\n  selectVisibleUsers, selectUserByPhoneNumber, selectDraft, selectThreadTopMessageId,\n  selectTabState, selectThreadOriginChat, selectThread,\n} from '../../selectors';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly,\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserBot,\n} from '../../helpers';\nimport { formatShareText, parseChooseParameter, processDeepLink } from '../../../util/deeplink';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport * as langProvider from '../../../util/langProvider';\nimport { selectCurrentLimit } from '../../selectors/limits';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst SERVICE_NOTIFICATIONS_USER_MOCK: ApiUser = {\n  id: SERVICE_NOTIFICATIONS_USER_ID,\n  accessHash: '0',\n  type: 'userTypeRegular',\n  isMin: true,\n  phoneNumber: '',\n};\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, threadId = MAIN_THREAD_ID,\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    actions.requestThreadInfoUpdate({ chatId: id, threadId });\n  }\n});\n\naddActionHandler('openComments', async (global, actions, payload): Promise<void> => {\n  const {\n    id, threadId, originChannelId, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      const chat = selectThreadOriginChat(global, id, threadId);\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id, threadId, tabId });\n\n      const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n      if (!result) {\n        actions.openPreviousChat({ tabId });\n        return;\n      }\n      global = getGlobal();\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      setGlobal(global);\n\n      actions.openChat({\n        id,\n        threadId: result.topMessageId,\n        tabId,\n        shouldReplaceLast: true,\n      });\n    } else {\n      actions.openChat({ id, threadId: topMessageId, tabId });\n    }\n  }\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('focusMessageInComments', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, messageId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  actions.focusMessage({\n    chatId, threadId, messageId, tabId,\n  });\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const listType = payload.listType as 'active' | 'archived';\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  const getOrderDate = (chat: ApiChat) => {\n    return chat.lastMessage?.date || chat.joinDate;\n  };\n\n  while (shouldReplace || !global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => (\n          Boolean(chat && getOrderDate(chat))\n          && chat.id !== SERVICE_NOTIFICATIONS_USER_ID\n          && !selectIsChatPinned(global, chat.id)\n        ))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => getOrderDate(chat1)! - getOrderDate(chat2)!)[0]\n      : undefined;\n\n    await loadChats(global,\n      listType,\n      oldestChat?.id,\n      oldestChat ? getOrderDate(oldestChat) : undefined,\n      shouldReplace,\n      true);\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, force, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(global, actions, chat, tabId);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(global, actions, chat, tabId));\n  }\n});\n\naddActionHandler('loadTopChats', (global): ActionReturnType => {\n  runThrottledForLoadTopChats(() => loadChats(global, 'active'));\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, isMuted } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = updateChat(global, chatId, { isMuted });\n  setGlobal(global);\n  void callApi('updateChatMutedState', { chat, isMuted });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, isMuted, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = updateTopic(global, chatId, topicId, { isMuted });\n  setGlobal(global);\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n\n  try {\n    createdChannel = await callApi('createChannel', { title, about, users });\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const createdChat = await callApi('createGroupChat', {\n      title,\n      users,\n    });\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (e: any) {\n    if (e.message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const lastTopicMessageId = chat.topics?.[topicId]?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId, tabId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, tabId = getCurrentTabId(),\n  } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.translate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  actions.openChat({ id: chat.id, tabId });\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload): ActionReturnType => {\n  const {\n    url,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    openChatByPhoneNumber,\n    openChatByInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    showNotification,\n    focusMessage,\n    openInvoice,\n    processAttachBotParameters,\n    openChatByUsername: openChatByUsernameAction,\n  } = actions;\n\n  if (url.match(RE_TG_LINK)) {\n    processDeepLink(url);\n    return;\n  }\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${uri.pathname}` : uri.pathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const startAttach = params.hasOwnProperty('startattach') && !params.startattach ? true : params.startattach;\n  const choose = parseChooseParameter(params.choose);\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach,\n      attach: params.attach,\n      tabId,\n    });\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    openChatByInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n  } else if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = `-${chatOrChannelPostId}`;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n\n    focusMessage({\n      chatId,\n      messageId,\n      tabId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      slug: part2,\n      tabId,\n    });\n  } else if (startAttach && choose) {\n    processAttachBotParameters({\n      username: part1,\n      filter: choose,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n      tabId,\n    });\n  } else {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach,\n      attach: params.attach,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!commentId) {\n    if (!startAttach && messageId && !startParam && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, tabId,\n      });\n      return;\n    }\n    await openChatByUsername(global, actions, username, threadId, messageId, startParam, startAttach, attach, tabId);\n    return;\n  }\n\n  const { chatId, type } = selectCurrentMessageList(global, tabId) || {};\n  const usernameChat = selectChatByUsername(global, username);\n  if (chatId && messageId && usernameChat && type === 'thread') {\n    const threadInfo = selectThreadInfo(global, chatId, messageId);\n\n    if (threadInfo && threadInfo.chatId === chatId) {\n      actions.focusMessage({\n        chatId: threadInfo.chatId,\n        threadId: threadInfo.threadId,\n        messageId: commentId,\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!messageId) return;\n\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  global = getGlobal();\n\n  const threadInfo = selectThreadInfo(global, chatByUsername.id, messageId);\n  let discussionChatId: string | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat: chatByUsername, threadId: messageId });\n    if (!result) return;\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    setGlobal(global);\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n    tabId,\n  });\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateChat(global, chat.id, {\n    fullInfo: {\n      ...chat.fullInfo,\n      isPreHistoryHidden: isEnabled,\n    },\n  });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const chatAfterUpdate = selectChat(global, chatId);\n\n  if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(members && isBanned && {\n        members: members.filter((m) => m.userId !== userId),\n      }),\n      ...(members && !isBanned && {\n        members: members.map((m) => (\n          m.userId === userId\n            ? { ...m, bannedRights }\n            : m\n        )),\n      }),\n      ...(isUnblocked && kickedMembers && {\n        kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n      }),\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  global = getGlobal();\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(newAdminMembersById && { adminMembersById: newAdminMembersById }),\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    chat.fullInfo && chat.fullInfo.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  global = updateChat(global, chatId, {\n    avatarHash: undefined,\n    fullInfo: {\n      ...chat.fullInfo,\n      profilePhoto: undefined,\n    },\n  });\n  setGlobal(global);\n  // This method creates a new entry in photos array\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  // Explicitly delete the old photo reference\n  await callApi('deleteProfilePhotos', [photo]);\n  actions.loadFullChat({ chatId, tabId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const photosToDelete = [photo];\n  if (chat.avatarHash === photo.id) {\n    // Select next photo to set as avatar\n    const nextPhoto = chat.photos?.[1];\n    if (nextPhoto) {\n      photosToDelete.push(nextPhoto);\n    }\n    global = updateChat(global, chatId, {\n      avatarHash: undefined,\n      fullInfo: {\n        ...chat.fullInfo,\n        profilePhoto: undefined,\n      },\n    });\n    setGlobal(global);\n    // Set next photo as avatar\n    await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n      photo: nextPhoto,\n    });\n  }\n  // Delete references to the old photos\n  const result = await callApi('deleteProfilePhotos', photosToDelete);\n  if (!result) return;\n  actions.loadFullChat({ chatId, tabId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let { fullInfo } = chat;\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        isPreHistoryHidden: false,\n      },\n    });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, tabId = getCurrentTabId() } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo?.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat, tabId);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = (chat.fullInfo?.members?.length) || undefined;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  await callApi('addChatMembers', chat, users);\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, enabledReactions, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n  const { settings, users } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateChat(global, chat.id, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (!force && chat.listedTopicIds && chat.listedTopicIds.length === chat.topicsCount) {\n    return;\n  }\n\n  const offsetTopic = !force && chat.listedTopicIds ? chat.listedTopicIds.reduce((acc, el) => {\n    const topic = chat.topics?.[el];\n    const accTopic = chat.topics?.[acc];\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && chat.topics?.[offsetTopic]) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft?.formattedText);\n    global = replaceThreadParam(global, chatId, Number(threadId), 'replyingToId', draft?.replyingToId);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const prevIsForum = chat.isForum;\n  global = updateChat(global, chatId, { isForum: isEnabled });\n  setGlobal(global);\n\n  let result: true | undefined;\n  try {\n    result = await callApi('toggleForum', { chat, isEnabled });\n  } catch (error) {\n    if ((error as ApiError).message.startsWith('A wait of')) {\n      actions.showNotification({ message: langProvider.translate('FloodWait'), tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, { isForum: prevIsForum });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = chat.fullInfo?.areParticipantsHidden;\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      areParticipantsHidden: isEnabled,\n    },\n  });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      fullInfo: {\n        ...chat.fullInfo,\n        areParticipantsHidden: prevIsEnabled,\n      },\n    });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openChat({\n      id: chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('deleteTopic', { chat, topicId });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = chat?.topics?.[topicId];\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(chat.topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.translate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\nasync function loadChats<T extends GlobalState>(\n  global: T,\n  listType: 'active' | 'archived',\n  offsetId?: string,\n  offsetDate?: number,\n  shouldReplace = false,\n  isFullDraftSync?: boolean,\n) {\n  global = getGlobal();\n  let lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: shouldReplace,\n    lastLocalServiceMessage,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  global = getGlobal();\n\n  lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n\n  if (shouldReplace && listType === 'active') {\n    // Always include service notifications chat\n    if (!chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      const result2 = await callApi('fetchChat', {\n        type: 'user',\n        user: SERVICE_NOTIFICATIONS_USER_MOCK,\n      });\n\n      global = getGlobal();\n\n      const notificationsChat = result2 && selectChat(global, result2.chatId);\n      if (notificationsChat) {\n        chatIds.unshift(notificationsChat.id);\n        result.chats.unshift(notificationsChat);\n        if (lastLocalServiceMessage) {\n          notificationsChat.lastMessage = lastLocalServiceMessage;\n        }\n      }\n    }\n\n    const tabStates = Object.values(global.byTabId);\n    const visibleChats = tabStates.flatMap(({ id: tabId }) => {\n      const currentChat = selectCurrentChat(global, tabId);\n      return currentChat ? [currentChat] : [];\n    });\n\n    const visibleUsers = tabStates.flatMap(({ id: tabId }) => {\n      return selectVisibleUsers(global, tabId) || [];\n    });\n\n    if (global.currentUserId && global.users.byId[global.currentUserId]) {\n      visibleUsers.push(global.users.byId[global.currentUserId]);\n    }\n\n    global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n    global = replaceUserStatuses(global, result.userStatusesById);\n    global = replaceChats(global, buildCollectionByKey(visibleChats.concat(result.chats), 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else if (shouldReplace && listType === 'archived') {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else {\n    const newChats = buildCollectionByKey(result.chats, 'id');\n    if (chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      const notificationsChat = newChats[SERVICE_NOTIFICATIONS_USER_ID];\n      if (notificationsChat && lastLocalServiceMessage) {\n        newChats[SERVICE_NOTIFICATIONS_USER_ID] = {\n          ...notificationsChat,\n          lastMessage: lastLocalServiceMessage,\n        };\n      }\n    }\n\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, newChats);\n    global = updateChatListIds(global, listType, chatIds);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n  idsToUpdateDraft.forEach((chatId) => {\n    const draft = result.draftsById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!draft && !thread) return;\n\n    if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'draft', draft,\n      );\n    }\n  });\n\n  const idsToUpdateReplyingToId = isFullDraftSync ? result.chatIds : Object.keys(result.replyingToById);\n  idsToUpdateReplyingToId.forEach((chatId) => {\n    const replyingToById = result.replyingToById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!replyingToById && !thread) return;\n\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToById,\n    );\n  });\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    users, userStatusesById, fullInfo, groupCall, membersCount,\n  } = result;\n\n  global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  global = updateChat(global, chat.id, {\n    fullInfo,\n    ...(membersCount && { membersCount }),\n  });\n\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  if (stickerSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n      tabId,\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n) {\n  global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  setGlobal(global);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n    setGlobal(global);\n  }\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  username: string,\n  threadId?: number,\n  channelPostId?: number,\n  startParam?: string,\n  startAttach?: string | boolean,\n  attach?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!currentChat || !bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat.id,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({\n      chatId: chat.id, threadId, messageId: channelPostId, tabId,\n    });\n  } else if (!isCurrentChat) {\n    actions.openChat({ id: chat.id, threadId, tabId });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectTabState, selectUser,\n} from '../../selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\nimport type { ApiGroupCall } from '../../../api/types';\nimport type {\n  CallSound, ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { addChats, addUsers } from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { getMainUsername } from '../../helpers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport * as langProvider from '../../../util/langProvider';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestAnimationFrame(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants<T extends GlobalState>(\n  global: T,\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await fetchGroupCallParticipants(global, groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let { inviteLink } = chat.fullInfo!;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload!;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.translate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat, tabId);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) return;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall?.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash)) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(global, groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', (global, actions, payload): ActionReturnType => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.translate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.translate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\nimport type { ApiGroupCall } from '../../api/types';\nimport { selectGroupCall } from '../selectors/calls';\nimport { omit } from '../../util/iteratees';\nimport { updateChat } from './chats';\nimport { selectChat } from '../selectors';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChat(global, groupCall.chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          groupCallId: undefined,\n        },\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["SERVICE_NOTIFICATIONS_USER_MOCK","id","SERVICE_NOTIFICATIONS_USER_ID","accessHash","type","isMin","phoneNumber","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","async","loadChats","global","listType","offsetId","offsetDate","shouldReplace","arguments","length","undefined","isFullDraftSync","getGlobal","lastLocalServiceMessage","selectLastServiceNotification","message","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","chatIds","shift","includes","result2","user","notificationsChat","selectChat","chatId","unshift","chats","lastMessage","tabStates","Object","values","byTabId","visibleChats","flatMap","_ref5","tabId","currentChat","selectCurrentChat","visibleUsers","_ref6","selectVisibleUsers","currentUserId","users","byId","push","replaceUsers","buildCollectionByKey","concat","replaceUserStatuses","userStatusesById","replaceChats","replaceChatListIds","addUsers","addUserStatuses","updateChats","newChats","updateChatListIds","updateChatListSecondaryInfo","keys","draftsById","forEach","draft","thread","selectThread","MAIN_THREAD_ID","selectDraft","isLocal","replaceThreadParam","replyingToById","isFullyLoaded","setGlobal","loadFullChat","actions","chat","_len","_ref7","Array","_key","getCurrentTabId","fullInfo","groupCall","membersCount","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","updateChat","stickerSet","loadStickers","stickerSetInfo","fetchChatByUsername","username","localChat","selectChatByUsername","updateUser","getAttachBotOrNotify","_len3","_ref9","_key3","selectUser","isUserBot","bot","showNotification","langProvider","openAttachMenuFromLink","attach","startAttach","_len5","_ref11","_key5","callAttachBot","startParam","ensureIsSuperGroup","_len6","_ref12","_key6","isChatBasicGroup","newChat","_len2","_ref8","_key2","error","openLimitReachedModal","showDialog","data","hasErrorKey","migrateChat","openChat","addActionHandler","preloadedChatIds","Set","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatIds","map","_ref","selectCurrentMessageList","filter","Boolean","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","has","add","loadViewportMessages","threadId","payload","hasUnreadMark","toggleChatUnread","isChatSummaryOnly","requestChatUpdate","requestThreadInfoUpdate","originChannelId","topMessageId","selectThreadTopMessageId","selectThreadOriginChat","openPreviousChat","shouldReplaceLast","chatFullInfo","linkedChatId","messageId","focusMessage","selectSupportChat","shouldReplaceHistory","TMP_CHAT_ID","onReplace","getOrderDate","date","joinDate","DEBUG","console","connectionState","authState","listIds","oldestChat","selectIsChatPinned","sort","chat1","chat2","force","lastLocalMessage","isMuted","topicId","updateTopic","title","about","photo","memberIds","createdChannel","updateTabState","chatCreation","progress","ChatCreationProgress","channelId","selectTabState","userId","leaveChat","createdChat","e","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","ids","orderedPinnedIds","isChatArchived","chatFolders","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","emoticon","orderedIds","maxId","Math","max","recommendedId","description","newFolder","_ref2","folderIds","unreadCount","lastTopicMessageId","topics","lastMessageId","updateThreadInfo","lastReadInboxMessageId","hash","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","replace","url","openChatByPhoneNumber","openChatByInvite","openStickerSet","openChatWithDraft","joinVoiceChatByLink","openInvoice","processAttachBotParameters","openChatByUsername","openChatByUsernameAction","match","RE_TG_LINK","processDeepLink","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","window","open","toString","hostParts","split","part1","part2","part3","part","decodeURI","params","fromEntries","searchParams","hasOwnProperty","startattach","choose","parseChooseParameter","substr","shortName","chatOrChannelPostId","Number","commentId","comment","text","formatShareText","inviteHash","voicechat","livestream","slug","substring","start","usernames","c","channelPostId","_len4","_ref10","_key4","isCurrentChat","startBot","botId","param","usernameChat","threadInfo","selectThreadInfo","chatByUsername","discussionChatId","isEnabled","isPreHistoryHidden","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","avatarHash","profilePhoto","loadProfilePhotos","profileId","photosToDelete","nextPhoto","photos","groups","addedById","reduce","group","isForum","addChats","forDiscussionIds","channel","fullChat","activeChatFolder","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","isProtected","enabledReactions","settings","isChatSuperGroup","isChatChannel","forumPanelChatId","attachMenu","bots","requestedAttachBotInstall","onConfirm","action","requestAttachBotInChat","listedTopicIds","topicsCount","offsetTopic","acc","el","topic","accTopic","offsetTopicId","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","addMessages","messages","updateTopics","count","updateListedTopicIds","entries","_ref3","formattedText","replyingToId","readInboxMessageIdByTopicId","_ref4","shouldCloseChatOnError","prevIsForum","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","appConfig","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","src","muted","volume","play","then","currentTime","requestAnimationFrame","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","isCallPanelVisible","subscribed","peer","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","copyTextToClipboard","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","isVideo","state","participantId","adminId","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","checkMicrophonePermission","catch","audio","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}