{"version":3,"file":"8422.fa74311096d0f0a059db.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts"],"sourcesContent":["import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ApiChat, ApiUser, ApiChatFolder, ApiError, ApiChatMember,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { NewChatMembersProgress, ChatCreationProgress, ManagementProgress } from '../../../types';\nimport type { GlobalActions, GlobalState } from '../../types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TG_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TMP_CHAT_ID,\n  ALL_FOLDER_ID,\n  DEBUG,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n  TME_WEB_DOMAINS,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  replaceThreadParam,\n  updateChatListIds,\n  updateChats,\n  updateChat,\n  updateChatListSecondaryInfo,\n  updateManagementProgress,\n  leaveChat,\n  replaceUsers,\n  replaceUserStatuses,\n  replaceChats,\n  replaceChatListIds,\n  addChatMembers,\n  updateUser,\n  addMessages,\n  updateTopics,\n  deleteTopic,\n  updateTopic,\n  updateThreadInfo, updateListedTopicIds,\n} from '../../reducers';\nimport {\n  selectChat, selectUser, selectChatListType, selectIsChatPinned,\n  selectChatFolder, selectSupportChat, selectChatByUsername,\n  selectCurrentMessageList, selectThreadInfo, selectCurrentChat, selectLastServiceNotification,\n  selectVisibleUsers, selectUserByPhoneNumber, selectDraft, selectThreadTopMessageId,\n} from '../../selectors';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly,\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserBot,\n} from '../../helpers';\nimport { formatShareText, parseChooseParameter, processDeepLink } from '../../../util/deeplink';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport * as langProvider from '../../../util/langProvider';\nimport { selectCurrentLimit } from '../../selectors/limits';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst SERVICE_NOTIFICATIONS_USER_MOCK: ApiUser = {\n  id: SERVICE_NOTIFICATIONS_USER_ID,\n  accessHash: '0',\n  type: 'userTypeRegular',\n  isMin: true,\n  phoneNumber: '',\n};\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions) => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => id !== currentChatId && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID });\n  }\n});\n\naddActionHandler('openChat', (global, actions, payload) => {\n  const { id, threadId = MAIN_THREAD_ID, noForumTopicPanel } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  // Please telegram send us some updates about linked chat 🙏\n  if (chat?.lastMessage?.repliesThreadInfo) {\n    actions.requestThreadInfoUpdate({\n      chatId: chat.lastMessage.repliesThreadInfo.chatId,\n      threadId: chat.lastMessage.repliesThreadInfo.threadId,\n    });\n  }\n\n  if (chat?.isForum && !noForumTopicPanel) {\n    actions.openForumPanel({ chatId: id });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId });\n  }\n});\n\naddActionHandler('focusMessageInComments', async (global, actions, payload) => {\n  const { chatId, threadId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  actions.focusMessage({ chatId, threadId, messageId });\n});\n\naddActionHandler('openSupportChat', async (global, actions) => {\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload) => {\n  const listType = payload.listType as 'active' | 'archived';\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  const getOrderDate = (chat: ApiChat) => {\n    return chat.lastMessage?.date || chat.joinDate;\n  };\n\n  while (shouldReplace || !getGlobal().chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => (\n          Boolean(chat && getOrderDate(chat))\n          && chat.id !== SERVICE_NOTIFICATIONS_USER_ID\n          && !selectIsChatPinned(global, chat.id)\n        ))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => getOrderDate(chat1)! - getOrderDate(chat2)!)[0]\n      : undefined;\n\n    await loadChats(listType, oldestChat?.id, oldestChat ? getOrderDate(oldestChat) : undefined, shouldReplace, true);\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload) => {\n  const { chatId, force } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(chat);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(chat));\n  }\n});\n\naddActionHandler('loadTopChats', () => {\n  runThrottledForLoadTopChats(() => loadChats('active'));\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload) => {\n  const { chatId, isMuted } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateChat(global, chatId, { isMuted }));\n  void callApi('updateChatMutedState', { chat, isMuted });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload) => {\n  const { chatId, isMuted, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateTopic(global, chatId, topicId, { isMuted }));\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted,\n  });\n});\n\naddActionHandler('createChannel', (global, actions, payload) => {\n  const {\n    title, about, photo, memberIds,\n  } = payload!;\n\n  const members = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  void createChannel(title, members, about, photo);\n});\n\naddActionHandler('joinChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  void joinChannel(channelId, accessHash);\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload) => {\n  const { chatId, userId }: { chatId: string; userId: string } = payload!;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload) => {\n  const { chatId }: { chatId: string } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', (global, actions, payload) => {\n  const { title, memberIds, photo } = payload!;\n  const members = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  void createGroupChat(title, members, photo);\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload) => {\n  const { id, folderId } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('loadChatFolders', () => {\n  void loadChatFolders();\n});\n\naddActionHandler('loadRecommendedChatFolders', () => {\n  void loadRecommendedChatFolders();\n});\n\naddActionHandler('editChatFolders', (global, actions, payload) => {\n  const { chatId, idsToRemove, idsToAdd } = payload!;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = (idsToAdd as number[])\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats' });\n    return;\n  }\n\n  (idsToRemove as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  (idsToAdd as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload) => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', (global, actions, payload) => {\n  const { folder } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  void createChatFolder(folder, maxId);\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload) => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    });\n  }\n});\n\naddActionHandler('deleteChatFolder', (global, actions, payload) => {\n  const { id } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void deleteChatFolder(id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload) => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const lastTopicMessageId = chat.topics?.[topicId]?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload) => {\n  const { phoneNumber, startAttach, attach } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByPhoneNumber(phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat();\n    actions.showNotification({\n      message: langProvider.getTranslation('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n    });\n    return;\n  }\n\n  actions.openChat({ id: chat.id });\n\n  if (attach) {\n    openAttachMenuFromLink(actions, chat.id, attach, startAttach);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload) => {\n  const { url } = payload!;\n  const {\n    openChatByPhoneNumber,\n    openChatByInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    showNotification,\n    focusMessage,\n    openInvoice,\n    processAttachBotParameters,\n    openChatByUsername: openChatByUsernameAction,\n  } = actions;\n\n  if (url.match(RE_TG_LINK)) {\n    processDeepLink(url);\n    return;\n  }\n\n  const uri = new URL(url.startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${uri.pathname}` : uri.pathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const startAttach = params.hasOwnProperty('startattach') && !params.startattach ? true : params.startattach;\n  const choose = parseChooseParameter(params.choose);\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach,\n      attach: params.attach,\n    });\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    openChatByInvite({ hash });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n    });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text });\n  } else if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = `-${chatOrChannelPostId}`;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      showNotification({ message: 'Chat does not exist' });\n      return;\n    }\n\n    focusMessage({\n      chatId,\n      messageId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      slug: part1.substring(1),\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      slug: part2,\n    });\n  } else if (startAttach && choose) {\n    processAttachBotParameters({\n      username: part1,\n      filter: choose,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    });\n  } else {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach,\n      attach: params.attach,\n    });\n  }\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload) => {\n  const { hash } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload) => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId,\n  } = payload!;\n\n  const chat = selectCurrentChat(global);\n\n  if (!commentId) {\n    if (!startAttach && !startParam && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({ chatId: chat.id, threadId, messageId });\n      return;\n    }\n    await openChatByUsername(actions, username, threadId, messageId, startParam, startAttach, attach);\n    return;\n  }\n\n  const { chatId, type } = selectCurrentMessageList(global) || {};\n  const usernameChat = selectChatByUsername(global, username);\n  if (chatId && usernameChat && type === 'thread') {\n    const threadInfo = selectThreadInfo(global, chatId, messageId);\n\n    if (threadInfo && threadInfo.chatId === chatId) {\n      actions.focusMessage({\n        chatId: threadInfo.chatId,\n        threadId: threadInfo.threadId,\n        messageId: commentId,\n      });\n      return;\n    }\n  }\n\n  if (!messageId) return;\n\n  void openCommentsByUsername(actions, username, messageId, commentId);\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n\n  let chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n    global = getGlobal();\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  setGlobal(updateChat(global, chat.id, {\n    fullInfo: {\n      ...chat.fullInfo,\n      isPreHistoryHidden: isEnabled,\n    },\n  }));\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload) => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload) => {\n  const { chatId, userId, bannedRights } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const chatAfterUpdate = selectChat(global, chatId);\n\n  if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  setGlobal(updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(members && isBanned && {\n        members: members.filter((m) => m.userId !== userId),\n      }),\n      ...(members && !isBanned && {\n        members: members.map((m) => (\n          m.userId === userId\n            ? { ...m, bannedRights }\n            : m\n        )),\n      }),\n      ...(isUnblocked && kickedMembers && {\n        kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n      }),\n    },\n  }));\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload) => {\n  const {\n    chatId, userId, adminRights, customTitle,\n  } = payload!;\n\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  global = getGlobal();\n\n  setGlobal(updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(newAdminMembersById && { adminMembersById: newAdminMembersById }),\n    },\n  }));\n});\n\naddActionHandler('updateChat', async (global, actions, payload) => {\n  const {\n    chatId, title, about, photo,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    chat.fullInfo && chat.fullInfo.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload) => {\n  const { photo, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  setGlobal(updateChat(global, chatId, {\n    avatarHash: undefined,\n    fullInfo: {\n      ...chat.fullInfo,\n      profilePhoto: undefined,\n    },\n  }));\n  // This method creates a new entry in photos array\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  // Explicitly delete the old photo reference\n  await callApi('deleteProfilePhotos', [photo]);\n  actions.loadFullChat({ chatId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload) => {\n  const { photo, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const photosToDelete = [photo];\n  if (chat.avatarHash === photo.id) {\n    // Select next photo to set as avatar\n    const nextPhoto = chat.photos?.[1];\n    if (nextPhoto) {\n      photosToDelete.push(nextPhoto);\n    }\n    setGlobal(updateChat(global, chatId, {\n      avatarHash: undefined,\n      fullInfo: {\n        ...chat.fullInfo,\n        profilePhoto: undefined,\n      },\n    }));\n    // Set next photo as avatar\n    await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n      photo: nextPhoto,\n    });\n  }\n  // Delete references to the old photos\n  const result = await callApi('deleteProfilePhotos', photosToDelete);\n  if (!result) return;\n  actions.loadFullChat({ chatId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global) => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  setGlobal({\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  });\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload) => {\n  const { channelId, chatId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  let { fullInfo } = chat;\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    setGlobal(updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        isPreHistoryHidden: false,\n      },\n    }));\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload) => {\n  const { channelId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo?.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    loadFullChat(chat);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload) => {\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = payload + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n    });\n    return undefined;\n  }\n\n  return {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      activeChatFolder: payload,\n    },\n  };\n});\n\naddActionHandler('resetOpenChatWithDraft', (global) => {\n  return {\n    ...global,\n    requestedDraft: undefined,\n  };\n});\n\naddActionHandler('loadMoreMembers', async (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = (chat.fullInfo?.members?.length) || undefined;\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload) => {\n  const { chatId, memberIds } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Loading);\n  await callApi('addChatMembers', chat, users);\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n  loadFullChat(chat);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload) => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  loadFullChat(chat);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload) => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload) => {\n  const { chatId, enabledReactions } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  void loadFullChat(chat);\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n  const { settings, users } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  setGlobal(updateChat(global, chat.id, { settings }));\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload) => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload) => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload) => {\n  const { chatId } = payload;\n  return {\n    ...global,\n    forumPanelChatId: chatId,\n  };\n});\n\naddActionHandler('closeForumPanel', (global) => {\n  return {\n    ...global,\n    forumPanelChatId: undefined,\n  };\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload) => {\n  const { username, filter, startParam } = payload;\n  const bot = await getAttachBotOrNotify(global, username);\n  if (!bot) return;\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    setGlobal({\n      ...global,\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    });\n    return;\n  }\n\n  getActions().requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload) => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (!force && chat.listedTopicIds && chat.listedTopicIds.length === chat.topicsCount) {\n    return;\n  }\n\n  const offsetTopic = !force && chat.listedTopicIds ? chat.listedTopicIds.reduce((acc, el) => {\n    const topic = chat.topics?.[el];\n    const accTopic = chat.topics?.[acc];\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && chat.topics?.[offsetTopic]) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft?.formattedText);\n    global = replaceThreadParam(global, chatId, Number(threadId), 'replyingToId', draft?.replyingToId);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload) => {\n  const { chatId, topicId, shouldCloseChatOnError } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if (shouldCloseChatOnError) {\n      actions.openChat({ id: undefined });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload) => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsForum = chat.isForum;\n  global = updateChat(global, chatId, { isForum: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleForum', { chat, isEnabled });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, { isForum: prevIsForum });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload) => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = chat.fullInfo?.areParticipantsHidden;\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      areParticipantsHidden: isEnabled,\n    },\n  });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      fullInfo: {\n        ...chat.fullInfo,\n        areParticipantsHidden: prevIsEnabled,\n      },\n    });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload) => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (global.createTopicPanel) {\n    setGlobal({\n      ...global,\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    });\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openChat({ id: chatId, threadId: topicId, shouldReplaceHistory: true });\n  }\n  actions.closeCreateTopicPanel();\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload) => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('deleteTopic', { chat, topicId });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload) => {\n  const { chatId, topicId, ...rest } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = chat?.topics?.[topicId];\n  if (!chat || !topic) return;\n\n  if (global.editTopicPanel) {\n    setGlobal({\n      ...global,\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    });\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel();\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload) => {\n  const { chatId, topicId, isPinned } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(chat.topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.getTranslation('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\nasync function loadChats(\n  listType: 'active' | 'archived',\n  offsetId?: string,\n  offsetDate?: number,\n  shouldReplace = false,\n  isFullDraftSync?: boolean,\n) {\n  let global = getGlobal();\n  const lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: shouldReplace,\n    lastLocalServiceMessage,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  global = getGlobal();\n\n  if (shouldReplace && listType === 'active') {\n    // Always include service notifications chat\n    if (!chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      const result2 = await callApi('fetchChat', {\n        type: 'user',\n        user: SERVICE_NOTIFICATIONS_USER_MOCK,\n      });\n\n      global = getGlobal();\n\n      const notificationsChat = result2 && selectChat(global, result2.chatId);\n      if (notificationsChat) {\n        chatIds.unshift(notificationsChat.id);\n        result.chats.unshift(notificationsChat);\n        if (lastLocalServiceMessage) {\n          notificationsChat.lastMessage = lastLocalServiceMessage;\n        }\n      }\n    }\n\n    const currentChat = selectCurrentChat(global);\n    const visibleChats = currentChat ? [currentChat] : [];\n\n    const visibleUsers = selectVisibleUsers(global) || [];\n    if (global.currentUserId && global.users.byId[global.currentUserId]) {\n      visibleUsers.push(global.users.byId[global.currentUserId]);\n    }\n\n    global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n    global = replaceUserStatuses(global, result.userStatusesById);\n    global = replaceChats(global, buildCollectionByKey(visibleChats.concat(result.chats), 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else if (shouldReplace && listType === 'archived') {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = updateChatListIds(global, listType, chatIds);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n  idsToUpdateDraft.forEach((chatId) => {\n    if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n      );\n    }\n  });\n\n  const idsToUpdateReplyingToId = isFullDraftSync ? result.chatIds : Object.keys(result.replyingToById);\n  idsToUpdateReplyingToId.forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat(chat: ApiChat) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    users, userStatusesById, fullInfo, groupCall, membersCount,\n  } = result;\n\n  let global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  global = updateChat(global, chat.id, {\n    fullInfo,\n    ...(membersCount && { membersCount }),\n  });\n\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  if (stickerSet) {\n    getActions().loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n    });\n  }\n\n  return result;\n}\n\nasync function createChannel(title: string, users: ApiUser[], about?: string, photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  let createdChannel: ApiChat | undefined;\n\n  try {\n    createdChannel = await callApi('createChannel', { title, about, users });\n  } catch (error) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    });\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      getActions().openLimitReachedModal({ limit: 'channels' });\n    } else {\n      getActions().showDialog({ data: { ...(error as ApiError), hasErrorKey: true } });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  let global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getActions().openChat({ id: channelId, shouldReplaceHistory: true });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n}\n\nasync function joinChannel(channelId: string, accessHash: string) {\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      getActions().openLimitReachedModal({ limit: 'channels' });\n    } else {\n      getActions().showDialog({ data: { ...(error as ApiError), hasErrorKey: true } });\n    }\n  }\n}\n\nasync function createGroupChat(title: string, users: ApiUser[], photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  try {\n    const createdChat = await callApi('createGroupChat', {\n      title,\n      users,\n    });\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    let global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = {\n      ...global,\n      chatCreation: {\n        ...global.chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    };\n    setGlobal(global);\n    getActions()\n      .openChat({\n        id: chatId,\n        shouldReplaceHistory: true,\n      });\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (e: any) {\n    if (e.message === 'USERS_TOO_FEW') {\n      const global = getGlobal();\n      setGlobal({\n        ...global,\n        chatCreation: {\n          ...global.chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      });\n    }\n  }\n}\n\nexport async function migrateChat(chat: ApiChat): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      getActions().openLimitReachedModal({ limit: 'channels' });\n    } else {\n      getActions().showDialog({ data: { ...(error as ApiError), hasErrorKey: true } });\n    }\n\n    return undefined;\n  }\n}\n\nasync function loadChatFolders() {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    });\n  }\n}\n\nasync function loadRecommendedChatFolders() {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    });\n  }\n}\n\nasync function createChatFolder(folder: ApiChatFolder, maxId: number) {\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    });\n  }\n}\n\nasync function deleteChatFolder(id: number) {\n  await callApi('deleteChatFolder', id);\n}\n\nexport async function fetchChatByUsername(\n  username: string,\n) {\n  const global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  if (user) {\n    setGlobal(updateUser(getGlobal(), user.id, user));\n  }\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber(phoneNumber: string) {\n  const global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  if (user) {\n    setGlobal(updateUser(getGlobal(), user.id, user));\n  }\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify(global: GlobalState, username: string) {\n  const chat = await fetchChatByUsername(username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    getActions().showNotification({ message: langProvider.getTranslation('WebApp.AddToAttachmentUnavailableError') });\n\n    return undefined;\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername(\n  actions: GlobalActions,\n  username: string,\n  threadId?: number,\n  channelPostId?: number,\n  startParam?: string,\n  startAttach?: string | boolean,\n  attach?: string,\n) {\n  const global = getGlobal();\n  const currentChat = selectCurrentChat(global);\n\n  // Attach in the current chat\n  if (startAttach && !attach) {\n    const bot = await getAttachBotOrNotify(global, username);\n\n    if (!currentChat || !bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat.id,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID });\n  }\n\n  const chat = await fetchChatByUsername(username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat();\n      actions.showNotification({ message: 'User does not exist' });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({ chatId: chat.id, threadId, messageId: channelPostId });\n  } else if (!isCurrentChat) {\n    actions.openChat({ id: chat.id, threadId });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    openAttachMenuFromLink(actions, chat.id, attach, startAttach);\n  }\n}\n\nasync function openAttachMenuFromLink(\n  actions: GlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n) {\n  const bot = await getAttachBotOrNotify(getGlobal(), attach);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n  });\n}\n\nasync function openCommentsByUsername(\n  actions: GlobalActions,\n  username: string,\n  messageId: number,\n  commentId: number,\n) {\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) return;\n\n  let global = getGlobal();\n\n  const threadInfo = selectThreadInfo(global, chat.id, messageId);\n  let discussionChatId: string | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat, threadId: messageId });\n    if (!result) return;\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    setGlobal(global);\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n  });\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\nimport type { ApiGroupCall } from '../../../api/types';\nimport type { CallSound } from '../../types';\n\nimport { addChats, addUsers } from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { selectChat, selectUser } from '../../selectors';\nimport { getMainUsername } from '../../helpers';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport * as langProvider from '../../../util/langProvider';\n\n// Workaround for Safari not playing audio without user interaction\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\n\nlet sounds: Record<CallSound, HTMLAudioElement>;\nlet initializationPromise: Promise<void> | undefined = Promise.resolve();\n\nexport const initializeSoundsForSafari = () => {\n  if (!initializationPromise) return Promise.resolve();\n\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n\n  initializationPromise = Promise.all(Object.values(sounds).map((sound) => {\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play().then(() => {\n      sound.pause();\n      sound.volume = 1;\n      sound.currentTime = 0;\n      sound.muted = false;\n    });\n  })).then(() => {\n    initializationPromise = undefined;\n  });\n\n  return initializationPromise;\n};\n\nasync function fetchGroupCall(groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  let global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants(groupCall: Partial<ApiGroupCall>, nextOffset?: string) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global) => {\n  return {\n    ...global,\n    isCallPanelVisible: !global.isCallPanelVisible,\n  };\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload) => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(groupCall);\n    await fetchGroupCallParticipants(groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload) => {\n  const { chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  setGlobal(updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  }));\n\n  actions.joinGroupCall({ id: result.id, accessHash: result.accessHash });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions) => {\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let { inviteLink } = chat.fullInfo!;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload) => {\n  const { username, inviteHash } = payload!;\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.getTranslation('NoUsernameFound') });\n    return;\n  }\n\n  const full = await loadFullChat(chat);\n\n  if (full?.groupCall) {\n    actions.joinGroupCall({ id: full.groupCall.id, accessHash: full.groupCall.accessHash, inviteHash });\n  }\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload) => {\n  if (!ARE_CALLS_SUPPORTED) return;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  const {\n    chatId, id, accessHash, inviteHash,\n  } = payload;\n\n  createAudioElement();\n\n  await initializeSoundsForSafari();\n  void checkNavigatorUserMediaPermissions(true);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId);\n\n  if (groupCall?.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  if (activeGroupCallId) {\n    actions.leaveGroupCall({\n      rejoin: payload,\n    });\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash)) {\n    groupCall = await fetchGroupCall({\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n    isCallPanelVisible: false,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload) => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  if (initializationPromise) {\n    initializationPromise.then(doPlay);\n  } else {\n    doPlay();\n  }\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global) => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestCall', async (global, actions, payload) => {\n  const { userId, isVideo } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  await initializeSoundsForSafari();\n  void checkNavigatorUserMediaPermissions(isVideo);\n\n  setGlobal({\n    ...getGlobal(),\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n    isCallPanelVisible: false,\n  });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions(isVideo?: boolean) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          getActions().showNotification({\n            message: langProvider.getTranslation('Call.Camera.Error'),\n          });\n        } else {\n          checkMicrophonePermission();\n        }\n      })\n      .catch(() => {\n        getActions().showNotification({\n          message: langProvider.getTranslation('Call.Camera.Error'),\n        });\n      });\n  } else {\n    checkMicrophonePermission();\n  }\n}\n\nfunction checkMicrophonePermission() {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        getActions().showNotification({\n          message: langProvider.getTranslation('RequestAcces.Error.HaveNotAccess.Call'),\n        });\n      }\n    })\n    .catch(() => {\n      getActions().showNotification({\n        message: langProvider.getTranslation('RequestAcces.Error.HaveNotAccess.Call'),\n      });\n    });\n}\n","import type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\nimport type { ApiGroupCall } from '../../api/types';\nimport { selectGroupCall } from '../selectors/calls';\nimport { omit } from '../../util/iteratees';\nimport { updateChat } from './chats';\nimport { selectChat } from '../selectors';\n\nexport function updateGroupCall(\n  global: GlobalState,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): GlobalState {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall(\n  global: GlobalState,\n  groupCallId: string,\n): GlobalState {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChat(global, groupCall.chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          groupCallId: undefined,\n        },\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall(\n  global: GlobalState,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): GlobalState {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant(\n  global: GlobalState,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n) {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["SERVICE_NOTIFICATIONS_USER_MOCK","id","SERVICE_NOTIFICATIONS_USER_ID","accessHash","type","isMin","phoneNumber","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetId","offsetDate","shouldReplace","isFullDraftSync","global","getGlobal","lastLocalServiceMessage","selectLastServiceNotification","message","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","chatIds","length","shift","includes","result2","user","notificationsChat","selectChat","chatId","unshift","chats","lastMessage","currentChat","selectCurrentChat","visibleChats","visibleUsers","selectVisibleUsers","currentUserId","users","byId","push","replaceUsers","buildCollectionByKey","concat","replaceUserStatuses","userStatusesById","replaceChats","replaceChatListIds","addUsers","addUserStatuses","updateChats","updateChatListIds","updateChatListSecondaryInfo","idsToUpdateDraft","Object","keys","draftsById","forEach","selectDraft","MAIN_THREAD_ID","isLocal","replaceThreadParam","idsToUpdateReplyingToId","replyingToById","isFullyLoaded","setGlobal","loadFullChat","chat","fullInfo","groupCall","membersCount","existingGroupCall","selectGroupCall","updateGroupCall","omit","undefined","participantsCount","updateChat","stickerSet","getActions","loadStickers","stickerSetInfo","migrateChat","error","openLimitReachedModal","showDialog","data","hasErrorKey","fetchChatByUsername","username","localChat","selectChatByUsername","updateUser","getAttachBotOrNotify","selectUser","isUserBot","bot","showNotification","langProvider","openAttachMenuFromLink","actions","attach","startAttach","callAttachBot","startParam","addActionHandler","preloadedChatIds","Set","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatId","selectCurrentMessageList","nextChatId","getOrderedIds","ALL_FOLDER_ID","find","has","add","loadViewportMessages","threadId","payload","noForumTopicPanel","hasUnreadMark","toggleChatUnread","repliesThreadInfo","requestThreadInfoUpdate","isForum","openForumPanel","isChatSummaryOnly","requestChatUpdate","selectThreadTopMessageId","chatFullInfo","linkedChatId","openChat","messageId","focusMessage","selectSupportChat","shouldReplaceHistory","TMP_CHAT_ID","onReplace","getOrderDate","date","joinDate","DEBUG","console","connectionState","authState","listIds","oldestChat","map","filter","Boolean","selectIsChatPinned","sort","chat1","chat2","force","lastLocalMessage","isMuted","topicId","updateTopic","title","about","photo","memberIds","createdChannel","chatCreation","progress","ChatCreationProgress","channelId","createChannel","joinChannel","userId","leaveChat","createdChat","e","createGroupChat","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","orderedPinnedIds","isChatArchived","chatFolders","loadChatFolders","recommendedChatFolders","recommended","loadRecommendedChatFolders","idsToRemove","idsToAdd","some","includedId","emoticon","orderedIds","maxId","recommendedId","description","newFolder","createChatFolder","Math","max","folderIds","deleteChatFolder","unreadCount","lastTopicMessageId","topics","lastMessageId","updateThreadInfo","lastReadInboxMessageId","hash","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","openPreviousChat","replace","url","openChatByPhoneNumber","openChatByInvite","openStickerSet","openChatWithDraft","joinVoiceChatByLink","openInvoice","processAttachBotParameters","openChatByUsername","openChatByUsernameAction","match","RE_TG_LINK","processDeepLink","uri","URL","startsWith","TME_WEB_DOMAINS","hostname","pathname","window","open","toString","hostParts","split","part1","part2","part3","part","decodeURI","params","fromEntries","searchParams","hasOwnProperty","startattach","choose","parseChooseParameter","substr","shortName","chatOrChannelPostId","Number","commentId","comment","text","formatShareText","inviteHash","voicechat","livestream","slug","substring","start","usernames","c","channelPostId","isCurrentChat","startBot","botId","param","usernameChat","threadInfo","selectThreadInfo","discussionChatId","openCommentsByUsername","isEnabled","isChatBasicGroup","isPreHistoryHidden","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","avatarHash","profilePhoto","loadProfilePhotos","profileId","photosToDelete","nextPhoto","photos","groups","addedById","reduce","group","addChats","forDiscussionIds","channel","fullChat","activeChatFolder","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","NewChatMembersProgress","isProtected","enabledReactions","settings","isChatSuperGroup","isChatChannel","forumPanelChatId","attachMenu","bots","requestAttachBotInChat","requestedAttachBotInstall","onConfirm","action","listedTopicIds","topicsCount","offsetTopic","acc","el","topic","accTopic","offsetTopicId","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","addMessages","messages","updateTopics","count","updateListedTopicIds","entries","draft","formattedText","replyingToId","readInboxMessageIdByTopicId","shouldCloseChatOnError","prevIsForum","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","appConfig","values","audioElement","audioContext","sounds","initializationPromise","resolve","initializeSoundsForSafari","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","sound","muted","volume","play","then","currentTime","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","checkNavigatorUserMediaPermissions","isVideo","navigator","mediaDevices","getUserMedia","video","stream","getVideoTracks","checkMicrophonePermission","catch","audio","getAudioTracks","isCallPanelVisible","subscribed","peer","joinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","copyTextToClipboard","full","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","enabled","silence","safePlay","createAudioElement","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","doPlay","state","participantId","adminId","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}