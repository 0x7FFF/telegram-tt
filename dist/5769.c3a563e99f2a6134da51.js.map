{"version":3,"file":"5769.c3a563e99f2a6134da51.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/usePrevious2.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/util/primitives/LimitedMap.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/Giveaway.module.scss?9b0c","webpack://telegram-t/./src/components/middle/message/Giveaway.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageAppendix.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/hooks/useAuthorWidth.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import type {\n  ApiChat, ApiMessage, ApiPollResult, ApiReactions,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ActiveEmojiInteraction, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit, pickTruthy, unique } from '../../../util/iteratees';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport {\n  checkIfHasUnreadReactions, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessageByPollId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageLocalId: omit(global.fileUploads.byMessageLocalId, [localId.toString()]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfos': {\n      const {\n        threadInfoUpdates,\n      } = update;\n\n      global = updateThreadInfos(global, threadInfoUpdates);\n      threadInfoUpdates.forEach((threadInfo) => {\n        const { chatId, threadId } = threadInfo;\n        if (!chatId || !threadId) return;\n\n        const chat = selectChat(global, chatId);\n        const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n        if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: threadId });\n        }\n\n        // Update reply thread last read message id if already read in main thread\n        if (!chat?.isForum) {\n          const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n          const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n          if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n            global = updateThreadInfo(global, chatId, threadId, {\n              lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n            });\n          }\n        }\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const currentSendAs = selectSendAs(global, message.chatId);\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(peerId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (currentSendAs?.id === peerId || peerId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? {};\n\n  if (threadInfo && threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message) && !isActionMessage(message)) {\n      global = updateThreadInfo(global, chatId, threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<number>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) return;\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiVideo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, omit, partition, split, unique,\n} from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport {\n  debounce, onTickEnd, rafPromise,\n} from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getMessageOriginalId,\n  getUserFullName,\n  isChatChannel,\n  isDeletedUser,\n  isLocalMessageId,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceSettings,\n  replaceThreadParam,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeerStory,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global,\n        actions,\n        areAllLocal,\n        isOutlying,\n        isBudgetPreload,\n        chat,\n        threadId!,\n        direction,\n        offsetId,\n        onLoaded,\n        tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const draftReplyInfo = !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    userId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n\n  const params = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n          wasDrafted: Boolean(draft),\n        });\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          });\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: translate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: number; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n      });\n    })();\n  }\n\n  serviceMessages\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyInfo,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, chatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(threadId);\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyInfo?: ApiInputReplyInfo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  groupedId?: string;\n  wasDrafted?: boolean;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n  const isStoriesViewerOpen = Boolean(selectTabState(global, tabId).storyViewer.peerId);\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    if (isStoriesViewerOpen) {\n      actions.closeStoryViewer({ tabId });\n    }\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      if (isStoriesViewerOpen) {\n        actions.closeStoryViewer({ tabId });\n      }\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    let fullInfo = selectUserFullInfo(global, chatId);\n    if (!fullInfo) {\n      const { accessHash } = user;\n      const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n      user = result?.user;\n      fullInfo = result?.fullInfo;\n    }\n\n    if (fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      views: update.views,\n      forwards: update.forwards,\n    });\n\n    global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport * as langProvider from '../../../util/langProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiTopic, ApiUser,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport { selectChat, selectCurrentGlobalSearchQuery, selectTabState } from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountChats, accountUsers, globalChats, globalUsers,\n      } = result;\n\n      if (accountChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...accountChats, ...globalChats], 'id'));\n      }\n\n      if (accountUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...accountUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: accountChats.map(({ id }) => id),\n          userIds: accountChats.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n","import type { ApiChat } from '../../../api/types';\nimport type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n} from '../../selectors';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    threadId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat } from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          currentChat,\n          activeThreadId,\n          activeThreadId !== MAIN_THREAD_ID ? activeThreadId : undefined,\n        ),\n        activeThreadId !== MAIN_THREAD_ID ? callApi('fetchDiscussionMessage', {\n          chat: currentChat,\n          messageId: activeThreadId,\n        }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const isDiscussionStartLoaded = result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        if (resultDiscussion) {\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          resultDiscussion.threadInfoUpdates.forEach((update) => {\n            global = updateThreadInfo(global, currentChatId, activeThreadId, update);\n          });\n        }\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, offsetId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: offsetId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addUsers } from '../../reducers';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectPeer, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatarHash\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  setGlobal(global);\n  if (withPhotos || (user.photos?.length && hasChangedPhoto)) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, profileId);\n  if (user && !fullInfo?.profilePhoto) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n\n    user = result.user;\n    fullInfo = result.fullInfo;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n\n  const fallbackPhoto = fullInfo?.fallbackPhoto;\n  const personalPhoto = fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { accountUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (accountUsers.length) {\n      global = addUsers(global, buildCollectionByKey(accountUsers, 'id'));\n      localUserIds = accountUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload!;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { GlobalState, TabArgs } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport {\n  type ApiChat, type ApiChatType, type ApiContact, type ApiInputMessageReplyInfo, type ApiPeer, type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport { addChats, addUsers, removeBlockedUser } from '../../reducers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot, selectChat, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectDraft,\n  selectIsTrustedBot, selectMessageReplyInfo, selectSendAs, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    botId = message.viaBotId || message.senderId;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyInfo,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: translate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive && !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  const result = await loadAttachBots(global, hash);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: { hash: result?.hash },\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","import type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError, isChatChannel } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addUsers, closeInvoice,\n  setInvoiceInfo, setPaymentForm,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo, setStripeCardInfo,\n  updatePayment,\n  updateShippingOptions,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectPaymentFormId,\n  selectPaymentInputInvoice, selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatChannel(chat)) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostsStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = addChats(global, buildCollectionByKey(myBoosts.chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(myBoosts.users, 'id'));\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostsListResult, boostStatusResult] = await Promise.all([\n    callApi('fetchBoostsList', { chat }),\n    callApi('fetchBoostsStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostsListResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = addUsers(global, buildCollectionByKey(boostsListResult.users, 'id'));\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      boosters: boostsListResult.boosters,\n      boosterIds: boostsListResult.boosterIds,\n      count: boostsListResult.count,\n      nextOffset: boostsListResult.nextOffset,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostsList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      boosters: {\n        ...tabState.boostStatistics.boosters,\n        ...result.boosters,\n      },\n      boosterIds: unique([...tabState.boostStatistics.boosterIds || [], ...result.boosterIds]),\n      count: result.count,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  let tabState = selectTabState(global, tabId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n\n  const newStatusResult = await callApi('fetchBoostsStatus', {\n    chat,\n  });\n\n  if (!newStatusResult) {\n    return;\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal?.boostStatus) return;\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      boostStatus: newStatusResult,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getDocumentMediaHash,\n  getMessageKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation), ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: [],\n  };\n  setGlobal(global);\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers,\n  updateMessageStatistics, updateStatistics, updateStatisticsGraph,\n} from '../../reducers';\nimport { selectChat, selectChatFullInfo, selectChatMessages } from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, PREVIEW_AVATAR_COUNT } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addStories,\n  addStoriesForPeer,\n  addUsers,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerPinnedStory,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport {\n  selectPeer, selectPeerStories, selectPeerStory,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isPinned) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryPinned', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isPinned } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isPinned : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isPinned });\n  global = updatePeerPinnedStory(global, peerId, storyId, isPinned);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryPinned', { peer, storyId, isPinned });\n  if (!result) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isPinned: currentIsPinned });\n    global = updatePeerPinnedStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerPinnedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerPinnedStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isPreload = 'isPreload' in payload;\n  const {\n    offset, areReactionsFirst, areJustContacts, query, limit,\n  } = isPreload ? {\n    offset: undefined,\n    areReactionsFirst: undefined,\n    areJustContacts: undefined,\n    query: undefined,\n    limit: PREVIEW_AVATAR_COUNT,\n  } : payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (!isPreload) {\n    global = updateStoryViewsLoading(global, true, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const viewsById = buildCollectionByKey(result.views, 'userId');\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  if (!isPreload) global = updateStoryViews(global, storyId, viewsById, result.nextOffset, tabId);\n\n  if (isPreload && result.views?.length) {\n    const recentViewerIds = result.views.map((view) => view.userId);\n    global = updatePeerStory(global, peerId, storyId, {\n      recentViewerIds,\n      viewsCount: result.viewsCount,\n      reactionsCount: result.reactionsCount,\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('reportStory', {\n    peer,\n    storyId,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { buildChatThreadKey } from '../../helpers';\nimport { addActionHandler } from '../../index';\nimport {\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n  updateLocalTextSearch,\n} from '../../reducers';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  FAST_SMOOTH_MAX_DURATION,\n  RELEASE_DATETIME,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport { getMessageSummaryText, getSenderTitle, isChatChannel } from '../../helpers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMessageMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({ replyToMsgId: messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      const chat = selectChat(global, chatId);\n\n      lastMessageId = chat?.lastMessage?.id;\n    }\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return cancelMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  for (const message of messages) {\n    global = cancelMessageMediaDownload(global, message, tabId);\n  }\n\n  return global;\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return addActiveMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n","import type { ApiMessage } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  return APP_VERSION_REGEX.test(sanitizedRemoteVersion) && sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectTabState,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : PAGE_TITLE);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_PLAYBACK_RATE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: (\n        playbackRate\n        || tabState.mediaViewer.playbackRate\n        || global.mediaViewer.lastPlaybackRate\n        || DEFAULT_PLAYBACK_RATE\n      ),\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n    },\n  }, tabId);\n});\n","import type { ApiStoryView } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addChats, addStoriesForPeer, addUsers } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive,\n  } = tabState.storyViewer;\n\n  if (isSingleStory) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  const { orderedPeerIds: { active, archived } } = global.stories;\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const orderedPeerIds = (peer.areStoriesHidden ? archived : active) ?? [];\n  const storySourceProp = isArchive ? 'archiveIds' : isPrivate ? 'pinnedIds' : 'orderedIds';\n  const peerStoryIds = peerStories[storySourceProp] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (selectPeerStories(global, previousPeerId)?.orderedIds.length || 1) - 1;\n  }\n\n  const previousStoryId = selectPeerStories(global, previousPeerId)?.[storySourceProp]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive,\n  } = tabState.storyViewer;\n  if (isSingleStory) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  const { orderedPeerIds: { active, archived } } = global.stories;\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const orderedPeerIds = (peer.areStoriesHidden ? archived : active) ?? [];\n  const storySourceProp = isArchive ? 'archiveIds' : isPrivate ? 'pinnedIds' : 'orderedIds';\n  const peerStoryIds = peerStories[storySourceProp] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = selectPeerStories(global, nextPeerId)?.[storySourceProp]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.translate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.translate(message),\n    actionText: langProvider.translate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        viewsById: {},\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n\n  if (!viewModal?.viewsById?.[userId]) return global;\n\n  const updatedViewsById: Record<string, ApiStoryView> = {\n    ...viewModal.viewsById,\n    [userId]: {\n      ...viewModal.viewsById[userId],\n      isUserBlocked: isUserBlocked || undefined,\n      areStoriesBlocked: areStoriesBlocked || undefined,\n    },\n  };\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        viewsById: updatedViewsById,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  leaveChat,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      const localChat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n      if (topic) {\n        global = updateTopic(global, update.chatId, topic.id, {\n          unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact, replaceUserStatuses, updatePeerStoriesHidden, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { selectIsCurrentUserPremium, selectUser, selectUserFullInfo } from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addStoriesForPeer,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updateStealthMode,\n} from '../../reducers';\nimport { selectPeerStories, selectPeerStory } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.resetDraftReplyInfo({ tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots({ hash: global.attachMenu.hash });\n      break;\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/langProvider';\nimport { IS_PRODUCTION_HOST } from '../../../util/windowEnvironment';\nimport { addActionHandler } from '../../index';\nimport { closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransition(isStoryRibbonShown, undefined, undefined, '');\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n        storyRibbonClassNames,\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { LangFn } from './useLang';\n\nimport useBrowserOnline from './useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme } from '../../../global/selectors';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {lang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          Switch to K Version\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = global.settings.byKey;\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useTimeout from '../../../hooks/useTimeout';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useFullscreenStatus } from '../../../hooks/useFullscreen';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler canShow={!isSearchFocused && !selectedSearchDate && !globalSearchChatId} />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport {\n  IS_APP, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious2 from '../../hooks/usePrevious2';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious2(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import { useRef } from '../lib/teact/teact';\n\n// This is not render-dependent and will never allow previous to match current\nexport default function usePrevious2<T extends any>(current: T) {\n  const prevRef = useRef<T>();\n  const lastRef = useRef<T>();\n\n  if (lastRef.current !== current) {\n    prevRef.current = lastRef.current;\n  }\n\n  lastRef.current = current;\n\n  return prevRef.current;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useLang from './useLang';\nimport useMedia from './useMedia';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n} from '../../api/types';\nimport type { AudioOrigin } from '../../types';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender, selectTabState } from '../../global/selectors';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport RippleEffect from '../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default GiftPremiumModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useLastCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean,\n) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments || (message.content.text && !currentAlbum.mainMessage.hasComments)) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    const lastSenderGroupItem = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastSenderGroupItem\n              && 'mainMessage' in lastSenderGroupItem && lastSenderGroupItem.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.senderUserId !== nextMessage.forwardInfo?.senderUserId)\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { getPeerIdDividend } from '../../global/helpers';\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport StickerView from '../common/StickerView';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  return (\n    <div className=\"ContactGreeting\">\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div ref={containerRef} className=\"sticker\" onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getPeerIdDividend(userId) + getPeerIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Lsq8MNpDNQOesVld_hE2\",\"bot-info\":\"QDlMH9oNVNDnHBMnbvhw\",\"botInfo\":\"QDlMH9oNVNDnHBMnbvhw\",\"bot-info-description\":\"qhxnNXJM8_CyuUQ0pxo7\",\"botInfoDescription\":\"qhxnNXJM8_CyuUQ0pxo7\",\"bot-info-title\":\"mdOWgfW0GwJTT3vqO5_M\",\"botInfoTitle\":\"mdOWgfW0GwJTT3vqO5_M\",\"image\":\"ZAL3vluMFRM8wd30wuzL\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { DPR } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useLang();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const { width, height } = botInfoRealDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={botInfoRealDimensions && (\n            `width: ${botInfoRealDimensions.width}px`\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.image}\n              src={botInfoPhotoUrl}\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n            />\n          )}\n          {botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/useBackgroundMode';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","/**\n * A Map that has a limited size. When the limit is reached, the oldest entry is removed.\n * Ignores last access time, only cares about insertion order.\n */\nexport default class LimitedMap<K, V> {\n  private map: Map<K, V>;\n\n  private insertionQueue: Set<K>;\n\n  constructor(private limit: number) {\n    this.map = new Map();\n    this.insertionQueue = new Set<K>();\n  }\n\n  public get(key: K): V | undefined {\n    return this.map.get(key);\n  }\n\n  public set(key: K, value: V): this {\n    if (this.map.size === this.limit) {\n      const keyToRemove = Array.from(this.insertionQueue).shift();\n      if (keyToRemove) {\n        this.map.delete(keyToRemove);\n        this.insertionQueue.delete(keyToRemove);\n      }\n    }\n\n    this.map.set(key, value);\n    this.insertionQueue.add(key);\n\n    return this;\n  }\n\n  public delete(key: K): boolean {\n    const result = this.map.delete(key);\n    if (result) {\n      this.insertionQueue.delete(key);\n    }\n    return result;\n  }\n\n  public clear(): void {\n    this.map.clear();\n    this.insertionQueue.clear();\n  }\n\n  public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n    this.map.forEach(callbackfn, thisArg);\n  }\n\n  public get size(): number {\n    return this.map.size;\n  }\n\n  public get [Symbol.toStringTag](): string {\n    return this.map[Symbol.toStringTag];\n  }\n\n  public [Symbol.iterator](): IterableIterator<[K, V]> {\n    return this.map[Symbol.iterator]();\n  }\n\n  public entries(): IterableIterator<[K, V]> {\n    return this.map.entries();\n  }\n\n  public keys(): IterableIterator<K> {\n    return this.map.keys();\n  }\n\n  public values(): IterableIterator<V> {\n    return this.map.values();\n  }\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { updateDraftReplyInfo, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    updateDraftReplyInfo({ replyToMsgId: messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        updateDraftReplyInfo({ replyToMsgId: messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer, ApiTypeStory } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  getSenderTitle,\n  getStoryMediaHash,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPictogramDimensions } from '../helpers/mediaDimensions';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Icon from '../Icon';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiPeer;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        getPeerColorClass(sender, noUserColors, true),\n        pictogramUrl && 'with-thumb',\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p className=\"embedded-text-wrapper\">\n          {isExpiredStory && (\n            <Icon name=\"story-expired\" className=\"embedded-origin-icon\" />\n          )}\n          {isFullStory && (\n            <Icon name=\"story-reply\" className=\"embedded-origin-icon\" />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" draggable={false} />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds?: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useLastCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const isScheduled = album.mainMessage.isScheduled;\n\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds: isScheduled ? activeDownloads?.scheduledIds : activeDownloads?.ids,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiCommentsInfo } from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiCommentsInfo;\n  disabled?: boolean;\n  isLoading?: boolean;\n  isCustomShape?: boolean;\n};\n\nconst SHOW_LOADER_DELAY = 450;\n\nconst CommentButton: FC<OwnProps> = ({\n  isCustomShape,\n  threadInfo,\n  disabled,\n  isLoading,\n}) => {\n  const { openThread } = getActions();\n\n  const shouldRenderLoading = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n\n  const lang = useLang();\n  const {\n    originMessageId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openThread({\n      isComments: true, chatId, originMessageId, originChannelId,\n    });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const global = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return selectPeer(global, peerId);\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('CommentsCount', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName(\n        'CommentButton',\n        hasUnread && 'has-unread',\n        disabled && 'disabled',\n        isCustomShape && 'CommentButton-custom-shape',\n        isLoading && 'loading',\n      )}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <i\n        className={buildClassName(\n          'CommentButton_icon-comments icon icon-comments-sticker',\n          isLoading && shouldRenderLoading && 'CommentButton_hidden',\n        )}\n        aria-hidden\n      />\n      {!recentRepliers?.length && <i className=\"icon icon-comments\" aria-hidden />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <div className=\"CommentButton_right\">\n        {isLoading && (\n          <Spinner\n            className={buildClassName(\n              'CommentButton_loading',\n              !shouldRenderLoading && 'CommentButton_hidden',\n            )}\n            color={isCustomShape ? 'white' : 'blue'}\n          />\n        ) }\n        <i\n          className={buildClassName(\n            'CommentButton_icon-open icon icon-next',\n            isLoading && shouldRenderLoading && 'CommentButton_hidden',\n          )}\n          aria-hidden\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar\n        size=\"large\"\n        peer={user}\n        text={firstName || lastName}\n      />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    const user = selectUser(global, contact.userId);\n\n    return {\n      user,\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n            draggable={false}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SP9ygrz63JLi4xNqwoVE\",\"title\":\"Sw5A_K0ZxEX96Ui9lFCb\",\"gift\":\"Mtiki0kCz4W4kUdV8FK0\",\"count\":\"SgtGraFRcPrLtRnxw3gt\",\"section\":\"phMVInVgl42PoTFQfGqI\",\"description\":\"Vb0eOjCRZWXBFSaUyvx2\",\"channels\":\"_3mJaV4k42iv1TfpFUHbF\",\"channel\":\"RfJFPbFLakyaHV8YKBWt\",\"button\":\"NFt5nDqi5BykWcvrsjtU\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiGiveawayInfo, ApiMessage, ApiPeer, ApiSticker,\n} from '../../../api/types';\n\nimport { getChatTitle, getUserFullName, isApiPeerChat } from '../../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectForwardedSender,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport { formatDateAtTime, formatDateTimeToString } from '../../../util/dateFormat';\nimport { isoToEmoji } from '../../../util/emoji';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './Giveaway.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  sender?: ApiPeer;\n  giftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst NBSP = '\\u00A0';\nconst GIFT_STICKER_SIZE = 175;\n\nconst Giveaway = ({\n  chat,\n  sender,\n  message,\n  canPlayAnimatedEmojis,\n  giftSticker,\n}: OwnProps & StateProps) => {\n  const { openChat } = getActions();\n\n  const isLoadingInfo = useRef(false);\n  const [giveawayInfo, setGiveawayInfo] = useState<ApiGiveawayInfo | undefined>();\n\n  const lang = useLang();\n  const {\n    months, quantity, channelIds, untilDate, countries,\n  } = message.content.giveaway!;\n\n  const hasEnded = getServerTime() > untilDate;\n\n  const countryList = useMemo(() => {\n    const translatedNames = new Intl.DisplayNames([lang.code!, 'en'].filter(Boolean), { type: 'region' });\n    return countries?.map((countryCode) => (\n      `${isoToEmoji(countryCode)}${NBSP}${translatedNames.of(countryCode)}`\n    )).join(', ');\n  }, [countries, lang.code]);\n\n  const handleChannelClick = useLastCallback((channelId: string) => {\n    openChat({ id: channelId });\n  });\n\n  const handleShowInfoClick = useLastCallback(async () => {\n    if (isLoadingInfo.current) return;\n\n    isLoadingInfo.current = true;\n    const result = await callApi('fetchGiveawayInfo', {\n      peer: chat,\n      messageId: message.id,\n    });\n    setGiveawayInfo(result);\n    isLoadingInfo.current = false;\n  });\n\n  const handleCloseInfo = useLastCallback(() => {\n    setGiveawayInfo(undefined);\n  });\n\n  const giveawayInfoTitle = useMemo(() => {\n    if (!giveawayInfo) return undefined;\n    return lang(giveawayInfo.type === 'results' ? 'BoostingGiveawayEnd' : 'BoostingGiveAwayAbout');\n  }, [giveawayInfo, lang]);\n\n  function renderGiveawayInfo() {\n    if (!sender || !giveawayInfo) return undefined;\n    const isResults = giveawayInfo.type === 'results';\n\n    const chatTitle = isApiPeerChat(sender) ? getChatTitle(lang, sender) : getUserFullName(sender);\n    const duration = lang('Chat.Giveaway.Info.Months', months);\n    const endDate = formatDateAtTime(lang, untilDate * 1000);\n    const otherChannelsCount = channelIds.length ? channelIds.length - 1 : 0;\n    const otherChannelsString = lang('Chat.Giveaway.Info.OtherChannels', otherChannelsCount);\n    const isSeveral = otherChannelsCount > 0;\n\n    const firstKey = isResults ? 'BoostingGiveawayHowItWorksTextEnd' : 'BoostingGiveawayHowItWorksText';\n    const firstParagraph = lang(firstKey, [chatTitle, quantity, duration], undefined, quantity);\n\n    let secondKey = '';\n    if (isResults) {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveralEnd' : 'BoostingGiveawayHowItWorksSubTextEnd';\n    } else {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveral' : 'BoostingGiveawayHowItWorksSubText';\n    }\n    let secondParagraph = lang(secondKey, [endDate, quantity, chatTitle, otherChannelsCount], undefined, quantity);\n    if (isResults && giveawayInfo.activatedCount) {\n      secondParagraph += ` ${lang('BoostingGiveawayUsedLinksPlural', giveawayInfo.activatedCount)}`;\n    }\n\n    let lastParagraph = '';\n    if (isResults && giveawayInfo.isRefunded) {\n      lastParagraph = lang('BoostingGiveawayCanceledByPayment');\n    } else if (isResults) {\n      lastParagraph = lang(giveawayInfo.isWinner ? 'BoostingGiveawayYouWon' : 'BoostingGiveawayYouNotWon');\n    } else if (giveawayInfo.disallowedCountry) {\n      lastParagraph = lang('BoostingGiveawayNotEligibleCountry');\n    } else if (giveawayInfo.adminDisallowedChatId) {\n      // Since rerenders are not expected, we can use the global state directly\n      const chatsById = getGlobal().chats.byId;\n      const disallowedChat = chatsById[giveawayInfo.adminDisallowedChatId];\n      const disallowedChatTitle = disallowedChat && getChatTitle(lang, disallowedChat);\n      lastParagraph = lang('BoostingGiveawayNotEligibleAdmin', disallowedChatTitle);\n    } else if (giveawayInfo.joinedTooEarlyDate) {\n      const joinedTooEarlyDate = formatDateAtTime(lang, giveawayInfo.joinedTooEarlyDate * 1000);\n      lastParagraph = lang('BoostingGiveawayNotEligible', joinedTooEarlyDate);\n    } else if (giveawayInfo.isParticipating) {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.ParticipatingMany', [chatTitle, otherChannelsCount])\n        : lang('Chat.Giveaway.Info.Participating', chatTitle);\n    } else {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.NotQualifiedMany', [chatTitle, otherChannelsString, endDate])\n        : lang('Chat.Giveaway.Info.NotQualified', [chatTitle, endDate]);\n    }\n\n    return (\n      <>\n        <p>\n          {renderText(firstParagraph, ['simple_markdown'])}\n        </p>\n        <p>\n          {renderText(secondParagraph, ['simple_markdown'])}\n        </p>\n        <p>\n          {renderText(lastParagraph, ['simple_markdown'])}\n        </p>\n      </>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.gift}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={giftSticker}\n          play={canPlayAnimatedEmojis && hasEnded}\n          noLoop\n          nonInteractive\n          size={GIFT_STICKER_SIZE}\n        />\n        <span className={styles.count}>\n          {`x${quantity}`}\n        </span>\n      </div>\n      <div className={styles.section}>\n        <strong className={styles.title}>\n          {renderText(lang('BoostingGiveawayPrizes'), ['simple_markdown'])}\n        </strong>\n        <p className={styles.description}>\n          {renderText(lang('Chat.Giveaway.Info.Subscriptions', quantity), ['simple_markdown'])}\n          <br />\n          {renderText(lang(\n            'ActionGiftPremiumSubtitle',\n            lang('Chat.Giveaway.Info.Months', months),\n          ), ['simple_markdown'])}\n        </p>\n      </div>\n      <div className={styles.section}>\n        <strong className={styles.title}>\n          {renderText(lang('BoostingGiveawayMsgParticipants'), ['simple_markdown'])}\n        </strong>\n        <p className={styles.description}>\n          {renderText(lang('BoostingGiveawayMsgAllSubsPlural', channelIds.length), ['simple_markdown'])}\n        </p>\n        <div className={styles.channels}>\n          {channelIds.map((channelId) => (\n            <PickerSelectedItem\n              peerId={channelId}\n              forceShowSelf\n              fluid\n              className={styles.channel}\n              clickArg={channelId}\n              onClick={handleChannelClick}\n            />\n          ))}\n        </div>\n        {countries?.length && (\n          <span>{renderText(lang('Chat.Giveaway.Message.CountriesFrom', countryList))}</span>\n        )}\n      </div>\n      <div className={styles.section}>\n        <strong className={styles.title}>\n          {renderText(lang('BoostingWinnersDate'), ['simple_markdown'])}\n        </strong>\n        <p className={styles.description}>\n          {formatDateTimeToString(untilDate * 1000, lang.code, true)}\n        </p>\n      </div>\n      <Button\n        className={styles.button}\n        color=\"adaptive\"\n        size=\"smaller\"\n        onClick={handleShowInfoClick}\n      >\n        {lang('BoostingHowItWork')}\n      </Button>\n      <ConfirmDialog\n        isOpen={Boolean(giveawayInfo)}\n        isOnlyConfirm\n        title={giveawayInfoTitle}\n        confirmHandler={handleCloseInfo}\n        onClose={handleCloseInfo}\n      >\n        {renderGiveawayInfo()}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const duration = message.content.giveaway!.months;\n    const chat = selectChat(global, message.chatId)!;\n    const sender = selectChat(global, message.content.giveaway?.channelIds[0]!)\n      || selectForwardedSender(global, message) || chat;\n\n    return {\n      chat,\n      sender,\n      giftSticker: selectGiftStickerForDuration(global, duration),\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(Giveaway));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLang from '../../../hooks/useLang';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground, photoUrl);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n                draggable={false}\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useInterval from '../../../hooks/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTimeout from '../../../hooks/useTimeout';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiPeer;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import React from '../../../lib/teact/teact';\n\ninterface OwnProps {\n  isOwn?: boolean;\n}\n\nfunction MessageAppendix({ isOwn } : OwnProps) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default MessageAppendix;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, undefined, lang.timeFormat);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon icon-reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <i className=\"icon icon-pinned-message message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"canceled\":\"Q7dh9ssyXXCzatPRmIDv\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPoll, ApiPollAnswer,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport Notification from '../../ui/Notification';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [closePeriod, summary]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti({});\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiPeer[], id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      } else if (chat) {\n        result.push(chat);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"micro\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiReactionCount,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getMessageKey, isReactionChosen, isSameReaction } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport AvatarList from '../../common/AvatarList';\nimport ReactionAnimatedEmoji from '../../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../../ui/Button';\n\nimport './Reactions.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  withRecentReactors?: boolean;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  withRecentReactors,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.peerId] || chatsById[recentReaction.peerId])\n      .filter(Boolean) as ApiPeer[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useLastCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  });\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen', 'message-reaction')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        className=\"reaction-animated-emoji\"\n        containerId={getMessageKey(message)}\n        reaction={reaction.reaction}\n        size={REACTION_SIZE}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : (\n        <AnimatedCounter text={formatIntegerCompact(reaction.count)} className=\"counter\" />\n      )}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  metaChildren?: React.ReactNode;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  metaChildren,\n  observeIntersection,\n  noRecentReactors,\n}) => {\n  const lang = useLang();\n\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport safePlay from '../../../util/safePlay';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\n\nimport { useThrottledSignal } from '../../../hooks/useAsyncResolvers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useSignal from '../../../hooks/useSignal';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  isDownloading?: boolean;\n};\n\nconst PROGRESS_CENTER = ROUND_VIDEO_DIMENSIONS_PX / 2;\nconst PROGRESS_MARGIN = 6;\nconst PROGRESS_CIRCUMFERENCE = (PROGRESS_CENTER - PROGRESS_MARGIN) * 2 * Math.PI;\nconst PROGRESS_THROTTLE = 16; // Min period needed for `playerEl.currentTime` to update\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const circleRef = useRef<SVGCircleElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState(false);\n\n  const [getProgress, setProgress] = useSignal(0);\n  const getThrottledProgress = useThrottledSignal(getProgress, PROGRESS_THROTTLE);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [setProgress, isActivated, getThrottledProgress]);\n\n  useLayoutEffect(() => {\n    if (!isActivated || !circleRef.current) {\n      return;\n    }\n\n    const strokeDashOffset = PROGRESS_CIRCUMFERENCE - getThrottledProgress() * PROGRESS_CIRCUMFERENCE;\n    circleRef.current.setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n  }, [isActivated, getThrottledProgress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useLastCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n  });\n\n  const capturePlaying = useLastCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  });\n\n  const handleTimeUpdate = useLastCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  });\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\">\n        {isActivated && (\n          <svg width={ROUND_VIDEO_DIMENSIONS_PX} height={ROUND_VIDEO_DIMENSIONS_PX}>\n            <circle\n              ref={circleRef}\n              cx={PROGRESS_CENTER}\n              cy={PROGRESS_CENTER}\n              r={PROGRESS_CENTER - PROGRESS_MARGIN}\n              className=\"progress-circle\"\n              transform={`rotate(-90, ${PROGRESS_CENTER}, ${PROGRESS_CENTER})`}\n              stroke-dasharray={PROGRESS_CIRCUMFERENCE}\n              stroke-dashoffset={PROGRESS_CIRCUMFERENCE}\n            />\n          </svg>\n        )}\n      </div>\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerView from '../../common/StickerView';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {hasEffect && withEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectPeerStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getSenderTitle, getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  peer?: ApiPeer;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, peer, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.peerId, storyData!.id, story);\n\n  function getTitle() {\n    if (peer && 'isSelf' in peer && peer.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getSenderTitle(lang, peer!));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n  const lastReadId = selectPeerStories(global, peerId)?.lastReadId;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    peer: selectPeer(global, peerId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiReaction,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  ChatTranslatedMessages,\n  MessageListType,\n} from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { FocusDirection, IAlbum, ISettings } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageHtmlId,\n  getMessageKey,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  hasMessageText,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatPublic,\n  isChatWithRepliesBot,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyToMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectAllowedMessageActions,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentTextSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsDownloading,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectReplySender,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectSenderFromHeader,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { IS_ANDROID, IS_ELECTRON, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { dispatchHeavyAnimationEvent } from '../../../hooks/useHeavyAnimationCheck';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useAuthorWidth from '../hooks/useAuthorWidth';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/embedded/EmbeddedMessage';\nimport EmbeddedStory from '../../common/embedded/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport Icon from '../../common/Icon';\nimport MessageText from '../../common/MessageText';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport Button from '../../ui/Button';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Game from './Game';\nimport Giveaway from './Giveaway';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageAppendix from './MessageAppendix';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    getIsMessageListReady: Signal<boolean>;\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiPeer;\n  canShowSender: boolean;\n  originSender?: ApiPeer;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiPeer;\n  replyMessageForwardSender?: ApiPeer;\n  replyMessageChat?: ApiChat;\n  isReplyPrivate?: boolean;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiUser;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  focusedQuote?: string;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withStickerEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  isLoadingComments?: boolean;\n  shouldWarnAboutSvg?: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyMessageForwardSender,\n  replyMessageChat,\n  replyStory,\n  isReplyPrivate,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isLoadingComments,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  focusedQuote,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withStickerEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutSvg,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuPosition,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(\n    isShown || isJustAdded,\n    undefined,\n    noAppearanceAnimation && !isJustAdded,\n    false,\n  );\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasMessageReply = isReplyToMessage(message) && !shouldHideReply;\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const storyReplyInfo = getStoryReplyInfo(message);\n\n  const hasStoryReply = Boolean(storyReplyInfo);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  ) || Boolean(message.content.storyData && !message.content.storyData.isMention);\n  const isStoryMention = message.content.storyData?.isMention;\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const noUserColors = isOwn && !isCustomShape;\n\n  const hasSubheader = hasTopicChip || hasMessageReply || hasStoryReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const messageColorPeer = originSender || sender;\n  const senderPeer = (forwardInfo || message.content.storyData) ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    Boolean(requestedChatTranslationLanguage),\n    replyStory && 'content' in replyStory ? replyStory : undefined,\n    isReplyPrivate,\n    isRepliesChat,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasMessageReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || hasActiveStickerEffect) && 'has-active-reaction',\n    isStoryMention && 'is-story-mention',\n  );\n\n  const {\n    text, photo, video, audio,\n    voice, document, sticker, contact,\n    poll, webPage, invoice, location,\n    action, game, storyData, giveaway,\n  } = getMessageContent(message);\n\n  const { replyToMsgId, replyToPeerId, isQuote } = messageReplyInfo || {};\n  const { userId: storyReplyUserId, storyId: storyReplyId } = storyReplyInfo || {};\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo?.isCommentsInfo\n    && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n    peerColorClass: getPeerColorClass(messageColorPeer, noUserColors),\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video || storyData || (location?.type === 'geo')) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    message.id,\n    shouldHideReply || isQuote || isReplyPrivate,\n  );\n\n  useEnsureStory(\n    storyReplyUserId || chatId,\n    storyReplyId,\n    replyStory,\n  );\n\n  useFocusMessage(\n    ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, isJustAdded, Boolean(focusedQuote),\n  );\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  useAuthorWidth(ref, signature);\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    dispatchHeavyAnimationEvent(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      } else if (video) {\n        if (video.isRound) {\n          width = ROUND_VIDEO_DIMENSIONS_PX;\n        } else {\n          width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, message, noAvatars, photo, sticker, text?.text, video,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    return (\n      <MessageText\n        messageOrStory={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        focusedQuote={focusedQuote}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasMessageReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                replyInfo={messageReplyInfo}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                senderChat={replyMessageChat}\n                forwardSender={replyMessageForwardSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            withEffect={withStickerEffects}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {giveaway && (\n          <Giveaway message={message} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            story={webPageStory}\n            isConnected={isConnected}\n            noUserColors={isOwn}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasMessageReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getSenderTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {asForwarded && (\n              <Icon name={forwardInfo?.hiddenUserName ? 'forward' : 'share-filled'} />\n            )}\n            {storyData && <Icon name=\"play-story\" />}\n            {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.views !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className={buildClassName(\n                'message-action-button', isLoadingComments && 'message-action-button-shown',\n              )}\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className={buildClassName(\n                'message-action-button', isLoadingComments && 'message-action-button-shown',\n              )}\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && (\n            <CommentButton\n              threadInfo={repliesThreadInfo}\n              disabled={noComments}\n              isLoading={isLoadingComments}\n              isCustomShape={isCustomShape}\n            />\n          )}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n      loadingThread,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, isOutgoing, forwardInfo, transcriptionId, isPinned,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectPeerStory(global, webPageStoryData.peerId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const isThreadTop = message.id === threadId;\n\n    const { replyToMsgId, replyToPeerId, replyFrom } = getMessageReplyInfo(message) || {};\n    const { userId: storyReplyUserId, storyId: storyReplyId } = getStoryReplyInfo(message) || {};\n\n    const shouldHideReply = replyToMsgId && replyToMsgId === threadId;\n    const replyMessage = replyToMsgId ? selectChatMessage(global, replyToPeerId || chatId, replyToMsgId) : undefined;\n    const forwardHeader = forwardInfo || replyFrom;\n    const replyMessageSender = replyMessage ? selectReplySender(global, replyMessage) : forwardHeader && !isRepliesChat\n      ? selectSenderFromHeader(global, forwardHeader) : undefined;\n    const replyMessageForwardSender = replyMessage && selectForwardedSender(global, replyMessage);\n    const replyMessageChat = replyToPeerId ? selectChat(global, replyToPeerId) : undefined;\n    const isReplyPrivate = !isRepliesChat && replyMessageChat && !isChatPublic(replyMessageChat)\n      && (replyMessageChat.isNotJoined || replyMessageChat.isRestricted);\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = storyReplyId && storyReplyUserId\n      ? selectPeerStory(global, storyReplyUserId, storyReplyId)\n      : undefined;\n    const storySender = storyReplyUserId ? selectUser(global, storyReplyUserId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer, quote: focusedQuote,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n\n    const repliesThreadInfo = selectThreadInfo(global, chatId, album?.mainMessage.id || id);\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyMessageForwardSender,\n      replyMessageChat,\n      replyStory,\n      isReplyPrivate,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withStickerEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      isLoadingComments: repliesThreadInfo?.isCommentsInfo\n        && loadingThread?.loadingChatId === repliesThreadInfo?.originChannelId\n        && loadingThread?.loadingMessageId === repliesThreadInfo?.originMessageId,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n        focusedQuote,\n      }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiStory, ApiTopic, ApiUser,\n} from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\nimport type { IAlbum } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiPeer,\n  senderPeer?: ApiPeer,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n  isTranslatingChat?: boolean,\n  story?: ApiStory,\n  isReplyPrivate?: boolean,\n  isRepliesChat?: boolean,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openThread, openStoryViewer,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, groupedId,\n  } = message;\n\n  const {\n    replyToMsgId, replyToPeerId, replyToTopId, isQuote, quoteText,\n  } = getMessageReplyInfo(message) || {};\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    if (!replyToMsgId || isReplyPrivate) {\n      showNotification({\n        message: isQuote ? lang('QuotePrivate') : lang('ReplyPrivate'),\n      });\n      return;\n    }\n\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: isRepliesChat ? replyToTopId : threadId, // Open comments from Replies bot, otherwise, keep current thread\n      messageId: replyToMsgId,\n      replyMessageId: replyToPeerId ? undefined : messageId,\n      noForumTopicPanel: !replyToPeerId, // Open topic panel for cross-chat replies\n      ...(isQuote && { quote: quoteText?.text }),\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (replyToPeerId && replyToTopId) {\n      focusMessage({\n        chatId: replyToPeerId,\n        threadId: replyToTopId,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n    peerColorClass,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n    peerColorClass?: string;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice, storyData, giveaway,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (peerColorClass) {\n    classNames.push(peerColorClass);\n  }\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (giveaway) {\n    classNames.push('giveaway');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { RefObject } from 'react';\nimport { useLayoutEffect } from '../../../lib/teact/teact';\n\nimport { requestForcedReflow } from '../../../lib/fasterdom/fasterdom';\n\nexport default function useAuthorWidth(\n  containerRef: RefObject<HTMLDivElement>,\n  signature?: string,\n) {\n  useLayoutEffect(() => {\n    if (!signature) return;\n\n    requestForcedReflow(() => {\n      const width = containerRef.current!.querySelector<HTMLDivElement>('.message-signature')?.offsetWidth;\n      if (!width) return undefined;\n\n      return () => {\n        containerRef.current!.style.setProperty('--meta-safe-author-width', `${width}px`);\n      };\n    });\n  }, [containerRef, signature]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { MouseEvent as ReactMouseEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiSponsoredMessage, ApiUser,\n} from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  peer?: ApiChat;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  peer,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n    openUrl,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n  const { isMobile } = useAppLayout();\n  const withAvatar = Boolean(message?.isAvatarShown && peer);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!peer) {\n      return;\n    }\n\n    openChat({ id: peer.id });\n  });\n\n  const handleLinkClick = useLastCallback((e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.preventDefault();\n    openUrl({ url: message!.webPage!.url, shouldSkipModal: true });\n\n    return false;\n  });\n\n  const handleCloseSponsoredMessage = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  });\n\n  if (!message) {\n    return undefined;\n  }\n\n  function renderAvatar() {\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={peer}\n        onClick={peer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderContent() {\n    if (message?.webPage) {\n      return (\n        <>\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <div className=\"message-title message-peer\" dir=\"ltr\">\n              {renderText(message.webPage.siteName)}\n            </div>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message!.text.text,\n                entities: message!.text.entities,\n              })}\n            </span>\n          </div>\n\n          <Button\n            className=\"SponsoredMessage__button\"\n            size=\"tiny\"\n            color=\"translucent\"\n            isRectangular\n            onClick={handleLinkClick}\n          >\n            <i className=\"icon icon-arrow-right\" aria-hidden />\n            {lang('OpenLink')}\n          </Button>\n        </>\n      );\n    }\n\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">\n          {bot && renderText(getUserFullName(bot) || '')}\n          {channel && renderText(message!.chatInviteTitle || getChatTitle(lang, channel) || '')}\n        </div>\n        <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n          <span className=\"text-content-inner\" dir=\"auto\">\n            {renderTextWithEntities({\n              text: message!.text.text,\n              entities: message!.text.entities,\n            })}\n          </span>\n        </div>\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {lang(message!.isBot\n            ? 'Conversation.ViewBot'\n            : (message!.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n        </Button>\n      </>\n    );\n  }\n\n  const contentClassName = buildClassName(\n    'message-content has-shadow has-solid-background has-appendix',\n    getPeerColorClass(peer || channel, true, true),\n  );\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className={buildClassName('SponsoredMessage Message open', withAvatar && 'with-avatar')}\n    >\n      {withAvatar && renderAvatar()}\n      <div\n        className={contentClassName}\n        dir=\"auto\"\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <div className=\"content-inner\" dir=\"auto\">\n          {channel && (\n            <Avatar\n              size=\"large\"\n              peer={channel}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className=\"message-title message-type\">\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n          </span>\n          {renderContent()}\n        </div>\n        <MessageAppendix />\n        <Button\n          className=\"message-action-button\"\n          color=\"translucent-white\"\n          round\n          size=\"tiny\"\n          ariaLabel={lang('Close')}\n          onClick={handleCloseSponsoredMessage}\n        >\n          <i className=\"icon icon-close\" aria-hidden />\n        </Button>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const peer = message?.chatId ? selectChat(global, message?.chatId) : undefined;\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      peer,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './ActionMessage';\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsReady = useDerivedSignal(isReady);\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePrevious(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getMessageHtmlId,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isLocalMessageId,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport { isBackgroundModeActive } from '../../hooks/useBackgroundMode';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  onPinnedIntersectionChange,\n  getForceNextPinnedInHeader,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages = messageIds.map((id) => messagesById[id]).filter(Boolean);\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? threadId : undefined,\n        isChatWithSelf,\n      )\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat, isForum, threadId, isChatWithSelf]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions?.results.length);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.views !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadId && messagesById[threadId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useSignal from '../../../hooks/useSignal';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../global/helpers';\nimport { selectChat, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: selectUser(global, chatId),\n  }),\n)(ChatReportPanel));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinnedMessageBorder\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinned-message-border-wrapper-1\":\"QpNjYZM0KJrGrocs69__\",\"pinnedMessageBorderWrapper1\":\"QpNjYZM0KJrGrocs69__\",\"pinned-message-border-wrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinnedMessageBorderWrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinned-message-border-mark\":\"YX_iyQuDtga6uKXRQqR0\",\"pinnedMessageBorderMark\":\"YX_iyQuDtga6uKXRQqR0\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TMOjo7XfD1ZiiuRtfpkm\",\"pinnedMessage\":\"uhn_g6FmUELuGJrCm45w\",\"messageText\":\"bSvmca5kaTIUh3yJBxnF\",\"loading\":\"d7XDT4Keip1KHh7mcCv9\",\"pinListIcon\":\"DusHAy2Lx0SlaPpVAb_o\",\"pinListIconHidden\":\"jSVbc8Hb7PjitJujB_dQ\",\"no-hover\":\"jeTsUEkDCkzGUVwy6lrL\",\"noHover\":\"jeTsUEkDCkzGUVwy6lrL\",\"messageTextTransition\":\"ugsKEK4Xb166oFMP8hHy\",\"withMedia\":\"FBCNFm307_rxATSHPSiN\",\"title\":\"q9_FnsHlndM1hZqZjxjM\",\"summary\":\"WRuyhyQK6mv28Mz8iK28\",\"inlineButton\":\"kXRuktM2s7UN91zOl0Tx\",\"pictogramTransition\":\"EK6juGhJwhsLLm4Aag2F\",\"pinnedThumb\":\"RFnmHP92f6CwfuR2Upaw\",\"pinnedThumbImage\":\"JfPOYkOcaMjS7Y5rsHZ4\",\"fade-in\":\"IkKnzordTRzWWtIbLHdD\",\"fadeIn\":\"IkKnzordTRzWWtIbLHdD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport MessageSummary from '../common/MessageSummary';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport RippleEffect from '../ui/RippleEffect';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}>\n          <div className={styles.title} dir=\"auto\">\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                lang={lang}\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPeer, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { StoryViewerOrigin } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatTitle,\n  getMessageKey,\n  getSenderTitle,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport AudioPlayer from './AudioPlayer';\nimport ChatReportPanel from './ChatReportPanel';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isSynced?: boolean;\n  isFetchingDifference?: boolean;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isSynced,\n  isFetchingDifference,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openThread,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isSynced && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const {\n    handleClick: handleHeaderClick,\n    handleMouseDown: handleHeaderMouseDown,\n  } = useFastClick((e: React.MouseEvent<HTMLDivElement | HTMLButtonElement>) => {\n    if (e.type === 'mousedown' && (e.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleStatusClick = useLastCallback(() => {\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage), undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div\n          className=\"chat-info-wrapper\"\n          onClick={handleHeaderClick}\n          onMouseDown={handleHeaderMouseDown}\n        >\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isSynced: global.isSynced,\n      isFetchingDifference: global.isFetchingDifference,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = threadId;\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MobileSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default MobileSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo } from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n} from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Composer from '../common/Composer';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MobileSearch from './MobileSearch.async';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  topMessageId?: number;\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  topMessageId,\n  canUnpin,\n  canUnblock,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds, topMessageId);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown!}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      chatLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isMessageThread);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !selectChatFullInfo(global, chat.id),\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !chat?.isForum;\n    const topMessageId = isCommentThread ? threadId : undefined;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      isComments: isMessageThread,\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      topMessageId,\n      canUnpin,\n      canUnblock,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: number, pinnedIds?: number[], topMessageId?: number,\n) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useLastCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  });\n\n  const onFocusPinnedMessage = useLastCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) {\n      // Focusing on a post in comments\n      return topMessageId === messageId;\n    }\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  });\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"draggable\":\"kIdhoMn_mbGnJc1YZpIK\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { geoPoint } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !geoPoint);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(\n          tabType === 'members'\n            ? ProfileState.MemberList\n            : (tabType === 'stories' ? ProfileState.StoryList : ProfileState.SharedMedia),\n        );\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : (tabType === 'stories' ? ProfileState.StoryList : ProfileState.SharedMedia);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  loadStories: AnyToVoidFunction,\n  loadStoriesArchive: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n  storyIds?: number[],\n  archiveStoryIds?: number[],\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, storyIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ox1yTGx4NBVANs7q4Ste\",\"wrapper\":\"g34egFNlUSZiOR5Y9K9A\",\"media\":\"gyVqf8gGVz_cu2HCjifT\",\"expiredIcon\":\"eg5740UDe7iAc7dGlyex\",\"contextMenu\":\"rhvyma7da0HVZh3rYFnr\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMenuPosition from '../../hooks/useMenuPosition';\n\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isProtected?: boolean;\n  isArchive?: boolean;\n}\n\nfunction MediaStory({ story, isProtected, isArchive }: OwnProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryPinned,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    getLayout,\n  );\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handlePinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ peerId, storyId: story.id, isPinned: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleUnpinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ peerId, storyId: story.id, isPinned: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <i className={buildClassName(styles.expiredIcon, 'icon icon-story-expired')} aria-hidden />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && <MenuItem icon=\"pin\" onClick={handlePinClick}>{lang('StoryList.SaveToProfile')}</MenuItem>}\n          {!isArchive && (\n            <MenuItem icon=\"unpin\" onClick={handleUnpinClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(MediaStory);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectPeerFullInfo,\n  selectPeerStories,\n  selectTabState,\n  selectTheme,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Document from '../common/Document';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport MediaStory from '../story/MediaStory';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloadIds?: number[];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloadIds,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n    loadPeerPinnedStories,\n    loadStoriesArchive,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasStoriesTab ? [{ type: 'stories', title: 'ProfileStories' }] : []),\n    ...(hasStoriesTab && currentUserId === chatId ? [{ type: 'storiesArchive', title: 'ProfileStoriesArchive' }] : []),\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [chatId, currentUserId, hasCommonChatsTab, hasMembersTab, hasStoriesTab, isChannel, topicId]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerPinnedStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: currentUserId!, offsetId });\n  }, [currentUserId]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    handleLoadPeerStories,\n    handleLoadStoriesArchive,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    topicId,\n    storyIds,\n    archiveStoryIds,\n  );\n  const isFirstTab = (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    loadProfilePhotos({ profileId });\n  }, [profileId]);\n\n  const handleSelectMedia = useLastCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = lang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = lang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id) => storyByIds?.[id] && (\n            <MediaStory\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isProtected={isChatProtected}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds?.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    const peer = user || chat;\n    const peerFullInfo = selectPeerFullInfo(global, chatId);\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories));\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloadIds: activeDownloads?.ids,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport { debounce } from '../../util/schedulers';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  BoostStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleMessageSearchQueryChange = useLastCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3>{lang('Boosts')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3>{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" aria-hidden />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.StoryList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './RightSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default RightSearchAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZtWHQyTLrCmeNE53Hvd9\",\"noResults\":\"cuYFx3gorhlWaUcBJ0Aj\",\"section-header\":\"IPPwOeRGhyQDYbJsBsdb\",\"sectionHeader\":\"IPPwOeRGhyQDYbJsBsdb\",\"section\":\"HMySq6RoeqoKdRuUAW7z\",\"user\":\"hben8jCvRhcyebFweulH\",\"stats\":\"dBHHnaU4CZ9TELAykZyA\",\"down\":\"nlFBjRF9YGIjCHGrt2cp\",\"loadMoreSpinner\":\"QBMARpR7dewZog5QmOkh\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoostStatistics } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dateFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n}: StateProps) => {\n  const { openChat, loadMoreBoosters, closeBoostStatistics } = getActions();\n  const lang = useLang();\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics?.count) return undefined;\n    const loadedCount = boostStatistics.boosterIds?.length || 0;\n    const totalCount = boostStatistics.count;\n    return totalCount - loadedCount;\n  }, [boostStatistics]);\n\n  const handleBoosterClick = useLastCallback((userId: string) => {\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadMoreBoosters();\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={boosts.toString()}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          <div className={styles.section}>\n            <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('Boosters')}\n            </h4>\n            {!boostStatistics.boosterIds?.length && (\n              <div className={styles.noResults}>{lang('NoBoostersHint')}</div>\n            )}\n            {boostStatistics.boosterIds?.map((userId) => (\n              <ListItem\n                key={userId}\n                className=\"chat-item-clickable\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleBoosterClick(userId)}\n              >\n                <PrivateChatInfo\n                  className={styles.user}\n                  forceShowSelf\n                  userId={userId}\n                  status={lang('BoostExpireOn', formatDateAtTime(lang, boostStatistics.boosters![userId] * 1000))}\n                />\n              </ListItem>\n            ))}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount)}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n\n    return {\n      boostStatistics,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  selectAreActiveChatsLoaded, selectChat, selectCurrentMessageList, selectRightColumnContentKey, selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport RightSearch from './RightSearch.async';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport Statistics from './statistics/Statistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}`}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return (\n          <RightSearch\n            key={`right_search_${chatId!}`}\n            chatId={chatId!}\n            threadId={threadId!}\n            onClose={close}\n            isActive={isOpen && isActive}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations, nextProfileTab } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../global/selectors';\nimport buildStyle from '../../util/buildStyle';\nimport { pick } from '../../util/iteratees';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { GlobalState, TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport { compact } from '../../util/iteratees';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  messages?: GlobalState['messages']['byChatId'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useLastCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    // No need for expensive global updates on messages, so we avoid them\n    const messages = getGlobal().messages.byChatId;\n    const scheduledMessages = getGlobal().scheduledMessages.byChatId;\n\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, chatActiveDownloads]) => {\n      const chatMessages = chatActiveDownloads.ids?.map((id) => messages[chatId]?.byId[id]);\n      const chatScheduledMessages = chatActiveDownloads.scheduledIds?.map((id) => scheduledMessages[chatId]?.byId[id]);\n\n      return compact([...chatMessages || [], ...chatScheduledMessages || []]);\n    }).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat } from '../../global/selectors';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { userIds, chatId } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !(userIds && chatId));\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import '../../global/actions/all';\n\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAttachBot,\n  ApiChat,\n  ApiChatFolder,\n  ApiGeoPoint,\n  ApiMessage,\n  ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport type { LangCode } from '../../types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON } from '../../util/windowEnvironment';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport ReactionPicker from '../middle/message/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AttachBotInstallModal from '../modals/attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from '../modals/boost/BoostModal.async';\nimport ChatlistModal from '../modals/chatlist/ChatlistModal.async';\nimport GiftCodeModal from '../modals/giftcode/GiftCodeModal.async';\nimport MapModal from '../modals/map/MapModal.async';\nimport UrlAuthModal from '../modals/urlAuth/UrlAuthModal.async';\nimport WebAppModal from '../modals/webApp/WebAppModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport InviteViaLinkModal from './InviteViaLinkModal.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  mapModalGeoPoint?: ApiGeoPoint;\n  mapModalZoom?: number;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUserName?: string;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isCurrentUserPremium?: boolean;\n  chatlistModal?: TabState['chatlistModal'];\n  boostModal?: TabState['boostModal'];\n  giftCodeModal?: TabState['giftCodeModal'];\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n  inviteViaLinkModal?: TabState['inviteViaLinkModal'];\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  currentUserId,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  mapModalGeoPoint,\n  mapModalZoom,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUserName,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  chatlistModal,\n  giftCodeModal,\n  boostModal,\n  noRightColumnAnimation,\n  isSynced,\n  inviteViaLinkModal,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadPremiumSetStickers,\n    loadAuthorizations,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadFeaturedEmojiStickers();\n      loadAuthorizations();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n      loadPremiumSetStickers();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, []);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, []);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <MapModal geoPoint={mapModalGeoPoint} zoom={mapModalZoom} />\n      <UrlAuthModal urlAuth={urlAuth} currentUserName={currentUserName} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <BoostModal info={boostModal} />\n      <GiftCodeModal modal={giftCodeModal} currentUserId={currentUserId} />\n      <ChatlistModal info={chatlistModal} />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <InviteViaLinkModal userIds={inviteViaLinkModal?.restrictedUserIds} chatId={inviteViaLinkModal?.chatId} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      mapModal,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n      chatlistModal,\n      boostModal,\n      giftCodeModal,\n      inviteViaLinkModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      mapModalGeoPoint: mapModal?.point,\n      mapModalZoom: mapModal?.zoom,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUserName: getUserFullName(currentUser),\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      chatlistModal,\n      boostModal,\n      giftCodeModal,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n      inviteViaLinkModal,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","currentReactions","reactions","results","currentSendAs","selectSendAs","chatId","updateReactionCount","recentReactions","length","filter","_ref","isOwn","peerId","currentUserId","forEach","reaction","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","undefined","ANIMATION_DELAY","updateReactions","chat","isOutgoing","areDeepEqual","alreadyHasUnreadReaction","unreadReactions","includes","checkIfHasUnreadReactions","unreadReactionsCount","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","arguments","currentMessage","selectScheduledMessage","content","photo","video","sticker","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","actions","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","_ref6","tabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","_ref7","updateChatLastMessage","force","chats","byId","currentLastMessage","lastMessage","topic","isForum","selectTopicFromMessage","updateTopic","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","clearMessageTranslation","topics","deleteTopic","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","setGlobal","setTimeout","getGlobal","deleteChatMessages","chatsIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","unique","addActionHandler","shouldForceReply","wasDrafted","storyReplyInfo","getStoryReplyInfo","isForumTopic","loadTopicById","topicId","isLocal","selectIsMessageInCurrentMessageList","action","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","selectIsChatListed","loadTopChats","_ref2","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","keys","selectChatScheduledMessages","map","Number","sort","a","b","localId","deleteChatScheduledMessages","fileUploads","byMessageLocalId","omit","toString","thread","_ref3","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messageIds","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","_ref4","pinnedIds","selectPinnedIds","newPinnedIds","concat","threadInfoUpdates","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","getCurrentTabId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","channelId","pollId","pollUpdate","selectChatMessageByPollId","poll","oldResults","newResults","isMin","result","isChosen","find","r","option","updatedPoll","options","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","findIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","createServiceNotification","media","preview","invoice","extendedMedia","transcriptionId","isPending","transcriptions","error","match","_ref5","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","_len2","Array","_key2","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","limit","users","localMessages","allMessages","buildCollectionByKey","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","addUsers","addChats","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","set","IS_IOS","rafPromise","delete","payload","shouldForceRender","onError","isRestricted","viewportIds","isLocalMessageId","Boolean","_len","_key","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","type","scheduledAt","contentToBeScheduled","selectDraft","draftReplyInfo","userId","messageReplyInfo","noWebPage","selectNoWebPage","sendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","groupedId","isFirst","replyToForFirstMessage","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userFullName","getUserFullName","showNotification","translate","join","messageListType","selectEditingMessage","setEditingId","getMessageOriginalId","cancelApiProgress","apiUpdate","currentDraft","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","isSilent","selectCurrentChat","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","connectionState","isUserBot","isUnread","minId","readCount","count","l","countSortedIds","newTopicUnreadCount","webPagePreview","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","url","shouldSkipModal","urlWithProtocol","ensureProtocol","isStoriesViewerOpen","storyViewer","RE_TME_LINK","RE_TG_LINK","closeStoryViewer","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","showDialog","data","selectForwardsCanBeSentToChat","isModalShown","openThread","closeMediaViewer","exitMessageSelectMode","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","shouldIncrement","shouldSendAsFile","mimeType","GIF_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","viewsInfo","views","forwards","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","title","langProvider","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","updateGlobalSearch","foundTopicIds","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentMediaSearch","updateLocalMediaSearchResults","globalSearch","accountChats","accountUsers","globalChats","globalUsers","localResults","chatIds","globalResults","timestampPlusDay","resultsByType","foundIds","currentSearch","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","currentResults","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","activeThreadId","currentChat","resultDiscussion","newCurrentChatId","currentChatMessages","topicLastMessages","some","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","pick","otherChatId","otherThreadId","updateChats","updateUsers","loadTopics","shouldCloseChatOnError","_ref8","threads","updateThread","_ref9","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isSynced","isFetchingDifference","initFolderManager","addCallback","authState","isMasterTab","sync","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","hasChangedPhoto","avatarHash","profilePhoto","fallbackPhoto","personalPhoto","updateUser","updateUserFullInfo","photos","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadPeerStories","closeNewContactDialog","isPrivate","userOrChat","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","selectPeer","emojiStatus","expires","isCloseFriend","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","runDebouncedForSearch","handleUrlAuthResult","urlAuth","domain","bot","shouldRequestWriteAccess","request","botId","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","_len3","_key3","openUrl","openGame","alert","isError","getPaymentForm","inputInvoice","form","setPaymentForm","setPaymentStep","PaymentStep","Checkout","validateRequestedInfo","requestInfo","shouldSave","_len4","_key4","shippingOptions","setRequestInfoId","updateShippingOptions","Shipping","button","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","senderId","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","webApp","isFromBotMenu","appName","startApp","isWriteAllowed","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","attachMenu","bots","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","isFromConfirm","shouldDisplayDisclaimer","isDisclaimerNeeded","requestedAttachBotInstall","botUser","markBotTrusted","actionPayload","supportedFilters","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","payment","isPaymentModalOpen","status","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","closeInvoice","step","isClosed","premiumModal","isOpen","isClosing","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","promo","closeReactionPicker","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostsListResult","boostStatusResult","boosters","boosterIds","isLoadingBoosters","slots","newStatusResult","giftCodeModal","info","requestConfetti","closeGiftCodeModal","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","emoticon","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","isSameReaction","newUserReactions","selectMaxUserReactions","messageKey","getMessageKey","selectPerformanceSettingsValue","stopActiveReaction","containerId","startActiveReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","fetchUnreadReactions","fromEntries","unread","topReactions","isGroup","dcId","statisticsDcId","stats","recentTopMessages","msgId","updateStatistics","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","stories","hasNext","stateHash","isFirstRequest","state","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerPinnedStory","lastReadStoryId","storyIds","isPreload","areReactionsFirst","areJustContacts","PREVIEW_AVATAR_COUNT","updateStoryViewsLoading","viewsById","updateStoryViews","recentViewerIds","view","viewsCount","reactionsCount","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","updatePeerStoriesHidden","peerIds","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","closeLocalTextSearch","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","replaceTabThreadParam","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActions","canCopy","message1","message2","resultHtml","resultText","sender","selectSender","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","groupedMessageIds","selectedMessages","openForwardMenu","cancelMessageMediaDownload","addActiveMessageMediaDownload","canDownload","downloadMessageMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseMessageInput","serviceChat","fractionalPart","serviceNotification","reactorModal","seenByModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","fetchingStatus","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","newStickers","s","order","isCustomEmoji","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","then","remoteVersion","appVersion","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","byKey","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","clearPayment","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","DEFAULT_PLAYBACK_RATE","noLockOnUnload","onBeforeUnload","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","timeoutUntil","reactionPicker","sendAsMessage","isSinglePeer","isSingleStory","isArchive","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","fetchChatByUsername","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","archived","areStoriesHidden","storySourceProp","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","copyTextToClipboard","actionText","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViewsById","prevIsForum","lastReadOutboxMessageId","localChat","newProfilePhoto","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","orderedPinnedTopicIds","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","localUser","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","key","rules","setConfirmPaymentUrl","ConfirmPayment","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","StickerSetModal","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","icon","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","shouldRender","shouldRenderStoryRibbon","transitionClassNames","storyRibbonClassNames","isStoryRibbonClosing","useShowTransition","allChatsFolder","ALL_FOLDER_ID","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","addEventListener","removeEventListener","shouldRenderPlaceholder","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","Transition","ref","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","Spinner","size","animationLevel","attachBots","selectTheme","canInstall","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSettingOption","updatePerformanceSettings","openChatByUsername","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","isForSideMenu","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","versionString","APP_REVISION","isFullscreen","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","searchContent","PickerSelectedItem","canClose","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","LeftSideMenuItems","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","fluid","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","prevRef","lastRef","usePrevious2","renderContent","currentScreen","onScreenSelect","isChannel","LeftMain","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewer","LOGO_DIMENSIONS","height","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","getMessageMediaHash","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","useMedia","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","src","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onMouseDown","onContextMenu","volumeIcon","renderText","renderAudio","subtitle","renderVoice","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ReactionPicker","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","SeenByModal","UnpinAllMessagesModal","GiftPremiumModal","ChatLanguageModal","EmojiInteractionAnimation","ariaLabelLang","onReadAll","shouldShowCount","mentionsCount","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","elementRef","hasUnreadReactions","hasUnreadMentions","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","ScrollDownButton","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","hasComments","mainMessage","albumId","nextMessage","lastSenderGroupItem","nextMessageDayStartsAt","inlineButtons","senderUserId","dividend","getPeerIdDividend","lastUnreadMessageId","loadGreetingStickers","containerRef","handleStickerSelect","StickerView","chatBot","isLoadingBotInfo","chatBotFullInfo","isInMessageList","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","isBotInfoEmpty","style","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","buildStyle","Skeleton","INTERSECTION_THROTTLE_FOR_MEDIA","AlbumRectPart","None","Top","Bottom","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","asForwarded","noAvatars","ratios","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","Symbol","toStringTag","_Symbol$iterator","iterator","LimitedMap","_defineProperty","insertionQueue","keyToRemove","shift","clear","callbackfn","thisArg","_Symbol$toStringTag","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","metadata","isTranslatable","detectedLanguage","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","target","classList","contains","getIsKeyboardVisible","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","noUserColors","observeIntersectionForLoading","isIntersecting","useIsIntersecting","isFullStory","isExpiredStory","isVideoStory","mediaBlobUrl","getStoryMediaHash","mediaThumbnail","dataUri","pictogramUrl","handleFastClick","useFastClick","getPeerColorClass","srcUrl","getPictogramDimensions","draggable","renderPictogram","Icon","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","withSelectControl","WrappedComponent","ownProps","selectIsInSelectMode","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsById","activeDownloadIds","observeIntersection","hasCustomAppendix","albumLayout","onMediaClick","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","shouldAffectAppendix","getMessageHtmlId","onCancelUpload","isDownloading","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","play","remove","Audio","safePlay","once","container","performance","interactionMessageId","customEmojiId","withEffects","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","noPlay","selectCanPlayAnimatedEmojis","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","selectAnimatedEmoji","forceLoadPreview","AnimatedIconFromSticker","quality","noLoad","forcePreview","forceAlways","isCustomShape","shouldRenderLoading","useAsyncRendering","originMessageId","recentReplierIds","originChannelId","isComments","recentRepliers","hasUnread","commentsText","AnimatedCounter","role","Avatar","countryList","phoneCodes","phoneCodeList","isRegistered","formatPhoneNumberWithCode","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","autoPlay","giveaway","channelIds","selectForwardedSender","giftSticker","selectGiftStickerForDuration","canPlayAnimatedEmojis","isLoadingInfo","giveawayInfo","setGiveawayInfo","quantity","untilDate","countries","hasEnded","translatedNames","DisplayNames","countryCode","isoToEmoji","of","handleChannelClick","handleShowInfoClick","handleCloseInfo","giveawayInfoTitle","noLoop","nonInteractive","forceShowSelf","formatDateTimeToString","ConfirmDialog","isOnlyConfirm","confirmHandler","isResults","chatTitle","isApiPeerChat","endDate","formatDateAtTime","otherChannelsCount","otherChannelsString","isSeveral","firstParagraph","secondKey","secondParagraph","activatedCount","lastParagraph","isRefunded","isWinner","disallowedCountry","adminDisallowedChatId","disallowedChat","disallowedChatTitle","joinedTooEarlyDate","isParticipating","renderGiveawayInfo","renderIcon","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","forceAspectRatio","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","root","MediaSpoiler","thumbDataUri","isVisible","spoiler","formatMediaDuration","buy","lock","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","scale","PinSvg","viewBox","cx","cy","d","openMapModal","countdownRef","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","mediaHash","buildStaticMapHash","prevMediaBlobUrl","usePrevious","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","firstElementChild","timeLeft","strokeDashOffset","formatCountdownShort","textContent","useLayoutEffect","long","requestMutation","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","editDate","transform","renderInfo","path","filterUnits","dy","in","stdDeviation","fill","outgoingStatus","signature","withReactionOffset","repliesThreadInfo","renderQuickReactionButton","noReplies","isTranslated","onTranslationClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","timeFormat","editDateTime","isEdited","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","getPercentage","total","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","usersById","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","isCorrect","answers","hidden","quiz","chosen","timer","recentVoters","chatsById","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","PollOption","getReadableVotersCount","isText","REACTION_SIZE","withRecentReactors","recentReactors","recentReaction","isReactionChosen","ReactionAnimatedEmoji","AvatarList","isOutside","metaChildren","noRecentReactors","ReactionButton","getReactionUniqueKey","PROGRESS_CENTER","ROUND_VIDEO_DIMENSIONS_PX","PROGRESS_CIRCUMFERENCE","stopPrevious","playerRef","circleRef","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","downloadProgress","isPlayerReady","markPlayerReady","noThumb","getMessageMediaThumbDataUri","thumbRef","thumbClassNames","useMediaTransition","isTransferring","wasLoadDisabled","shouldSpinnerRender","spinnerClassNames","setIsActivated","getProgress","setProgress","useSignal","getThrottledProgress","useThrottledSignal","playerEl","currentTime","shouldPlay","stopPlaying","capturePlaying","isAllowed","paused","stopCurrentAudio","handleTimeUpdate","onEnded","onTimeUpdate","onReady","ProgressSpinner","observeIntersectionForPlaying","shouldLoop","shouldPlayEffect","withEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","fullMediaHash","fullMediaClassName","AnimatedSticker","tgsUrl","isLowPriority","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","focusedMessage","loadingThread","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","selectIsChatWithSelf","isRepliesChat","isChatWithRepliesBot","isChatGroup","webPageStoryData","webPage","webPageStory","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","isThreadTop","replyToPeerId","replyFrom","storyReplyUserId","storyReplyId","shouldHideReply","forwardHeader","replyMessageSender","selectReplySender","selectSenderFromHeader","replyMessageForwardSender","replyMessageChat","isReplyPrivate","isChatPublic","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","focusedQuote","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","hasActiveReactions","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withStickerEffects","isLoadingComments","loadingChatId","loadingMessageId","shouldWarnAboutSvg","selectOutgoingStatus","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onPinnedIntersectionChange","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","isTouchScreen","useOnIntersect","contextMenuPosition","contextMenuTarget","noAppearanceAnimation","markShown","viewportPinnedIdsToRemove","isUnmount","isOwnMessage","hasMessageReply","isReplyToMessage","hasStoryReply","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isMention","isStoryMention","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","messageColorPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","replyToTopId","isQuote","quoteText","channelPostId","MediaViewerOrigin","ScheduledInline","Inline","albumMessageId","ScheduledAlbum","Album","selectWithGroupedId","useInnerHandlers","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","contentClassName","hasActionButton","isGeoLiveActive","peerColorClass","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","hasText","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","useEnsureMessage","useFocusMessage","postAuthorTitle","requestForcedReflow","offsetWidth","useAuthorWidth","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","dispatchHeavyAnimationEvent","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","ReactionStaticEmoji","renderReactionsAndMeta","meta","MessageMeta","Reactions","renderSenderName","senderEmojiStatus","senderIsPremium","senderColor","fakeType","FakeIcon","customTitle","forwardAuthor","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","TopicChip","EmbeddedMessage","senderChat","forwardSender","EmbeddedStory","Sticker","AnimatedCustomEmoji","AnimatedEmoji","MessagePhoneCall","RoundVideo","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","Story","StoryMention","Contact","Poll","Giveaway","Game","InvoiceMediaPreview","DotAnimation","WebPage","onCancelMediaTransfer","Invoice","Location","CommentButton","MessageAppendix","InlineButtons","ContextMenuContainer","anchor","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","isAvatarShown","handleLinkClick","handleCloseSponsoredMessage","chatInviteHash","isRecommended","siteName","isRectangular","chatInviteTitle","onAboutAds","messageGroups","getContainerHeight","isViewportNewest","isEmptyThread","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isReady","isSchedule","shouldRenderBotInfo","onFabToggle","onNotchToggle","openHistoryCalendar","useDerivedSignal","observeIntersectionForReading","markMentionsRead","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","top","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","isTopicTopMessage","originalId","Message","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","MessageListBotInfo","SponsoredMessage","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isCreator","isSelectModeActive","noMessageSendingAnimation","isServiceNotificationsChat","hasTools","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","storyDataList","storiesByPeerIds","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","prevContainerHeightRef","isComposerVisible","setContainerHeight","currentNormalHeight","normalHeight","String","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","ContactGreeting","NoMessages","MessageListContent","backgroundColor","MessageSelectToolbar","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","handleCloseReportPanel","handleChatReportSpam","confirmIsDestructive","confirmLabel","Checkbox","onCheck","drawRect","radius","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","onUnpinMessage","onAllPinnedClick","isFullWidth","useThumbnail","isSpoiler","getMessageIsSpoiler","shouldShowLoader","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","PinnedMessageNavigation","MessageSummary","noEmoji","shouldStopPropagation","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","isRightColumnShown","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","openThreadWithInfo","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","useDerivedState","waitingForPinnedId","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handleHeaderMouseDown","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","UnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderPinnedMessage","ChatReportPanel","AudioPlayer","HeaderActions","canExpandActions","MobileSearch","ReactorListModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","isDesktop","dropAreaState","setDropAreaState","DropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","QuickFile","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","settingValue","setThemeSettings","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","Blob","blob","createObjectURL","preloadImage","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onMouseUp","onDragEnter","MiddleHeader","onStop","MessageList","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","FloatingActionButtons","onUnpin","teactOrderKey","AttachBotInstallModal","BoostModal","ChatlistModal","modal","GiftCodeModal","MapModal","UrlAuthModal","WebAppModal","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","sortChatIds","canBeInvitedToGroup","handleNextStep","Picker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","noScrollRestore","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","loadPeerSkippedStories","toggleStoryPinned","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","isOut","transformOriginY","menuStyle","useMenuPosition","preventMessageInputBlurWithBubbling","handlePinClick","handleUnpinClick","MediaAreaOverlay","TABS","mediaSearchType","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","hasCommonChatsTab","resolvedUserId","peerFullInfo","selectPeerFullInfo","hasStoriesTab","hasPinnedStories","storyByIds","archiveStoryIds","archiveIds","commonChatIds","profileState","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","loadPeerPinnedStories","loadStoriesArchive","deletingUserId","setDeletingUserId","initialTab","setActiveTab","renderingActiveTab","tabType","handleLoadPeerStories","handleLoadStoriesArchive","resultType","noProfileInfo","searchMessages","loadStories","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","prevTabType","tabsEl","ProfileState","MemberList","StoryList","SharedMedia","prevProfileState","Profile","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","big","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","selectCanManage","isEditingInvite","canViewStatistics","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","Search","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","BoostStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","RightSearch","loadMoreBoosters","closeBoostStatistics","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","statsOverview","level","premiumSubscribers","boostersToLoadCount","loadedCount","handleBoosterClick","section","PremiumProgress","leftText","rightText","floatingBadgeText","floatingBadgeIcon","StatisticsOverview","sectionHeader","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","prevChatId","RightHeader","StoryViewer","AttachBotRecipientPicker","BotTrustModal","CONFETTI_COLORS","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","beginPath","ellipse","hideTimeout","prevConfettiTime","DeleteFolderDialog","Dialogs","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","activeMessages","chatActiveDownloads","chatScheduledMessages","downloadHash","download","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","DownloadUrl","baseURI","filename","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","event","eventType","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","InviteViaLinkModal","NewContactModal","PremiumLimitReachedModal","PremiumMainModal","SafeLinkModal","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","mapModalGeoPoint","mapModalZoom","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","currentUserName","isPremiumModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadTopReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPremiumSetStickers","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","langCode","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","UnreadCount","MessageListHistoryHandler","restrictedUserIds","passcodeSettings","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","AnimatedIconWithPreview","LOCAL_TGS_URLS","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}