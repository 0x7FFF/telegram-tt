{"version":3,"file":"5769.33f5a0fe6c683670d709.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/util/areDeepEqual.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/util/permanentWebVersion.ts","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/CustomReactionAnimation.module.scss?e66e","webpack://telegram-t/./src/components/middle/message/CustomReactionAnimation.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { GlobalState } from '../../types';\n\naddActionHandler('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddActionHandler('closeLocalTextSearch', closeLocalTextSearch);\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('openChat', (global, actions, payload) => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (global.premiumModal?.promo && global.premiumModal?.isOpen) {\n    global = {\n      ...global,\n      premiumModal: {\n        ...global.premiumModal,\n        isOpen: false,\n      },\n    };\n  }\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    if (id) {\n      global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    }\n\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      isStatisticsShown: false,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n  }\n\n  if (id && id !== global.forumPanelChatId) {\n    actions.closeForumPanel();\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddActionHandler('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload) => {\n  const {\n    chatId, threadId, text, files,\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId });\n  }\n\n  return {\n    ...global,\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n    },\n  };\n});\n\naddActionHandler('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddActionHandler('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n\naddActionHandler('openDeleteChatFolderModal', (global, actions, payload) => {\n  const { folderId } = payload;\n  return {\n    ...global,\n    deleteFolderDialogModal: folderId,\n  };\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global) => {\n  return {\n    ...global,\n    deleteFolderDialogModal: undefined,\n  };\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectChatScheduledMessages,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport type { GlobalState } from '../../types';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload) => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? global.audioPlayer.origin,\n      volume: volume ?? global.audioPlayer.volume,\n      playbackRate: playbackRate || global.audioPlayer.playbackRate,\n      isMuted: isMuted || global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload) => {\n  const {\n    origin,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      origin,\n    },\n  };\n});\n\naddActionHandler('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {\n      volume: global.audioPlayer.volume,\n      playbackRate: global.audioPlayer.playbackRate,\n      isMuted: global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      setGlobal({\n        ...global,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    return {\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    };\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global) => {\n  return {\n    ...global,\n    pollResults: {},\n  };\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload) => {\n  const { noForumTopicPanel } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true, noForumTopicPanel,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ noForumTopicPanel: true });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      threadId,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n  });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload) => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore,\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  };\n});\n\naddActionHandler('changeForwardRecipient', (global) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  };\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      noAuthors: payload,\n      noCaptions: payload && global.forwardMessages.noCaptions, // `noCaptions` cannot be true when `noAuthors` is false\n    },\n  };\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      noCaptions: payload,\n      noAuthors: payload, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  };\n});\n\naddActionHandler('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload) => {\n  const { messages } = payload;\n\n  const byChatId = global.activeDownloads.byChatId;\n  const newByChatId: GlobalState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return {\n    ...global,\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  };\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', exitMessageSelectMode);\n\naddActionHandler('openPollModal', (global, actions, payload) => {\n  const { isQuiz } = payload || {};\n  return {\n    ...global,\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  };\n});\n\naddActionHandler('closePollModal', (global) => {\n  return {\n    ...global,\n    pollModal: {\n      isOpen: false,\n    },\n  };\n});\n\naddActionHandler('checkVersionNotification', (global, actions) => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(global.serverTimeOffset),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    reactorModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeReactorListModal', (global) => {\n  return {\n    ...global,\n    reactorModal: undefined,\n  };\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    seenByModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeSeenByModal', (global) => {\n  return {\n    ...global,\n    seenByModal: undefined,\n  };\n});\n\naddActionHandler('copySelectedMessages', (global) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload: { messageIds?: number[] }) => {\n  const { messageIds } = payload;\n  const chat = selectCurrentChat(global);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.getTranslation;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  const resultText = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyHtmlToClipboard(result.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload) => {\n  return updateGlobalSearch(global, {\n    isClosing: payload,\n  });\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddActionHandler('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  return {\n    ...global,\n    newContact: { userId },\n  };\n});\n\naddActionHandler('openNewContactDialog', (global) => {\n  return {\n    ...global,\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  };\n});\n\naddActionHandler('closeNewContactDialog', (global) => {\n  return closeNewContactDialog(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { APP_VERSION, DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectIsTrustedBot,\n} from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { unique } from '../../../util/iteratees';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, action, payload) => {\n  return {\n    ...global,\n    isChatInfoShown: payload !== undefined ? payload : !global.isChatInfoShown,\n  };\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload) => {\n  const { screen } = payload || {};\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('closeManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddActionHandler('toggleStatistics', (global) => {\n  return {\n    ...global,\n    isStatisticsShown: !global.isStatisticsShown,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: undefined,\n    },\n  };\n});\n\naddActionHandler('toggleMessageStatistics', (global, action, payload) => {\n  return {\n    ...global,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: payload?.messageId,\n    },\n  };\n});\n\naddActionHandler('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddActionHandler('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, action, payload) => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global) => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, action, payload) => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddActionHandler('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n\naddActionHandler('openGame', (global, actions, payload) => {\n  const { url, chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  });\n});\n\naddActionHandler('closeGame', (global) => {\n  return {\n    ...global,\n    openedGame: undefined,\n  };\n});\n\naddActionHandler('requestConfetti', (global, actions, payload) => {\n  const {\n    top, left, width, height,\n  } = payload || {};\n  const { animationLevel } = global.settings.byKey;\n  if (animationLevel === 0) return undefined;\n\n  return {\n    ...global,\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload) => {\n  const { limit } = payload;\n\n  return {\n    ...global,\n    limitReachedModal: {\n      limit,\n    },\n  };\n});\n\naddActionHandler('closeLimitReachedModal', (global) => {\n  return {\n    ...global,\n    limitReachedModal: undefined,\n  };\n});\n\naddActionHandler('closeStickerSetModal', (global) => {\n  return {\n    ...global,\n    openedStickerSetShortName: undefined,\n  };\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload) => {\n  const { setIds } = payload;\n  return {\n    ...global,\n    openedCustomEmojiSetIds: setIds,\n  };\n});\n\naddActionHandler('closeCustomEmojiSets', (global) => {\n  return {\n    ...global,\n    openedCustomEmojiSetIds: undefined,\n  };\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload) => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload) => {\n  const { chatId } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID });\n\n  return {\n    ...global,\n    createTopicPanel: {\n      chatId,\n    },\n  };\n});\n\naddActionHandler('closeCreateTopicPanel', (global) => {\n  return {\n    ...global,\n    createTopicPanel: undefined,\n  };\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload) => {\n  const { chatId, topicId } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global);\n  if (!currentChat) actions.openChat({ id: chatId });\n\n  return {\n    ...global,\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  };\n});\n\naddActionHandler('closeEditTopicPanel', (global) => {\n  return {\n    ...global,\n    editTopicPanel: undefined,\n  };\n});\n\naddActionHandler('checkAppVersion', () => {\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        setGlobal({\n          ...getGlobal(),\n          isUpdateAvailable: true,\n        });\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddActionHandler('closePaymentModal', (global) => {\n  const status = global.payment.status;\n  global = clearPayment(global);\n  global = closeInvoice(global);\n  global = {\n    ...global,\n    payment: {\n      ...global.payment,\n      status,\n    },\n  };\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      status: 'failed',\n      error,\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? global.mediaViewer.volume,\n      playbackRate: playbackRate || global.mediaViewer.playbackRate,\n      isMuted: isMuted || global.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  };\n});\n\naddActionHandler('closeMediaViewer', (global) => {\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = global.mediaViewer;\n  return {\n    ...global,\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      isMuted,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload) => {\n  const isHidden = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      isHidden,\n    },\n  };\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { clearEncryptedSession, encryptSession, setupPasscode } from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_STATE } from '../../initialState';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, { passcode }) => {\n  setGlobal(updatePasscodeSettings(global, {\n    isLoading: true,\n  }));\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  const globalJson = serializeGlobal(updatePasscodeSettings(getGlobal(), {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  setGlobal(updatePasscodeSettings(getGlobal(), {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global) => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, { sessionJson, globalJson }) => {\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  global = JSON.parse(globalJson);\n  migrateCache(global, cloneDeep(INITIAL_STATE));\n\n  setGlobal(updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  ));\n\n  actions.initApi();\n});\n\naddActionHandler('logInvalidUnlockAttempt', (global) => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: (global.passcode?.invalidAttemptsCount ?? 0) + 1,\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global) => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload) => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global) => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', () => {\n  noLockOnUnload = true;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { GlobalActions } from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n  updateTopic,\n  updateThreadInfo,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectIsCurrentUserPremium,\n  selectForwardsContainVoiceMessages,\n  selectThreadIdFromMessage,\n} from '../../selectors';\nimport {\n  debounce, onTickEnd, rafPromise,\n} from '../../../util/schedulers';\nimport {\n  getMessageOriginalId, getUserFullName, isDeletedUser, isServiceNotificationMessage, isUserBot,\n} from '../../helpers';\nimport { getTranslation } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n    });\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n\n    setGlobal(updateThreadUnreadFromForwardedMessage(\n      getGlobal(),\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    ));\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const replyingToTopId = chat.isForum ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    replyingToTopId,\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (!result) {\n    draft.isLocal = true;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat, selectThreadTopMessageId(global, chatId, threadId));\n});\n\nasync function unpinAllMessages(chat: ApiChat, threadId?: number) {\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, threadId || MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddActionHandler('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload) => {\n  const { chatId, shouldDeleteForAll } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  const activeChat = selectCurrentMessageList(global);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload) => {\n  const {\n    messageIds, reason, description,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload) => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddActionHandler('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddActionHandler('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload) => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, action, payload) => {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = global.forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const { isSilent, scheduledAt } = payload;\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      toThreadId,\n      messages: realMessages,\n      serverTimeOffset: getGlobal().serverTimeOffset,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        replyingToTopId: toThreadId,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadScheduledHistory(chat);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload) => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = updateChatMessage(getGlobal(), chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload) => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  serverTimeOffset?: number;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && threadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddActionHandler('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat, threadId);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateChatMessage(getGlobal(), chatId, messageId, {\n    seenByUserIds: result,\n  }));\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload) => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    setGlobal(updateChat(getGlobal(), chatId, {\n      sendAsPeerIds: [],\n    }));\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\nasync function loadPinnedMessages(chat: ApiChat, threadId = MAIN_THREAD_ID) {\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, threadId, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat) {\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n}\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds });\n});\n\naddActionHandler('focusNextMention', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0] });\n});\n\naddActionHandler('readAllMentions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload) => {\n  const { url, shouldSkipModal } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload) => {\n  const { chatId, topicId } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global)) {\n    if (!user.fullInfo) {\n      const { accessHash } = user;\n      user = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n    }\n\n    if (user?.fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: getTranslation('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n      });\n      return;\n    }\n  }\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id: chatId, threadId: topicId });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  });\n\n  actions.exitMessageSelectMode();\n  actions.forwardMessages({ isSilent: true });\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiStickerSetInfo, ApiSticker } from '../../../api/types';\nimport type { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { onTickEnd, pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { getTranslation } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions) => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions) => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddActionHandler('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddActionHandler('loadPremiumStickers', async (global) => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  });\n});\n\naddActionHandler('loadPremiumSetStickers', async (global) => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  });\n});\n\naddActionHandler('loadGreetingStickers', async (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  });\n});\n\naddActionHandler('loadFeaturedStickers', async (global) => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal(updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n});\n\naddActionHandler('loadPremiumGifts', async () => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    premiumGifts: { ...set, stickers },\n  });\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global) => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  setGlobal({\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  });\n});\n\naddActionHandler('loadStickers', (global, actions, payload) => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global) => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global) => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  });\n});\n\naddActionHandler('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddActionHandler('saveGif', async (global, actions, payload) => {\n  const { gif, shouldUnsave } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.getTranslation('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.getTranslation('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.getTranslation('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && { action: actions.openPremiumModal }),\n      className: 'bold-link',\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  });\n});\n\naddActionHandler('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.getTranslation('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.getTranslation('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.getTranslation('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && { action: actions.openPremiumModal }),\n      className: 'bold-link',\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, action, payload) => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  loadRecentStickers();\n});\n\naddActionHandler('clearRecentStickers', async (global) => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  });\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    });\n\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  });\n});\n\nasync function loadRecentStickers(hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash?: string) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadStickers(stickerSetInfo: ApiStickerSetInfo) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetInfo },\n  );\n  let global = getGlobal();\n\n  if (!stickerSet) {\n    onTickEnd(() => {\n      getActions().showNotification({\n        message: getTranslation('StickerPack.ErrorNotFound'),\n      });\n    });\n    if ('shortName' in stickerSetInfo && global.openedStickerSetShortName === stickerSetInfo.shortName) {\n      setGlobal({\n        ...global,\n        openedStickerSetShortName: undefined,\n      });\n    }\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, global.config?.gifSearchUsername);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, global.config?.gifSearchUsername, offset);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload) => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global) => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global) => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  });\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload) => {\n  const { stickerSetInfo } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    actions.showNotification({\n      message: getTranslation('StickerPack.ErrorNotFound'),\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedStickerSetShortName: set.shortName,\n  });\n});\n\nasync function searchStickers(query: string, hash?: string) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, botUsername?: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash?: string) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash?: string) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiChat, ApiTopic, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateTopics,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(global);\n\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  });\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateListedIds,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\n\naddActionHandler('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chat, threadId, type, offsetId);\n});\n\naddActionHandler('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chat: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId);\n  global = updateListedIds(global, chat.id, threadId, newFoundIds);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(chat, threadId, type, nextOffsetId, true);\n  }\n}\n\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getActions().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport { migrateChat } from './chats';\nimport { isChatBasicGroup } from '../../helpers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\n\naddActionHandler('checkPublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined });\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  });\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic' });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress);\n  setGlobal(global);\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  setGlobal(updateManagement(global, chatId, { editingInvite: invite }));\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  setGlobal(updateManagement(global, chatId, update));\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId, isRevoked, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  setGlobal(updateManagement(global, chatId, update));\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const invites = (global.management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(global.management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  setGlobal(updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }));\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = global.management.byChatId[chatId].invites || [];\n  setGlobal(updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }));\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = global.management.byChatId[chatId];\n  setGlobal(updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }));\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(updateManagement(global, chatId, {\n    revokedInvites: [],\n  }));\n});\n\naddActionHandler('loadChatInviteImporters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload) => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  }));\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  }));\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  setGlobal(updateChat(getGlobal(), chatId, {\n    settings: undefined,\n  }));\n});\n","import {\n  addActionHandler, getGlobal, setGlobal, getActions,\n} from '../../index';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { GlobalState, Thread } from '../../types';\n\nimport {\n  DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  updateUsers,\n  updateChats,\n  updateThreadInfos,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n  updateThread,\n} from '../../reducers';\nimport {\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectEditingId,\n  selectEditingDraft,\n  selectChatMessages,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', () => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  setGlobal({ ...getGlobal(), isSyncing: true });\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    setGlobal({ ...getGlobal(), isSyncing: false });\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = getActions();\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages();\n\n      setGlobal({\n        ...getGlobal(),\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      });\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages() {\n  let areMessagesLoaded = false;\n\n  let global = getGlobal();\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n  const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n  const threadInfo = currentThreadId && currentChatId\n    ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n  // TODO Fix comments chat id, or refetch chat thread here\n  const activeCurrentChatId = threadInfo?.originChannelId || currentChatId;\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Partial<Thread>>>((acc, chatId) => {\n    acc[chatId] = {};\n    acc[chatId].draft = selectDraft(global, chatId, activeThreadId);\n    acc[chatId].editingId = selectEditingId(global, chatId, activeThreadId);\n    acc[chatId].editingDraft = selectEditingDraft(global, chatId, activeThreadId);\n\n    return acc;\n  }, {});\n\n  const currentChat = activeCurrentChatId ? global.chats.byId[activeCurrentChatId] : undefined;\n  if (activeCurrentChatId && currentChat) {\n    const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentChatMessages = selectChatMessages(global, activeCurrentChatId);\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n        : [];\n      const topicLastMessages = currentChat.isForum && currentChat.topics\n        ? Object.values(currentChat.topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n        : [];\n\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages, topicLastMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, activeCurrentChatId, byId);\n      global = updateListedIds(global, activeCurrentChatId, activeThreadId, listedIds);\n      global = safeReplaceViewportIds(global, activeCurrentChatId, activeThreadId, listedIds);\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = updateThreadInfos(global, activeCurrentChatId, result.repliesThreadInfos);\n\n      areMessagesLoaded = true;\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    global = updateThread(global, chatId, activeThreadId, draftsByChatId[chatId]);\n  });\n\n  setGlobal(global);\n\n  if (currentChat?.isForum) {\n    getActions().loadTopics({ chatId: activeCurrentChatId!, force: true });\n    if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n      getActions().loadTopicById({\n        chatId: activeCurrentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n      });\n    }\n  }\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getActions().closeAudioPlayer();\n  }\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState } = global;\n  if (previousGlobal?.connectionState === connectionState && previousGlobal?.authState === authState) return;\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getTranslation } from '../../../util/langProvider';\nimport { addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\n\naddActionHandler('reportPeer', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('loadAuthorizations', async () => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  });\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  });\n});\n\naddActionHandler('terminateAllAuthorizations', async (global) => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  });\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload) => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  });\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload) => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  });\n});\n\naddActionHandler('loadWebAuthorizations', async (global) => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  setGlobal({\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  });\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  setGlobal({\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  });\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global) => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  });\n});\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  callApi('fetchFullUser', { id, accessHash });\n});\n\naddActionHandler('loadUser', async (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', (global) => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers();\n  }\n});\n\naddActionHandler('loadContactList', () => {\n  void loadContactList();\n});\n\naddActionHandler('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n  } = payload;\n\n  void updateContact(userId, isMuted, firstName, lastName, shouldSharePhoneNumber);\n});\n\naddActionHandler('deleteContact', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteContact(userId);\n});\n\nasync function loadTopUsers() {\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList() {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: string,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n  shouldSharePhoneNumber?: boolean,\n) {\n  let global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getActions().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    getActions().loadChatSettings({ chatId: userId });\n\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete);\n  global = closeNewContactDialog(global);\n  setGlobal(global);\n}\n\nasync function deleteContact(userId: string) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n}\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload) => {\n  const { phoneNumber: phone, firstName, lastName } = payload!;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.getTranslation('Contacts.PhoneNumber.NotRegistred'),\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result });\n\n  setGlobal(closeNewContactDialog(getGlobal()));\n});\n\naddActionHandler('reportSpam', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import type { GlobalState } from '../types';\nimport type { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import { IS_ANDROID, IS_IOS } from './environment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser, selectThreadTopMessageId,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload) => {\n  const { messageId, button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, button.data);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({ receiptMessageId, chatId: chat.id, messageId });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, undefined, true);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({ query, isSamePeer, messageId });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(\n    chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chatId),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  setGlobal(removeBlockedContact(getGlobal(), bot.id));\n  void sendBotCommand(chat, currentUserId, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global) => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      setGlobal(replaceInlineBotSettings(global, username, false));\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot({\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    });\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload) => {\n  const { query, isSamePeer, messageId } = payload;\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, message.viaBotId || message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload) => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n  const replyingTo = selectReplyingToId(global, chatId, threadId);\n  let replyingToTopId: number | undefined;\n\n  if (replyingTo && threadId !== MAIN_THREAD_ID) {\n    replyingToTopId = selectThreadTopMessageId(global, chatId, threadId)!;\n  }\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddActionHandler('startBot', async (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  let bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n  if (!bot.fullInfo) await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n  bot = selectUser(getGlobal(), botId)!;\n  if (bot.fullInfo?.isBlocked) await callApi('unblockContact', bot.id, bot.accessHash);\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload) => {\n  const {\n    url, botId, theme, buttonText,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('requestWebView', async (global, actions, payload) => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload) => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp();\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload) => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global) => {\n  return {\n    ...global,\n    webApp: undefined,\n  };\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload) => {\n  if (!global.webApp?.url) return undefined;\n  return {\n    ...global,\n    webApp: {\n      ...global.webApp,\n      slug: payload.slug,\n    },\n  };\n});\n\naddActionHandler('cancelBotTrustRequest', (global) => {\n  return {\n    ...global,\n    botTrustRequest: undefined,\n  };\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload) => {\n  const { botId } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n  setGlobal({\n    ...global,\n    botTrustRequest: undefined,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  });\n\n  if (global.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = global.botTrustRequest.onConfirm;\n    actions[action](callbackPayload);\n  }\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload) => {\n  const { hash } = payload || {};\n  await loadAttachBots(hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload) => {\n  const { botId, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(bot, isEnabled);\n});\n\nasync function toggleAttachBot(bot: ApiUser, isEnabled: boolean) {\n  await callApi('toggleAttachBot', { bot, isEnabled });\n  await loadAttachBots();\n}\n\nasync function loadAttachBots(hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal({\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  });\n}\n\naddActionHandler('callAttachBot', (global, actions, payload) => {\n  const {\n    chatId, botId, isFromBotMenu, url, startParam, threadId,\n  } = payload;\n  const { attachMenu: { bots } } = global;\n  if (!isFromBotMenu && !bots[botId]) {\n    return {\n      ...global,\n      requestedAttachBotInstall: {\n        botId,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            chatId, botId, startParam, threadId,\n          },\n        },\n      },\n    };\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId, threadId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global) => {\n  const { requestedAttachBotInstall } = global;\n\n  const { botId, onConfirm } = requestedAttachBotInstall!;\n\n  setGlobal({\n    ...global,\n    requestedAttachBotInstall: undefined,\n  });\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  await toggleAttachBot(bot, true);\n  if (onConfirm) {\n    const { action, payload } = onConfirm;\n    getActions()[action](payload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global) => {\n  return {\n    ...global,\n    requestedAttachBotInstall: undefined,\n  };\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload) => {\n  const { botId, filter, startParam } = payload;\n  const currentChatId = selectCurrentMessageList(global)?.chatId;\n\n  const { attachMenu: { bots } } = global;\n  const bot = bots[botId];\n  if (!bot) return;\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || botId,\n      botId,\n      startParam,\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    requestedAttachBotInChat: {\n      botId,\n      filter: supportedFilters,\n      startParam,\n    },\n  });\n});\n\naddActionHandler('cancelAttachBotInChat', (global) => {\n  return {\n    ...global,\n    requestedAttachBotInChat: undefined,\n  };\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload) => {\n  const {\n    chatId, buttonId, messageId, url,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  });\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload) => {\n  const { isWriteAllowed } = payload;\n  if (!global.urlAuth?.button) return;\n  const {\n    button, url,\n  } = global.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload) => {\n  const { url } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    urlAuth: {\n      url,\n    },\n  });\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload) => {\n  const { isWriteAllowed } = payload;\n  if (!global.urlAuth?.url) return;\n  const { url } = global.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('closeUrlAuthModal', (global) => {\n  return {\n    ...global,\n    urlAuth: undefined,\n  };\n});\n\nfunction handleUrlAuthResult(url: string, result: ApiUrlAuthResult) {\n  if (result.type === 'request') {\n    const global = getGlobal();\n    if (!global.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    setGlobal({\n      ...global,\n      urlAuth: {\n        ...global.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    });\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  getActions().closeUrlAuthModal();\n}\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, currentUserId: string, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data?: string, isGame = false) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = getActions();\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window' });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({ url, chatId: chat.id, messageId });\n      }\n    } else {\n      openUrl({ url });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ApiChat, ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload) => {\n  const inputInvoice = selectPaymentInputInvoice(global);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const { requestInfo, saveInfo } = payload;\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(inputInvoice, requestInfo, saveInfo);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo({\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload) => {\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm({ slug: payload.slug });\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm({\n      chat,\n      messageId: payload.messageId,\n    });\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice);\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  });\n});\n\nasync function getPaymentForm(inputInvoice: ApiRequestInputInvoice): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  let global = setPaymentForm(getGlobal(), form);\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message);\n  setGlobal(global);\n}\n\naddActionHandler('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddActionHandler('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload) => {\n  const { nativeProvider } = global.payment;\n  const { credentials } = payload;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(data, publishableKey);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(data, publicToken);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload) => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const { nativeProvider, temporaryPassword } = global.payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global) : selectProviderPublicToken(global);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  setGlobal(updatePayment(global, { status: 'pending' }));\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe' ? selectStripeCredentials(global) : selectSmartGlocalCredentials(global),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' });\n  global = closeInvoice(global);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n  },\n  publicToken: string,\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n\n  let global = setSmartGlocalCardInfo(getGlobal(), {\n    type: 'card',\n    token: result.data.token,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step ?? PaymentStep.Checkout);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload) => {\n  if (!global.premiumModal) return undefined;\n  const { isClosed } = payload || {};\n  return {\n    ...global,\n    premiumModal: {\n      ...global.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  };\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload) => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  setGlobal({\n    ...global,\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  });\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload) => {\n  const { forUserId } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  setGlobal({\n    ...global,\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  });\n});\n\naddActionHandler('closeGiftPremiumModal', (global) => {\n  setGlobal({\n    ...global,\n    giftPremiumModal: { isOpen: false },\n  });\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, { password }) => {\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } });\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } });\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout });\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo(inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global) => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  return x - ((global.isLeftColumnShown && !IS_SINGLE_COLUMN_LAYOUT)\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction(\n  global: GlobalState, message: ApiMessage, userReactions: ApiReaction[],\n) {\n  const currentReactions = message.reactions || { results: [] };\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ userId }) => userId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      userId: currentUserId!,\n      reaction,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions(\n  global: GlobalState, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n) {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat,\n  selectDefaultReaction,\n  selectLocalAnimatedEmojiEffectByName,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isSameReaction, getUserReactions, isMessageLocal } from '../../helpers';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async () => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    availableReactions: result,\n  });\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload) => {\n  const {\n    emoji, x, y, localEffect, startSize, isReversed,\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji || localEffect,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return {\n    ...global,\n    activeEmojiInteractions: [...(global.activeEmojiInteractions || []), activeEmojiInteraction],\n  };\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload) => {\n  const {\n    messageId, chatId, emoji, interactions, localEffect,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || (!emoji && !localEffect) || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji || selectLocalAnimatedEmojiEffectByName(localEffect),\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload) => {\n  const {\n    chatId, messageId,\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n  });\n});\n\naddActionHandler('toggleReaction', (global, actions, payload) => {\n  const { chatId, reaction } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n\n  const reactions = newUserReactions.slice(-limit);\n\n  void callApi('sendReaction', { chat, messageId, reactions });\n\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    const newActiveReactions = hasReaction ? omit(global.activeReactions, [messageId]) : {\n      ...global.activeReactions,\n      [messageId]: [\n        ...(global.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = {\n      ...global,\n      activeReactions: newActiveReactions,\n    };\n  }\n\n  return addMessageReaction(global, message, reactions);\n});\n\naddActionHandler('openChat', (global) => {\n  return {\n    ...global,\n    activeReactions: {},\n  };\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n\n  if (!global.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = global.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...global.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(global.activeReactions, [messageId]);\n\n  return {\n    ...global,\n    activeReactions: newActiveReactions,\n  };\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload) => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  });\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload) => {\n  const { id } = payload;\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions?.filter((active) => active.id !== id),\n  };\n});\n\naddActionHandler('loadReactors', async (global, actions, payload) => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  setGlobal(updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  }));\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload) => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload) => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !global.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  };\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return {\n    ...global,\n    activeReactions: {\n      ...global.activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  };\n});\n\naddActionHandler('focusNextReaction', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0] });\n});\n\naddActionHandler('readAllReactions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  updateStatistics, updateMessageStatistics, updateStatisticsGraph, addUsers,\n} from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\n\naddActionHandler('loadStatistics', async (global, actions, payload) => {\n  const { chatId, isGroup } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  setGlobal(updateStatistics(global, chatId, stats));\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  setGlobal(updateMessageStatistics(global, result));\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload) => {\n  const {\n    chatId, token, name, isPercentage,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateStatisticsGraph(getGlobal(), chatId, name, result));\n});\n","export function areDeepEqual<T extends any>(value1: T, value2: T): boolean {\n  const type1 = typeof value1;\n  const type2 = typeof value2;\n  if (type1 !== type2) {\n    return false;\n  }\n\n  if (type1 !== 'object') {\n    return value1 === value2;\n  }\n\n  const isArray1 = Array.isArray(value1);\n  const isArray2 = Array.isArray(value2);\n\n  if (isArray1 !== isArray2) {\n    return false;\n  }\n\n  if (isArray1) {\n    const array1 = value1 as any[];\n    const array2 = value2 as any[];\n\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    return array1.every((member1, i) => areDeepEqual(member1, array2[i]));\n  }\n\n  const object1 = value1 as AnyLiteral;\n  const object2 = value2 as AnyLiteral;\n  const keys1 = Object.keys(object1);\n\n  return keys1.every((key1) => areDeepEqual(object1[key1], object2[key1]));\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat, updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectThreadParam,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum } = selectChat(global, update.id) || {};\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n      setGlobal(updateChat(global, update.id, update.chat, update.newProfilePhoto));\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      // The property `isForum` was changed in another client\n      if (currentChatId === update.id && 'isForum' in update.chat && prevIsForum !== update.chat.isForum) {\n        if (prevIsForum) {\n          actions.closeForumPanel();\n        }\n        actions.openChat({ id: currentChatId });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      setGlobal(replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus));\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          setGlobal(replaceThreadParam(global, id, threadId, 'typingStatus', undefined));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        global = updateChat(global, update.chatId, {\n          unreadCount: (chat.unreadCount || 0) + 1,\n          ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n        });\n      }\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, GlobalActions, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  deleteTopic,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n  selectIsServiceChatReady,\n  selectLocalAnimatedEmojiEffect,\n  selectLocalAnimatedEmoji,\n  selectThreadIdFromMessage,\n  selectTopicFromMessage,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n      if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (isLocal && message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isLocal) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n      if (currentChatId !== update.id) return;\n      const message = selectChatMessage(global, currentChatId, update.messageId);\n\n      if (!message) return;\n\n      // Workaround for a weird behavior when interaction is received after watching reaction\n      if (getMessageText(message) !== update.emoji) return;\n\n      const localEmoji = selectLocalAnimatedEmoji(global, update.emoji);\n\n      global = {\n        ...global,\n        activeEmojiInteractions: [...(global.activeEmojiInteractions || []), {\n          id: global.activeEmojiInteractions?.length || 0,\n          animatedEffect: localEmoji ? selectLocalAnimatedEmojiEffect(localEmoji) : update.emoji,\n          messageId: update.messageId,\n        } as ActiveEmojiInteraction],\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, message.isOutgoing, currentMessage);\n      }\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      if (\n        currentMessage\n        && chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.repliesThreadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        setGlobal({\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        });\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      setGlobal(updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message));\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        setGlobal(updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        }));\n      } else if (media) {\n        setGlobal(updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      setGlobal({\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      });\n      break;\n    }\n  }\n});\n\nfunction updateReactions(\n  global: GlobalState,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n) {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: (threadInfo.messagesCount || 0) + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = candidateGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage(global: GlobalState, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(global: GlobalState, chatId: string | undefined, ids: number[], actions: GlobalActions) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUser } from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  const global = getGlobal();\n\n  setGlobal(replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  }));\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      if (update.id === global.currentUserId && update.user.isPremium && !selectIsCurrentUserPremium(global)) {\n        actions.openPremiumModal({ isSuccess: true });\n      }\n\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder':\n      actions.reorderStickerSets({ order: update.order, isCustomEmoji: update.isCustomEmoji });\n      break;\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      setGlobal({\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      });\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      global = setConfirmPaymentUrl(getGlobal(), update.url);\n      global = setPaymentStep(global, PaymentStep.ConfirmPayment);\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      if (global.webApp?.queryId === update.queryId) {\n        actions.setReplyingToId({ messageId: undefined });\n        actions.closeWebApp();\n      }\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport {\n  addNotifyException, updateChat, updateTopic, updateNotifySettings,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSoundsForSafari } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n            isCallPanelVisible: undefined,\n            phoneCall: undefined,\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(getGlobal())!,\n          });\n        });\n\n        void initializeSoundsForSafari();\n        void checkNavigatorUserMediaPermissions(call.isVideo);\n        return {\n          ...global,\n          phoneCall: call,\n          isCallPanelVisible: false,\n        };\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/environment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { inputInvoice } = global.payment;\n\n      if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n        const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n        if (message && message.content.invoice) {\n          const { amount, currency, title } = message.content.invoice;\n\n          actions.showNotification({\n            message: langProvider.getTranslation('PaymentInfoHint', [\n              formatCurrency(amount, currency, langProvider.getTranslation.code),\n              title,\n            ]),\n          });\n        }\n      }\n\n      // On the production host, the payment frame receives a message with the payment event,\n      // after which the payment form closes. In other cases, the payment form must be closed manually.\n      // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n      if (!IS_PRODUCTION_HOST) {\n        global = closeInvoice(global);\n      }\n\n      if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n        return !IS_PRODUCTION_HOST ? global : undefined;\n      }\n\n      return {\n        ...global,\n        payment: {\n          ...global.payment,\n          status: 'paid',\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { ApiChat } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME, APP_VERSION,\n  BETA_CHANGELOG_URL,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport { IS_PWA, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport { selectCurrentMessageList, selectTheme } from '../../../global/selectors';\nimport { isChatArchived } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'canInstall'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  onSearchQuery,\n  isClosingSearch,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canInstall,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n  } = getActions();\n\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen(SettingsScreens.PasscodeDisabled);\n    }\n  }, [hasPasscode, lockScreen, requestNextSettingsScreen]);\n\n  useHotkeys({\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  });\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleSwitchToLegacy = useCallback(() => {\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {IS_BETA && (\n            <MenuItem\n              icon=\"permissions\"\n              onClick={handleChangelogClick}\n            >\n              Beta Changelog\n            </MenuItem>\n          )}\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={handleSwitchToLegacy}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n          {canInstall && (\n            <MenuItem\n              icon=\"install\"\n              onClick={getPromptInstall()}\n            >\n              Install App\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className=\"passcode-lock\"\n          >\n            <i className=\"icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId, connectionState, isSyncing } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(global.canInstall),\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\nimport { selectIsForumPanelOpen } from '../../../global/selectors';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  shouldHideFolderTabs?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  isForumPanelOpen?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onScreenSelect,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  shouldHideFolderTabs,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const allChatsFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n    };\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map(({ id, title }, i) => {\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n\n      return ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n      });\n    });\n  }, [displayedFolders, folderCountersById, maxFolders]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(FIRST_FOLDER_INDEX);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1), { forceOnHeavyAnimation: true });\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1), { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder(FIRST_FOLDER_INDEX);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder(FIRST_FOLDER_INDEX, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        lastSyncTime={lastSyncTime}\n        foldersDispatch={foldersDispatch}\n        onScreenSelect={onScreenSelect}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n      )}\n    >\n      {shouldRenderFolders ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} areFolders />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      isForumPanelOpen: selectIsForumPanelOpen(global),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\nimport ForumPanel from './ForumPanel';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const { shouldRenderForumPanel, handleForumPanelAnimationEnd } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && content === LeftColumnContent.ChatList;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleUpdateClick = useCallback(() => {\n    window.location.reload();\n  }, []);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onScreenSelect={onScreenSelect}\n                  foldersDispatch={foldersDispatch}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelVisible}\n          onTopicSearch={onTopicSearch}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectCurrentChat, selectIsForumPanelOpen } from '../../global/selectors';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useOnChange from '../../hooks/useOnChange';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  isChatOpen,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setContactsFilter('');\n      setGlobalSearchClosing(true);\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing(false);\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, isFirstChatFolderActive, setGlobalSearchClosing, resetChatCreation, setGlobalSearchQuery,\n    setGlobalSearchDate, setGlobalSearchChatId, settingsScreen, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  const handleTopicSearch = useCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  }, [forumPanelChatId, setGlobalSearchChatId, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || (isFirstChatFolderActive && !isChatOpen)\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [isFirstChatFolderActive, content, handleReset, isChatOpen],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    'Mod+0': handleHotkeySavedMessages,\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useOnChange(() => {\n    if (nextSettingsScreen) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen(undefined);\n    }\n  }, [nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onTopicSearch={handleTopicSearch}\n                  isForumPanelOpen={isForumPanelOpen}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  isClosingSearch={isClosingSearch}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                  isUpdateAvailable={isUpdateAvailable}\n                  isForumPanelOpen={isForumPanelOpen}\n                  onTopicSearch={handleTopicSearch}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      settings: {\n        nextScreen: nextSettingsScreen,\n      },\n      isUpdateAvailable,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = global.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      isChatOpen,\n      isUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: global.globalSearch.isClosing,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport {\n  useState, useEffect, useLayoutEffect, useCallback,\n} from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  const setElementStyle = useCallback((width?: number) => {\n    if (!elementRef.current) {\n      return;\n    }\n\n    const widthPx = width ? `${width}px` : '';\n    elementRef.current.style.width = widthPx;\n    if (cssPropertyName) {\n      elementRef.current.style.setProperty(cssPropertyName, widthPx);\n    }\n  }, [cssPropertyName, elementRef]);\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSingleInlineButton } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName('HeaderPinnedMessage', noHoverColor && 'no-hover')}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle ? renderText(customTitle) : `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">\n            <MessageSummary lang={lang} message={message} noEmoji={Boolean(mediaThumbnail)} />\n          </p>\n          <RippleEffect />\n        </div>\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className=\"inline-button\"\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import { getAverageColor, getColorLuma } from './colors';\n\nconst LUMA_THRESHOLD = 240;\n\nexport function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      const averageColor = await getAverageColor(img.src);\n      const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx2D = canvas.getContext('2d')!;\n        ctx2D.fillStyle = fillColor;\n        ctx2D.fillRect(0, 0, canvas.width, canvas.height);\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          ctx2D.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nasync function steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  const averageColor = await getAverageColor(img.src);\n  const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n  ctx.fillStyle = fillColor;\n  ctx.globalCompositeOperation = 'destination-over';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, {\n  useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport windowSize from '../../util/windowSize';\nimport useLang from '../../hooks/useLang';\nimport renderText from '../common/helpers/renderText';\n\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  // Prevent refresh by accidentally rotating device when listening to a voice message\n  const isVoicePlaying = isVoice && isPlaying;\n  useEffect(() => {\n    if (!isVoicePlaying) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isVoicePlaying]);\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const updatePlaybackRate = useCallback((newRate: number) => {\n    const rate = PLAYBACK_RATES[newRate];\n    setAudioPlayerPlaybackRate({ playbackRate: rate });\n    setPlaybackRate(rate);\n  }, [setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const handlePlaybackClick = useCallback(() => {\n    if (isContextMenuOpen) return;\n    updatePlaybackRate(playbackRate === 1 ? 2 : 1);\n  }, [isContextMenuOpen, playbackRate, updatePlaybackRate]);\n\n  const PlaybackRateButton = useCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0] || 1;\n    return (\n      <Button\n        round\n        className={buildClassName('playback-button', playbackRate !== 1 && 'applied')}\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Playback Rate\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handlePlaybackClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <span className=\"playback-button-inner\">\n          {playbackRate === 1 ? 2 : displayRate}Х\n        </span>\n      </Button>\n    );\n  }, [handleBeforeContextMenu, handleContextMenu, handlePlaybackClick, playbackRate]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <Button\n        round\n        className=\"player-button volume-button\"\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Volume\"\n        noPreventDefault\n      >\n        <i className={volumeIcon} onClick={handleVolumeClick} />\n        {!IS_IOS && (\n          <>\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </>\n        )}\n      </Button>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n        >\n          {renderPlaybackRateMenuItem(0.5, playbackRate, updatePlaybackRate)}\n          {renderPlaybackRateMenuItem(0.75, playbackRate, updatePlaybackRate)}\n          {renderPlaybackRateMenuItem(1, playbackRate, updatePlaybackRate)}\n          {renderPlaybackRateMenuItem(1.5, playbackRate, updatePlaybackRate)}\n          {renderPlaybackRateMenuItem(2, playbackRate, updatePlaybackRate)}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(rate: number, currentRate: number, onClick: (rate: number) => void) {\n  return (\n    <MenuItem\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={currentRate === PLAYBACK_RATES[rate] ? 'check' : undefined}\n      customIcon={currentRate !== PLAYBACK_RATES[rate] ? <i className=\"icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const { volume, playbackRate, isMuted } = global.audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        isButtonsInOneRow\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (lastSyncTime && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady, isForum]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n  }, [openChatWithInfo, chatId, threadId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  }, [openChat, chatId, threadId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (lang('CommentsCount', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!IS_SINGLE_COLUMN_LAYOUT && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isPinnedMessagesFullWidth && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_LOADING = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMentionsRead, animateUnreadReaction } = getActions();\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isOwnMessage,\n  getMessageVideo,\n  getMessageWebPageVideo,\n} from '../../../../global/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, asForwarded?: boolean, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, asForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, asForwarded, isWebPageVideo, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\nlet fontFamily: string | undefined;\nexport default function calculateAuthorWidth(text: string) {\n  if (!fontFamily) {\n    fontFamily = getComputedStyle(document.documentElement).getPropertyValue('--font-family');\n  }\n\n  if (!element) {\n    element = document.createElement('span');\n    element.style.font = `400 12px ${fontFamily}`;\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.textContent = text;\n\n  return element.offsetWidth;\n}\n","import type { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker, ApiTopic,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n  selectTopicFromMessage,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n  isInsideTopic?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  topic?: ApiTopic;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  isInsideTopic,\n  topic,\n  memoFirstUnreadIdRef,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    topic,\n    { isEmbedded },\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  // TODO: Refactoring for action rendering\n  const shouldSkipRender = isInsideTopic && message.content.action?.text === 'TopicWasCreatedAction';\n  if (shouldSkipRender) {\n    return <span ref={ref} />;\n  }\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{content}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isGift && 'premium-gift',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {isGift && renderGift()}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n    const topic = selectTopicFromMessage(global, message);\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      topic,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat,\n} from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <>\n      <img\n        src={blobUrl || thumbDataUri}\n        width={width}\n        height={height}\n        alt=\"\"\n        className={buildClassName('pictogram', isRoundVideo && 'round')}\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  };\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  useEffect(() => {\n    if (hasEffect && canPlay && shouldPlayEffect) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, startPlayingEffect]);\n\n  const openModal = useCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet, sticker]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: openModal,\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect]);\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n        cacheBuster={lastSyncTime}\n      />\n      {hasEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport safePlay from '../../../util/safePlay';\nimport { selectLocalAnimatedEmojiEffectByName } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  localEffect?: string,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  const hasEffect = localEffect || emoji;\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, (emoji || localEffect) && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId,\n      messageId,\n      localEffect,\n      emoji,\n      interactions: interactions.current,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, localEffect, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!hasEffect || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      localEffect,\n      emoji,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [\n    chatId, emoji, hasEffect, interactWithAnimatedEmoji, isOwn,\n    localEffect, messageId, play, sendInteractionBunch, size,\n  ]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId,\n        emoticon: localEffect ? selectLocalAnimatedEmojiEffectByName(localEffect) : emoji,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [\n    activeEmojiInteractions, chatId, emoji, isOwn, localEffect, messageId, play, sendWatchingEmojiInteraction, size,\n  ]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectLocalAnimatedEmoji,\n  selectLocalAnimatedEmojiEffect,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  localSticker?: keyof typeof LOCAL_TGS_URLS;\n  localEffect?: string;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  localSticker,\n  localEffect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, localEffect, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return localSticker ? (\n    <AnimatedIconWithPreview\n      tgsUrl={LOCAL_TGS_URLS[localSticker]}\n      size={size}\n      quality={QUALITY}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className=\"AnimatedEmoji media-inner\"\n      style={style}\n      onClick={handleClick}\n    />\n  ) : (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  const localSticker = selectLocalAnimatedEmoji(global, emoji);\n\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n    localSticker,\n    localEffect: localSticker && withEffects ? selectLocalAnimatedEmojiEffect(localSticker) : undefined,\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, undefined, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n  };\n})(AnimatedCustomEmoji));\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, isDisabled?: boolean | string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(isDisabled),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import React, {\n  useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n  getMessageMediaFormat,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  asForwarded?: boolean;\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  asForwarded,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n\n  const [withThumb] = useState(!fullMediaData);\n  const noThumb = Boolean(fullMediaData);\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'), !isDownloading, getMessageMediaFormat(message, 'download'),\n  );\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [shouldAffectAppendix, fullMediaData, isOwn, isInSelectMode, isSelected, theme] as const);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, asForwarded, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = size === 'inline' ? `height: ${height}px;${dimensionsStyle}` : undefined;\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <img\n        src={fullMediaData}\n        className=\"full-media\"\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {withThumb && (\n        <canvas ref={thumbRef} className={buildClassName('thumbnail', thumbClassNames)} />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay);\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'), lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading && lastSyncTime;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview, undefined, lastSyncTime);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, isDownloading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className=\"full-media\"\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon-large-play', playButtonClassNames)} />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n  animationLevel: AnimationLevel;\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, animationLevel,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} animationLevel={animationLevel} withVideo />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useState, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n  serverTimeOffset: number;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n  serverTimeOffset,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          asForwarded={asForwarded}\n          nonInteractive={!isMediaInteractive}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      {isArticle && (\n        <div className=\"WebPage-text\">\n          <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n          {!inPreview && title && (\n            <p className=\"site-title\">{renderText(title)}</p>\n          )}\n          {truncatedDescription && (\n            <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n          )}\n        </div>\n      )}\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersectionForLoading={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          asForwarded={asForwarded}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme] as const);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n            crossOrigin=\"anonymous\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton width={photo.dimensions?.width} height={photo.dimensions?.height} forceAspectRatio />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"dots\":\"Nlcnrzv_f5cSxFsPOGt2\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"canvas\":\"a_WnxsI6X0B4j7QRRoOA\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\nimport useInterval from '../../../hooks/useInterval';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst POLLING_INTERVAL = 30000;\nconst BLUR_RADIUS = 25;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  lastSyncTime,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  }, [chatId, id, loadExtendedMedia]);\n\n  useInterval(refreshExtendedMedia, lastSyncTime ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const canvasRef = useCanvasBlur(thumbnail?.dataUri, false, undefined, BLUR_RADIUS, width, height);\n\n  const handleClick = useCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  }, [chatId, id, openInvoice]);\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <canvas ref={canvasRef} className={styles.canvas} width={width} height={height} />\n      <div className={styles.dots} />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  serverTimeOffset: number;\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n  serverTimeOffset,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime(serverTimeOffset);\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime(serverTimeOffset);\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, serverTimeOffset, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffectWithPrevDeps(([prevShouldRenderText]) => {\n    if (shouldRenderText) {\n      if (!prevShouldRenderText) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (mapBlobUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldRenderText, isOwn, isInSelectMode, isSelected, theme, mapBlobUrl] as const);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={iconSrc} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TaAutZxIFX4go5HmM7Cg\",\"particle\":\"b5KMGtz_lQAs58tR80GG\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\n\nimport styles from './CustomReactionAnimation.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomReactionAnimation: FC<OwnProps> = ({\n  reaction,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(stickerHash);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData) return undefined;\n\n  return (\n    <div className={styles.root}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomReactionAnimation);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"is-custom-emoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"isCustomEmoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomReactionAnimation from './CustomReactionAnimation';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n};\n\nconst CENTER_ICON_SIZE = 1.875 * REM;\nconst EFFECT_SIZE = 6.25 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const customEmoji = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomReactionAnimation reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceOnHeavyAnimation\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, toggleReaction]);\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon-lock\" />}\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ActiveEmojiInteraction, ActiveReaction, MessageListType } from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n  ApiChatMember,\n  ApiUsername,\n  ApiTopic,\n  ApiReaction,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type {\n  AnimationLevel, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\nimport {\n  AudioOrigin,\n} from '../../../types';\nimport {\n  MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectLocalAnimatedEmoji,\n  selectIsCurrentUserPremium,\n  selectIsChatProtected,\n  selectTopicFromMessage,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n  getMessageSingleCustomEmoji,\n  hasMessageText,\n  isChatGroup,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport {\n  calculateDimensionsForMessageMedia,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport TopicChip from '../../common/TopicChip';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n    memoFirstUnreadIdRef: { current: number | undefined };\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  animationLevel: AnimationLevel;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  lastSyncTime,\n  serverTimeOffset,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  animationLevel,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime(serverTimeOffset)),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !hasAnimatedEmoji) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, asForwarded, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        asForwarded,\n        noAvatars,\n      }).width;\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n        observeIntersection={observeIntersectionForLoading}\n        animationLevel={animationLevel}\n        withVideo\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        onClick={handleMetaClick}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !hasThread;\n    const textContentClass = buildClassName(\n      'text-content',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            <MessageText\n              message={message}\n              emojiSize={emojiSize}\n              highlight={highlight}\n              isProtected={isProtected}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n              withTranslucentThumbs={isCustomShape}\n            />\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n            serverTimeOffset={serverTimeOffset}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji\n                reaction={defaultReaction}\n                size={QUICK_REACTION_SIZE}\n                availableReactions={availableReactions}\n                observeIntersection={observeIntersectionForPlaying}\n              />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, lastSyncTime, serverTimeOffset,\n    } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, repliesThreadInfo, forwardInfo,\n      transcriptionId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chat.fullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && (\n      selectAnimatedEmoji(global, singleEmoji) || selectLocalAnimatedEmoji(global, singleEmoji)\n    ) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const messageTopic = threadId === MAIN_THREAD_ID ? selectTopicFromMessage(global, message) : undefined;\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      lastSyncTime,\n      serverTimeOffset,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && global.activeReactions[reactionMessage.id],\n      activeEmojiInteractions: global.activeEmojiInteractions,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      senderAdminMember,\n      messageTopic,\n      genericEffects: global.genericEmojiEffects,\n      hasTopicChip,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type {\n  ApiChat, ApiTopic, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  const handleTopicChipClick = useCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  }, [chatId, focusMessage, isChatWithRepliesBot, messageTopic, messageId, replyToChatId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getActions } from '../../global';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageListType } from '../../global/types';\nimport type { ApiTopic } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon topic={topic} size={ICON_SIZE} className=\"icon topic-icon\" />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/environment';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { useResizeObserver } from '../../hooks/useResizeObserver';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: AnimationLevel;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n  topic?: ApiTopic;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useOnChange(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && threadFirstMessageId !== threadTopMessageId\n      && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  }, []);\n  useResizeObserver(containerRef, handleResize);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {!botInfo && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <OptimizedVideo\n                  canPlay\n                  src={botInfoGifUrl}\n                  loop\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botInfo = chatBot.fullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    const topic = chat.topics?.[threadId];\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      topic,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      {hasUnreadReactions && (\n        <ScrollDownButton\n          icon=\"heart-outline\"\n          ariaLabelLang=\"AccDescrReactionMentionDown\"\n          onClick={focusNextReaction}\n          onReadAll={readAllReactions}\n          unreadCount={reactionsCount}\n        />\n      )}\n      {hasUnreadMentions && (\n        <ScrollDownButton\n          icon=\"mention\"\n          ariaLabelLang=\"AccDescrMentionDown\"\n          onClick={focusNextMention}\n          onReadAll={readAllMentions}\n          unreadCount={mentionsCount}\n        />\n      )}\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n      const shouldShrink = width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE;\n\n      if (shouldShrink || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(\n          blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n        );\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n  );\n  const hasStickers = Boolean(stickers?.length) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({\n        emoji: IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!,\n      });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (files.length === 0 && !pastedText) {\n        return;\n      }\n\n      if (files.length > 0 && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file, files.length === 1 && CLIPBOARD_ACCEPTED_TYPES.includes(file.type));\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      if (textToPaste) {\n        insertTextAndUpdateCursor(textToPaste, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nconst useDraft = (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  lastSyncTime?: number,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n  const prevDraft = usePrevious(draft);\n\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    const currentHtml = htmlRef.current;\n    if (currentHtml === undefined || editedMessage || !lastSyncTime) return;\n    if (currentHtml.length) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(currentHtml!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, lastSyncTime, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n      return;\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n  }, [\n    chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId, editedMessage, prevDraft, loadCustomEmojis,\n  ]);\n\n  const html = htmlRef.current;\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n\nexport default useDraft;\n","import { useCallback, useRef, useState } from '../lib/teact/teact';\n\nimport useRunDebounced from './useRunDebounced';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck, { isHeavyAnimating } from './useHeavyAnimationCheck';\nimport useForceUpdate from './useForceUpdate';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const [value, setValue] = useState<R>();\n  const { isFrozen, updateWhenUnfrozen } = useHeavyAnimationFreeze();\n  const runDebounced = useRunDebounced(ms, true);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      updateWhenUnfrozen();\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n\nfunction useHeavyAnimationFreeze() {\n  const isPending = useRef(false);\n\n  const updateWhenUnfrozen = useCallback(() => {\n    isPending.current = true;\n  }, []);\n\n  const forceUpdate = useForceUpdate();\n  const handleUnfreeze = useCallback(() => {\n    if (!isPending.current) {\n      return;\n    }\n\n    isPending.current = false;\n    forceUpdate();\n  }, [forceUpdate]);\n  useHeavyAnimationCheck(noop, handleUnfreeze);\n\n  return {\n    isFrozen: isHeavyAnimating(),\n    updateWhenUnfrozen,\n  };\n}\n\nfunction noop() {\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useDebouncedMemo from '../../../../hooks/useDebouncedMemo';\n\nconst DEBOUNCE_MS = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot } = getActions();\n\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDebouncedMemo(() => parseBotQuery(html), DEBOUNCE_MS, [html]) || {};\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = usernameLowered ? inlineBots?.[usernameLowered] : undefined;\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({\n        chatId, username: usernameLowered, query, offset,\n      });\n    }\n  }, [isAllowed, usernameLowered, chatId, queryInlineBot, query, offset]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: unmarkIsOpen,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nfunction parseBotQuery(html: string) {\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n    usernameLowered: result[1].toLowerCase(),\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      setFilteredBotCommands(undefined);\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length && html.length > 0) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, html.length, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef, useCallback, memo } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport type { OwnProps as ButtonProps } from './Button';\nimport Button from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  const handleClick = useCallback(() => {\n    isMouseInside.current = true;\n    onActivate();\n  }, [onActivate]);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={!IS_TOUCH_ENV ? onActivate : handleClick}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((path) => {\n      path.style.stroke = color;\n      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  threadId?: number;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  threadId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleAttachBot]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        botId: bot.id,\n        chatId,\n        threadId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            <MenuItem icon=\"photo\" onClick={handleQuickSelect}>{lang('AttachmentMenu.PhotoOrVideo')}</MenuItem>\n            <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            threadId={threadId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [replyingToId, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, isForwarding, message]);\n\n  const handleClearClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  }, [clearEmbedded]);\n\n  const handleChangeRecipientClick = useCallback(() => {\n    changeForwardRecipient();\n  }, [changeForwardRecipient]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getRootElement = useCallback(() => ref.current!, []);\n  const getMenuElement = useCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'), []);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div>\n        <div className=\"embedded-left-icon\">\n          <i className={leftIcon} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors(false)}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors(true)}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions(false)}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions(true)}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageEntityTextUrl, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDebouncedMemo from '../../../hooks/useDebouncedMemo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const link = useDebouncedMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, DEBOUNCE_MS, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState, MessageListType } from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n  ApiAttachMenuPeerType,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR, MAX_UPLOAD_FILEPART_SIZE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatMessage,\n  selectUser,\n  selectCanScheduleUntilOnline,\n  selectEditingScheduledDraft,\n  selectEditingDraft,\n  selectRequestedDraftText,\n  selectTheme,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectChatType,\n  selectRequestedDraftFiles,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport { insertHtmlInSelection } from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\nimport { hasPreview } from '../../../util/files';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { buildCustomEmojiHtml } from './helpers/customEmoji';\nimport { processMessageInputForCustomEmoji } from '../../../util/customEmojiManager';\nimport { getTextWithEntitiesAsHtml } from '../../common/helpers/renderTextWithEntities';\n\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useOnChange from '../../../hooks/useOnChange';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: GlobalState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = GlobalState['messages']['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    openLimitReachedModal,\n    openPremiumModal,\n    addRecentCustomEmoji,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setInnerHtml] = useState<string>('');\n  const htmlRef = useStateRef(html);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const setHtml = useCallback((newHtml: string) => {\n    setInnerHtml(newHtml);\n    requestAnimationFrame(() => {\n      processMessageInputForCustomEmoji();\n    });\n  }, []);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useOnChange(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n      }\n    }, [attachments, fileSizeLimit, openLimitReachedModal],\n  );\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  useEffect(() => {\n    if (!html || editingMessage) return;\n    sendMessageAction({ type: 'typing' });\n  }, [editingMessage, html, sendMessageAction]);\n\n  const mainButtonState = editingMessage ? MainButtonState.Edit\n    : (!IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding)\n      ? (shouldSchedule ? MainButtonState.Schedule : MainButtonState.Send)\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    EDITABLE_INPUT_CSS_SELECTOR,\n    setHtml,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const { isCustomEmojiTooltipOpen, closeCustomEmojiTooltip, insertCustomEmoji } = useCustomEmojiTooltip(\n    Boolean(shouldSuggestCustomEmoji && !attachments.length),\n    EDITABLE_INPUT_CSS_SELECTOR,\n    html,\n    setHtml,\n    customEmojiForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    insertCustomEmoji: insertCustomEmojiFromEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    htmlRef,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertHtmlAndUpdateCursor = useCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [htmlRef, setHtml]);\n\n  const insertFormattedTextAndUpdateCursor = useCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertCustomEmojiAndUpdateCursor = useCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, [htmlRef, setHtml]);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments(MEMO_EMPTY_ARRAY);\n    closeStickerTooltip();\n    closeCustomEmojiTooltip();\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCustomEmojiTooltip, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu, setHtml]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, threadId, resetComposer, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: () => openPremiumModal({ initialSection: 'animated_emoji' }),\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: () => openChat({ id: currentUserId, shouldReplaceHistory: true }),\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  }, [currentUserId, lang, openChat, openPremiumModal, showNotification]);\n\n  const [handleEditComplete, handleEditCancel] = useEditing(\n    htmlRef,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n  );\n  useDraft(draft, chatId, threadId, htmlRef, setHtml, editingMessage, lastSyncTime);\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, [handleSetAttachments]);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    // No need to subscribe on updates in `mapStateToProps`\n    const { serverTimeOffset } = getGlobal();\n\n    const maxLength = currentAttachments.length ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput?.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetsOrder: true,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId, captionLimit,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang, htmlRef,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') {\n      return;\n    }\n\n    callAttachBot({\n      botId: chatId, chatId, isFromBotMenu: true, url: botMenuButton.url, threadId,\n    });\n  }, [botMenuButton, callAttachBot, chatId, threadId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    closeSendAsMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, closeSendAsMenu, openSymbolMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      const isQuick = requestedDraftFiles.every((file) => hasPreview(file));\n      handleFileSelect(requestedDraftFiles, isQuick);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji);\n  }, [insertCustomEmojiAndUpdateCursor, isChatWithSelf, isCurrentUserPremium, showCustomEmojiPremiumNotification]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleSendSilent = useCallback(() => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ isSilent: true }, scheduledAt);\n      });\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, requestCalendar, shouldSchedule]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          }\n        } else {\n          startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, handleEditComplete, activeVoiceRecording, requestCalendar, areVoiceMessagesNotAllowed,\n    canSendVoiceByPrivacy, showNotification, lang, chat?.title, startRecordingVoice, pauseRecordingVoice,\n    handleMessageSchedule,\n  ]);\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const isBotMenuButtonCommands = botMenuButton && botMenuButton?.type === 'commands';\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        captionLimit={captionLimit}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        isChatWithSelf={isChatWithSelf}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        shouldSchedule={shouldSchedule}\n        onSendSilent={handleSendSilent}\n        onSend={handleSend}\n        onSendScheduled={handleSendScheduled}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n        shouldSuggestCustomEmoji={shouldSuggestCustomEmoji}\n        customEmojiForEmoji={customEmojiForEmoji}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n        isSavedMessages={isChatWithSelf}\n        canSendGifs={canSendGifs}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage onClear={handleEmbeddedClear} />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botMenuButton && botMenuButton.type === 'webApp' && !editingMessage\n            && (\n              <BotMenuButton\n                isOpen={!html && !activeVoiceRecording}\n                onClick={handleClickBotMenu}\n                text={botMenuButton.text}\n                isDisabled={Boolean(activeVoiceRecording)}\n              />\n            )}\n          {(isChatWithBot && isBotMenuButtonCommands\n            && botCommands !== false && !activeVoiceRecording && !editingMessage) && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={buildClassName('symbol-menu-button', isSymbolMenuOpen && 'activated')}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            threadId={threadId}\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && !attachments.length}\n            noFocusInterception={attachments.length > 0}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {Boolean(botKeyboardMessageId) && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && Boolean(currentRecordTime) && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            threadId={threadId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {Boolean(botKeyboardMessageId) && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n            onCustomEmojiSelect={insertCustomEmojiFromEmojiTooltip}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <SymbolMenu\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isSymbolMenuOpen || isSymbolMenuForced}\n            canSendGifs={canSendGifs}\n            canSendStickers={canSendStickers}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId, threadId);\n    const { language, shouldSuggestStickers, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId\n      && chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId) ? defaultSendAsId\n      : (chat?.adminRights?.anonymous ? chat?.id : undefined);\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !user.fullInfo?.noVoiceMessages) ?? true;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      pollModal: global.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n) => {\n  const { editMessage, setEditingDraft } = getActions();\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage) {\n      return;\n    }\n    if (prevEditedMessage?.id === editedMessage.id) {\n      return;\n    }\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n    setHtml(html);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const edited = parseMessageInput(htmlRef.current!);\n      const update = edited.text.length ? edited : undefined;\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(htmlRef.current!);\n    const update = edited.text.length ? edited : undefined;\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel];\n};\n\nexport default useEditing;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTheme,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat,\n  getMessageSendingRestrictionReason,\n  getForumComposerPlaceholder,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOnChange from '../../hooks/useOnChange';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n};\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, CLOSE_ANIMATION_DURATION);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, CLOSE_ANIMATION_DURATION);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, CLOSE_ANIMATION_DURATION);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, CLOSE_ANIMATION_DURATION);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useOnChange(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId, threadId });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, threadId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT\n                  && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest)) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const {\n      isLeftColumnShown, chats: { listIds }, activeEmojiInteractions, lastSyncTime,\n    } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(global.seenByModal),\n      isReactorListModalOpen: Boolean(global.reactorModal),\n      isGiftPremiumModalOpen: global.giftPremiumModal?.isOpen,\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(chat && isChatGroup(chat) && !chat.fullInfo && lastSyncTime);\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockBeforeReply = chat?.isForum ? (threadId === MAIN_THREAD_ID && !replyingToId) : false;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !(isScheduledMessageList && chat?.isForum && threadId === MAIN_THREAD_ID)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockBeforeReply,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        (threadId !== MAIN_THREAD_ID && !chat?.isForum)\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n) {\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useOnChange(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, getCanManageTopic, isChatAdmin, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const toggleEditTopic = useCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  }, [chatId, openEditTopicPanel, threadId]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={toggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && global.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId ? global.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n  topicId?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [groupChatMembers, serverTimeOffset, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  isFirstTab?: boolean,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType, prevIsFirstTab]) => {\n    if (isFirstTab === prevIsFirstTab) {\n      return;\n    }\n\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, isFirstTab, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n  selectListedIds,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport { pickTruthy } from '../../util/iteratees';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  messageIds?: number[];\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  messageIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  serverTimeOffset,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel, topicId]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n\n  const chatMessages = useMemo(() => {\n    return messageIds && messagesById ? pickTruthy(messagesById, messageIds) : {};\n  }, [messagesById, messageIds]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages,\n    foundIds,\n    lastSyncTime,\n    serverTimeOffset,\n    topicId,\n  );\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange, isFirstTab);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !chatMessages) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !chatMessages[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !chatMessages[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n    const messageIds = selectListedIds(global, chatId, topicId || MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      messageIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './CreateTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default memo(CreateTopicAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './EditTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default memo(EditTopicAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectChat,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ invite: undefined });\n            setEditingExportedInvite({ chatId, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n    closeCreateTopicPanel, closeEditTopicPanel,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const nextManagementScreen = chatId ? global.management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { Thread } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\nimport windowSize from '../../util/windowSize';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  // Prevent refresh when rotating device\n  useEffect(() => {\n    if (!isOpen) return undefined;\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../lib/teact/teactn';\n\nimport { createLocationHash } from '../../util/routing';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: global.messages.messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default memo(AttachBotInstallModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useOnChange from '../../hooks/useOnChange';\nimport useForceUpdate from '../../hooks/useForceUpdate';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: GlobalState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_AMOUNT = IS_SINGLE_COLUMN_LAYOUT ? 50 : 100;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  function generateConfetti(w: number, h: number, amount = DEFAULT_CONFETTI_AMOUNT) {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }\n\n  const updateCanvas = () => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestAnimationFrame(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  };\n\n  useOnChange(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestAnimationFrame(updateCanvas);\n      }\n    }\n    return () => {\n      if (hideTimeout) {\n        clearTimeout(hideTimeout);\n      }\n    };\n  }, [lastConfettiTime, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { deleteFolderDialogId } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !deleteFolderDialogId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(DraftRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(AttachBotRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { AnimationLevel, LangCode } from '../../types';\nimport type {\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, GlobalState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/environment';\nimport {\n  selectChatMessage,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport windowSize from '../../util/windowSize';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { fastRaf } from '../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  chat?: ApiChat;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: AnimationLevel;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: GlobalState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: GlobalState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiUser;\n  requestedAttachBotInChat?: GlobalState['requestedAttachBotInChat'];\n  requestedDraft?: GlobalState['requestedDraft'];\n  currentUser?: ApiUser;\n  urlAuth?: GlobalState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialogId?: number;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n};\n\nconst NOTIFICATION_INTERVAL = 1000;\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps> = ({\n  lastSyncTime,\n  isLeftColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  deleteFolderDialogId,\n}) => {\n  const {\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  useInterval(checkAppVersion, APP_OUTDATED_TIMEOUT_MS, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachBots, loadContactList,\n    loadPremiumGifts, checkAppVersion, loadConfig, loadGenericEmojiEffects, loadDefaultTopicIcons,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime] as const);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (lastSyncTime && parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [lastSyncTime]);\n\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    if (!prevLastSyncTime && lastSyncTime) {\n      openChat({\n        id: parsedLocationHash.chatId,\n        threadId: parsedLocationHash.threadId,\n        type: parsedLocationHash.type,\n      });\n    }\n  }, [lastSyncTime] as const);\n\n  // Prevent refresh by accidentally rotating device when listening to a voice chat\n  useEffect(() => {\n    if (!activeGroupCallId && !isPhoneCallActive) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [activeGroupCallId, isPhoneCallActive]);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useOnChange(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useOnChange(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined) {\n      return;\n    }\n\n    if (animationLevel === 0) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isRightColumnOpen]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = getAllNotificationsCount();\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = getAllNotificationsCount() - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    closeStickerSetModal();\n  }, [closeStickerSetModal]);\n\n  const handleCustomEmojiSetsModalClose = useCallback(() => {\n    closeCustomEmojiSets();\n  }, [closeCustomEmojiSets]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequestBot} type={botTrustRequest?.type} />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog deleteFolderDialogId={deleteFolderDialogId} />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          animationLevel, language, wasTimeFormatSetManually,\n        },\n      },\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      lastSyncTime,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n    } = global;\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const openedGame = global.openedGame;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n\n    return {\n      lastSyncTime,\n      isLeftColumnOpen: global.isLeftColumnShown,\n      isRightColumnOpen: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: Boolean(global.phoneCall),\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: global.newContact?.userId,\n      newContactByPhoneNumber: global.newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(global.ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall && selectUser(global, requestedAttachBotInstall.botId),\n      requestedAttachBotInChat,\n      webApp,\n      currentUser,\n      urlAuth,\n      isPremiumModalOpen: global.premiumModal?.isOpen,\n      limitReached: global.limitReachedModal?.limit,\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      deleteFolderDialogId: global.deleteFolderDialogModal,\n      requestedDraft,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 180000; // 3 minutes\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(\n    resetInvalidUnlockAttempts,\n    invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? TIMEOUT_RESET_INVALID_ATTEMPTS_MS\n      : undefined,\n  );\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [invalidAttemptsCount, lang, logInvalidUnlockAttempt, unlockScreen]);\n\n  useEffect(() => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [invalidAttemptsCount, lang]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { connectionState, passcode: { isScreenLocked } } = getGlobal();\nif (!connectionState && !isScreenLocked) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","currentMessageList","premiumModal","promo","isOpen","replaceThreadParam","exitMessageSelectMode","isStatisticsShown","messages","contentToBeScheduled","forwardMessages","toChatId","forumPanelChatId","closeForumPanel","updateCurrentMessageList","setGlobal","isChatInfoShown","openChat","text","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","folderId","deleteFolderDialogModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectChatScheduledMessages","selectChatMessages","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","result","reduce","acc","sender","selectSender","push","getSenderTitle","emoji","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","join","getMessageSummaryDescription","renderMessageSummaryHtml","resultText","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","messageId","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","selectChat","lastMessage","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","getGlobal","noForumTopicPanel","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","newGlobal","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","RELEASE_DATETIME","Date","now","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","serverTimeOffset","content","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","chat","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","isClosing","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","action","leftColumnWidth","management","isActive","screen","nextScreen","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","documentId","recentCustomEmojis","order","isCustomEmoji","added","setIds","customEmojis","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","selectIsTrustedBot","openedGame","botTrustRequest","onConfirm","top","left","width","height","animationLevel","settings","byKey","confetti","lastConfettiTime","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","topicId","editTopicPanel","APP_VERSION_REGEX","fetch","then","response","trim","test","isUpdateAvailable","catch","DEBUG","console","error","status","payment","clearPayment","closeInvoice","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","isHidden","noLockOnUnload","onBeforeUnload","passcode","hasPasscode","clearStoredSession","async","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","currentUserId","globalJson","serializeGlobal","encryptSession","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_STATE","isScreenLocked","invalidAttemptsCount","initApi","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","callApi","selectThreadOriginChat","users","repliesThreadInfos","localMessages","isDeleted","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","replyingToTopId","delete","isRestricted","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","isForum","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","value","isSingle","attachments","isGrouped","restParams","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","draft","user","selectUser","isDeletedUser","replyToMsgId","isLocal","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","getTranslation","isUserBot","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","topics","topic","updateThreadInfo","lastReadInboxMessageId","newTopicUnreadCount","updateTopic","webPagePreview","loadWebPagePreview","options","poll","option","offset","shouldResetVoters","offsets","nextOffset","loadPollOptionResults","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","selectThreadIdFromMessage","scheduledInThread","entries","scheduledIds","loadScheduledHistory","selectScheduledMessage","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","customEmoji","loadPinnedMessages","seenByUserIds","sendAsId","sendAsChat","fullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","URL","autologinDomains","hostname","searchParams","autologinToken","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","showDialog","getUserFullName","closeMediaViewer","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","getActions","shortName","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","searchGifs","botUsername","username","updateGifSearch","addedStickers","addedCustomEmojis","Promise","all","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","loadFavoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","loadSavedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","title","openPremiumModal","className","newGifs","current","unfave","unfaveSticker","stickerSetId","installedDate","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchStickers","searchWords","config","gifSearchUsername","updateStickersForEmoji","loadStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","searchMessagesGlobal","offsetRate","maxDate","minDate","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","searchSharedMedia","SHARED_MEDIA_SLICE","topMessageId","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","searchChats","timestampPlusDay","foundIds","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","searchTextMessages","currentType","timestamp","searchMessagesByDate","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","isChatBasicGroup","migrateChat","invite","editingInvite","update","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","releaseStatusTimeout","previousGlobal","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","currentChatId","currentThreadId","activeThreadId","threadInfo","activeCurrentChatId","originChannelId","draftsByChatId","editingDraft","selectEditingDraft","currentChat","lastReadInboxId","newCurrentChatId","currentChatMessages","topicLastMessages","values","updateChats","updateUsers","updateThread","loadTopics","force","loadTopicById","shouldCloseChatOnError","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","addCallback","connectionState","authState","sync","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","loadTopUsers","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","updateContact","deleteContact","profileId","isPrivate","isUserId","photos","userOrChat","avatarHash","userSearch","updateUserSearchFetchingStatus","searchUsers","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","openUrl","openGame","alert","isError","getPaymentForm","inputInvoice","form","invoice","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","button","openPollModal","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","slug","trustedBotIds","newTrustedBotIds","add","Array","callbackPayload","requestedAttachBotInstall","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","isWriteAllowed","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","selectPaymentInputInvoice","saveInfo","setInvoiceInfo","isPaymentModalOpen","isExtendedMedia","setReceipt","receipt","nativeProvider","credentials","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","step","isClosed","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","localEffect","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","selectLocalAnimatedEmojiEffectByName","timestamps","reaction","selectDefaultReaction","isMessageLocal","toggleReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","userReactions","getUserReactions","hasReaction","some","userReaction","isSameReaction","newUserReactions","selectMaxUserReactions","reactions","ANIMATION_LEVEL_MAX","newActiveReactions","omit","activeReactions","currentReactions","isReactionChosen","chosenOrder","existingIndex","r","recentReactions","addMessageReaction","active","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","isGroup","stats","recentTopMessages","msgId","updateStatistics","views","forwards","dcId","statisticsDcId","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","areDeepEqual","value1","value2","type1","isArray1","isArray","array1","array2","every","member1","object1","object2","key1","prevIsForum","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","isActiveChat","hasMention","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","ANIMATION_DELAY","updateReactions","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","messagesCount","firstUnreadId","candidateGlobal","updateChatLastMessage","currentLastMessage","selectTopicFromMessage","findLastMessage","deleteMessages","newLastMessage","deleteTopic","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","repliesThreadInfo","isTopicReply","selectIsMessageInCurrentMessageList","delayedGlobal","getMessageText","localEmoji","selectLocalAnimatedEmoji","selectLocalAnimatedEmojiEffect","selectScheduledIds","threadScheduledIds","selectIsChatWithBot","deleteChatScheduledMessages","thread","markMessageListRead","pickTruthy","updatePerThread","currentUpdatedInThread","pinnedIds","selectPinnedIds","newPinnedIds","newThreadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","isChosen","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","media","preview","extendedMedia","isPending","transcriptions","flushStatusUpdatesThrottled","pendingStatusUpdates","emojiStatus","statusUpdate","targetUser","botInfo","menuButton","addBlockedContact","oldOrder","newOrder","reorderStickerSets","loadStickerSets","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","updateGroupCall","participantsCount","groupCallId","participants","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","needRating","ratingPhoneCall","isCallPanelVisible","notifyAboutCall","selectPhoneCallUser","initializeSoundsForSafari","checkNavigatorUserMediaPermissions","isVideo","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","getAllNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isMinimized","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","ANIMATION_LEVEL_OPTIONS","withGlobal","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","shouldHideSearch","contactsFilter","onSearchQuery","isClosingSearch","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","total","isChatArchived","handleLockScreenHotkey","useCallback","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ripple","ariaLabel","buildClassName","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","newTheme","shouldUseSystemTheme","switchTheme","handleAnimationLevelChange","newLevel","_","classList","toggle","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","localStorage","setItem","clearWebsync","handleSwitchToLegacy","handleOpenTipsChat","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","DropdownMenu","trigger","footer","APP_NAME","positionX","onTransitionEnd","MenuItem","icon","Switcher","label","checked","noAnimation","FEEDBACK_URL","getPromptInstall","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","activeChatFolder","shouldSkipHistoryAnimations","isForumPanelOpen","selectIsForumPanelOpen","maxFolders","foldersDispatch","onScreenSelect","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","transitionRef","useRef","allChatsFolder","ALL_FOLDER_ID","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","forceOnHeavyAnimation","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","shouldRenderFolders","TabList","tabs","activeTab","onSwitchTab","areFolders","ref","renderCount","LeftSearch","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderForumPanel","handleForumPanelAnimationEnd","useForumPanelRender","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","reload","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","ForumPanel","onCloseAnimationEnd","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","nextSettingsScreen","isFirstChatFolderActive","isChatOpen","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleTopicSearch","handleHotkeySearch","handleHotkeySavedMessages","handleHotkeySettings","IS_MAC_OS","useOnChange","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","useFlag","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","style","setProperty","remove","useLayoutEffect","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","drawRect","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","src","alt","renderPictogram","renderText","MessageSummary","noEmoji","RippleEffect","shouldStopPropagation","LUMA_THRESHOLD","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","averageColor","getAverageColor","fillColor","getColorLuma","res","canvas","createElement","ctx2D","getContext","fillStyle","fillRect","ctx","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","globalCompositeOperation","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","renderPlaybackRateMenuItem","rate","currentRate","customIcon","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","voice","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","fileName","artist","performer","album","getChatTitle","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isFirst","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isVoicePlaying","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","handlePlaybackClick","PlaybackRateButton","displayRate","onContextMenu","volumeIcon","renderAudio","subtitle","renderVoice","disabled","noPreventDefault","RangeSlider","bold","forceOpen","onHide","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","getUserFirstOrLastName","isButtonsInOneRow","confirmIsDestructive","Checkbox","onCheck","audioMessage","isMainThread","isChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatChannel","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","selectIsChatWithSelf","currentTransitionKey","hasButtonInHeader","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","pinMessage","openPreviousChat","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","usePrevious","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","withVideoAvatar","emojiStatusSize","noRtl","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","getMessageKey","HeaderActions","canExpandActions","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","INTERSECTION_MARGIN_FOR_LOADING","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","asForwarded","noAvatars","isOwn","isOwnMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","isWebPageVideo","getMessageWebPageVideo","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","fontFamily","calculateAuthorWidth","getComputedStyle","documentElement","getPropertyValue","font","whiteSpace","opacity","appendChild","textContent","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","clearInterval","target","contains","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","getBoundingClientRect","isVisibleX","isVisibleY","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","ContextMenuContainer","usersById","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","premiumGiftSticker","isEmbedded","appearanceOrder","isLastInList","isInsideTopic","memoFirstUnreadIdRef","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","requestConfetti","useOnIntersect","noAppearanceAnimation","markShown","isVisible","useIsIntersecting","shouldShowConfettiRef","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","role","AnimatedIconFromSticker","play","noLoop","nonInteractive","anchor","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","outgoingStatus","signature","withReactionOffset","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","observeIntersection","shouldLoop","shouldPlayEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","openModal","actionText","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","withSharedAnimation","cacheBuster","AnimatedSticker","tgsUrl","isLowPriority","onEnded","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","performance","interactionMessageId","withEffects","localSticker","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","forceLoadPreview","AnimatedIconWithPreview","LOCAL_TGS_URLS","quality","forcePreview","LIKE_STICKER_ID","customEmojiId","getCustomEmojiSize","CustomEmoji","isBig","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","isSelected","crossOrigin","getImageData","getAppendixColorFromImage","useBlurredMediaThumbRef","useCanvasBlur","getMessageMediaThumbDataUri","IS_CANVAS_FILTER_SUPPORTED","canAutoLoad","uploadProgress","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","fullMediaData","withThumb","noThumb","thumbRef","thumbClassNames","useMediaTransition","downloadProgress","getMessageMediaFormat","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","MESSAGE_CONTENT_SELECTOR","CUSTOM_APPENDIX_ATTRIBUTE","contentEl","appendixBg","dimensionsStyle","ProgressSpinner","canAutoPlay","videoRef","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","isPlayerReady","markPlayerReady","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","isInline","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","cancelMessageMediaDownload","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","isRegistered","Avatar","withVideo","formatPhoneNumberWithCode","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","siteName","displayUrl","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","SafeLink","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","Skeleton","forceAspectRatio","loadExtendedMedia","refreshExtendedMedia","useInterval","canvasRef","dataUri","VENUE_COLORS","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","prevShouldRenderText","long","useTimeout","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","playerRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","shouldPlay","stopPlaying","fastRaf","capturePlaying","paused","stopCurrentAudio","renderIcon","recentReplierIds","recentRepliers","hasUnread","commentsText","AnimatedCounter","stickerHash","getStickerPreviewHash","previewMediaData","paths","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","path","CENTER_ICON_SIZE","EFFECT_SIZE","genericEffects","stopActiveReaction","centerIconId","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","onLoad","withRecentReactors","recentReactors","recentReaction","isOutside","metaChildren","getReactionUniqueKey","requestCall","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","APPENDIX_OWN","APPENDIX_NOT_OWN","QUICK_REACTION_SIZE","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","messageTopic","hasTopicChip","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","isTranscribing","transcribedText","observeIntersectionForBottom","noComments","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","openMediaViewer","openAudioPlayer","sendPollVote","focusMessageInComments","replyToTopMessageId","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","bottomMarker","isElementInViewport","calculatedWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","postAuthorTitle","metaSafeAuthorWidth","renderReactionsAndMeta","meta","forwardAuthor","chatUsername","c","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","fakeType","FakeIcon","renderSenderName","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","DotAnimation","MessageText","withTranslucentThumbs","renderContent","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","mentionIds","reactionIds","entry","dataset","useBackgroundMode","margin","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","isChatLoaded","isChannelChat","isGroupChat","isCreator","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","withDefaultBg","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getDocumentMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","offsetTop","findStuckDate","useStickyDates","handleScroll","parentElement","handleResize","contentRect","useResizeObserver","windowHeight","normalHeight","String","clientHeight","preservedItemElements","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","patchChromiumScroll","resetScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","isEmptyTopic","onScroll","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","shouldShrink","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","SUPPORTED_AUDIO_CONTENT_TYPES","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","resetInput","applyIosAutoCapitalizationFix","inputEl","STARTS_ENDS_ON_EMOJI_IMG_REGEX","RegExp","EMOJI_IMG_REGEX","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","STYLE_TAG_REGEX","useDebouncedMemo","resolverFn","ms","dependencies","setValue","isFrozen","updateWhenUnfrozen","handleUnfreeze","useHeavyAnimationCheck","noop","isHeavyAnimating","useHeavyAnimationFreeze","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","runThrottled","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","COLOR_REPLACE_PATTERN","iconSvg","mediaDataWithReplacedColors","doc","DOMParser","parseFromString","stroke","strokeWidth","outerHTML","IS_COMPACT_MENU","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","menuPosition","setMenuPosition","rect","right","bottom","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","Portal","destructive","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","SymbolMenu","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","keyboardButtons","noCompact","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useContextMenuPosition","leftIcon","strippedMessage","strippedText","stripCustomEmoji","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","linkEntity","entity","ApiMessageEntityTypes","textMatch","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","VOICE_RECORDING_FILENAME","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","adminRights","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","selectEditingScheduledDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","dropAreaState","onDropHide","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","appendixRef","html","setInnerHtml","htmlRef","useStateRef","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","setHtml","newHtml","processMessageInputForCustomEmoji","customEmojiNotificationNumber","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","handleSetAttachments","newValue","newAttachments","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","parseBotQuery","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","canSendStickers","canSendGifs","canAttachEmbedLinks","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","cleanHtml","clearStickersForEmoji","isSingleEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","insertCustomEmojiFromEmojiTooltip","useEmojiTooltip","insertHtmlAndUpdateCursor","EDITABLE_INPUT_ID","selection","getSelection","messageInput","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertTextAndUpdateCursor","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","removeSymbol","execCommand","tempInput","contentEditable","lastChild","textLength","range","createRange","setStart","setEnd","removeAllRanges","addRange","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","handleEditComplete","handleEditCancel","editedMessage","editMessage","setEditingDraft","prevEditedMessage","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","useEditing","saveDraft","prevDraft","updateDraft","draftChatId","draftThreadId","currentHtml","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","customEmojiIds","prevHtml","useDraft","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","pastedFormattedText","fragment","textContents","getElementsByTagName","node","HTMLElement","tagName","replaceWith","createTextNode","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","trimEnd","preparePastedHtml","containsCustomEmoji","items","getFilesFromDataTransferItems","file","textToPaste","useClipboardPaste","handleEmbeddedClear","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","shouldUpdateStickerSetsOrder","handleClickBotMenu","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleMessageSchedule","args","restArgs","hasPreview","handleCustomEmojiSelect","isFree","isScheduleRequested","handleGifSelect","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSendSilent","handleSearchOpen","handleSymbolMenuOpen","handleSendAsMenuOpen","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","handleSendScheduled","onSend","isBotMenuButtonCommands","DropAreaState","withQuick","caption","onCaptionUpdate","onSendSilent","onSendScheduled","onFileAppend","shouldBeAnonymous","selectedSendAsId","onInsertUserName","filteredUsers","onSelectResult","isSavedMessages","withUsername","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onCustomEmojiSelect","onStickerSelect","onEmojiSelect","onGifSelect","onRemoveSymbol","onSearchOpen","allowDisabledClick","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","CLOSE_ANIMATION_DURATION","isImage","kind","isBlurred","isBackgroundBlurred","background","customBackground","patternColor","themes","isMobileSearchActive","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","shouldJoinToSend","isJoinToSend","shouldLoadFullChat","shouldBlockBeforeReply","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","loadUser","joinChannel","restartBot","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","isEditingInvite","canViewStatistics","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","ManagementScreens","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","CreateTopic","EditTopic","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","loadProfilePhotos","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","renderingActiveTab","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","isFirstTab","prevTabType","prevIsFirstTab","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","resetCacheBuster","useCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","adminMember","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewer","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createLocationHash","messageList","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","DEFAULT_CONFETTI_AMOUNT","CONFETTI_COLORS","confettiRef","isRafStartedRef","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","pos","velocity","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","beginPath","ellipse","fill","hideTimeout","prevConfettiTime","leftSide","randomX","randomColor","generateConfetti","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","deleteFolderDialogId","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","wasTimeFormatSetManually","currentUser","isLeftColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","isPremiumModalOpen","limitReached","isReceiptModalOpen","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","langCode","prevLastSyncTime","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","initialUnread","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","usePreventPinchZoomGesture","stickerSetShortName","passcodeSettings","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","handleSignOutMessage","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link"],"sourceRoot":""}